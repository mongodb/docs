{
    "url": "https://docs.mongodb.com/charts",
    "includeInGlobalSearch": true,
    "aliases": [],
    "documents": [
        {
            "slug": "master/index.html",
            "title": "MongoDB Charts \u2014 Charts Manual 0.10",
            "headings": [
                "MongoDB Charts",
                "Features",
                "Concepts",
                "Chart Types",
                "Tutorials",
                "Atlas Pricing with MongoDB Charts"
            ],
            "text": "\nMongoDB Charts\u00b6\n\nOn this page\n\nFeatures\nConcepts\nChart Types\nTutorials\nAtlas Pricing with MongoDB Charts\n\n\nMongoDB Charts is a tool to create visual representations of\nyour MongoDB data. Data visualization is a key component to providing a\nclear understanding of your data, highlighting correlations between\nvariables and making it easy to discern patterns and trends within your\ndataset. MongoDB Charts makes communicating your data a straightforward\nprocess by providing built-in tools to easily share and collaborate on\nvisualizations.\n\nFeatures\u00b6\n\nAggregation Functionality\nMongoDB Charts provides built-in\naggregation functionality. Aggregation\nallows you to process your collection data by a variety of metrics\nand perform calculations such as mean and standard deviation to\nprovide further insight into your data.\nSeamless Integration with MongoDB Atlas\nCharts provides seamless integration with MongoDB Atlas. You can link MongoDB Charts to\nAtlas projects and quickly get started visualizing your Atlas\ncluster data.\nDocument Data Handling\nCharts handles document-based data, including\nembedded objects and arrays.\nUtilizing a nested data structure provides the flexibility to\nstructure your data as it best fits for your application while still\nretaining powerful visualization capabilities.\n\n\n\nConcepts\u00b6\nThe following elements of MongoDB Charts provide the flow of data from its\nsource to a visual representation:\n\n\n\n\n\n\nElement\nDescription\n\n\n\nData Source\nA reference to a MongoDB collection which contains the data you\nwish to visualize. Note that deleting a data source has no\neffect on the underlying MongoDB collection. For information on\nconnecting to and managing a data source, see\nData Sources.\n\nChart\nA visualization which maps to a single data source.\n\nDashboard\nA group of one or more charts.\n\n\n\nDashboards are the cornerstone of MongoDB Charts as they are where you create\nand view your data visualizations. For details on how to create,\nmanage, and share dashboards, see Dashboards.\n\nNote\nSince a chart can only display data from a single collection,\ndashboards which combine multiple charts are not only useful, but\nnecessary for visualizing data from multiple collections in a single\nview. This can lead to new insights into your data which may not be\nimmediately apparent.\n\n\nExample\nThe following dashboard contains two charts, each with distinct\nfocal points into a collection containing movie data:\n\n\n\n\n\n\nChart Types\u00b6\nThe following pages describe the specific construction and use cases\nfor each chart type in MongoDB Charts:\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n\nTutorials\u00b6\nAfter you launch MongoDB Charts, the following\ntutorials will help you get started building visualizations with your\ndata and explore key features offered by MongoDB Charts:\n\nMovie Details Tutorial\nVisualize a data set containing details on movies, such as cast,\ncritic reviews, and release.\nOrder Data Tutorial\nVisualize a data set containing sales data from a mock office supply\nstore. The tutorial illustrates how to visualize inventory, customer\nanalytics, and total sales.\n\n\n\nAtlas Pricing with MongoDB Charts\u00b6\nMongoDB offers MongoDB Charts in Atlas as a\nSaaS application. Using the\nCharts SaaS application is\nfree while Charts is in beta; however standard Atlas data\ntransfer fees still apply.\nCharts runs queries against Atlas databases to create\nvisualizations, resulting in data transfers. The cost of data transfer\nis billed as per the Data Transfer Fees section of the\nAtlas Pricing page.\nCharts is currently hosted on AWS us-east-1 region, and\nuses this region to calculate the fees.\n\nIf your data cluster is on AWS us-east-1, the\nsame region data transfer fee applies.\nIf your data cluster is on a different AWS region, the\ndifferent region data transfer fee applies.\nIf your data cluster is not hosted on AWS, the data transfer fees\ndepend on the cloud provider and region you are using.\n\n\n\nLaunch MongoDB Charts\nTutorials\nVisualizing Order Data\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\nVisualizing Movie Details\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n\nDashboards\nManage Existing Dashboards\nDashboard Permissions\n\n\nData Sources\nData Source Permissions\n\n\nBuild Charts\nEncoding Channels\nFilter Documents in the Visualization\nEmbedded Objects and Arrays\nBin Data\nSort and Limit Categorical Data\nCustomize Charts\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\nSample Mode\n\n\nChart Types\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\nRelease Notes\nThird-Party Licenses\n\n\n\n",
            "preview": "MongoDB Charts is a tool to create visual representations of your MongoDB data. Data visualization is a key component to providing a clear understanding of your data, highlighting correlations between variables and making it easy to discern patterns and trends within your dataset. MongoDB Charts makes communicating your data a straightforward process by providing built-in tools to easily share and collaborate on visualizations.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/movie-details-tutorial-overview/",
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/master/manage-dashboards/",
                "https://docs.mongodb.com/charts/master/chart-types/",
                "https://docs.mongodb.com/charts/master/customize-charts/field-level-options/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/master/third-party-licenses/",
                "https://docs.mongodb.com/charts/master/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/master/tutorials/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/prerequisites-setup/",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "https://docs.mongodb.com/charts/master/launch-charts/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/grid-charts/",
                "https://docs.mongodb.com/charts/master/sample-mode/",
                "https://docs.mongodb.com/charts/master/release-notes/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/master/dashboards/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/area-chart-age-distribution/",
                "https://www.mongodb.com/cloud/atlas",
                "https://docs.mongodb.com/charts/master/chart-type-reference/data-table/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/arrange-charts/",
                "https://docs.mongodb.com/charts/master/embedded-objects-arrays/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/order-data-tutorial-overview/",
                "https://docs.mongodb.com/charts/master/sort-limit-data/",
                "https://docs.mongodb.com/charts/master/data-source-permissions/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/scatter-chart-movies-ratings/",
                "https://docs.mongodb.com/charts/master/customize-charts/",
                "https://docs.mongodb.com/charts/master/dashboard-permissions/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/master/docs.atlas.mongodb.com",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/prereqs-and-import-data/",
                "https://www.mongodb.com/cloud/atlas/pricing",
                "https://docs.mongodb.com/charts/master/filter-documents/",
                "https://docs.mongodb.com/charts/master/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/master/build-charts/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/scatter-chart/"
            ]
        },
        {
            "slug": "master/bin-data/index.html",
            "title": "Bin Data \u2014 Charts Manual 0.10",
            "headings": [
                "Bin Data",
                "Bin Date Fields",
                "Bin Numeric Fields"
            ],
            "text": "\nBin Data\u00b6\n\nOn this page\n\nBin Date Fields\nBin Numeric Fields\n\n\nMongoDB Charts supports binning both numeric and date fields in your\ndata. Binning breaks continuous data into discrete groups called\nbins, with each bin containing a contiguous subset of the original\nvalues. For example, you might group users into bins by the decade they were\nborn, or group timestamped calendar events by the month of their start\ndate.\n\nContinuous vs Discrete Data\nContinuous data can occupy any value over a continuous range.\nSome examples of continuous data include height, temperature, or\nthe time a person was born.\nAlternatively, discrete data is data which can only take certain\nvalues, categorized into a classification. Examples of discrete\ndata include eye color and the number of students in a class.\n\n\nBin Date Fields\u00b6\nWhen handling dates, this data often comes in a continuous\nform. It can be useful to split this data into a specific windows of\ntime to uncover additional trends and patterns. MongoDB Charts supports the\nfollowing bins for dates:\n\nYear\nMonth\nDate of the Month\nDay of the Week\n\n\nHour\nMinute\nSecond\n\n\nTo use binning for dates:\n\nDrag a date field (signified by a calendar icon in the\nFields section of the Chart Builder) to a\ncategory encoding channel.\nBy default, binning is enabled as indicated by the\nBinning On toggle.\n\nUse the dropdown to select the bin size for your dates.\n\n\n\nToggle the Periodic setting as desired.\n\nIf enabled, MongoDB Charts creates bins relative to the next highest\ntime period and repeats each bin to cover the timeframe spanned\nin the data field.\nIf disabled, the bins Charts creates do not repeat.\n\n\nExample\nConsider a date field containing data spanning 5 years, and\na bin selection of Month. If Periodic is\ndisabled, Charts adds the 60 months in the dataset to the\nvisualization.\nAlternatively, if Periodic is enabled, Charts\nonly plots the 12 calendar months, and visualizes the total\naggregated results from each calendar month.\n\n\nNote\nThe Periodic setting is always enabled when selecting\na bin size of Day of the Week.\nThe Periodic setting is always disabled when\nselecting a bin size of Year, because year is the\nlargest time period available in Charts.\n\n\n\nTo disable binning, toggle the Binning setting\nto off. In this case, each date from the field is added to the\nvisualization with no grouping performed.\n\nExample\nThe following chart visualizes historical sales data for an office\nsupply store. Every sale is represented by a document in the\nsupplySales collection. Each document in the collection includes\nthe date of the sale as salesDate and a list of items included\nin the sale as the items array.\nThe saleDate field contains continuous timestamp data. The field\nis binned by Date of the Month with the\nPeriodic setting enabled. This means that over the\ncourse of the several years the data spans, MongoDB Charts plots the\nmean value of sales from each individual date of the\nmonth:\n\n\n\n\n\n\nBin Numeric Fields\u00b6\nMongoDB Charts can also bin numeric fields from a continuous set into groups\nof a specified size. This\nTo use binning for numeric fields:\n\nDrag a numeric field (signified by the number sign icon in the\nFields section of the Chart Builder) to a\ncategory encoding channel.\nBy default, binning is enabled as indicated by the toggle stating\nBinning On.\n\nEnter the desired bin size in the Bin Size input.\n\n\nTo disable binning, toggle the Binning setting\nto off. In this case, each individual value from the field is added\nto the visualization, rather than being grouped into bins.\n\nExample\nThe following chart visualizes historical sales data for an office\nsupply store. Every sale is represented by a document in the\nsupplySales collection. Each sale document contains a\ncustomer object, which contains information on the customer\npurchasing the item(s).\nThe following chart applies binning to the customer.age field.\nThe age field contains continuous numeric data and is\nbinned by decade. Each age value is placed into the\nappropriate bin and Charts counts the number of ages in each\nbin to provide a high-level overview of the age distrubution of\nstore customers.\n\n\n\n\n\n",
            "preview": "MongoDB Charts supports binning both numeric and date fields in your data. Binning breaks continuous data into discrete groups called bins, with each bin containing a contiguous subset of the original values. For example, you might group users into bins by the decade they were born, or group timestamped calendar events by the month of their start date.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/build-charts/index.html",
            "title": "Build Charts \u2014 Charts Manual 0.10",
            "headings": [
                "Build Charts",
                "Create a Chart"
            ],
            "text": "\nBuild Charts\u00b6\nCharts provide visual representations of the data in your\ndata source. A chart maps to a single\ndata source, and can display correlations between several fields in the\ndata. Charts reside inside dashboards. You must\nadd a data source and create a dashboard before you can begin building charts.\nFor a complete list of available chart types and how to build specific\ncharts, refer to the Chart Types page.\n\nCreate a Chart\u00b6\nTo build a new chart:\n\nFrom the Dashboards tab, select the dashboard where you\nwish to add a new chart. For instructions on setting up a dashboard,\nsee Dashboards.\n\nClick the Add Chart button at the top-right corner of\nthe dashboard view.\n\nIn the Data Source dropdown, select the data source to\nbe used for this chart. For information on adding data sources in\nMongoDB Charts, see\nData Sources.\n\nIn the Chart Type dropdown, select the type for this\nchart.\n\nNote\nEach chart type provides different visualization options\nfor the fields in your data, reflected by various\nencoding channels. These channels dictate how your data is\nvisualized and enable powerful\naggregations for\nyour data. For details on the different encoding channel types,\nrefer to the Encoding Channels\npage.\n\n\nDrag fields from the Fields section to the desired\nencoding channels below the\nChart Type dropdown. The fields listed correspond to the\nfields in your data source. You can search for a specific field in\nyour data source by using the Filter search bar at the\ntop of the Fields section.\n\nNote\nFor details on how MongoDB Charts handles embedded objects and\nembedded arrays in fields, see the\nEmbedded Objects and Arrays\npage.\n\n\nGive your chart a title by hovering over the\nEnter a title for your chart text clicking the\nPencil Icon. Click the Green Check Mark to\nsave your title.\n\nOnce you are satisfied with your chart, click\nSave Changes. This saves your chart to your dashboard\nand redirects you to the dashboard view.\n\n\n\n\nEncoding Channels\nFilter Documents in the Visualization\nEmbedded Objects and Arrays\nBin Data\nSort and Limit Categorical Data\nCustomize Charts\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\nSample Mode\n\n\n\n",
            "preview": "Charts provide visual representations of the data in your data source. A chart maps to a single data source, and can display correlations between several fields in the data. Charts reside inside dashboards. You must add a data source and create a dashboard before you can begin building charts.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://docs.mongodb.com/charts/master/chart-types/",
                "https://docs.mongodb.com/charts/master/embedded-objects-arrays/",
                "https://docs.mongodb.com/charts/master/sample-mode/",
                "https://docs.mongodb.com/charts/master/sort-limit-data/",
                "https://docs.mongodb.com/charts/master/filter-documents/",
                "https://docs.mongodb.com/charts/master/customize-charts/field-level-options/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "https://docs.mongodb.com/charts/master/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/master/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/master/dashboards/",
                "https://docs.mongodb.com/charts/master/customize-charts/",
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/chart-type-reference/column-bar-chart/index.html",
            "title": "Column and Bar Charts \u2014 Charts Manual 0.10",
            "headings": [
                "Column and Bar Charts",
                "Column and Bar Chart Encoding Channels",
                "Column and Bar Chart Types",
                "Use Cases",
                "Examples",
                "Grouped Column Chart",
                "Stacked Column Chart",
                "100% Stacked Bar Chart",
                "Colored Bar Chart"
            ],
            "text": "\nColumn and Bar Charts\u00b6\n\nOn this page\n\nColumn and Bar Chart Encoding Channels\nColumn and Bar Chart Types\nUse Cases\nExamples\n\n\nColumn and bar charts plot data in either horizontal or vetical\nsegments where the length of the segment is proportional to the data\nvalue. Column and bar charts provide high-level overviews of data\ntrends by comparing values within a specific category.\n\nColumn and Bar Chart Encoding Channels\u00b6\nColumn and bar charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX / Y Axis\n\nIn the category axis encoding channel, a bar or\ncolumn is rendered for each unique value from this field.\nIn a column chart, the category is the\nX Axis, which results in vertical segments. In a\nbar chart, the category is the\nY Axis, which results in horizontal segments.\n\nThe aggregation axis encoding channel dictates\nwhich field to aggregate on and the type of aggregation to\nperform. This ultimately dictates the size of each bar or\ncolumn.\n\nNote\nYou can aggregate upon multiple fields in your dataset to\ncreate multi-series charts. For more information, see\nMultiple Field Mappings.\n\n\n\n\n\nSeries\n(Optional) A category encoding channel that\nsegments the axis category based on the unique values in\nthis field.\nIf omitted, MongoDB Charts renders a basic bar or column chart with\njust a comparison of the X Axis and\nY Axis fields.\n\nNote\nThis option is only available for Grouped and Stacked charts with a single field mapped in\nthe aggregation channel.\n\n\n\nColor\n(Optional) An aggregation encoding channel for\nColored charts that changes the\nbars or columns\u2019 colors to reflect the aggregated\nvalue of the field, with darker colors meaning greater values.\n\n\n\n\n\nColumn and Bar Chart Types\u00b6\nColumn and bar charts provide the following sub-types:\n\n\n\n\n\n\nSub-Type Name\nDescription\n\n\n\nGrouped\nMongoDB Charts groups data by the category specified in the\ncategory encoding channel, and plots a bar or column for each value\nin the Series encoding channel.\n\n\nFor a more detailed example, refer to the\ngrouped column chart example.\n\n\n\nStacked\nMongoDB Charts creates a bar or column for each distinct value in the\ncategory encoding channel\nfield, and splits each bar or column into segments based on the\nthe Series encoding channel.\n\n\nFor a more detailed example, refer to the\nstacked bar chart example.\n\n\n\n100% Stacked\n100% stacked charts behave similarly to traditional stacked\ncharts, with the difference that in a 100% stacked chart each\nbar or column is normalized to a consistent value of 100%. Just\nas with traditional stacked charts, each bar or column is split\ninto segments based on the Series\nencoding channel. Each series is\nshown as a percentage of the whole.\nWhen using a traditional stacked chart, it can be difficult to\ncompare the proportions of each series to the whole if the\ntotal values of the bars / columns greatly differ. This type of\nchart makes it easier to compare proportions within each bar or\ncolumn by showing relative percentages.\n\nNote\nYou cannot customize the minimum, maximum, or logarithmic\nscale value axis options of 100%\nstacked charts.\n\n\n\nFor a more detailed example, refer to the\n100% stacked bar chart example.\n\n\n\nColored\nMongoDB Charts creates a bar or column for each distinct value in the\ncategory encoding channel\nfield, and the Color encoding channel changes the\ncolor of each bar / column based on the aggregated value of the\nvalue specified in the encoding channel.\n\n\nFor a more detailed example, refer to the\ncolored bar chart example.\n\n\n\n\n\n\n\nUse Cases\u00b6\nColumn and bar charts display information in similar manners and, as\nsuch, have similar use cases. There are, however, situations where it\nmay be beneficial to use one over the other:\n\nA bar chart may be a better choice than a column chart when the\ncategory labels are long, as it may be difficult to quickly\npinpoint which label applies to which column.\nA column chart may be a better choice when comparing sequential\nvalues (such as time or geographic data) because the viewer\nwill intuitively read these charts from left to right and attain the\nfull picture of the visualization.\n\n\nTip\nColumn and bar charts are best suited for data with limited\ncategories. When plotting data with many categories, such as\nyears across a long period of time, consider using a\nLine Chart.\nYou can also limit the number of categories displayed in your\nchart to focus on a subset of your data. MongoDB Charts provides the\nfollowing methods to reduce the number of bars or columns plotted\nin the visualization:\n\nFilter documents\nLimit Data\nBin data\n\n\n\n\nExamples\u00b6\n\nGrouped Column Chart\u00b6\nThe following grouped column chart shows the most common items sold\nfrom an office supply store across several store locations.\nThe X Axis category of storeLocation creates a group\nfor each store location in the data set, and each group is split by the\nseries column of item.name. This ultimately displays\nthe count of each item\u2019s name sold at each store location:\n\n\n\n\n\nStacked Column Chart\u00b6\nThe following stacked column chart shows the number of awards won by\nthe top 10 highest award-winning movie directors, with each bar\nsegmented by the genres of films directed by that director.\nThe X Axis category of director creates a column for each\ndirector in the data set, which we limit to\nonly the top 10 as sorted by the aggregated sum of awards.wins from\nthe Y Axis. The Series encoding channel field\nof genres segments each column to portray the genres of the films\ndirected by that director:\n\n\n\n\n\n100% Stacked Bar Chart\u00b6\nThe following 100% stacked bar chart visualizes the monthly cost\nof renting a home in three different suburbs of Austin, Texas, USA.\nUsing a 100% stacked chart allows us to easily visualize\nthe percentage of rental homes in each monthly_price\nbin within each neighborhood. This provides a\nclear picture of how these neighborhoods generally compare on rental\nprices.\nThis is the complete filter used for\nthis chart:\n\n\n\ncopy\n\n{\n  $and: [\n    { monthly_price:\n      { $exists: true, $lte: 2000 }\n    },\n    { 'address.suburb':\n      { $in: [\"Georgian Acres\", \"South Congress\", \"Wooten\"] }\n    }\n  ]\n}\n\n\n\nThe Y Axis category channel creates a bar for each of the\nthree suburbs in the filter. The X Axis channel aggregates\nto obtain a count of documents matching each respective suburb. The\nSeries encoding channel of monthly_price splits each\nbar into categories colored according to the legend on the right\nside of the chart:\n\n\n\n\n\nColored Bar Chart\u00b6\nThe following colored bar chart shows the average Rotten Tomatoes rating for countries with the 10\nhighest ratings, and colors each bar to show the average runtime for\nmovies from each country.\nThe Y Axis category creates a bar for each country in the\ndata set, which we limit to only the top 10 as sorted by the aggregated\nmean of the tomato.rating field from the X Axis. The\nColor encoding channel field of runtime colors each bar\nto show the average runtime for movies from each country. A darker\nshade of green indicates a longer average runtime:\n\n\n\n\n\n",
            "preview": "Column and bar charts plot data in either horizontal or vetical segments where the length of the segment is proportional to the data value. Column and bar charts provide high-level overviews of data trends by comparing values within a specific category.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/master/sort-limit-data/",
                "https://docs.mongodb.com/charts/master/filter-documents/",
                "https://docs.mongodb.com/charts/master/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/chart-type-reference/data-table/index.html",
            "title": "Data Table \u2014 Charts Manual 0.10",
            "headings": [
                "Data Table",
                "Data Table Encoding Channels",
                "Use Cases",
                "Examples",
                "Basic Data Table",
                "Data Table with Dynamic Columns",
                "Sort and Resize Data Table Columns",
                "Behavior",
                "Procedure",
                "Reorder Data Table Columns",
                "Considerations",
                "Toggle Row and Column Totals"
            ],
            "text": "\nData Table\u00b6\n\nOn this page\n\nData Table Encoding Channels\nUse Cases\nExamples\nSort and Resize Data Table Columns\nReorder Data Table Columns\nToggle Row and Column Totals\n\n\nData tables represent data in a tabular view, similar to a\nspreadsheet. Data tables\nsplit your data into categories, with each categorization field\nrepresented in the table columns. The unique categories are represented\nas the table rows, and Charts displays aggregated values in the\ntable body based on the fields selected.\n\nData Table Encoding Channels\u00b6\nData tables use the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nGroups\nThe category encoding channels. Charts\ncreates a row in the table for each unique value in this field.\nWhen multiple Groups are added to the chart,\nCharts creates a row for each unique combination of\ngroup fields.\n\nNote\nThe Groups encoding channel supports\nbinning for numeric and date fields.\n\n\n\nValues\nThe aggregation encoding channels. Charts\ncreates a column for each field mapped into the\nValues channel. Charts\naggregates the encoded Values fields using the\nselected aggregation methods and populates the grid cells with\nthe aggregated value for the corresponding Group.\n\nDynamic Columns\nA second Category encoding channel. When you use\nDynamic Columns, Charts creates table\ncolumns based on the unique values retrieved from the field\nmapped into the Dynamic Columns channel.\nCharts uses the field mapped into the Values\nchannel to populate the grid cells, aggregated against both the\nGroup and Dynamic Column categories.\nYou cannot apply dynamic columns to a table if you have selected\nmultiple Value encoding channels.\nFor an example of how to use dynamic columns, see the following\nexample.\n\nNote\nThe Dynamic Columns encoding channel supports\nbinning for numeric and date fields.\n\n\n\n\n\n\n\nUse Cases\u00b6\nData tables have a wide variety of applications, but are most useful\nwhen comparing multiple categories of calculated values. Visual charts\nstruggle to display multiple categories of data without losing their\naudience. Data tables present data with multiple categories such that\nyou can see which value applies to which slice of data.\nData tables are also useful for showing precise data values, rather\nthan comparing approximate values. Comparing approximate values is\nbest done with a visual representation, instead of text.\nYou can use data tables to show:\n\nThe total cost to rent an apartment, including rent, cleaning fees,\nand security deposits organized by location and total area of the\nunit.\nTime spent working out and total calories burned during various\nexercises categorized by the type of exercise and time of day the\nexercised was performed.\n\n\n\nExamples\u00b6\nThe following data table examples visualize data from a hospitality\nand property service. Each document in the collection\nrepresents a unit available for rent and includes information such as\nthe monthly unit price, neighborhood, and property type.\n\nBasic Data Table\u00b6\nThe following data table categorizes the rental listings by property\ntype and location, and shows the average review rating and average\nweekly rent for each group:\n\n\n\nThe Group encoding channels of property_type and\nsuburb create a row in the data table for each unique combination\nof those two fields in the data.\nThe Values of review_scores_rating and\nweekly_price each add a column to the table. For both values, we\naverage the rating and price for each property type and suburb\nusing aggregation and display the results in\nthe data table.\nThe results are formatted using the Customization tab to display the\nmean weekly price as currency and round the mean review score to an\nappropriate number of decimal places.\n\nNote\nWe have applied a filter to this\nchart to only display listings which have a weekly_price\nassociated with them.\n\n\n\nData Table with Dynamic Columns\u00b6\nThe following data table displays nearly the same data as the previous\nbasic data table example. In this example, instead of making\nproperty_type and suburb Groups, property_type\nfield is now a Dynamic Column:\n\n\n\nNow, rather than having two category columns in the table, the\nproperty_types become column titles. We are still aggregating\nthe mean of the weekly_price based on each combination of\nproperty_type and suburb.\nThe results are formatted using the Customization tab to display the\nmean weekly price as currency.\n\nNote\nBlank table cells indicate that there are no documents that match\nthe corresponding intersection of property_type and suburb.\n\n\n\n\nSort and Resize Data Table Columns\u00b6\nUsers with the viewer and author roles\non data tables can sort and resize data table columns. You\ncan sort and resize columns either in the\ndashboard or the Chart Builder.\n\nBehavior\u00b6\nWhen a viewer or author sorts or resizes columns from the\ndashboard, the changes do not persist as part of\nthe chart definition. In this case, the chart returns to its\noriginal state once the chart or corresponding dashboard is\nrefreshed.\nTo save the changes as part of the chart definition, an author must\nmake the changes in the Chart Builder. All Charts users will\nsee the new column sorting and sizing.\n\n\nProcedure\u00b6\n\nSort Columns\u00b6\nTo sort a data table column, click on its header. With each click, MongoDB Charts cycles between sorting the column in\nascending order, descending order, and the default chart sorting order.\nTo sort by multiple columns, Shift + Click on the additional columns\nby which you wish to sort. Charts applies the sort order in\nthe same order you select additional columns. Charts displays\nnumbers in the column headers indicating the order in which the\nsorting is applied.\n\n\nResize Columns\u00b6\nTo resize a column, click the the column divider and drag until the\ncolumn reaches the desired width.\nTo return a column to its default width, double-click on the column\ndivider.\n\n\n\n\nReorder Data Table Columns\u00b6\nUsers with the author and owner roles\non data tables can reorder data table columns in the Chart\nBuilder.\nTo reorder data table columns, click and drag column headers to the\ndesired order.\nWhen an author reorders data table columns and saves the\nchart, MongoDB Charts saves the specified order as part of the chart\ndefinition. All Charts users will see the new column order.\n\nNote\nData table authors can also reorder\ncolumns by modifying the order of the respective column\nencoding channels. MongoDB Charts renders data\ntable columns in the same order you specify the column encoding\nchannels. To modify the order of the encoding channels, drag and\ndrop one field on top of another to swap their order.\n\n\nConsiderations\u00b6\n\nYou can only reorder columns within their respective table sections,\nbeing Groups or Values.\nYou cannot reorder Dynamic Columns.\n\n\n\n\nToggle Row and Column Totals\u00b6\nBy default, data tables include a Column Totals row, which consists of\na row of values with sum totals for each column. Optionally, you can\nenable a Row Totals column, which consists of a column of\nvalues containing sum totals for each row.\nThe following image shows a detail from a data table with row and\ncolumn totals enabled and added text indicating which is which:\n\n\n\nTo toggle the totals on and off:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nColumn Totals and Row Totals toggles\nto the desired settings.\n\nFor a complete list of Chart Customization options, see Customize\nCharts.\n\n",
            "preview": "Data tables represent data in a tabular view, similar to a spreadsheet. Data tables split your data into categories, with each categorization field represented in the table columns. The unique categories are represented as the table rows, and Charts displays aggregated values in the table body based on the fields selected.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://docs.mongodb.com/charts/master/filter-documents/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/master/dashboards/",
                "https://docs.mongodb.com/charts/master/build-charts/",
                "https://docs.mongodb.com/charts/master/customize-charts/",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "https://docs.mongodb.com/charts/master/dashboard-permissions/",
                "https://en.wikipedia.org/wiki/Spreadsheet"
            ]
        },
        {
            "slug": "master/chart-type-reference/donut-chart/index.html",
            "title": "Donut Chart \u2014 Charts Manual 0.10",
            "headings": [
                "Donut Chart",
                "Donut Chart Encoding Channels",
                "Use Cases",
                "Examples",
                "Donut Chart Using Count",
                "Donut Chart Using Sum"
            ],
            "text": "\nDonut Chart\u00b6\n\nOn this page\n\nDonut Chart Encoding Channels\nUse Cases\nExamples\n\n\nDonut charts display data in a series of segments of a circle, with\nlarger segments representing larger data values. The entire circle\nrepresents the summation of all data values, and each segment\nindicates the proportion of each category in the data to the total.\n\nDonut Chart Encoding Channels\u00b6\nDonut charts provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nLabel\nThe category encoding channel. MongoDB Charts creates a\nsegment in the donut for each unique value from this field.\n\nNote\nThe Label encoding channel supports\nbinning for numeric and date fields.\nThe channel supports sorting and\nlimiting for string fields.\n\n\n\nArc\nThe aggregation encoding channel. MongoDB Charts\naggregates this field\nbased on the aggregation method selected. This field dictates\nthe size of each circle segment.\n\n\n\n\n\nUse Cases\u00b6\nDonut charts are ideal for giving readers a quick overview of the\nproportional distribution of a dataset. Use donut charts when the\ngeneral trend of data is more important than precise data values.\nDonut charts are especially useful when there is a low number of\ncategories to visualize, because it is easier to compare fewer\nsegments of the circle to see which values make up the greatest\nparts of the whole.\nConsider using donut charts to display:\n\nThe proportion of store customers who place orders in-store versus\nonline\nThe proportion of various resources exported by a country\nThe choices thrown during several Rock, Paper, Scissors games\n\n\nNote\nAlthough you can bin or limit your data to reduce the number of categories\nin the visualization, this may not be the best choice for donut\ncharts. The purpose of donut charts is to show each value as a\nproportion of a total, so excluding categories may result in a\nmisleading visualization that reflects inaccurate proportions.\nWhen looking to compare individual data values, rather than show\nvalues as a proportion to a whole, consider using a\ncolumn or bar chart.\n\n\n\nExamples\u00b6\n\nDonut Chart Using Count\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale,\nwhich contains information on the item(s) sold and the customer\nconducting the purchase. This donut chart shows the proportional\ncounts of the three different purchase methods the store provides:\n\n\n\nThe Label field of purhcaseMethod tells MongoDB Charts to\ncreate a circle segment for each unique value in the purhcaseMethod\nfield. MongoDB Charts proportions each segment according to the aggregated\nvalue signified in the Arc encoding channel. In this case,\nwe aggregate to find the total count of documents with the\nsame purhcaseMethod value.\nWe see based on the visualization that the most common purchase method\nis In store, followed by Online.\n\nNote\nIn this example we are counting entire documents, so it does not\nmatter what field we select for the Arc field. No\nmatter what field we apply, the visualization will still be\nthe same.\n\n\n\nDonut Chart Using Sum\u00b6\nThe following chart visualizes personal workout data. Each document in\nthe collection represents a single workout activity, which includes\ninformation on the type of activity performed and the amount of time\nspent exercising. This donut chart shows the proportional time spent\nperforming each exercise activity:\n\n\n\nThe Label field of Activity Type tells MongoDB Charts to\ncreate a circle segment for each unique value in the Activity Type\nfield. MongoDB Charts proportions each segment according to the aggregated\nvalue signified in the Arc encoding channel. In this case,\nwe aggregate to find the total sum of workout times for\ndocuments with the same Activity Type value.\nWe see based on the visualization that the activity with the greatest\ntotal workout time is Surf, followed by Bike Ride.\n\n\n",
            "preview": "Donut charts display data in a series of segments of a circle, with larger segments representing larger data values. The entire circle represents the summation of all data values, and each segment indicates the proportion of each category in the data to the total.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/sort-limit-data/",
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/"
            ]
        },
        {
            "slug": "master/chart-type-reference/grid-charts/index.html",
            "title": "Grid Charts \u2014 Charts Manual 0.10",
            "headings": [
                "Grid Charts"
            ],
            "text": "\nGrid Charts\u00b6\n\n\nHeatmap\nScatter Chart\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/scatter-chart/"
            ]
        },
        {
            "slug": "master/chart-type-reference/heatmap/index.html",
            "title": "Heatmap \u2014 Charts Manual 0.10",
            "headings": [
                "Heatmap",
                "Heatmap Encoding Channels",
                "Use Cases",
                "Example"
            ],
            "text": "\nHeatmap\u00b6\n\nOn this page\n\nHeatmap Encoding Channels\nUse Cases\nExample\n\n\nA heatmap represents data in a tabular format as a range of color. A\ndarker, or more intense, color represents a larger aggregated value\nfor a particular data point.\n\nHeatmap Encoding Channels\u00b6\nHeatmaps provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nA category encoding channel that creates a category\nalong the X axis for each unique value in this field.\n\nY Axis\nA category encoding channel that creates a category\nalong the Y axis for each unique value in this field.\n\nIntensity\nAn aggregation encoding channel that changes the\nshading of the matrix elements to reflect the aggregated value\nof this field. Darker colors in the visualization reflect\ngreater aggregated values.\n\n\n\n\nNote\nHeatmaps support sorting and\nlimiting for the\nX Axis encoding channel, but not the\nY Axis channel.\n\n\n\nUse Cases\u00b6\nHeatmaps reveal patterns or trends within your data. Use heatmaps\nwhen the exact data values are not as important as depicting\nhigher-level trends and relationships between your data points. They\ncan also highlight any significant outliers, or points which strongly\ngo against the general direction of your data. A heatmap is a good\nchoice to display:\n\nA comparison of average room rental prices based on location and\nproperty type.\nGeographic data, such as election results across different districts\nor population density.\nThe number of customer orders across various store locations by month\nof the year.\n\n\nTip\nHeatmaps work especially well with binned\ndata. With naturally ordered datasets, heatmaps highlight areas of\nconcentration within the data.\n\n\n\nExample\u00b6\nThe following chart visualizes data pertaining to movies. Each\ndocument in the collection represents a movie and contains general\ninformation about the film as well as ratings from critics. This\nheatmap shows the mean (average) Metacritic rating for different movie genres\n(Y Axis) over time (X Axis):\n\n\n\nWe bin the years along the X Axis into\ndecades and aggregate to find the mean metacritic score\nof films from each genre released in each decade.\nThe intensity field of metacritic shades each grid\nelement based on the mean metacritic field of all of the\nintersecting documents based on the X and\nY axes fields. Based on the chart, we see that\nfrom 1930-1940 there are a few genres with very high\naverage Metacritic scores, and over time a more even distribution of\nfilm ratings begins to occur.\n\nNote\nIf the space is white, there are no movies from that decade of that\nparticular genre in the dataset.\n\n\n",
            "preview": "A heatmap represents data in a tabular format as a range of color. A darker, or more intense, color represents a larger aggregated value for a particular data point.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/sort-limit-data/",
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "http://www.metacritic.com/"
            ]
        },
        {
            "slug": "master/chart-type-reference/line-area-chart/index.html",
            "title": "Line and Area Charts \u2014 Charts Manual 0.10",
            "headings": [
                "Line and Area Charts",
                "Discrete Line and Area Charts",
                "Discrete Chart Encoding Channels",
                "100% Stacked Area Charts",
                "Continuous Line and Area Charts",
                "Continuous Chart Encoding Channels",
                "Discrete Area Versus Continuous Area Charts Display",
                "Use Cases",
                "Examples",
                "Discrete Area Chart with Multiple Series",
                "100% Stacked Area Chart",
                "Discrete Line Chart with Multiple Aggregated Fields",
                "Continuous Line Chart"
            ],
            "text": "\nLine and Area Charts\u00b6\n\nOn this page\n\nDiscrete Line and Area Charts\nDiscrete Chart Encoding Channels\n100% Stacked Area Charts\n\n\nContinuous Line and Area Charts\nContinuous Chart Encoding Channels\n\n\nDiscrete Area Versus Continuous Area Charts Display\nUse Cases\nExamples\nDiscrete Area Chart with Multiple Series\n100% Stacked Area Chart\nDiscrete Line Chart with Multiple Aggregated Fields\nContinuous Line Chart\n\n\n\n\nLine charts and area charts display information as a series of data\npoints connected by straight line segments. In area charts, the\nspace beneath the line segments is filled in with color, whereas in\nline charts only the line segments are rendered with no additional\ncoloring or shading. These charts facilitate visualizing data over a\nperiod of time and identifying trends and patterns across the entire\ndata range. Line and area charts support visualuzing both\ndiscrete and continuous data.\n\nDiscrete Line and Area Charts\u00b6\nDiscrete line and area charts visualize categorical or binned data with some form of logical ordering, such as\ntime. MongoDB Charts always aggregates\nvalues in discrete charts such that any number of documents can\nsupply values to a given plotted point. A discrete chart would be\nuseful to visualize a store\u2019s average annual sales over time.\n\nDiscrete Chart Encoding Channels\u00b6\nDiscrete line and area charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nThe category encoding channel. MongoDB Charts renders a\ndata point for each unique value from the field assigned to this\nencoding channel.\n\nY Axis\nThe aggregation encoding channel. This channel\ndictates which field to aggregate on and the type of aggregation\nto perform. This ultimately dictates the position of each\ncategory\u2019s data point on the chart. Categories are defined by\nthe X Axis encoding channel.\n\nNote\nYou can aggregate upon multiple fields in your dataset to\ncreate multi-series charts. For more information, see\nMultiple Field Mappings.\n\n\n\nSeries\n(Optional) Adds an additional category encoding\nchannel to the visualization. When utilized, MongoDB Charts adds\nan additional line to the visualization for each unique\nvalue in this field. Use this field to map additional\ndiscrete categorical fields in your data, rather than multiple\naggregated fields.\n\nNote\nThis option is only available when there is a single field\nmapped to the Y Axis aggregation\nencoding channel.\n\n\n\n\n\n\n\n100% Stacked Area Charts\u00b6\n100% stacked area charts are a subtype of discrete area charts. In 100%\nstacked area charts, the total area shown is normalized to 100% and\nsplit into segments based on the category in the Series\nencoding channel. Each series is shown as a percentage of the whole.\nWhen using a traditional stacked area chart, it can be difficult to\ncompare the proportions of each series to the whole if the total\nvalue of the chart segments greatly differ. 100% stacked charts\nmake it easier to compare proportions of each series to the whole by\nshowing relative percentages.\nFor a detailed example, see the 100% Stacked Area Chart Example.\n\n\n\nContinuous Line and Area Charts\u00b6\nIn continuous line and area charts, every data point comes from a\ndistinct document in the data source.\nContinuous charts do not support aggregation or binning. A continuous\nchart would be useful to visualize stock closing prices over time,\nassuming each closing price comes from a distinct document in the\ndataset.\n\nContinuous Chart Encoding Channels\u00b6\nContinuous line and area charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nMongoDB Charts renders a data point for the values in this field\nfrom each document in the collection.\n\nY Axis\nFor each document in the data source, MongoDB Charts compares the\nvalue of this field against the X Axis\nfield and plots the resulting value.\n\nNote\nYou can add multiple value encoding channels to\nthe chart\u2019s Y Axis to create multi-series charts.\nFor more information, see Multiple Field Mappings.\n\n\n\nSeries\n(Optional) Adds an additional category encoding\nchannel to the visualization. When utilized, this field adds\nan additional line to the visualization for each unique\nvalue in this field.\n\nNote\nThis option is only available when there is a single field\nmapped to the Y Axis aggregation\nencoding channel.\n\n\n\n\n\n\n\n\nDiscrete Area Versus Continuous Area Charts Display\u00b6\nDiscrete area charts are stacked, meaning MongoDB Charts plots each\nseries above or below the others in the visualization. The chart shows\nthe total aggregated value of all of the series, so you can easily see\nthe proportion of each series in relation to the total.\nContinuous area charts are overlaid, meaning MongoDB Charts plots each\nseries directly on top of one another in the visualization.\n\n\nUse Cases\u00b6\nLine charts and area charts are closely related and are both useful\nfor depicting time series data and data with logical ordering. However,\nthere are scenarios when it may be beneficial to use one chart type\nover the other.\n\nConsider using a line chart when creating multi-series charts where each series represents an isolated\nfield. MongoDB Charts stacks multi-series area charts, as shown in\nthis example, which results\nin a chart where the stacked totals appear to share a relationship\ncontributing to a larger summed value. This may not be desireable\ndepending on the specific relationships within the data fields.\nThe line chart displays the data from each series in-line with one\nanother without stacking, which may provide a more accurate\nrepresentation of the data as shown in the\ndiscrete line chart.\n\n\nArea charts are useful for showing an overall trend while also\nhighlighting relative performances of individual components of\nthat sum.\nConsider using a discrete area chart when illustrating a\npart-to-whole relationship, such as tracking data metrics over\ntime. An example of this might be showing revenue compared with\nexpenses over the course of a year.\nA continuous area chart would work in this scenario if you were\nless concerned with the summation of the two fields and instead\nwanted a more direct comparison of the fields against one another.\n\n\n\n\nTip\nWhen your data does not have a logical order, consider instead using\na bar or column chart to visualize\nyour data. When the order of the data is not important, a bar or\ncolumn chart can quickly highlight the highest and lowest values in\nthe visualization, which may be more beneficial than suggesting the\nviewer read the chart from left to right as in a line or area chart.\n\n\n\nExamples\u00b6\n\nDiscrete Area Chart with Multiple Series\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale\nwith information on the item(s) sold and the customer\nconducting the purchase. This discrete area chart shows the\ndistribution of customer ages throughout sales in the collection:\n\n\n\nThe X Axis field of customer.age plots the ages of the\ncustomers along the X axis. We direct to Charts to bin the ages into groups of 5.\nThe Y Axis field of customer.age and\naggregate option of count counts the\noccurrences of each age in the corresponding bin.\nLastly, we apply the item.name field to the\nSeries encoding channel to split the age area into\nsegments displaying the count of each age group purchasing each\nstore item.\n\nNote\nFor more information on multi-series charts, see\nMulti-Series Charts.\n\n\n\n100% Stacked Area Chart\u00b6\nThe following chart visualizes data from a mock office supply\nstore. Each document in the collection represents an individual sale\nwith information on the item(s) sold and the customer\nconducting the purchase. This 100% stacked area chart shows the\nrelative percentages of items sold on each date of the month:\n\n\n\nThe X Axis field of saleDate plots each sale\naccording to its date. The Binning and\nPeriodic settings are enabled, so\nCharts groups the dates into bins based on each date of the\nmonth.\n\nNote\nFor more information on binning dates and the periodic setting,\nrefer to the Bin Data page.\n\nThe Y Axis field of _id runs a count aggregation to calculate the\ntotal number of sales that happened each day of the month. Since this\nis a 100% stacked chart, these values are all normalized to 100%, and\nare segmented by the Series encoding channel.\nThe Series field of item.name segments the total chart\narea based on the name of the item sold. Since there may\nbe multiple items in a single document, we Unwind this\narray to add each item to the visualization. This provides a clear\npicture of the relative percentages of items sold based on the\ndate of the month.\n\n\nDiscrete Line Chart with Multiple Aggregated Fields\u00b6\nThe following chart visualizes data pertaining to movies. Each\ndocument in the collection represents a movie and contains general\ninformation about the film and ratings from various rating\naggregators. This discrete line chart compares average\nRotten Tomatoes\ntomato.meter ratings and average Metacritic ratings of films over time. Both ratings\nare on a scale from 0 - 100:\n\n\n\nThe X Axis field of year plots each film according to\nits release year. We direct to Charts to bin the years into groups of 5.\nThe Y Axis fields of tomato.meter and metacritic\nalong with the aggregate option of mean\ncalculate and plot the average ratings of films from each\ngroup of 5 years.\n\nNote\nFor more information on creating charts with multiple aggregated\nfields, see Multiple Field Mappings.\n\n\n\nContinuous Line Chart\u00b6\nThe following chart visualizes data pertaining to the usage of a\nsolar-powered house battery. This continuous line graph shows the\nbattery level over time:\n\n\n\nThe X Axis field of timestamp plots each timestamp in\nthe data source. The Y Axis fields of energy_left and\ntotal_pack_energy each plot a series in the chart; the amount of\nenergy the battery has left and the total amount of energy the battery\nholds. This comparison shows how close the battery is to a full charge.\n\nNote\nA continuous chart works better than a discrete chart in this case\nbecause our X Axis field, timestamp is not a\ndiscrete, categorical variable, and is instead a continuous value\nalong a range.  We want to plot each timestamp as an individiual\npoint, rather than show an aggregated value from many data values.\n\n\n\n",
            "preview": "Line charts and area charts display information as a series of data points connected by straight line segments. In area charts, the space beneath the line segments is filled in with color, whereas in line charts only the line segments are rendered with no additional coloring or shading. These charts facilitate visualizing data over a period of time and identifying trends and patterns across the entire data range. Line and area charts support visualuzing both discrete and continuous data.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "http://www.metacritic.com/",
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/chart-type-reference/number-chart/index.html",
            "title": "Number Chart \u2014 Charts Manual 0.10",
            "headings": [
                "Number Chart",
                "Number Chart Encoding Channel",
                "Use Cases",
                "Examples",
                "Total Value of Store Sales",
                "Maximum Calories Burned During Workouts"
            ],
            "text": "\nNumber Chart\u00b6\n\nOn this page\n\nNumber Chart Encoding Channel\nUse Cases\nExamples\n\n\nNumber charts display a single aggregated value from a data field.\n\nNumber Chart Encoding Channel\u00b6\nNumber charts only require a single encoding channel, called\nNumber. This is an aggregation encoding channel\nwhich aggregates based on the field and aggregation method chosen, and\ndisplays the result in the chart.\n\n\nUse Cases\u00b6\nNumber charts are useful for highlighting grand totals or values which\nrepresent the overall state of your data. For example, a store may use\na number chart to represent the total dollar value of all sales.\nAdditionally, a hotel chain may use a number chart to represent the\naverage number of vacant rooms across all hotels, or apply a\nfilter to see the total number of\nvacant rooms in a select region.\n\n\nExamples\u00b6\n\nTotal Value of Store Sales\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale,\nwhich contains information on the item(s) sold and the purchaser. This\nnumber chart shows the total sum of all sales stored in the collection:\n\n\n\nThe Number field of items.price tells MongoDB Charts to\naggregate the field based on the selected method of\n$sum. Since\nitems is an array, we have to select an array reduction option\nbefore we can aggregate. In this example, we choose\nUnwind Array, which creates a new document for each\nelement in the items array. MongoDB Charts sums the price of each\nnewly created document and displays the value in the visualization.\n\n\nMaximum Calories Burned During Workouts\u00b6\nThe following chart visualizes workout data. Each document in the\ncollection represents an individual workout activity, which contains\ninformation on the type of activity performed and the amount of\ncalories burned during the workout. This number chart shows the\nmaximum calories burned across all swimming and surfing\nworkouts:\n\n\n\nThe Number field of Calories Burned (kCal) tells\nMongoDB Charts to aggregate the field based on the selected method of\n$max.\nWe have applied a filter to this chart\nto restrict the documents MongoDB Charts examines to only those with an\nActivity Type of Surf, Swim, or Indoor Swim. MongoDB Charts\ndetermines the maximum value of the Calories Burned (kCal) field\nacross all documents which match this criteria and displays the value\nin the visualization.\n\n\n",
            "preview": "Number charts display a single aggregated value from a data field.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/filter-documents/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/max/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/"
            ]
        },
        {
            "slug": "master/chart-type-reference/scatter-chart/index.html",
            "title": "Scatter Chart \u2014 Charts Manual 0.10",
            "headings": [
                "Scatter Chart",
                "Scatter Chart Encoding Channels",
                "Use Cases",
                "Examples",
                "AirBnB Rentals",
                "Movies with the Most Award Nominations"
            ],
            "text": "\nScatter Chart\u00b6\n\nOn this page\n\nScatter Chart Encoding Channels\nUse Cases\nExamples\n\n\nScatter charts plot data with individual data points placed along the\nX and Y axes. Optionally, the data point representations may use shapes\nand colors to display additional data dimensions.\n\nScatter Chart Encoding Channels\u00b6\nScatter charts provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX / Y Axis\nThe X and Y axis encoding channels accept numerical and date\nfields and display the range of values from the field along the\ncorresponding axis.\n\nSize\n(Optional) An aggregation encoding channel that\nchanges the size of the data point markers, with larger sizes\nindicating larger aggregated values.\n\nColor\n(Optional) A category encoding channel that changes\nthe color of the data point markers to indicate a corresponding\ndata value. MongoDB Charts lists the colors used in a key to the right of\nthe chart.\n\nShape\n(Optional) A category encoding channel that changes\nthe shape of the data point markers to indicate a corresponding\ndata value. MongoDB Charts lists the shapes used in a key to the right of\nthe chart.\n\n\n\n\n\nUse Cases\u00b6\nScatter charts are useful for representing numerical data and\nshowing clearly how data points cluster together in certain areas.\nThe Size, Color, and Shape\nencoding channels allow you to reveal\nadditional trends for data dimensions with low cardinality.\n\nTip\nA chart with many different colors or shapes may result in a\ncluttered visualization which is difficult to read. You can limit\nthe number of categories in your chart by binning or limiting your data.\n\nScatter charts show an individual marker for each data point, so\nthey work better with smaller result sets. Outliers and extreme data\npoints are easy to identify.\nConsider using a scatter chart to display:\n\nTemperature data for selected cities\nVolume of sales data for selected retail outlets\nPopulation density figures across several countries\n\n\n\nExamples\u00b6\n\nAirBnB Rentals\u00b6\nThe following scatter chart uses a database of information about\nAirBnB rental properties in Sydney, Australia. The X axis shows the\nreview ratings given to individual properties, with the price per\nnight displayed along the Y axis. The query filter restricts the result set to properties with\nat least 100 reviews.\nThe chart shows that lower-priced properties have a wider range of\nreview scores, while higher-priced properties have a smaller score\nrange with generally higher scores.\n\n\n\n\n\nMovies with the Most Award Nominations\u00b6\nThe following more complex scatter chart uses a database with movie\ndata compiled from IMDb and Rotten Tomatoes. The chart shows the\nTomatoMeter rating (ranging from 0 to 100) of movies with at least\none award nomination. Each data point marker represents one movie.\nThe X axis shows the movie\u2019s TomatoMeter rating and the Y axis shows\nthe number of award nominations the movie received.\nThe query filter restricts the result\nset to exclude marginal data points.\nThe chart uses the Color and Shape encoding\nchannels to shed further light on the types of movies which receive\nthe most award nominations. The color of each data point shows the\nMPAA (Motion Picture Association of America) rating the movie received.\nThe chart uses the Shape encoding channel to indicate the year in\nwhich the movie was released, and bins the\ndata to place each movie into a time range, with each bin covering\n25 years. Without the bins, there would be a different shape for every\nyear, which would make the chart too noisy to read.\n\n\n\n\n\n",
            "preview": "Scatter charts plot data with individual data points placed along the X and Y axes. Optionally, the data point representations may use shapes and colors to display additional data dimensions.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/sort-limit-data/",
                "https://docs.mongodb.com/charts/master/filter-documents/",
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/chart-type-reference/text-charts/index.html",
            "title": "Text Charts \u2014 Charts Manual 0.10",
            "headings": [
                "Text Charts"
            ],
            "text": "\nText Charts\u00b6\n\n\nData Table\nNumber Chart\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/data-table/"
            ]
        },
        {
            "slug": "master/chart-types/index.html",
            "title": "Chart Types \u2014 Charts Manual 0.10",
            "headings": [
                "Chart Types"
            ],
            "text": "\nChart Types\u00b6\nThe following pages describe the specific construction and use cases\nfor each chart type in MongoDB Charts:\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n",
            "preview": "The following pages describe the specific construction and use cases for each chart type in MongoDB Charts:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/chart-type-reference/grid-charts/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/data-table/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/scatter-chart/"
            ]
        },
        {
            "slug": "master/customize-charts/index.html",
            "title": "Customize Charts \u2014 Charts Manual 0.10",
            "headings": [
                "Customize Charts"
            ],
            "text": "\nCustomize Charts\u00b6\nMongoDB Charts provides various options to customize the format and display\nof your visualizations. You can use these options to display your data\nin the proper format, show data labels to relay precise measurements,\nand many other formatting techniques.\nMongoDB Charts provides three types of customization options:\n\nGeneral Customizaton Options\nGeneral Customization Options modify\nhigh-level aspects of the chart such as its colors and data labels.\nThese options affect the overall look and format of your data.\nField-Level Options\nField-Level Options modify how\nCharts renders data fields, such as specific formatting\nfor numbers and dates. These options apply to individual data fields\nencoded into your chart, rather than the\nchart as a whole. The field-level customization options available\ndepend on the data type and\nchannel type of the field you are\ncustomizing.\nValue Axis Options\nValue Axis Options modify the\nchart\u2019s axes, such as their scale and their minimum and maximum\nvalues. These options only affect the chart\u2019s axes, and not how\nCharts formats data points in the visualization.\n\nTo customize a chart, click the Customization tab above the\nencoding channels in the\nChart Builder:\n\n\n\nYour chart automatically updates as you modify customization options.\n\n\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\n",
            "preview": "MongoDB Charts provides various options to customize the format and display of your visualizations. You can use these options to display your data in the proper format, show data labels to relay precise measurements, and many other formatting techniques.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/customize-charts/field-level-options/",
                "https://docs.mongodb.com/charts/master/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/master/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/master/build-charts/",
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/customize-charts/field-level-options/index.html",
            "title": "Field-Level Options \u2014 Charts Manual 0.10",
            "headings": [
                "Field-Level Options",
                "Field Label Override",
                "Number Formats",
                "Number Format Options",
                "Number Format Presets",
                "Date Format and Time Zone",
                "Date and Time Formatting",
                "Convert Time Zone"
            ],
            "text": "\nField-Level Options\u00b6\n\nOn this page\n\nField Label Override\nNumber Formats\nDate Format and Time Zone\n\n\nWithin the customization tab, you can modify how MongoDB Charts displays\ndata fields in your visualization. The customization options\navailable depend on the data type of the value you are customizing.\n\n\n\n\nField Label Override\u00b6\nWhen you encode a field in the\nChart Builder, MongoDB Charts automatically\ngenerates a label for the field in the visualization. Charts\ngenerates the label based on the field name and the type of\naggregation applied to the field if appropriate. You can use this\ncustomization option to override the default label to provide more\ninsightful or descriptive field labels.\nTo override a field label:\n\nNavigate to the Customization tab in the\nChart Builder.\nClick the field whose label you wish to modify to expand its\ncustomization options.\nSet the Label Override toggle switch to On.\nEnter the new desired field label in the text box.\n\nThis option affects all places in the chart the field label appears,\nincluding axis titles, legends, tooltips, etc. Your chart\nautomatically updates to show the new label. This option is available\non all chart types.\n\n\nNumber Formats\u00b6\nYou can use these customization options to specify how Charts\nformats numbers in your data fields. These options are available on all\nchart types.\n\nNumber Format Options\u00b6\nMongoDB Charts provides the following options for formatting numbers. You can\nuse any combination of these options to customize your chart:\n\n\n\n\n\n\nOption\nDescription\n\n\n\nDecimals\nSpecifies to how many decimal places Charts rounds each\ndata value or label. If you specify this option, Charts\ndisplays all values with the specified number of decimal\nplaces, either by rounding decimals or adding zeroes to whole\nnumbers. If you do not specify this option, Charts\ndisplays values in their original form with no modifications.\n\nMultiplier\nSpecifies a number by which Charts multiplies each data\nvalue or label. This option is useful for scaling data, such\nas showing values in terms of thousands or millions. You can\nalso use this option to convert measurements or currencies to\ndifferent units by multiplying your values by the appropriate\nfactor.\n\nPrefix\nSpecifies a string which Charts prepends to each data\nvalue or label. This option is useful for formatting currencies\nby prepending characters such as $ or \u20ac.\n\nSuffix\nSpecifies a string which Charts appends to the end of\neach data value or label. This option is useful for providing\ncontext to your data by appending units, such as \u00b0F or\nkm/h.\n\n\n\n\n\nNumber Format Presets\u00b6\nCharts provides the following preset customizations to format\nnumbers for common use cases:\n\n\n\n\n\n\nOption\nDescription\n\n\n\nPercentage\nMultiplies each value by 100 and appends a % sign to each\nvalue. Use this option to convert decimal values to percentages.\n\nDollars\nRounds each value to two decimal places and prepends a\n$ to each value.\n\nThousands\nDivides each value by 1,000 and appends a K to each\nvalue.\n\nMillions\nDivides each value by 1,000,000 and appends an M to each\nvalue.\n\n\n\nIf you select a preset, you can modify any of its attributes to\nfurther refine your numeric displays. Once you modify a preset\u2019s\nattribute, Charts changes the preset selection in the dropdown\nto Custom.\n\n\n\nDate Format and Time Zone\u00b6\nYou can customize how MongoDB Charts displays date fields, as well\nas convert dates to a specified time zone.\n\n\n\nTo customize date formats and configure time zones:\n\nNavigate to the Customization tab in the\nChart Builder.\nClick the field whose date format and time zone you wish to modify.\nConfigure the Date and Time Formatting and\nConvert Time Zone settings as desired.\n\n\nDate and Time Formatting\u00b6\nUse this option to specify how Charts formats\ndates and times. Click the dropdowns in this customization section to\nselect a preset format provided by Charts. Charts\nprovides one dropdown for selecting a date format and one dropdown for\nselecting a time format.\n\nNote\nDepending on the binning type selected for\nthe field, Charts may not show both date formatting\ndropdowns. Also, the options in the dropdowns change depending on\nthe binning type selected.\nFor more information, see the\nConsiderations section.\n\nYou can also use the input box below the dropdowns to specify a custom\ndatetime format. The following table shows how to create custom datetime formats:\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\nYYYY\nFull year.\n2018\n\nYY\nLast two digits of year.\n18\n\nMMMM\nFull month as letters.\nNovember\n\nMMM\nAbbreviated month as letters.\nNov\n\nMM\nMonth as numbers, with leading a zero if applicable.\n08\n\nM\nMonth as numbers with no leading zero.\n8\n\nDDDD\nDay of the year, with leading zeroes if applicable.\n076\n\nDDD\nDay of the year with no leading zeroes.\n76\n\nDD\nDay of the month with a leading zero if applicable.\n05\n\nD\nDay of the month with no leading zero.\n5\n\nHH\nHour with a leading zero if applicable. Uses 24-hour time\nformat.\n18\n\nH\nHour with no leading zero.\n8\n\nA\nAdds the applicable AM or PM period to the format. Uses\n12-hour time format.\nPM\n\nmm\nMinute with a leading zero if applicable.\n03\n\nm\nMinute with no leading zero.\n3\n\nss\nSecond with a leading zero if applicable.\n09\n\ns\nSecond with no leading zero.\n9\n\n\n\n\nExample\nConsider a timestamp of November 8th, 2018 1:30:58 PM. The following table shows how various custom date filters would output\nthe date:\n\n\n\n\n\n\nCustom Format\nOutput\n\n\n\nYYYY/MM/DD\n2018/11/18\n\nMMM YY\nNov 18\n\nDDD, YYYY HH:mm:ss\n322, 2018 13:30:58\n\nDD-MMM H:mm:ss A\n08-Nov 1:30:58 PM\n\n\n\n\nOnce you modify a preset\u2019s attribute, Charts\nchanges the preset selection in the dropdown to Custom.\n\nConsiderations\u00b6\nIf you bin your timeseries data, you\ncannot specify a unit of time in your custom format with smaller\ngranularity than your bin size. For example, if you bin data\nby Month, you cannot specify days, hours, minutes, or\nseconds in your custom format because Charts does not show\nthese values in the visualization. If you enter an invalid custom\ndatetime format, Charts highlights the format input box in red.\nSpecifying the Periodic option further limits valid\nformatting options. For example, if you bin data by Month,\nyou can only specify year in your date format if you disable the\nPeriodic option. If you enable the Periodic\noption, you cannot specify year because Charts only\ndisplays the month in the field.\n\n\n\nConvert Time Zone\u00b6\nBy default, MongoDB Charts displays timeseries data exactly how it appears\nin the original dataset, which is assumed to be in\nUTC. You can use this\ncustomization option to convert the time zone in which Charts\ndisplays the data to best fit the location of the data or the\nviewers of the chart.\nTo enable this option:\n\nSet the Convert Time Zone toggle switch to\nOn.\nUse the dropdown below the toggle to select the desired time zone\nfor your data.\n\n\nNote\nWhen you convert time zones, Charts automatically accounts\nfor Daylight Savings Time when required.\n\nYou can search the dropdown to easily filter for the desired time zone.\nType into the search bar above the dropdown to see all matching time\nzones.\n\n\n",
            "preview": "Within the customization tab, you can modify how MongoDB Charts displays data fields in your visualization. The customization options available depend on the data type of the value you are customizing.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "https://docs.mongodb.com/charts/master/build-charts/"
            ]
        },
        {
            "slug": "master/customize-charts/general-customization/index.html",
            "title": "General Customization Options \u2014 Charts Manual 0.10",
            "headings": [
                "General Customization Options",
                "Show or Hide Data Markers on a Line Chart",
                "Applicable Chart Types",
                "Show or Hide Data Value Labels",
                "Applicable Chart Types",
                "Show or Hide Data Category Labels on Donut Charts",
                "Color Palette Customization",
                "Applicable Chart Types"
            ],
            "text": "\nGeneral Customization Options\u00b6\n\nOn this page\n\nShow or Hide Data Markers on a Line Chart\nShow or Hide Data Value Labels\nShow or Hide Data Category Labels on Donut Charts\nColor Palette Customization\n\n\nMongoDB Charts provides general customization options which modify the\nvisualization at a high level, rather than individual pieces of the\nvisualization.\n\n\n\n\nShow or Hide Data Markers on a Line Chart\u00b6\nYou can dictate whether Charts displays visible data markers\nwhich represent individual data points on line charts. Enabling this\noption makes it easier to see exactly where your data points lie\nalong a line. Hovering over these markers shows the exact data values\nin a tooltip, making it easier view precise measurements.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Markers toggle switch to the desired setting.\n\nTo customize the formatting of the number in the data marker tooltip,\nmodify the Number Formatting\nsettings for the relevant field.\n\nApplicable Chart Types\u00b6\nThis customization option is available on the following chart types:\nDiscrete Line,\nContinuous Line,\nDiscrete Area, and\nContinuous Area.\n\n\n\nShow or Hide Data Value Labels\u00b6\nYou can dictate whether Charts displays text labels for your\ndata values. Data value labels show the exact values of the data points\nin the visualization.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Value Labels toggle switch to the desired\nsetting.\n\nTo customize the formatting of the number in the data label, modify\nthe Number Formatting settings for\nthe relevant field.\n\nApplicable Chart Types\u00b6\nThis customization option is available on the following chart types:\nGrouped Column,\nColored Column,\nGrouped Bar,\nColored Bar, Discrete\nLine, Continuous Line,\nDiscrete Area,\nContinuous Area, and\nDonut.\n\n\n\nShow or Hide Data Category Labels on Donut Charts\u00b6\nYou can dictate whether Charts displays category labels for\nsegments in your donut charts. Category labels display the category\ncorresponding to each donut section in text, which eliminates\nthe need to hover over a section or rely on the segment color to\ndetermine its category.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Category Labels toggle switch to the desired\nsetting.\n\n\n\nColor Palette Customization\u00b6\nPalette customization allows you to select custom colors for your\nchart. To enable color customization, select the\nCustomization tab of the Chart Type column.\nA toggle switch labeled Custom Color Palette appears in\nthe General Customization section.\nMost chart types allow you to customize individual colors in their\npalette. The heatmap and colored bar\nand column types use a gradient color scale,\nwhile other types use a custom color picker. The gradient color\nscale allows you to choose from a set of pre-defined gradients.\n\n\n\nOther chart types use a color picker for selecting a customized\nset of colors.\n\n\n\nFor chart types which use a color picker for customization,\neach numbered color swatch corresponds to a data series on the chart.\nSelect a color swatch to modify the color of its corresponding\ndata series. You can select a new color with a color slider, by\nentering a hex value, by entering RGB values, or by choosing a\npredefined color. You can also drag and drop the existing color\nselections if you want to use the current color choices but change\nwhich color goes with which data series.\n\nNote\nBy default, the custom color picker shows color swatches for 10\ndata series, but you can only modify as many of the swatches as\nyou have data series. The palette can expand to show 20 data series.\nCharts will use as many colors as needed to show your chart,\nstarting from the first color. For example, if you have only two\ndata series in your chart, only the colors numbered 1 and\n2 have any effect on your chart.\n\nTo close the color customization tool, click somewhere outside it.\nTo revert the entire chart to its default colors, set the\nCustom Color Palette toggle switch back to Off.\n\nApplicable Chart Types\u00b6\nThis customization option is available for all chart types except\nText.\n\n\n",
            "preview": "MongoDB Charts provides general customization options which modify the visualization at a high level, rather than individual pieces of the visualization.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/customize-charts/field-level-options/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/master/build-charts/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/donut-chart/"
            ]
        },
        {
            "slug": "master/customize-charts/value-axis-options/index.html",
            "title": "Value Axis Options \u2014 Charts Manual 0.10",
            "headings": [
                "Value Axis Options",
                "Max and Min",
                "Logarithmic Scale",
                "Logarithmic Scale Considerations",
                "Label Override"
            ],
            "text": "\nValue Axis Options\u00b6\n\nOn this page\n\nMax and Min\nLogarithmic Scale\nLabel Override\n\n\nMongoDB Charts offers several customization options which modify the\nrepresentation of a chart\u2019s X and Y value axes without affecting the\nformatting of the data points in the visualization.\n\n\n\n\nNote\nA value axis shows a continuous scale of values. Charts such as\nBar/Column and\nDiscrete Line/Area have just one\nvalue axis. Continuous line and area\nand scatter charts have two value\naxes.\n\n\nMax and Min\u00b6\nThe Max and Min value axis options allow\nyou to specify maximum and minimum values to display on a chart.\nAny data points with values outside the specified limits appear at\nthe boundaries of the chart. Setting a maximum display value\nis useful for removing outlying data from the chart and\nallowing the viewer to focus on more relevant information.\n\nNote\nChanging the minimum for bar and column charts from the default\nof zero is not recommended. Doing so means the length of the\nbars is no longer proportional to the data point values.\n\nAvailable for the following chart types: all Bar/Column except 100% stacked,\nDiscrete and Continuous Line, Discrete and Continuous Area, Scatter\n\n\nLogarithmic Scale\u00b6\nToggling the Logarithmic Scale switch to the\nOn position causes your chart\nto use a logarithmic scale instead of a linear scale for data\nvalues. Using a logarithmic scale is helpful for showing\nthe percentage change from one value to the next and for charts\nwith a large value differential from smallest to largest. Data sets\nsuch as stock market movements, earthquake strength measurements, and\nglobal population sizes are good use cases for a logarithmic scale\nchart.\n\nLogarithmic Scale Considerations\u00b6\n\nUse the Logarithmic Scale option only with chart data\nthat consists of either all positive values or all negative values.\nIf the chart includes a mix of positive and negative values, or if\nit includes the value 0, the chart will not render.\nBar and column charts normally have a baseline of 0, but\nlogarithmic scale charts have a baseline of 1 because\nlog(0) is undefined. As a result, charts with data points between\n0 and 1 do not render well. You can mitigate this effect by\nsetting the axis minimum of the chart to\na value greater than zero but smaller than the lowest value in the\ndata set.\n\nAvailable for the following chart types: Grouped and\nColored Bar/Column, Discrete and\nContinuous Line, Scatter\n\n\n\nLabel Override\u00b6\nThe Label Override field allows you to create a\ncustom axis label. Custom labels can be more descriptive\nthan the default labels and help chart viewers quickly grasp\nthe significance of chart data.\nThe Label Override customization option is available on the X\nor Y value axis for charts in which the author has encoded multiple\ndata series by mapping more than one field on a given axis.\nTo customize the axis label for charts that have a single field mapped,\nuse the Label Override option within that field\u2019s customization\noptions.\nAvailable for the following chart types: Bar/Column, Line,\nArea, Scatter\n\n",
            "preview": "MongoDB Charts offers several customization options which modify the representation of a chart\u2019s X and Y value axes without affecting the formatting of the data points in the visualization.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/scatter-chart/"
            ]
        },
        {
            "slug": "master/dashboard-permissions/index.html",
            "title": "Dashboard Permissions \u2014 Charts Manual 0.10",
            "headings": [
                "Dashboard Permissions",
                "View Dashboard Permissions",
                "Modify Dashboard Permissions",
                "Specific User Permissions",
                "Access for All Users"
            ],
            "text": "\nDashboard Permissions\u00b6\n\nOn this page\n\nView Dashboard Permissions\nModify Dashboard Permissions\n\n\nDashboard permissions dictate which MongoDB Charts users have access to the\ndashboard and the actions they can perform on the dashboard. The\nfollowing dashboard permissions are available:\n\n\n\n\n\n\nPermission\nDescription\n\n\n\nViewer\nCan open a dashboard and view charts provided they have\n(at minimum) the read role on the data source used\nby the charts on the dashboard. If the user does not have the\nread role on a chart\u2019s corresponding data source, the\nchart will not render in the dashboard.\nViewers cannot make any modifications to the dashboard.\n\n\nAuthor\nCan add, modify, or delete charts, change dashboard layout, and\nrename the dashboard.\n\nOwner\nHas all privileges of Author and can also\nmanage permissions on the\ndasbhoard and delete the dashboard.\nThe creator of the dashboard automatically has the\nOwner permission. The creator cannot be removed from the\nlist of dashboard users and their Owner permission cannot be\nmodified.\n\n\n\n\n\nNote\nIt is also possible to have no permissions on a dashboard, meaning\nit will not appear on your dashboards tab.\nNewly-created dashboards are not shared by default, so no one except\nthe dashboard Owner can view the dashboard until more\nuser permissions are added.\n\n\nView Dashboard Permissions\u00b6\nTo view permissions for a specific dashboard, hover over the icon\nnext to the dashboard\u2019s Access button. A tooltip appears\ndescribing what permission you have on the dashboard, who the owner\nof the dashboard is, and who else has access to the dashboard.\nThe following table lists the possible icons and their associated\npermissions:\n\n\n\n\n\n\nIcon\nDescription\n\n\n\n\n\neye icon\n Eye Icon\nYou have Viewer permission.\n\n\n\nglobe icon\n Globe Icon\nYou have either Author or Owner permission and\nEveryone has some level\nof access to the dashboard.\n\n\n\nusers icon\n Group Icon\nYou have either Author or Owner permission and\nadditional users have\nsome level of access to the dashboard.\n\n\n\nlock icon\n Lock Icon\nYou have Owner permission and no other user has\naccess.\n\n\n\n\n\nModify Dashboard Permissions\u00b6\n\nImportant\nTo modify a dashboard\u2019s permissions, you\nmust have the Owner role on that dashboard.\n\nTo modify dashboard permissions, either click the click the\npermission icon at the top-right of\nthe dashboard from the Dashboards tab:\n\n\n\nOr click the Access button at the top-right of the\ndashboard within the specific dashboard view:\n\n\n\nWith the Dashboard Permissions dialog open, refer to the\nfollowing sections for instructions on granting a\nspecific user permissions on a\ndashboard and granting\nall users on your MongoDB Charts deployment permissions on a dashboard:\n\nSpecific User Permissions\u00b6\nTo give specific users permissions on the dashboard:\n\nSearch for the desired user using the search bar directly above\nwhere the dashboard users are listed. You can search for users\nby their username or email address.\nClick the desired user to add them to the permissions list.\nUse the dropdown to the right of the user\u2019s name to assign the\nappropriate permission.\nRepeat steps 1-3 for each user you would like to provide dashboard\npermissions for.\nClick Apply Changes.\n\nTo remove permissions for a user, click the trash can icon to the right\nof the user\u2019s name.\n\n\nAccess for All Users\u00b6\nTo allow access to the dashboard for all users on your MongoDB Charts\ndeployment:\n\nToggle the switch on the right-side of the Everyone user\nto On.\n\nSelect the permission to apply to all MongoDB Charts\nusers.\n\nNote\nIf permissions are assigned to both Everyone and a\nspecific user, the user\u2019s specific permissions take precedence\nover the permissions set to Everyone.\nFor example, if Everyone has the Author\npermission and a specific user Alice has the Viewer\npermission, Alice\u2019s effective permission is Viewer.\n\n\nClick Apply Changes.\n\n\n\n\n",
            "preview": "Dashboard permissions dictate which MongoDB Charts users have access to the dashboard and the actions they can perform on the dashboard. The following dashboard permissions are available:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/dashboards/",
                "http://docs.mongodb.org/manual/reference/built-in-roles/",
                "https://docs.mongodb.com/charts/master/manage-dashboards/"
            ]
        },
        {
            "slug": "master/dashboards/index.html",
            "title": "Dashboards \u2014 Charts Manual 0.10",
            "headings": [
                "Dashboards",
                "Dashboards Tab",
                "Create a New Dashboard",
                "Refresh Dashboard Data",
                "Manually Refresh Dashboard Data",
                "Configure Auto Refresh Settings",
                "Disable and Enable Auto Refresh",
                "Fullscreen View"
            ],
            "text": "\nDashboards\u00b6\n\nOn this page\n\nDashboards Tab\nCreate a New Dashboard\nRefresh Dashboard Data\nFullscreen View\n\n\nDashboards are a collection of charts assembled to create a single\nunified display of your data. Each chart shows data from a\nsingle MongoDB collection or view, so dashboards are essential to\nattain insight into multiple focal points of your data in a single\ndisplay.\n\nDashboards Tab\u00b6\nThe Dashboards tab shows all dashboards you have access to\nview. For more information on dashboard permissions in MongoDB Charts, see\nthe Dashboard Permissions page.\n\n\n\nEach dashboard shows the following information:\n\nTitle\nDescription\nA preview of the first three charts in the dashboard, including the\nchart title and type\nWhen the dashboard was last modified\n\nBy default, the most recently modified dashboards are shown first in\nthe list. You can change the sort order by using the\nSort By dropdown menu.\n\n\nCreate a New Dashboard\u00b6\nTo create a new dashboard:\n\nFrom the Dashboards tab, click the\nNew Dashboard button.\nIn the New Dashboard dialog, enter a title for your\ndashboard.\n(Optional) Enter a description for your dashboard.\nClick Create.\n\nAfter after clicking the Create button you are taken\nto the page for your newly created dashboard, where you are prompted to\nadd the first chart to your dashboard:\n\n\n\n\n\nRefresh Dashboard Data\u00b6\nYou can refresh dashboard data to update all charts on the dashboard\nwith the most current data from their respective data sources. When\nMongoDB Charts loads charts on a dashboard, it does not consistently query\nthe data source for each chart. Instead, MongoDB Charts queries the data\nsource when the dashboard first loads, and that data\nis stored in the browser cache and used to render the charts.\nMongoDB Charts provides options to both manually refresh dashboard data and\nconfigure the dashboard to automatically refresh at a specified time\ninterval.  These options allow you to control how current the data\ndisplayed on your dashboard is. By default, when you first create a\ndashboard, it is configured to refresh its data every hour. The\nAuto text next to the \n\nsync icon\n icon signifies that\nauto refresh is enabled.\n\nManually Refresh Dashboard Data\u00b6\nTo manually refresh dashboard data, first select a dashboard from the\nDashboards tab, then click the \n\nsync icon\n button at\nthe top-right of the dashboard.\n\n\nConfigure Auto Refresh Settings\u00b6\nYou can configure auto refresh settings to change the interval at which\nthe dashboard data is refreshed. The dashboard shows the time its data\nwas last updated and when the next update will occur at the top-right\nof the view.\nTo configure auto refresh settings for a dashboard:\n\nFrom the dashboard view, click the arrow next to the\n\n\nsync icon\n button and click Auto Refresh Settings.\nSelect the desired refresh interval.\nClick Save.\n\n\nNote\nAuto refresh settings are stored in the local browser state.\nSettings dictating whether auto refresh is enabled and its\nconfigured interval are not persisted with the dashboard or\nshared with other users.\n\n\n\nDisable and Enable Auto Refresh\u00b6\nTo disable auto refresh, click the arrow next to the \n\nsync icon\n\nbutton and click Disable Auto Refresh.\nTo enable auto refresh, click the arrow next to the \n\nsync icon\n\nbutton and click Enable Auto Refresh.\n\n\n\nFullscreen View\u00b6\nMongoDB Charts provides a fullscreen view for dashboards. In this view,\nMongoDB Charts hides the main navigation bar and exapands the dashboard to\nshow the title, description, time of last modification, and charts in\nthe entire space of the screen.\nTo open a dashboard in fullscreen view, first select a dashboard from\nthe Dashboards tab, then click the expanding arrows at the\ntop-right of the dashboard:\n\n\n\n\nNote\nYou can still remove, resize, rearrange, and access editing for charts in fullscreen view by hovering\nover the desired chart.\nAdditionally, in fullscreen view you can still configure\nauto-refresh settings and manually refresh chart data using the\nrefresh button.\n\nTo exit fullscreen view, either click the contracting arrows at the\ntop-right of the dashboard or press the escape key.\n\n\nManage Existing Dashboards\nDashboard Permissions\n\n\n\n",
            "preview": "Dashboards are a collection of charts assembled to create a single unified display of your data. Each chart shows data from a single MongoDB collection or view, so dashboards are essential to attain insight into multiple focal points of your data in a single display.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/manage-dashboards/",
                "https://docs.mongodb.com/charts/master/dashboard-permissions/"
            ]
        },
        {
            "slug": "master/data-source-permissions/index.html",
            "title": "Data Source Permissions \u2014 Charts Manual 0.10",
            "headings": [
                "Data Source Permissions",
                "View Data Source Permissions",
                "Set Data Source Permissions",
                "Specific User Access",
                "Access for All Users"
            ],
            "text": "\nData Source Permissions\u00b6\nData source permissions dictate which users in your Atlas\nproject have access to the data source and the actions they can perform\non the data source. The following data source permissions are\navailable:\n\n\n\n\n\n\nPermission\nDescription\n\n\n\nReader\nCan access the data source by viewing existing charts or\ncreating new charts which use the data source.\n\nManager\nHas all privileges of Reader and can also\nmodify the alias of a data\nsource.\n\nOwner\nHas all privileges of Manager and can also\nmanage permissions on the\ndata source and remove the data source.\nThe creator of the data source automatically has the\nOwner role. The creator cannot be removed from the list of\ndata source users and thier Owner role cannot be modified.\n\n\n\n\n\nView Data Source Permissions\u00b6\nTo view permissions for a specific data source, navigate to the\nData Sources tab and hover over the\ndata source\u2019s Access button. A tooltip describing the data\nsource permissions will appear. The tooltip displays your permissions,\nthe owner of the data source, and all other users who have access.\nThe following table lists the possible icons and their associated\npermissions:\n\n\n\n\n\n\nIcon\nDescription\n\n\n\n\n\neye icon\n Eye Icon\nYou have Reader permission.\n\n\n\nglobe icon\n Globe Icon\nYou have either Manager or Owner permission and\nEveryone in your Atlas\nproject\nhas some level of access to the data source.\n\n\n\nusers icon\n Group Icon\nYou have either Manager or Owner permission and\nadditional users have\nsome level of access to the data source.\n\n\n\nlock icon\n Lock Icon\nYou have Owner permission and no other user has\naccess.\n\n\n\n\n\nSet Data Source Permissions\u00b6\nYou can set data source permissions when you first\nadd a data source, or you can\nmodify permissions on a data\nsource which has already been created.\nRefer to the following sections for instructions on granting\nspecific users permissions on a\ndata source and granting\nall users in your Atlas project permissions on a data source:\n\nSpecific User Access\u00b6\nTo grant specific users from your Atlas project permissions on\nyour data source:\n\nSearch for the desired user using the search bar directly above\nwhere the data source users are listed. You can search for users\nby their username or email address.\n\nNote\nYou can only share data sources with users who are members of\nthe Atlas project associated with your Charts\ninstance.\n\n\nClick the desired user to add them to the permissions list.\n\nUse the dropdown to the right of the user\u2019s name to assign the\nappropriate role.\n\nRepeat steps 1-3 for each user you wish to grant data source access.\n\n\n\n\n\nTo remove access for a user you have added, click the trash can icon\nto the right of the user\u2019s name.\n\n\nAccess for All Users\u00b6\n\nNote\nWhen you create a data source, Atlas assigns the\nReader permission to every user in your\nAtlas project by default.\n\nTo grant all users in your Atlas project permissions on your data\nsource:\n\nToggle the switch on the right-side of the Everyone in\n<Project Name> user to On.\n\nSelect the role to apply to all\nusers in your Atlas project.\n\nNote\nIf permissions are assigned to both Everyone in your\nproject and a specific user, the user\u2019s specific permissions\ntake precedence over the permissions set to Everyone.\nFor example, if Everyone has the Manager\npermission on a data source and a specific user Alice has the\nReader permission, Alice\u2019s effective permission level is\nReader.\n\n\n\n\n\n",
            "preview": "Data source permissions dictate which users in your Atlas project have access to the data source and the actions they can perform on the data source. The following data source permissions are available:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/dashboard-permissions/",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "https://docs.atlas.mongodb.com/tutorial/manage-projects/"
            ]
        },
        {
            "slug": "master/data-sources/index.html",
            "title": "Data Sources \u2014 Charts Manual 0.10",
            "headings": [
                "Data Sources",
                "Data Sources View",
                "Filter Data Sources",
                "Add a Data Source",
                "Modify a Data Source",
                "Modify Data Source Alias",
                "Modify Data Source Permissions",
                "Remove a Data Source"
            ],
            "text": "\nData Sources\u00b6\n\nOn this page\n\nData Sources View\nFilter Data Sources\n\n\nAdd a Data Source\nModify a Data Source\nModify Data Source Alias\nModify Data Source Permissions\n\n\nRemove a Data Source\n\n\nData sources in MongoDB Charts reference a collection\nor view in your MongoDB\ndeployment. When building a chart, you will need to specify the data\nsource that the chart uses.\nTo view, add, or remove data sources, click Data Sources on\nthe top navigation bar.\n\nData Sources View\u00b6\nThe Data Sources view displays existing data sources that\nthe currently logged-in user has permission to view. The data sources\nare displayed in a tabular format with the following columns:\n\n\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\nDeployment\nThe MongoDB deployment containing the source database and\ncollection. Identified by the Atlas cluster associated\nwith the Charts instance.\n\nDatabase\nThe database containing the source collection or view.\n\nCollection\nThe collection or view from where Charts retrieves data.\n\nAlias\nOptional. The display name of the data source used by the\nChart Builder. Providing an Alias may result in a\nshorter and more identifiable name when selecting a data source\nin the chart builder.\nTo modify the Alias for a data source, see the\nModify a Data Source\nsection.\n\n\nLast modified\nThe date the data source was last modified.\n\nPermissions\nThe icon next to the Access button denotes the\npermissions you have on the data\nsource. For details on the various data source permissions, see\nData Source Permissions.\nTo modify the permissions for a data source, see the\nModify a Data Source\nsection.\n\n\n\n\n\nNote\nYou can sort data sources by any of the columns by clicking on the\ncolumn header.\n\n\nFilter Data Sources\u00b6\nTo search for specific data sources, use the search bar at the\nupper right corner of the Data Sources view. You can search\nby Deployment, Database,\nCollection, or Alias.\nAdditionally, you can use the dropdown to the left of the search bar to\nshow either all data sources on your MongoDB Charts deployment, or only data\nsources for which you have the Owner permission. For more\ninformation on data source permissions, see\nData Source Permissions.\n\n\n\nAdd a Data Source\u00b6\n\nFrom the Data Sources view, click the\nNew Data Source button.\n\nSelect one of the Atlas clusters.\nAtlas displays all clusters in the current project for which\nthe current user has the Project Data Access Read Only\nrole or higher.\n\nClick Connect.\n\nSelect the collections from which you wish to create data sources.\nCharts creates a separate data source for each selected\ncollection.\n\nClick Set Permissions.\n\nSet the permissions for the data source.\nBy default, Atlas assigns the Reader\npermission to every user in the project. To change a user\u2019s permission,\nsearch for the user by name or email address using the search bar.\n\nClick Publish Data Source.\n\nNote\nIf you selected multiple collections for your data source in step\n4, the data source permissions you\nselect are applied to all of the selected collections when you\npublish your data source. If you wish to apply different\npermissions to individual collections that you have selected, you\nwill need to edit those data sources after publishing.\n\n\n\nYou will see your newly added data source listed in the\nData Sources view.\n\n\nModify a Data Source\u00b6\nMongoDB Charts users can modify certain properties of a data source provided\nthey have appropriate permissions on the\ntarget data source. You can modify a data source\u2019s alias and permissions after you create it.\n\nModify Data Source Alias\u00b6\nA data source Manager or Owner can modify the Alias\nof a data source by hovering over the row\u2019s Alias field,\nthen clicking either Add Alias or the edit button\n(pencil icon). Click the green check mark to save the alias.\n\n\nModify Data Source Permissions\u00b6\nA data source Owner can add, modify, and remove\nuser permissions on a data source.\n\nFrom the Data Sources view, click the Access\nbutton in the Permissions column for the data source you\nwant to modify permissions.\nPerform the desired permission changes for the data source. Refer\nto the Data Source Permissions page for\ndetails on the permissions available and instructions on\nsetting the permissions.\nClick Apply Changes.\n\n\n\n\nRemove a Data Source\u00b6\n\nImportant\nTo remove a data source, you must have the Owner\npermission on that data source.\n\nTo remove a data source:\n\nFrom the Data Sources view, click the ellipsis\n(\u2026) button on the right-hand side of the data source\nyou want to delete.\nClick Delete Data Source.\nClick Delete Data Source again in the dialog to confirm\ndeletion.\n\n\nImportant\nAny charts using the deleted data source will need to be\nreconfigured using a different data source or deleted.\n\n\n\nData Source Permissions\n\n\n\n",
            "preview": "Data sources in MongoDB Charts reference a collection or view in your MongoDB deployment. When building a chart, you will need to specify the data source that the chart uses.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/data-source-permissions/",
                "https://docs.mongodb.com/charts/master/build-charts/",
                "https://docs.mongodb.com/manual/core/databases-and-collections/",
                "https://docs.mongodb.com/manual/core/views/"
            ]
        },
        {
            "slug": "master/embedded-objects-arrays/index.html",
            "title": "Embedded Objects and Arrays \u2014 Charts Manual 0.10",
            "headings": [
                "Embedded Objects and Arrays",
                "Embedded Objects",
                "Array Fields",
                "General Array Reduction Options",
                "String Accumulates",
                "Numeric Accumulates",
                "Fields within an Array"
            ],
            "text": "\nEmbedded Objects and Arrays\u00b6\n\nOn this page\n\nEmbedded Objects\nArray Fields\n\n\nMongoDB Charts can directly access fields in embedded objects and can\nprocess array fields flexibly according to your use case.\n\nEmbedded Objects\u00b6\nEmbedded objects in the Fields section of the Chart Builder\nare indicated by curly brackets ({}) next to their name. To expand\nan object field, click the arrow to the left of the field name. You can\ndrag embedded object fields onto the desired\nencoding channels just like any other field\nto visualize those fields in your chart.\n\nExample\nThe video.movieDetails data source in the following example\ncontains embedded objects named awards and imdb. We expand the\nobjects by clicking the arrows to the left of their names, then in\nthe bar chart we compare the\nmean imdb.rating in the Y-axis with\nawards.wins in the X-axis.\n\n\n\n\nNote\nNotice the filter provided above the chart of\n{'awards.wins': {$gt: 0}}, meaning only movies which have won\nat least one award are included in the visualization. For more\ninformation on filtering documents in MongoDB Charts, see the\nFilter Documents page.\n\n\n\n\nArray Fields\u00b6\nArray fields in the Fields section of the Chart Builder\npage are indicated by square brackets ([]) next to their name. When\nadding an array field to an encoding channel, select an array reduction option to\nprocess the data in the best way for your visualization. The following\narray reduction options are available:\n\nGeneral Array Reduction Options\u00b6\nYou can apply these array reduction options to any array:\n\n\n\n\n\n\nArray Reduction Option\nDescription\n\n\n\nUnwind array\nDeconstructs the array field from the input documents to\noutput a document for each element. Each output document is\na copy of the input document with the value of the array field\nreplaced by the element.\n\nArray length\nCounts and returns the total number of items in the array.\n\nArray element by index\nReturns the array element at the specified zero-based index position.\n\n\n\n\n\nString Accumulates\u00b6\nYou can apply these accumulates to arrays of String values:\n\n\n\n\n\n\nAccumulate\nDescription\n\n\n\nconcat\nConcatenates the values of the array into a a single string.\n\nmin length\nReturns the length of the shortest string in the array.\n\nmax length\nReturns the length of the longest string in the array.\n\nlongest\nReturns the longest string in the array.\n\nshortest\nReturns the shortest string in the array.\n\nexistence of value\nReturns true if the specified string exists in the array,\nand false if the string does not exist in the array.\n\ncount of occurrences\nReturns the number of times the specified string occurs in the\narray.\n\n\n\n\n\nNumeric Accumulates\u00b6\nYou can apply these accumulates to arrays of Numeric values:\n\n\n\n\n\n\nAccumulate\nDescription\n\n\n\nmin\nReturns the minimum value in the array.\n\nmax\nReturns the maximum value in the array.\n\nmean\nReturns the mean of all values in the array.\n\nsum\nReturns the sum of all values in the array.\n\n\n\n\nNote\nMongoDB Charts only displays accumulate options which match the data\ntype of the field used in the visualization (i.e., only showing\nstring accumulate options for string data and numeric accumulate\noptions for numeric data).\n\n\n\nFields within an Array\u00b6\nAs with array-valued fields, encoding channels require an array reduction option to be specified\nwhen handling fields within an array. In this case, the selected\nreduction is applied to the array containing the target field.\nAdditionally, in the case of embedded arrays, you must select a reduction\noption for the top-level array and all sub-arrays. Note that different\nreduction options may be used for each embedded array.\n\n\n",
            "preview": "MongoDB Charts can directly access fields in embedded objects and can process array fields flexibly according to your use case.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/filter-documents/",
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/encoding-channels/index.html",
            "title": "Encoding Channels \u2014 Charts Manual 0.10",
            "headings": [
                "Encoding Channels",
                "Aggregation",
                "Multi-Series Charts",
                "Multiple Field Mappings",
                "Series Encoding Channel"
            ],
            "text": "\nEncoding Channels\u00b6\n\nOn this page\n\nAggregation\nMulti-Series Charts\nMultiple Field Mappings\nSeries Encoding Channel\n\n\n\n\nEncoding channels are the building blocks of your visualizations.\nThese channels are the means by which Charts translates data\nfrom your collection to\nthe visualization. The encoding process dictates how that data\nappears in the chart based on the channel type selected.\nEach encoding channel type provides different capabilities for\nprocessing and visualizing your data, which vary based on the type of\ndata you provide to the channel (e.g., string versus numeric\ndata). The following table describes each encoding channel type in\nMongoDB Charts:\n\n\n\n\n\n\nEncoding Channel Type\nDescription\n\n\n\nValue\nA point on the chart is created from the chosen field for each\ndocument in the collection. You may only assign fields with a\nnumeric or date type to a Value channel.\n\nCategory\nEach unique value from this field in the collection is used\nas a chart category. The Category encoding channel\nprovides the following additional visualization options:\n\nFor fields with a string data type, you can specify a\nfield to sort on and the sort order.\nFor fields with a numeric data type, you can toggle\ndata binning and select the bin size.\nFor fields with a date data type, you can toggle date\ngrouping and select the grouping period.\n\n\n\nAggregation\nA point on the chart is created by applying an\naggregation function over the values of\nthis field from multiple documents; for example\n$count and\n$sum. For more\ninformation on aggregation in Charts, see the\nAggregation section.\n\n\n\n\nAggregation\u00b6\nDragging a field onto an aggregation\nencoding channel allows you to use an\naggregation pipeline operator\non that field. The aggregation operators available in the chart\nbuilder change based on the data type\nof the selected field. MongoDB Charts categorizes the field data type\nas either a number, string, or date and displays\nappropriate aggregation options accordingly.\n\nExample\nDonut charts provide two encoding channels:\n\nA category channel called Label dictating\nwhich field to use when dividing the sections of the chart.\nAn aggregation channel called Arc dictating\nthe aggregation operation to perform on the Label\ncategory.\n\nThe following donut chart examines NASA\u2019s Landslide data source to\nshow the frequency of various landslide triggers by performing a\n$count aggregation\non the trigger field:\n\n\n\nWe see from the chart that the most common landslide trigger is\nDownpour followed by Rain.\n\n\n\nMulti-Series Charts\u00b6\nMongoDB Charts supports building multi-series charts, which split your\nchart data into groups, or series, to compare additional\nfields within your schema. There are two ways to create multi-series\ncharts:\n\nUsing multiple aggregation or value field mappings. Use this method to compare or aggregate\nupon multiple non-categorical fields in the schema.\nUsing the Series field in the chart builder. Use this method when grouping data based\non a discrete list of items.\n\n\nMultiple Field Mappings\u00b6\nMongoDB Charts allows you to map multiple aggregation or value\nencoding channels to a single chart property\n(e.g. X Axis or Y Axis). This allows you to\ncompare additional fields in your visualization by creating new series\nbased on the encoding channels added.\nAfter dragging a field to an aggregation\nor value encoding channel, an\nadditional optional encoding channel of the same type appears below the\none which was just added, allowing you to add additional series to your\nvisualization. This process repeats with each channel you add, so\nyou can map as many fields as desired to your chart.\n\nExample\nThe following multi-series column chart shows average movie ratings\nby genre from two different sources: IMDB\nand Rotten Tomatoes:\n\n\n\nThere are two aggregation encoding channels on\nthe chart\u2019s Y Axis, one for each of the site\u2019s rating\nfields. By selecting the mean aggregation option, the\nchart aggregates these two fields using the\n$avg operator to\nprovide a comparison of the average of two fields in the same\ncolumn.\n\n\nTip\nUse multiple field mappings to create a multi-series chart when\nthe values being compared in the visualization come from two or more\nseparate fields in the schema.\nIn the example above, there is one series for Rotten Tomato ratings\nand one series for IMDB ratings. Since these are separate fields\nwithin the schema, adding multiple aggregation encoding\nchannels to map the data is the best choice to compare the fields.\n\n\n\nSeries Encoding Channel\u00b6\nYou can also create multi-series charts by using the Series\nfield in the chart builder. The Series field differs from\naggregation encoding channels\nbecause it instead utilizes a Category encoding channel. When creating a series using the\ncategory encoding channel, each unique value from the\ndata field becomes a series in the visualization.\n\nExample\nThe following multi-series column chart shows order data from an\noffice supply store, showing the most common items sold by\nstore location:\n\n\n\nBy using the item.name in the Series encoding\nchannel, a series within each location group is added for each\nitem name.\n\n\nTip\nThe Series field is useful when you are grouping data\nbased on a discrete list of items. This approach should be used when\nthe values for all series are stored in a single field, with a\nseparate field used to establish the discrete categories.\n\n\n\n",
            "preview": "Encoding channels are the building blocks of your visualizations. These channels are the means by which Charts translates data from your collection to the visualization. The encoding process dictates how that data appears in the chart based on the channel type selected.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/bson-types/",
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/master/sort-limit-data/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/avg/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://www.imdb.com/",
                "http://docs.mongodb.org/manual/core/databases-and-collections/",
                "http://docs.mongodb.org/manualaggregation"
            ]
        },
        {
            "slug": "master/filter-documents/index.html",
            "title": "Filter Documents in the Visualization \u2014 Charts Manual 0.10",
            "headings": [
                "Filter Documents in the Visualization",
                "Basic Filter Example",
                "Regular Expression (RegEx) Filter",
                "Relative Date Filter",
                "Relative Date Filter Example"
            ],
            "text": "\nFilter Documents in the Visualization\u00b6\n\nOn this page\n\nBasic Filter Example\nRegular Expression (RegEx) Filter\nRelative Date Filter\n\n\nTo display a subset of results in your data that match a given\ncriteria, use the Filters input bar above the chart\ndisplay. Input a filter document employing the same syntax used in the\nquery portion of the db.collection.find() method. After entering a filter document,\nclick Apply to see the filter reflected in your visualization.\n\nNote\nFilters on large collections may have performance issues if there\nare not appropriate indexes on the collection.\n\n\nBasic Filter Example\u00b6\nThe following chart shows the average runtime of movies by genre.\nThe filter of {runtime: {$gte: 120 }} means that we are only\ntaking into account movies which have a runtime greater than or\nequal to 120 minutes.\n\n\n\n\n\nRegular Expression (RegEx) Filter\u00b6\nRegEx filters allow you to apply a regular expression as the match\ncriteria to restrict the data MongoDB Charts displays. The expression\nuses the following syntax:\n\n\n\ncopy\n\n{ <field>: { $regex: \"pattern\", $options: \"<options>\" } }\n\n\n\nThe $options are optional and are the same as the\n$regex options in the MongoDB shell.\n\nExample\nFilter data to document fields that start with a specific letter\nTo find all documents where the jobs field begins with the\nletter A, you would write the following in the\nFilter bar:\n\n\n\ncopy\n\n{ \"job\" : { $regex : \"^A\" } }\n\n\n\nFilter data to document fields that start with a specific letter\nignoring case\nTo find all documents where the jobs field begins with the\nletter A or a, you would write the following in the\nFilter bar:\n\n\n\ncopy\n\n{ \"job\" : { $regex : \"^A\", $options : \"i\" } }\n\n\n\n\n\nNote\nThe quotation marks around the regular expression are required. You\nmay not use forward slashes to delineate the regex value as you may\nin the MongoDB shell.\n\n\n\nRelative Date Filter\u00b6\nRelative Date Filters allow you to specify a date from which MongoDB Charts\nrestricts the data displayed. For example, you can set a Relative Date\nFilter to display data from only the last month or last year. To\ncreate a filter spanning from the specified date to the current date,\nspecify the number of milliseconds since the Unix epoch of January 1,\n1970. Use this date in conjunction with a\ncomparison query operator\nto set the inclusive or exclusive time range of the data displayed.\n\nExample\nThe following Relative Date Filter returns documents that have a\ntimestamp field which resolves to a date less than 30 days from\nthe current date:\n\n\n\ncopy\n\n{ timestamp: {  $gt: new Date(new Date() - 30 * 24 * 60 * 60 * 1000 ) } }\n\n\n\nFirst, the inner new Date() constructor generates the current\ndate in milliseconds since the Unix epoch of January 1, 1970. The\nmathematical series 30 * 24 * 60 * 60 * 1000 results in the\nnumber of milliseconds elapsed in 30 days. The filter takes the\ncurrent date in milliseconds since the Unix epoch and subtracts the\nnumber of milliseconds in 30 days. This results in a new millisecond\nvalue which the filter passes to an outer new Date() constructor\nand resolves to the date 30 days prior to the time the user executes\nthe filter.\nUsing a mathematical series as shown here allows the filter to\nalways span a relative timeframe of 30 days prior to the time\nthe user executes the filter.\n\nFor a more complete example of a relative date filter, see the\nRelative Date Filter Example.\n\nISO-8601 Dates\nThe date functions utilized in MongoDB Charts filters are consistent and\ncompatible with the date functions used in the\nmongo shell. As a result, you can also use the\nISODate() constructor in your Charts query filters.\nSpecifying an ISODate() constructor with no parameters exhibits\nthe same behavior as specifying a new Date() constructor with no\nparamters, both returning the current date in their respective\nformats.\n\nExample\nThe following filter returns documents that have a\ntimestamp field between January 1, 2017 and December 31, 2017\ninclusively:\n\n\n\ncopy\n\n{$and: [{timestamp: {$gte: ISODate(\"2017-01-01\")}},\n{timestamp: {$lte: ISODate(\"2017-12-31\")}}]}\n\n\n\n\n\n\nRelative Date Filter Example\u00b6\nThe following chart visualizes workout data. Each document in the\ncollection represents an individual workout activity, which contains\ninformation such as the type of workout and various exercise\nstatistics. This line chart shows the distance per month covered\nacross all workouts over the past year (365 days):\n\n\n\nThe chart utilizes the following filter:\n\n\n\ncopy\n\n{ \"Workout Date (As Date)\": {$gte: new Date(new Date() - 365 * 24 * 60 * 60 * 1000 ) }}\n\n\n\nThis filter returns documents where the Workout Date (As Date)\nfield is within one year prior to the time Charts executes the\nquery. The (new Date() - 365 * 24 * 60 * 60 * 1000 ) parameter\nresults in the date one year prior to the current date as expressed in\nmilliseconds since the Unix epoch. Charts returns documents\nwith a value greater than or equal to this date, as signified by the\n$gte operator.\n\nDate() is not supported\nThe Date() function (as opposed to the new Date()\nconstructor) returns the current date as a string, so it cannot be\nused for filtering dates in Charts. Use:\n\nnew Date(),\nISODate(), or\nnew ISODate()\n\n\n\n\n",
            "preview": "To display a subset of results in your data that match a given criteria, use the Filters input bar above the chart display. Input a filter document employing the same syntax used in the query portion of the db.collection.find() method. After entering a filter document, click Apply to see the filter reflected in your visualization.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/mongo",
                "https://en.wikipedia.org/wiki/Regular_expression?oldid=858335070",
                "http://docs.mongodb.org/manual/tutorial/query-documents/",
                "http://docs.mongodb.org/manual/reference/operator/query/gte/",
                "http://docs.mongodb.org/manualindexes",
                "http://docs.mongodb.org/manual/reference/operator/query-comparison/",
                "https://docs.mongodb.com/manual/reference/operator/query/regex/"
            ]
        },
        {
            "slug": "master/launch-charts/index.html",
            "title": "Launch MongoDB Charts \u2014 Charts Manual 0.10",
            "headings": [
                "Launch MongoDB Charts",
                "Prerequisites",
                "Procedure",
                "Log into MongoDB Atlas.",
                "Select your desired Atlas project, or create a new project.",
                "(Optional) Invite people to your Atlas project and shared Charts instance.",
                "(Optional) Create an Atlas cluster.",
                "Launch the MongoDB Charts application.",
                "Add your desired cluster collections as data sources.",
                "Moving Forward"
            ],
            "text": "\nLaunch MongoDB Charts\u00b6\n\nOn this page\n\nPrerequisites\nProcedure\nMoving Forward\n\n\nThe following tutorial guides you through launching the Charts\nSaaS application. Alternatively, you\ncan install and run Charts locally by following the guide\non this page.\n\nPrerequisites\u00b6\nMongoDB Charts is accessible through MongoDB Atlas. You will need a\nMongoDB Atlas user account\nto complete this procedure. To learn more about creating an Atlas\nuser, see the Atlas Getting Started documentation.\nYou will also need an Atlas cluster to visualize data using\nCharts. The steps on this page guide you through creating an\nAtlas cluster.\n\nImportant\nEach instance of the MongoDB Charts application is tied to a single\nAtlas project,\nand can only visualize data from Atlas clusters within the same\nproject.\n\n\nNote\nTo access MongoDB Charts, your Atlas user\nmust have appropriate permissions to read data from the clusters\nin your Atlas project. This means that your Atlas user\ncan have any Project Role\nexcept Project Read Only, which does not grant the appropriate\npermissions.\nWhen you first register an Atlas account, you are granted\nthe Project Owner role on your initial project. For information\non configuring additional users and roles, see\nManage Users in the\nAtlas documentation.\n\n\n\nProcedure\u00b6\n1\nLog into MongoDB Atlas.\u00b6\nTo access the MongoDB Charts application, you must be logged into\nAtlas.\n\n2\nSelect your desired Atlas project, or create a new project.\u00b6\nIf you have an Atlas project\nwith clusters containing data you wish to visualize, select\nthe project from the Context dropdown in the left\nnavigation pane.\nIf you do not have a suitable existing Atlas project, see\nCreate a Project\nin the Atlas documentation for instructions on creating a\nnew project.\n\n3\n(Optional) Invite people to your Atlas project and shared Charts instance.\u00b6\nAll Atlas project users\nwith Project Roles\nother than Project Read Only\nhave access to the Charts instance associated with that\nproject. To add additional members to your Atlas\nproject, see Manage Project Users and Teams\nin the Atlas documentation.\n\n4\n(Optional) Create an Atlas cluster.\u00b6\nThe MongoDB Charts application makes it easy to add collections in your\ncluster as data sources. Data\nsources reference specific collections which you can access in the\nChart Builder to visualize the data in those\ncollections.\n\nNote\nYou can skip this step if you already have an Atlas cluster in\nthe current project.\n\nTo create an Atlas cluster:\n\nIn the left navigation pane, click Clusters.\n\nClick Build a New Cluster.\n\nIn the Create New Cluster page, choose your preferred\ncloud provider and region, cluster tier, and additional settings.\nAs you build your cluster, Atlas displays the associated\ncluster costs at the bottom of the page.\n\nNote\nAtlas provides a Free Tier M0 replica set as well as\npaid M10+ clusters. Free Tier deployments have restrictions\nas compared to paid M10+ deployments, but will work for the\npurposes of this setup and all Charts tutorials\noffered in this documentation. For complete documentation on\nthese restrictions, see\nAtlas M0 (Free Tier), M2, and M5 Limitations.\n\n\nThe default cluster name is Cluster0. If you wish to\nchange your cluster name, do so now, as cluster names cannot be\nchanged once configured.\n\nClick the Create Cluster button to deploy\nyour cluster.\n\n\n\nNote\nFor complete instructions on creating an Atlas cluster and\ndetails on all available configuration options, see\nCreate a Cluster\nin the Atlas documentation.\n\n\n5\nLaunch the MongoDB Charts application.\u00b6\n\nIn Atlas, click Charts in the left navigation\npane.\n\nIf this is the first time you are launching Charts, click\nActivate MongoDB Charts. This provisions a new\nCharts instance in the Atlas project.\nTo navigate back to the Atlas Clusters view,\nclick Atlas at the top-left of the MongoDB Charts\napplication.\n\n\n\n6\nAdd your desired cluster collections as data sources.\u00b6\n\nIn the Charts application, click Data Sources.\n\nClick New Data Source. Charts displays all\nAtlas clusters in the project from which you launched\nCharts.\n\nClick the cluster containing the collection(s) wish to add as\ndata sources, then click\nConnect.\n\nSelect the collections to add as data sources.\nTo add all collections within a database, click the\ncorresponding checkmark for the desired database. Charts\ncreates a separate data source for each collection selected.\n\nClick Set Permissions.\n\nLeave these options as default and click Publish Data\nSource.\n\nNote\nFor detailed instructions on data source permissions, see\nData Source Permissions.\n\n\n\n\n\n\nMoving Forward\u00b6\nNow that you have configured a data source, you are ready to begin\nvisualizing your data. The next steps are to\ncreate a dashboard, and then\nbuild charts to populate your dashboard.\nFor complete walkthroughs of MongoDB Charts and its features, including\ndownloadable data sets to visualize, see the following\nTutorials.\n\n",
            "preview": "The following tutorial guides you through launching the Charts SaaS application. Alternatively, you can install and run Charts locally by following the guide on this page.",
            "tags": "",
            "links": [
                "https://docs.atlas.mongodb.com/create-new-cluster/",
                "https://docs.atlas.mongodb.com/tutorial/manage-users/",
                "https://docs.mongodb.com/charts/master/data-source-permissions/",
                "https://cloud.mongodb.com",
                "https://docs.atlas.mongodb.com/getting-started/",
                "https://docs.atlas.mongodb.com/tutorial/manage-projects/",
                "https://www.mongodb.com/cloud/atlas?jmp=docs",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "https://docs.atlas.mongodb.com/reference/free-shared-limitations/",
                "https://docs.mongodb.com/charts/master/dashboards/",
                "https://docs.mongodb.com/charts/master/tutorials/",
                "https://docs.mongodb.com/charts/master/build-charts/",
                "https://docs.mongodb.com/charts/current/installation/",
                "https://docs.atlas.mongodb.com/reference/user-roles/"
            ]
        },
        {
            "slug": "master/manage-dashboards/index.html",
            "title": "Manage Existing Dashboards \u2014 Charts Manual 0.10",
            "headings": [
                "Manage Existing Dashboards",
                "Viewer Actions",
                "Duplicate a Dashboard",
                "Author Actions",
                "Add a Chart",
                "Edit a Chart",
                "Remove a Chart",
                "Duplicate a Chart",
                "Move a Chart to a Different Dashboard",
                "Resize a Chart",
                "Reposition Charts",
                "Rename a Dashboard and Edit its Description",
                "Owner Actions",
                "Delete a Dashboard",
                "Modify Dashboard Permissions"
            ],
            "text": "\nManage Existing Dashboards\u00b6\n\nOn this page\n\nViewer Actions\nAuthor Actions\nOwner Actions\n\n\nThis page outlines various methods for modifying existing\ndashboards. The sections on this page outline the\nrequired permissions to perform the\nactions.\nTo begin modifying a dashboard, enter the dashboard view by\nclicking the desired dashboard from the Dashboards tab.\n\nNote\nYou can search for dashboards by title by using the search bar\nin the top-right corner of the page.\n\n\nViewer Actions\u00b6\nThe following action can be performed by any user with at least\nViewer permissions on the target\ndashboard, meaning any level of dashboard access is sufficient.\n\nDuplicate a Dashboard\u00b6\nYou can duplicate any dashboard in your Dashboards tab,\neven if you do not have editing permissions.\nTo duplicate a dashboard from the Dashboards tab:\n\nClick the ellipsis (\u2026) button on the desired dashboard.\nSelect Duplicate Dashboard from the pop-up menu.\nIn the Dashboard Details dialog, update the\nTitle and Description fields.\nClick Create to save the duplicated dashboard.\n\n\nNote\nThe user who duplicates a dashboard becomes the owner and only\nuser of the newly duplicated dashboard. To grant other users access,\nupdate the dashboard\u2019s permissions.\n\n\n\n\nAuthor Actions\u00b6\nThe following actions require either the Author or Owner\npermission on the target dashboard.\n\nAdd a Chart\u00b6\nTo add a chart to your dashboard, click the Add Chart\nbutton at the top-right of your dashboard. For detailed instructions on\ncreating charts, see Build Charts.\n\n\nEdit a Chart\u00b6\nTo edit a chart, hover over the desired chart and click the\nEdit button. For details on the available editing options,\nsee Build Charts.\n\n\nRemove a Chart\u00b6\n\nImportant\nRemoving a chart from a dashboard is a permanent operation. There\nis no way to recover a chart once it has been deleted, although\nthe underlying data in the collection the chart was created\nfrom will continue to exist.\n\nTo remove a chart from your dashboard, hover over the desired chart\nand click the ellipsis (\u2026) button at the top-right of the\nchart. Select Delete Chart, then click the\nDelete Chart button in the dialog to confirm the chart\ndeletion.\n\n\nDuplicate a Chart\u00b6\nTo quickly build multiple related charts without starting from scratch\neach time, you can duplicate any chart on a dashboard.\nTo duplicate a chart:\n\nHover over the desired chart on your dashboard and click the\nellipsis (\u2026) button at the top-right of the\nchart.\nSelect Duplicate Chart.\nMake any desired changes, then click the green\nSave and Close button to save the new chart. This saves\nthe chart on the same dashboard as the original copy.\n\n\n\nMove a Chart to a Different Dashboard\u00b6\n\nNote\nThis action requires the author or\nowner role on both the origin and\ndestination dashboards.\n\nTo move a chart to a different dashboard:\n\nNavigate to the dashboard which contains the chart you wish to move.\nHover over the desired chart and click the ellipsis\n(\u2026) button at the top-right of the chart.\nClick Move to.\nIn the Move to dialog, use the dropdown to select the\ntarget dashboard for the chart.\nClick Move Chart.\n\nCharts reloads the current dashboard and the target chart is no\nlonger present.\n\n\nResize a Chart\u00b6\nTo resize a chart, hover over the chart and drag the bottom-right\ncorner until the appearing blue rectangle reaches the deired size.\n\n\n\n\n\nReposition Charts\u00b6\nTo rearrange charts in your dashboard, hover over the chart and drag\nthe top-left corner until the appearing blue rectangle is in the\ndesired location. You can also see how moving the chart will affect the\nposition of other charts in your dashboard, as illustrated in the\nfollowing example:\n\n\n\n\n\nRename a Dashboard and Edit its Description\u00b6\nYou can rename a dashboard and edit its description either from the\nDashboards tab, which shows an overview of all\nyour dashboards, or from within an individual dashboard.\nFrom the Dashboards tab:\n\nEach dashboard has a button with an ellipsis icon (\u2026)\nin the upper right corner. Click the ellipsis button.\nSelect Edit Title / Description from the pop-up menu.\nIn the Dashboard Details dialog, update the\nTitle and Description of your dashboard.\nClick Update to save your changes.\n\nFrom within an individual dashboard:\n\nIn the upper left corner of the desired dashboard view, hover over\nthe dashboard title or description and click the\npencil icon.\nIn the Dashboard Details dialog, update the\nTitle and Description of your dashboard.\nClick Update to save your changes.\n\n\n\n\nOwner Actions\u00b6\nThe following actions require Owner permission on the target dashboard.\n\nDelete a Dashboard\u00b6\n\nImportant\nDeleting a dashboard is a permanent operation. There is no way to\nrecover a dashboard once it has been deleted, although the\nunderlying data in the collections used in the dashboard will\ncontinue to exist.\n\nTo delete a dashboard:\n\nIn the Dashboards tab, locate the dashboard you wish to\ndelete.\nClick the \u2026 button on the top-right of the dashboard.\nClick Delete Dashboard.\nClick Delete in the Delete Dashboard dialog\nto confirm deletion.\n\n\n\nModify Dashboard Permissions\u00b6\nA dashbaord Owner can modify which users can access the dashboard\nand their respective permission levels. For more information, refer to\nthe Dashboard Permissions page.\n\n\n",
            "preview": "This page outlines various methods for modifying existing dashboards. The sections on this page outline the required permissions to perform the actions.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/dashboards/",
                "https://docs.mongodb.com/charts/master/dashboard-permissions/",
                "https://docs.mongodb.com/charts/master/build-charts/"
            ]
        },
        {
            "slug": "master/release-notes/index.html",
            "title": "Release Notes \u2014 Charts Manual 0.10",
            "headings": [
                "Release Notes",
                "MongoDB Charts SaaS"
            ],
            "text": "\nRelease Notes\u00b6\n\nOn this page\n\nMongoDB Charts SaaS\n\n\n\nMongoDB Charts SaaS\u00b6\nReleased Dec 11, 2018\nInitial public release of the MongoDB Charts\nSaaS application.\n\n",
            "preview": "Initial public release of the MongoDB Charts SaaS application.",
            "tags": "",
            "links": []
        },
        {
            "slug": "master/sample-mode/index.html",
            "title": "Sample Mode \u2014 Charts Manual 0.10",
            "headings": [
                "Sample Mode",
                "Use Cases"
            ],
            "text": "\nSample Mode\u00b6\nEnabling Sample Mode in MongoDB Charts restricts the input\ncollection to 1000 randomly selected documents. To toggle\nSample Mode, use the toggle above the\nData Source dropdown. The sample mode setting for a chart\npersists when the chart is rendered on a dashboard, meaning that if\nyou enable sample mode when building a chart, the data rendered in the\ndashboard will also be sampled.\n\nNote\nWhen sampling mode is enabled and you have specified a\nfilter, the sample of 1000\ndocuments is taken before the filter is applied, meaning there may\nbe fewer than 1000 documents used to plot the chart.\n\n\nUse Cases\u00b6\nConsider using sample mode in the following scenarios:\n\nWhen drafting a chart and heavily modifying chart options. In this\nsituation, sampling mode allows the chart to render quickly during\nthe building process. Once you are satisfied with your chart you can\ndisable sample mode to have all documents included in your\nfinal visualization if desired.\nWhen visualizing a large data source and the chosen data is\nsufficiently aggregated (e.g. showing averages of fields) so\nnot all documents are needed to obtain a useful visualization.\nIn this case, leaving sample mode enabled for the rendered dashboard\nallows you to retain a useful chart.\n\n\nNote\nDue to the random nature of sampling, when Sample Mode is enabled,\nit is possible your visualizations will change each time the\nchart is loaded.\n\n\n",
            "preview": "Enabling Sample Mode in MongoDB Charts restricts the input collection to 1000 randomly selected documents. To toggle Sample Mode, use the toggle above the Data Source dropdown. The sample mode setting for a chart persists when the chart is rendered on a dashboard, meaning that if you enable sample mode when building a chart, the data rendered in the dashboard will also be sampled.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/filter-documents/"
            ]
        },
        {
            "slug": "master/sort-limit-data/index.html",
            "title": "Sort and Limit Categorical Data \u2014 Charts Manual 0.10",
            "headings": [
                "Sort and Limit Categorical Data",
                "Sort Data",
                "Limit Data"
            ],
            "text": "\nSort and Limit Categorical Data\u00b6\n\nOn this page\n\nSort Data\nLimit Data\n\n\nWhen adding a string field to a non-series category\nencoding channel, Charts\nprovides the ability to sort and\nlimit results of your data to achieve\nthe best visualization.\n\nSort Data\u00b6\nBy default, Charts sorts the data based on the\ncategory field in ascending order. This displays the values\nof the category field in alphabetical order.\nAlternatively, you can choose to sort the data by the\naggregated value of the visualization. To toggle between\nascending or descending sort order, click the a-z button to the\nright of the Sort By dropdown.\n\n\nLimit Data\u00b6\nYou can apply a limit to the category encoding channel\nto only include a specified number of categories in your visualization.\nThe categories included are the first matching categories based on\nthe sort order specified. Limiting data can\nbe useful when visualizing data with so many categories it becomes\ndifficult to create a meaningful chart.\n\nExample\nThe following chart shows the average\nIMDb rating of movies from a\nparticular country:\n\n\n\nThe dataset contains movies from many different countries, but it\nwould be most interesting to see which countries produce the\nhighest-rated movies. We can accomplish this by applying a limit to\nonly show countries with the 10 highest average ratings for movies.\nSwitch the Limit Results toggle to On and leave the\nShow input at the default value of 10. The chart is now\nmuch easier to understand, and we have a clear view of the countries\nwith the highest-rated movies:\n\n\n\n\n\n",
            "preview": "When adding a string field to a non-series category encoding channel, Charts provides the ability to sort and limit results of your data to achieve the best visualization.",
            "tags": "",
            "links": [
                "https://www.imdb.com/",
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/third-party-licenses/index.html",
            "title": "Third-Party Licenses \u2014 Charts Manual 0.10",
            "headings": [
                "Third-Party Licenses"
            ],
            "text": "\nThird-Party Licenses\u00b6\nMongoDB Charts uses third-party libraries or other resources that may\nbe distributed under licenses different than the MongoDB software.\nThe following lists the third-party licenses as used in Charts.\nIn the event that we have accidentally failed to list a required notice,\nyou can bring it to our attention by emailing legal.\n\n\n\n\n\n\n\n\nLibrary\nVersion\nLicense Type\nPublisher\n\n\n\n@types/json-stable-stringify\n1.0.32\nMIT\n\u00a0\n\n@types/node\n10.0.3\nMIT\n\u00a0\n\nBase64\n1.0.1\n(Apache-2.0 OR WTFPL)\nDavid Chambers (dc@davidchambers.me)\n\nJSONStream\n1.3.2\n(MIT OR Apache-2.0)\nDominic Tarr (dominic.tarr@gmail.com)\n\nabbrev\n1.1.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\najv\n4.11.8\nMIT\nEvgeny Poberezkin\n\nampersand-class-extend\n2.0.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-collection-lodash-mixin\n4.0.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-collection\n2.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-events\n2.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-state\n5.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-version\n1.0.2\nMIT\nPhilip Roberts (phil@latentflip.com)\n\nansi-regex\n2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nansi-regex\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nansi-styles\n3.2.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\naproba\n1.2.0\nISC\nRebecca Turner (me@re-becca.org)\n\nare-we-there-yet\n1.1.4\nISC\nRebecca Turner\n\nargparse\n1.0.10\nMIT\n\u00a0\n\narray-next\n0.0.1\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\narray-uniq\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nasap\n2.0.6\nMIT\n\u00a0\n\nasn1\n0.2.3\nMIT\nMark Cavage (mcavage@gmail.com)\n\nassert-plus\n0.2.0\nMIT\nMark Cavage (mcavage@gmail.com)\n\nassert-plus\n1.0.0\nMIT\nMark Cavage (mcavage@gmail.com)\n\nasync\n1.5.2\nMIT\nCaolan McMahon\n\nasync\n2.6.0\nMIT\nCaolan McMahon\n\nasynckit\n0.4.0\nMIT\nAlex Indigo (iam@alexindigo.com)\n\naws-sign2\n0.6.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\naws4\n1.7.0\nMIT\nMichael Hart (michael.hart.au@gmail.com)\n\nbabel-runtime\n6.26.0\nMIT\nSebastian McKenzie (sebmck@gmail.com)\n\nbackoff\n2.5.0\nMIT\nMathieu Turcotte (turcotte.mat@gmail.com)\n\nbalanced-match\n1.0.0\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nbcrypt-pbkdf\n1.0.1\nBSD-3-Clause\n\u00a0\n\nblock-stream\n0.0.9\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nboolbase\n1.0.0\nISC\nFelix Boehm (me@feedic.com)\n\nboom\n2.10.1\nBSD-3-Clause\n\u00a0\n\nbootstrap\n3.3.5\nMIT\nTwitter, Inc.\n\nbrace-expansion\n1.1.11\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nbson\n1.0.6\nApache-2.0\nChristian Amor Kvalheim (christkv@gmail.com)\n\nbson\n2.0.6\nApache-2.0\nChristian Amor Kvalheim (christkv@gmail.com)\n\nbugsnag-js\n3.3.3\nMIT\n\u00a0\n\nbuiltin-modules\n1.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncaller-id\n0.1.0\nMIT\nPixels & Bytes (pxandbytes@gmail.com)\n\ncamelcase\n2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncamelcase\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncamelcase\n4.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncanvas-prebuilt\n1.6.0\nMIT\nCaleb Hearon (crh0872@gmail.com)\n\ncaseless\n0.12.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nchalk\n2.4.1\nMIT\n\u00a0\n\ncheerio\n1.0.0-rc.2\nMIT\nMatt Mueller (mattmuelle@gmail.com)\n\nclassnames\n2.2.5\nMIT\nJed Watson\n\ncli-color\n0.3.2\nMIT*\nMariusz Nowak (medyk@medikoo.com)\n\ncli-table\n0.3.1\nMIT*\nGuillermo Rauch (guillermo@learnboost.com)\n\ncliui\n3.2.0\nISC\nBen Coe (ben@npmjs.com)\n\ncliui\n4.1.0\nISC\nBen Coe (ben@npmjs.com)\n\nclui\n0.3.6\nMIT\nNathan Peck (nathan@storydesk.com)\n\nco\n4.6.0\nMIT\n\u00a0\n\ncode-point-at\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncodemirror-mongodb\n0.10.3\nApache-2.0\n\u00a0\n\ncodemirror\n5.37.0\nMIT\n\u00a0\n\ncolor-convert\n1.9.1\nMIT\nHeather Arthur (fayearthur@gmail.com)\n\ncolor-name\n1.1.3\nMIT\nDY (dfcreative@gmail.com)\n\ncolors\n0.5.1\nCustom: http://i.imgur.com/goJdO.png\nMarak Squires\n\ncolors\n1.0.3\nMIT\nMarak Squires\n\ncombined-stream\n1.0.6\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\ncommander\n2.15.1\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\nconcat-map\n0.0.1\nMIT\nJames Halliday (mail@substack.net)\n\nconsole-control-strings\n1.1.0\nISC\nRebecca Turner (me@re-becca.org)\n\ncontext-eval\n0.1.0\nMIT\namasad\n\ncore-js\n1.2.7\nMIT\n\u00a0\n\ncore-js\n2.5.5\nMIT\n\u00a0\n\ncore-util-is\n1.0.2\nMIT\nIsaac Z. Schlueter (i@izs.me)\n\ncreate-react-class\n15.6.3\nMIT\n\u00a0\n\ncross-spawn\n5.1.0\nMIT\nIndigoUnited (hello@indigounited.com)\n\ncryptiles\n2.0.5\nBSD-3-Clause\n\u00a0\n\ncss-select\n1.2.0\nBSD*\nFelix Boehm (me@feedic.com)\n\ncss-what\n2.1.0\nBSD*\nFelix B\u00f6hm (me@feedic.com)\n\nd3-array\n1.2.1\nBSD-3-Clause\nMike Bostock\n\nd3-collection\n1.0.4\nBSD-3-Clause\nMike Bostock\n\nd3-color\n1.1.0\nBSD-3-Clause\nMike Bostock\n\nd3-contour\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-dispatch\n1.0.3\nBSD-3-Clause\nMike Bostock\n\nd3-dsv\n1.0.8\nBSD-3-Clause\nMike Bostock\n\nd3-force\n1.1.0\nBSD-3-Clause\nMike Bostock\n\nd3-format\n1.2.2\nBSD-3-Clause\nMike Bostock\n\nd3-geo\n1.10.0\nBSD-3-Clause\nMike Bostock\n\nd3-hierarchy\n1.1.6\nBSD-3-Clause\nMike Bostock\n\nd3-interpolate\n1.1.6\nBSD-3-Clause\nMike Bostock\n\nd3-path\n1.0.5\nBSD-3-Clause\nMike Bostock\n\nd3-quadtree\n1.0.3\nBSD-3-Clause\nMike Bostock\n\nd3-request\n1.0.6\nBSD-3-Clause\nMike Bostock\n\nd3-scale-chromatic\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-scale\n2.0.0\nBSD-3-Clause\nMike Bostock\n\nd3-shape\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-time-format\n2.1.1\nBSD-3-Clause\nMike Bostock\n\nd3-time\n1.0.8\nBSD-3-Clause\nMike Bostock\n\nd3-timer\n1.0.7\nBSD-3-Clause\nMike Bostock\n\nd3-voronoi\n1.1.2\nBSD-3-Clause\nMike Bostock\n\nd\n0.1.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nd\n1.0.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\ndashdash\n1.14.1\nMIT\nTrent Mick (trentm@gmail.com)\n\ndebug\n2.2.3\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\ndebug\n2.6.9\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\ndecamelize\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ndeep-extend\n0.5.1\nMIT\nViacheslav Lotsmanov (lotsmanov89@gmail.com)\n\ndefine-properties\n1.1.2\nMIT\nJordan Harband\n\ndelayed-stream\n1.0.0\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\ndelegates\n1.0.0\nMIT\n\u00a0\n\ndetect-browser\n1.12.0\nMIT\nDamon Oehlman (damon.oehlman@gmail.com)\n\ndetect-libc\n1.0.3\nApache-2.0\nLovell Fuller (npm@lovell.info)\n\ndiscontinuous-range\n1.0.0\nMIT\nDavid Tudury (david.tudury@gmail.com)\n\ndisposables\n1.0.2\nApache-2.0\nCloud Programmability Team\n\ndnd-core\n2.6.0\nBSD-3-Clause\n\u00a0\n\ndom-helpers\n3.3.1\nMIT\nJason Quense (monastic.panic@gmail.com)\n\ndom-serializer\n0.1.0\nMIT\nFelix Boehm (me@feedic.com)\n\ndom-walk\n0.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\ndomelementtype\n1.1.3\nBSD*\nFelix Boehm (me@feedic.com)\n\ndomelementtype\n1.3.0\nBSD*\nFelix Boehm (me@feedic.com)\n\ndomhandler\n2.4.1\nBSD-2-Clause\nFelix Boehm (me@feedic.com)\n\ndomutils\n1.5.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nduplexer\n0.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\necc-jsbn\n0.1.1\nMIT\nJeremie Miller (jeremie@jabber.org)\n\nencoding\n0.1.12\nMIT\nAndris Reinman\n\nentities\n1.1.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nenzyme-adapter-react-15\n1.0.5\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nenzyme-adapter-utils\n1.3.0\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nenzyme\n3.3.0\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nerrno\n0.1.7\nMIT\n\u00a0\n\nerror-ex\n1.3.1\nMIT\n\u00a0\n\nes-abstract\n1.11.0\nMIT\nJordan Harband (ljharb@gmail.com)\n\nes-to-primitive\n1.1.1\nMIT\nJordan Harband\n\nes5-ext\n0.10.42\nISC\nMariusz Nowak (medyk@medikoo.com)\n\nes6-iterator\n0.1.3\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-iterator\n2.0.3\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-symbol\n2.0.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-symbol\n3.1.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-weak-map\n0.1.4\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nescape-string-regexp\n1.0.5\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nesprima\n4.0.0\nBSD-2-Clause\nAriya Hidayat (ariya.hidayat@gmail.com)\n\nevent-emitter\n0.3.5\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nevent-stream\n3.3.4\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nexeca\n0.7.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nextend\n3.0.1\nMIT\nStefan Thomas (justmoon@members.fsf.org)\n\nextsprintf\n1.3.0\nMIT\n\u00a0\n\nfbjs\n0.8.16\nMIT\n\u00a0\n\nfetch-everywhere\n1.0.5\nMIT\nLucas Feliciano (mail@lucasfeliciano.com)\n\nfigures\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfind-root\n0.1.2\nMIT\nAgileMD (hello@agilemd.com)\n\nfind-up\n1.1.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfind-up\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfont-awesome\n4.7.0\n(OFL-1.1 AND MIT)\nDave Gandy (dave@fontawesome.io)\n\nfor-each\n0.3.2\nMIT\nRaynos (raynos2@gmail.com)\n\nforeach\n2.0.5\nMIT\nManuel Stofer (manuel@takimata.ch)\n\nforever-agent\n0.6.1\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nform-data\n2.1.4\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\nfrom\n0.1.7\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nfs-plus\n3.0.2\nMIT\n\u00a0\n\nfs.realpath\n1.0.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfstream-ignore\n1.0.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfstream\n1.0.11\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfunction-bind\n1.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\nfunction.prototype.name\n1.1.0\nMIT\nJordan Harband\n\nfuzzaldrin-plus\n0.4.1\nMIT\n\u00a0\n\ngauge\n2.7.4\nISC\nRebecca Turner (me@re-becca.org)\n\nget-caller-file\n1.0.2\nISC\nStefan Penner\n\nget-stream\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ngetpass\n0.1.7\nMIT\nAlex Wilson (alex.wilson@joyent.com)\n\nglob\n7.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nglobal\n4.3.2\nMIT\nRaynos (raynos2@gmail.com)\n\ngraceful-fs\n4.1.11\nISC\n\u00a0\n\nhadron-react-buttons\n1.13.2\nApache-2.0\nDurran Jordan (durran@gmail.com)\n\nhadron-react-components\n1.14.1\nApache-2.0\nDurran Jordan (durran@gmail.com)\n\nhar-schema\n1.0.5\nISC\nAhmad Nassri (ahmad@ahmadnassri.com)\n\nhar-validator\n4.2.1\nISC\nAhmad Nassri (ahmad@ahmadnassri.com)\n\nhas-flag\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nhas-symbols\n1.0.0\nMIT\nJordan Harband (ljharb@gmail.com)\n\nhas-unicode\n2.0.1\nISC\nRebecca Turner (me@re-becca.org)\n\nhas\n1.0.1\nMIT\nThiago de Arruda (tpadilha84@gmail.com)\n\nhawk\n3.1.3\nBSD-3-Clause\nEran Hammer (eran@hammer.io)\n\nhistory\n4.7.2\nMIT\nMichael Jackson\n\nhoek\n2.16.3\nBSD-3-Clause\n\u00a0\n\nhoist-non-react-statics\n2.5.0\nBSD-3-Clause\nMichael Ridgway (mcridgway@gmail.com)\n\nhosted-git-info\n2.6.0\nISC\nRebecca Turner (me@re-becca.org)\n\nhtmlparser2\n3.9.2\nMIT\nFelix Boehm (me@feedic.com)\n\nhttp-signature\n1.1.1\nMIT\nJoyent, Inc\n\niconv-lite\n0.4.21\nMIT\nAlexander Shtuchkin (ashtuchkin@gmail.com)\n\nimage-size\n0.5.5\nMIT\nnetroy (aditya@netroy.in)\n\ninflight\n1.0.6\nISC\nIsaac Z. Schlueter (i@izs.me)\n\ninherits\n2.0.3\nISC\n\u00a0\n\nini\n1.3.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\ninvariant\n2.2.4\nMIT\nAndres Suarez (zertosh@gmail.com)\n\ninvert-kv\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-arrayish\n0.2.1\nMIT\nQix\n\nis-boolean-object\n1.0.0\nMIT\nJordan Harband\n\nis-builtin-module\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-callable\n1.1.3\nMIT\nJordan Harband (ljharb@gmail.com)\n\nis-date-object\n1.0.1\nMIT\nJordan Harband\n\nis-electron-renderer\n2.0.1\nMIT\nJP Richardson\n\nis-fullwidth-code-point\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-fullwidth-code-point\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-function\n1.0.1\nMIT\nStephen Sugden (me@stephensugden.com)\n\nis-json\n2.0.1\nISC\n@joaquimserafim\n\nis-number-object\n1.0.3\nMIT\nJordan Harband\n\nis-regex\n1.0.4\nMIT\nJordan Harband\n\nis-stream\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-string\n1.0.4\nMIT\nJordan Harband\n\nis-subset\n0.1.1\nMIT\nTomek Wiszniewski (t.wiszniewski@gmail.com)\n\nis-symbol\n1.0.1\nMIT\nJordan Harband\n\nis-typedarray\n1.0.0\nMIT\nHugh Kennedy (hughskennedy@gmail.com)\n\nis-utf8\n0.2.1\nMIT\nwayfind\n\nisarray\n0.0.1\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nisarray\n1.0.0\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nisexe\n2.0.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nisnumber\n1.0.0\nMIT\nBryce B. Baril\n\nisomorphic-fetch\n2.2.1\nMIT\nMatt Andrews (matt@mattandre.ws)\n\nisstream\n0.1.2\nMIT\nRod Vagg (rod@vagg.org)\n\njavascript-stringify\n1.6.0\nMIT\nBlake Embrey (hello@blakeembrey.com)\n\njs-tokens\n3.0.2\nMIT\nSimon Lydell\n\njs-yaml\n3.11.0\nMIT\nVladimir Zapparov (dervus.grim@gmail.com)\n\njsbn\n0.1.1\nMIT\nTom Wu\n\njson-schema\n0.2.3\nAFLv2.1,BSD\nKris Zyp\n\njson-stable-stringify\n1.0.1\nMIT\nJames Halliday (mail@substack.net)\n\njson-stringify-safe\n5.0.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\njsonify\n0.0.0\nPublic Domain\nDouglas Crockford\n\njsonparse\n1.3.1\nMIT\nTim Caswell (tim@creationix.com)\n\njsprim\n1.4.1\nMIT\n\u00a0\n\njwt-decode\n2.2.0\nMIT\nJose F. Romaniello (jfromaniello@gmail.com)\n\nkey-tree-store\n1.3.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nkeycode\n2.2.0\nMIT\nTim Oxley (secoif@gmail.com)\n\nlcid\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nless-cache\n1.1.0\nMIT\n\u00a0\n\nless\n2.7.3\nApache-2.0\nAlexis Sellier (self@cloudhead.net)\n\nload-json-file\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nlocate-path\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nlodash-compat\n3.10.2\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash-es\n4.17.10\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash-fp\n0.10.4\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.assign\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.chunk\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.debounce\n4.0.8\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.defaults\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.fill\n3.4.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.flattendeep\n4.4.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.get\n4.4.2\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isarray\n4.0.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isequal\n4.5.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isfunction\n3.0.9\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isnumber\n3.0.3\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isplainobject\n4.0.6\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isstring\n4.0.1\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.keys\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.map\n4.6.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.omit\n4.5.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.transform\n4.6.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash\n3.10.1\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash\n4.17.10\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nloose-envify\n1.3.1\nMIT\nAndres Suarez (zertosh@gmail.com)\n\nlru-cache\n4.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nlru-queue\n0.1.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nmacos-release\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmap-stream\n0.1.0\nCustom: https://github.com/dominictarr/event-stream\nDominic Tarr (dominic.tarr@gmail.com)\n\nmem\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmemoizee\n0.3.10\nMIT\nMariusz Nowak (medikoo@medikoo.com)\n\nmime-db\n1.33.0\nMIT\n\u00a0\n\nmime-types\n2.1.18\nMIT\n\u00a0\n\nmime\n1.6.0\nMIT\nRobert Kieffer (robert@broofa.com)\n\nmimic-fn\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmin-document\n2.19.0\nMIT\nRaynos (raynos2@gmail.com)\n\nminimatch\n3.0.4\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nminimist\n0.0.8\nMIT\nJames Halliday (mail@substack.net)\n\nminimist\n1.2.0\nMIT\nJames Halliday (mail@substack.net)\n\nmkdirp\n0.5.1\nMIT\nJames Halliday (mail@substack.net)\n\nmoment\n2.22.1\nMIT\nIskren Ivov Chernev (iskren.chernev@gmail.com)\n\nmongodb-collection-sample\n3.0.0\nApache-2.0\n\u00a0\n\nmongodb-core\n3.0.7\nApache-2.0\nChristian Kvalheim\n\nmongodb-extended-json\n1.10.0\nApache-2.0\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-extjson\n2.1.3\nApache-2.0\nChristian Kvalheim\n\nmongodb-js-metrics\n4.1.0\nApache-2.0\n\u00a0\n\nmongodb-language-model\n1.2.0\nApache-2.0\nThomas Rueckstiess (thomas@mongodb.com)\n\nmongodb-ns\n2.0.0\nMIT\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-query-parser\n1.0.2\nApache-2.0\n\u00a0\n\nmongodb-redact\n0.1.0\nApache-2.0\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-schema\n8.0.1\nApache-2.0\nThomas Rueckstiess (thomas@rueckstiess.net)\n\nmongodb-stitch\n3.1.2\nApache-2.0\n\u00a0\n\nmongodb\n3.0.7\nApache-2.0\nChristian Kvalheim\n\nms\n0.7.1, 2.0.0\nMIT\n\u00a0\n\nnearley\n2.13.0\nMIT\nHardmath123\n\nnext-tick\n0.2.2\nMIT\nMariusz Nowak (medykk@medikoo.com)\n\nnext-tick\n1.0.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nnode-fetch\n1.7.3\nMIT\nDavid Frank\n\nnode-pre-gyp\n0.6.39\nBSD-3-Clause\nDane Springmeyer (dane@mapbox.com)\n\nnomnom\n1.6.2\nMIT*\nHeather Arthur (fayearthur@gmail.com)\n\nnopt\n4.0.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nnormalize-package-data\n2.4.0\nBSD-2-Clause\nMeryn Stol (merynstol@gmail.com)\n\nnormalize.css\n7.0.0\nMIT\n\u00a0\n\nnormalizr\n3.2.4\nMIT\nPaul Armstrong\n\nnpm-run-path\n2.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nnpmlog\n4.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nnth-check\n1.0.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nnumber-is-nan\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nnumeral\n1.5.6\nMIT\nAdam Draper (adamwdraper@gmail.com)\n\nnumeral\n2.0.6\nMIT\nAdam Draper (adamwdraper@gmail.com)\n\noauth-sign\n0.8.2\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nobject-assign\n4.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nobject-inspect\n1.6.0\nMIT\nJames Halliday (mail@substack.net)\n\nobject-is\n1.0.1\nMIT\nJordan Harband\n\nobject-keys\n1.0.11\nMIT\nJordan Harband (ljharb@gmail.com)\n\nobject.assign\n4.1.0\nMIT\nJordan Harband\n\nobject.entries\n1.0.4\nMIT\nJordan Harband\n\nobject.values\n1.0.4\nMIT\nJordan Harband\n\nonce\n1.4.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nos-homedir\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-locale\n1.4.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-locale\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-name\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-tmpdir\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nosenv\n0.1.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\np-finally\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-limit\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-locate\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-try\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nparse-headers\n2.0.1\nMIT\nDavid Bj\u00f6rklund (david.bjorklund@gmail.com)\n\nparse-json\n2.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nparse5\n3.0.3\nMIT\nIvan Nikulin (ifaaan@gmail.com)\n\npath-exists\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-exists\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-is-absolute\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-key\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-to-regexp\n1.7.0\nMIT\n\u00a0\n\npath-type\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npause-stream\n0.0.11\nMIT,Apache2\nDominic Tarr (dominic.tarr@gmail.com)\n\npegjs\n0.10.0\nMIT\nDavid Majda (david@majda.cz)\n\nperformance-now\n0.2.0, 2.1.0\nMIT\nBraveg1rl (braveg1rl@outlook.com)\n\npify\n2.3.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npinkie-promise\n2.0.1\nMIT\nVsevolod Strukchinsky (floatdrop@gmail.com)\n\npinkie\n2.0.4\nMIT\nVsevolod Strukchinsky (floatdrop@gmail.com)\n\nplatform\n1.3.5\nMIT\nBenjamin Tan (demoneaux@gmail.com)\n\npluralize\n7.0.0\nMIT\nBlake Embrey (hello@blakeembrey.com)\n\nprecond\n0.2.3\nMIT*\nMathieu Turcotte (turcotte.mat@gmail.com)\n\nprocess-nextick-args\n2.0.0\nMIT\n\u00a0\n\nprocess\n0.5.2\nMIT*\nRoman Shtylman (shtylman@gmail.com)\n\nprogress\n1.1.8\nMIT*\nTJ Holowaychuk (tj@vision-media.ca)\n\npromise\n7.3.1\nMIT\nForbesLindesay\n\nprop-types-extra\n1.1.0\nMIT\nMatthew L Smith (mtscout6@gmail.com)\n\nprop-types\n15.6.1\nMIT\n\u00a0\n\nprr\n1.0.1\nMIT\nRod Vagg (rod@vagg.org)\n\npseudomap\n1.0.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\npunycode\n1.4.1\nMIT\nMathias Bynens\n\nqs\n6.4.0\nBSD-3-Clause\n\u00a0\n\nquery-string\n4.3.4\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nraf\n3.4.0\nMIT\nChris Dickinson (chris@neversaw.us)\n\nrailroad-diagrams\n1.0.0\nCC0-1.0\nTab Atkins Jr.\n\nrandexp\n0.4.6\nMIT\nRoly Fentanes\n\nrandomstring\n1.1.5\nMIT\nElias Klughammer (elias@klughammer.com)\n\nrc\n1.2.7\n(BSD-2-Clause OR MIT OR Apache-2.0)\nDominic Tarr (dominic.tarr@gmail.com)\n\nreact-bootstrap\n0.31.0\nMIT\nStephen J. Collings (stevoland@gmail.com)\n\nreact-bootstrap\n0.31.5\nMIT\nStephen J. Collings (stevoland@gmail.com)\n\nreact-codemirror\n1.0.0\nMIT\nJed Watson\n\nreact-dnd-html5-backend\n2.6.0\nBSD-3-Clause\n\u00a0\n\nreact-dnd\n2.6.0\nBSD-3-Clause\n\u00a0\n\nreact-dom\n15.6.2\nMIT\n\u00a0\n\nreact-draggable\n3.0.5\nMIT\nMatt Zabriskie\n\nreact-fontawesome\n1.6.1\nMIT\nDana Woodman (dana@danawoodman.com)\n\nreact-grid-layout\n0.15.3\nMIT\nSamuel Reed (samuel.trace.reed@gmail.com)\n\nreact-input-autosize\n2.2.1\nMIT\nJed Watson\n\nreact-is\n16.3.2\nMIT\n\u00a0\n\nreact-overlays\n0.7.4\nMIT\nJason Quense (monastic.panic@gmail.com)\n\nreact-prop-types\n0.4.0\nMIT\nMatthew L Smith (mtscout6@gmail.com)\n\nreact-redux\n5.0.7\nMIT\nDan Abramov (dan.abramov@me.com)\n\nreact-resizable\n1.7.5\nMIT\nSamuel Reed (samuel.trace.reed@gmail.com)\n\nreact-router-dom\n4.2.2\nMIT\n\u00a0\n\nreact-router-redux\n5.0.0-alpha.9\nMIT\n\u00a0\n\nreact-router\n4.2.0\nMIT\n\u00a0\n\nreact-select\n1.2.1\nMIT\nJed Watson\n\nreact-test-renderer\n15.6.2\nMIT\n\u00a0\n\nreact-tooltip\n3.5.1\nMIT\nwwayne\n\nreact-vega-lite\n1.1.3\nApache-2.0\nKrist Wongsuphasawat (krist.wongz@gmail.com)\n\nreact-vega\n3.1.2\nApache-2.0\nKrist Wongsuphasawat (krist.wongz@gmail.com)\n\nreact\n15.6.2\nMIT\n\u00a0\n\nread-pkg-up\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nread-pkg\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nreadable-stream\n1.0.34, 2.3.6\nMIT\n\u00a0\n\nreduce-reducers\n0.1.5\nMIT\nAndrew Clark (acdlite@me.com)\n\nredux-actions\n2.3.2\nMIT\nAndrew Clark (acdlite@me.com)\n\nredux-saga-routines\n2.2.3\nMIT\nAlex Fitiskin (alexfitiskin@gmail.com)\n\nredux-saga\n0.16.0\nMIT\nYassine ELOUAFI (yelouafi@gmail.com)\n\nredux\n3.7.2\nMIT\n\u00a0\n\nregenerator-runtime\n0.11.1\nMIT\nBen Newman (bn@cs.stanford.edu)\n\nrequest\n2.81.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nrequire-directory\n2.1.1\nMIT\nTroy Goode (troygoode@gmail.com)\n\nrequire-main-filename\n1.0.1\nISC\nBen Coe (ben@npmjs.com)\n\nrequire_optional\n1.0.1\nApache-2.0\nChristian Kvalheim Amor\n\nreselect\n3.0.1\nMIT\n\u00a0\n\nreservoir\n0.1.2\nMIT\nJon-Carlos Rivera (jon.carlos.rivera@gmail.com)\n\nresolve-from\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nresolve-pathname\n2.2.0\nMIT\nMichael Jackson\n\nret\n0.1.15\nMIT\nRoly Fentanes\n\nrimraf\n2.6.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nrst-selector-parser\n2.2.3\nBSD-3-Clause\nGajus Kuizinas (gajus@gajus.com)\n\nrw\n1.3.3\nBSD-3-Clause\nMike Bostock\n\nsafe-buffer\n5.1.2\nMIT\nFeross Aboukhadijeh (feross@feross.org)\n\nsafer-buffer\n2.1.2\nMIT\nNikita Skovoroda (chalkerx@gmail.com)\n\nsemver\n5.5.0\nISC\n\u00a0\n\nset-blocking\n2.0.0\nISC\nBen Coe (ben@npmjs.com)\n\nsetimmediate\n1.0.5\nMIT\nYuzuJS\n\nshebang-command\n1.2.0\nMIT\nKevin Martensson (kevinmartensson@gmail.com)\n\nshebang-loader\n0.0.1\nMIT\njavascriptismagic@gmail.com\n\nshebang-regex\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsignal-exit\n3.0.2\nISC\nBen Coe (ben@npmjs.com)\n\nsimple-node-logger\n0.93.37\nApache-2.0\ndarryl.west@raincitysoftware.com\n\nsingleton-js\n1.0.0\nMIT\nRyan Beard\n\nsntp\n1.0.9\nBSD\nEran Hammer (eran@hammer.io)\n\nsource-map\n0.5.7\nBSD-3-Clause\nNick Fitzgerald (nfitzgerald@mozilla.com)\n\nspdx-correct\n3.0.0\nApache-2.0\nKyle E. Mitchell (kyle@kemitchell.com)\n\nspdx-exceptions\n2.1.0\nCC-BY-3.0\nThe Linux Foundation\n\nspdx-expression-parse\n3.0.0\nMIT\nKyle E. Mitchell (kyle@kemitchell.com)\n\nspdx-license-ids\n3.0.0\nCC0-1.0\nShinnosuke Watanabe\n\nsplit\n0.3.3\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nsprintf-js\n1.0.3\nBSD-3-Clause\nAlexandru Marasteanu (hello@alexei.ro)\n\nsshpk\n1.14.1\nMIT\nJoyent, Inc\n\nstack-trace\n0.0.10\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\nstats-lite\n2.1.1\nMIT\nBryce B. Baril\n\nstream-combiner\n0.0.4\nMIT\n\u2018Dominic Tarr\u2019 (dominic.tarr@gmail.com)\n\nstrict-uri-encode\n1.1.0\nMIT\nKevin M\u00e5rtensson (kevinmartensson@gmail.com)\n\nstring-width\n1.0.2, 2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstring_decoder\n0.10.31, 1.1.1\nMIT\nRod Vagg (r@va.gg)\n\nstringstream\n0.0.5\nMIT\nMichael Hart (michael.hart.au@gmail.com)\n\nstrip-ansi\n3.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-ansi\n4.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-bom\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-eof\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-json-comments\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsupports-color\n5.4.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsymbol-observable\n1.2.0\nMIT\nBen Lesh (ben@benlesh.com)\n\ntar-pack\n3.4.1\nBSD-2-Clause\n\u00a0\n\ntar\n2.2.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nthrough2\n0.6.5\nMIT\nRod Vagg (r@va.gg)\n\nthrough\n2.3.8\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\ntimers-ext\n0.1.5\nISC\nMariusz Nowak (medyk@medikoo.com)\n\ntopojson-client\n3.0.0\nBSD-3-Clause\nMike Bostock\n\ntough-cookie\n2.3.4\nBSD-3-Clause\nJeremy Stashewsky (jstashewsky@salesforce.com)\n\ntrim\n0.0.1\nMIT*\nTJ Holowaychuk (tj@vision-media.ca)\n\ntslib\n1.9.0\nApache-2.0\nMicrosoft Corp.\n\ntunnel-agent\n0.6.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\ntweetnacl\n0.14.5\nUnlicense\nTweetNaCl-js contributors\n\nua-parser-js\n0.7.18\n(GPL-2.0 OR MIT)\nFaisal Salman (f@faisalman.com)\n\nuid-number\n0.0.6\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nuncontrollable\n4.1.0\nMIT\nJason Quense (monastic.panic@gmail.com)\n\nunderscore-plus\n1.6.6\nMIT\n\u00a0\n\nunderscore\n1.4.4, 1.6.0\nMIT*\nJeremy Ashkenas (jeremy@documentcloud.org)\n\nuniversal-analytics\n0.4.16\nMIT\nJ\u00f6rg Tillmann (joerg@peaksandpies.com)\n\nutil-deprecate\n1.0.2\nMIT\nNathan Rajlich (nathan@tootallnate.net)\n\nuuid\n3.2.1\nMIT\n\u00a0\n\nvalidate-npm-package-license\n3.0.3\nApache-2.0\nKyle E. Mitchell (kyle@kemitchell.com)\n\nvalue-equal\n0.4.0\nMIT\nMichael Jackson\n\nvega-canvas\n1.0.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-crossfilter\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-dataflow\n3.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-encode\n2.0.8\nBSD-3-Clause\nJeffrey Heer\n\nvega-event-selector\n2.0.0\nBSD-3-Clause\nUW Interactive Data Lab\n\nvega-expression\n2.3.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-force\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-geo\n2.2.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-hierarchy\n2.1.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-lite\n2.4.1\nBSD-3-Clause\nJeffrey Heer, Dominik Moritz, Kanit \u201cHam\u201d Wongsuphasawat\n\nvega-loader\n2.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-parser\n2.7.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-projection\n1.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-runtime\n2.0.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-scale\n2.1.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-scenegraph\n2.5.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-statistics\n1.2.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-transforms\n1.3.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-typings\n0.2.16\nBSD*\nDominik Moritz (domoritz@gmail.com)\n\nvega-util\n1.7.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-view-transforms\n1.2.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-view\n2.3.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-voronoi\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-wordcloud\n2.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega\n3.3.1\nBSD-3-Clause\nUW Interactive Data Lab\n\nverror\n1.10.0\nMIT\n\u00a0\n\nwalkdir\n0.0.11\nMIT\nRyan Day (soldair@gmail.com)\n\nwarning\n3.0.0\nBSD-3-Clause\nBerkeley Martinez (berkeley@r3dm.com)\n\nwhatwg-fetch\n2.0.4\nMIT\n\u00a0\n\nwhich-module\n1.0.0\nISC\nnexdrew\n\nwhich-module\n2.0.0\nISC\nnexdrew\n\nwhich\n1.3.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nwide-align\n1.1.2\nISC\nRebecca Turner (me@re-becca.org)\n\nwin-release\n1.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nwindow-size\n0.1.4\nMIT\nJon Schlinkert\n\nwindow-size\n0.2.0\nMIT\nJon Schlinkert\n\nwrap-ansi\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nwrappy\n1.0.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nxhr\n2.4.1\nMIT\nRaynos (raynos2@gmail.com)\n\nxmlhttprequest\n1.8.0\nMIT\nDan DeFelippi\n\nxtend\n4.0.1\nMIT\nRaynos (raynos2@gmail.com)\n\ny18n\n3.2.1\nISC\nBen Coe (ben@npmjs.com)\n\nyallist\n2.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nyargs-parser\n2.4.1\nISC\nBen Coe (ben@npmjs.com)\n\nyargs-parser\n9.0.2\nISC\nBen Coe (ben@npmjs.com)\n\nyargs (yargs)\n4.8.1, 11.0.0, 11.1.0\nMIT\n\u00a0\n\nyargs (bcoe)\n3.32.0\nMIT\nAlex Ford (Alex.Ford@CodeTunnel.com)\n\n\n\n",
            "preview": "MongoDB Charts uses third-party libraries or other resources that may be distributed under licenses different than the MongoDB software.",
            "tags": "",
            "links": [
                "mailto:medyk%40medikoo.com",
                "https://github.com/sindresorhus/has-flag",
                "https://github.com/mikeal/oauth-sign",
                "https://github.com/JedWatson/classnames",
                "https://github.com/sindresorhus/execa",
                "https://github.com/studio-b12/is-subset",
                "https://github.com/FortAwesome/Font-Awesome",
                "https://github.com/fent/ret.js",
                "https://github.com/npm/wrappy",
                "https://github.com/isaacs/json-stringify-safe",
                "https://github.com/joaquimserafim/is-json",
                "mailto:tpadilha84%40gmail.com",
                "https://github.com/salesforce/tough-cookie",
                "https://github.com/facebook/prop-types",
                "https://github.com/mongodb-js/codemirror-mongodb",
                "https://github.com/hardmath123/nearley",
                "https://github.com/YuzuJS/setImmediate",
                "https://github.com/jprichardson/is-electron-renderer",
                "https://github.com/ljharb/is-string",
                "https://github.com/ljharb/has-symbols",
                "https://github.com/vega/vega-parser",
                "https://github.com/mbostock/rw",
                "https://github.com/ahmadnassri/har-validator",
                "https://github.com/mongodb-js/mongodb-redact",
                "https://github.com/d3/d3-contour",
                "https://github.com/sindresorhus/npm-run-path",
                "https://github.com/manuelstofer/foreach",
                "https://github.com/STRML/react-resizable",
                "https://github.com/juliangruber/isarray",
                "https://github.com/jquense/uncontrollable",
                "https://github.com/vega/vega-lite",
                "https://github.com/trentm/node-dashdash",
                "mailto:ljharb%40gmail.com",
                "https://www.github.com/DefinitelyTyped/DefinitelyTyped",
                "mailto:phil%40latentflip.com",
                "https://github.com/sindresorhus/load-json-file",
                "https://github.com/faisalman/ua-parser-js",
                "mailto:ashtuchkin%40gmail.com",
                "https://github.com/sindresorhus/p-limit",
                "https://github.com/d3/d3-voronoi",
                "mailto:justmoon%40members.fsf.org",
                "https://github.com/d3/d3-interpolate",
                "https://github.com/medikoo/es5-ext",
                "mailto:domoritz%40gmail.com",
                "https://github.com/isaacs/node-graceful-fs",
                "mailto:npm%40lovell.info",
                "https://github.com/sindresorhus/invert-kv",
                "https://github.com/qix-/node-is-arrayish",
                "mailto:t.wiszniewski%40gmail.com",
                "https://github.com/ljharb/object-is",
                "https://github.com/quartzjer/ecc-jsbn",
                "https://github.com/sindresorhus/escape-string-regexp",
                "https://github.com/isaacs/inherits",
                "https://github.com/sindresorhus/figures",
                "https://github.com/hughsk/is-typedarray",
                "https://github.com/Raynos/dom-walk",
                "https://github.com/soldair/node-walkdir",
                "https://github.com/npm/normalize-package-data",
                "https://github.com/isaacs/abbrev-js",
                "https://github.com/Raynos/for-each",
                "https://github.com/yargs/yargs",
                "mailto:fayearthur%40gmail.com",
                "https://github.com/sindresorhus/number-is-nan",
                "https://github.com/npm/node-semver",
                "https://github.com/zertosh/invariant",
                "https://github.com/alexindigo/asynckit",
                "mailto:hello%40indigounited.com",
                "https://github.com/bitinn/node-fetch",
                "mailto:medykk%40medikoo.com",
                "https://github.com/npm/npmlog",
                "https://github.com/shtylman/node-process",
                "https://github.com/sindresorhus/path-is-absolute",
                "https://github.com/vega/vega-geo",
                "https://github.com/mongodb-js/mongodb-extjson",
                "mailto:ahmad%40ahmadnassri.com",
                "https://github.com/ChALkeR/safer-buffer",
                "https://github.com/iarna/are-we-there-yet",
                "https://github.com/nodeca/js-yaml",
                "https://github.com/d3/d3-array",
                "https://github.com/ampersandjs/ampersand-events",
                "mailto:krist.wongz%40gmail.com",
                "https://github.com/jquense/dom-helpers",
                "https://github.com/vega/vega-loader",
                "https://github.com/klughammer/node-randomstring",
                "https://github.com/redux-saga/redux-saga",
                "mailto:ben%40npmjs.com",
                "https://github.com/vega/vega-dataflow",
                "mailto:bn%40cs.stanford.edu",
                "mailto:matt%40mattandre.ws",
                "https://github.com/meryn/performance-now",
                "https://github.com/vega/vega-wordcloud",
                "https://github.com/vega/vega-crossfilter",
                "https://github.com/juliangruber/balanced-match",
                "https://github.com/request/request",
                "https://github.com/bestiejs/punycode.js",
                "mailto:turcotte.mat%40gmail.com",
                "https://github.com/mapbox/node-pre-gyp",
                "https://docs.mongodb.com/charts/master/third-party-licenses/undefined",
                "https://github.com/tj/commander.js",
                "https://github.com/mridgway/hoist-non-react-statics",
                "https://github.com/mongodb-js/hadron-react",
                "https://github.com/mikeal/forever-agent",
                "https://github.com/caolan/async",
                "https://github.com/jashkenas/underscore",
                "mailto:sindresorhus%40gmail.com",
                "https://github.com/chearon/node-canvas-prebuilt",
                "https://github.com/redux-utilities/reduce-reducers",
                "https://github.com/Raynos/function-bind",
                "https://github.com/ReactTraining/history",
                "https://github.com/Automattic/cli-table",
                "https://github.com/calvinmetcalf/process-nextick-args",
                "mailto:adamwdraper%40gmail.com",
                "mailto:ifaaan%40gmail.com",
                "https://github.com/kristw/react-vega",
                "https://github.com/dominictarr/through",
                "https://github.com/atom/fs-plus",
                "https://github.com/Microsoft/tslib",
                "https://github.com/ahmadnassri/har-schema",
                "https://github.com/d3/d3-color",
                "https://github.com/vega/vega-canvas",
                "https://github.com/ljharb/is-symbol",
                "mailto:thomas%40mongodb.com",
                "https://github.com/mikeal/aws-sign",
                "https://github.com/vega/vega-statistics",
                "mailto:nathan%40storydesk.com",
                "https://github.com/isaacs/once",
                "mailto:floatdrop%40gmail.com",
                "https://github.com/ljharb/is-number-object",
                "mailto:darryl.west%40raincitysoftware.com",
                "https://github.com/auth0/jwt-decode",
                "https://github.com/d3/d3-scale-chromatic",
                "mailto:alex.wilson%40joyent.com",
                "https://github.com/ljharb/object-keys",
                "mailto:hrabovsky.lucas%40gmail.com",
                "mailto:chris%40neversaw.us",
                "https://github.com/Raynos/xtend",
                "https://github.com/mozilla/source-map",
                "mailto:mail%40lucasfeliciano.com",
                "mailto:dfcreative%40gmail.com",
                "https://github.com/airbnb/enzyme",
                "mailto:legal%40mongodb.com",
                "https://github.com/chalk/supports-color",
                "https://github.com/hueniverse/sntp",
                "https://github.com/react-bootstrap/prop-types-extra",
                "https://github.com/sindresorhus/strip-eof",
                "https://github.com/davepacheco/node-verror",
                "https://github.com/danawoodman/react-fontawesome",
                "https://github.com/jslicense/spdx-expression-parse.js",
                "https://github.com/mhart/aws4",
                "https://github.com/driverdan/node-XMLHttpRequest",
                "https://github.com/unclechu/node-deep-extend",
                "https://github.com/redux-utilities/redux-actions",
                "https://github.com/paularmstrong/normalizr",
                "mailto:mail%40substack.net",
                "https://github.com/facebook/react",
                "https://github.com/vega/vega-scenegraph",
                "https://github.com/yargs/y18n",
                "https://github.com/floatdrop/pinkie-promise",
                "https://github.com/JedWatson/react-input-autosize",
                "https://github.com/vega/vega-encode",
                "https://github.com/twbs/bootstrap",
                "https://github.com/adamwdraper/Numeral-js",
                "mailto:thomas%40rueckstiess.net",
                "https://github.com/fb55/nth-check",
                "https://github.com/necolas/normalize.css",
                "https://github.com/d3/d3-timer",
                "https://github.com/fb55/css-what",
                "https://github.com/isaacs/ini",
                "https://github.com/andris9/encoding",
                "https://github.com/STRML/react-grid-layout",
                "https://github.com/isaacs/block-stream",
                "https://github.com/peaksandpies/universal-analytics",
                "https://github.com/isaacs/node-glob",
                "https://github.com/jeancroy/fuzzaldrin-plus",
                "https://github.com/brycebaril/node-isnumber",
                "https://github.com/mikeal/tunnel-agent",
                "https://github.com/ljharb/object.assign",
                "mailto:f%40faisalman.com",
                "mailto:troygoode%40gmail.com",
                "https://github.com/dchest/tweetnacl-js",
                "https://github.com/mjackson/value-equal",
                "https://github.com/vega/vega-scale",
                "https://github.com/ashtuchkin/iconv-lite",
                "https://github.com/vega/vega-util",
                "https://github.com/d3/d3-dispatch",
                "http://i.imgur.com/goJdO.png",
                "https://github.com/substack/node-mkdirp",
                "https://github.com/vega/vega-voronoi",
                "https://github.com/felixge/node-stack-trace",
                "https://github.com/sindresorhus/resolve-from",
                "https://github.com/mongodb/node-mongodb-native",
                "mailto:berkeley%40r3dm.com",
                "mailto:crh0872%40gmail.com",
                "mailto:samuel.trace.reed%40gmail.com",
                "mailto:feross%40feross.org",
                "https://github.com/sindresorhus/strip-bom",
                "mailto:braveg1rl%40outlook.com",
                "mailto:raynos2%40gmail.com",
                "mailto:aditya%40netroy.in",
                "https://github.com/dfcreative/color-name",
                "mailto:stevoland%40gmail.com",
                "https://github.com/form-data/form-data",
                "https://github.com/nodejs/string_decoder",
                "https://github.com/alexei/sprintf.js",
                "https://github.com/rvagg/node-errno",
                "mailto:david%40majda.cz",
                "mailto:me%40feedic.com",
                "mailto:tim%40creationix.com",
                "https://github.com/dominictarr/map-stream",
                "https://github.com/sindresorhus/p-try",
                "https://github.com/jshttp/mime-types",
                "https://github.com/TooTallNate/util-deprecate",
                "https://github.com/FB55/domelementtype",
                "https://github.com/JedWatson/react-codemirror",
                "https://github.com/sindresorhus/p-locate",
                "https://github.com/pillarjs/path-to-regexp",
                "https://github.com/fb55/DomHandler",
                "https://github.com/isaacs/node-lru-cache",
                "mailto:demoneaux%40gmail.com",
                "https://github.com/cheeriojs/dom-renderer",
                "https://github.com/lodash/lodash",
                "https://github.com/grncdr/js-is-function",
                "mailto:jfromaniello%40gmail.com",
                "mailto:hughskennedy%40gmail.com",
                "mailto:dominic.tarr%40gmail.com",
                "https://github.com/cheeriojs/cheerio",
                "https://github.com/sindresorhus/strip-json-comments",
                "https://github.com/kristw/react-vega-lite",
                "https://github.com/fb55/htmlparser2",
                "https://github.com/floatdrop/pinkie",
                "https://github.com/felixge/node-combined-stream",
                "mailto:dervus.grim%40gmail.com",
                "https://github.com/image-size/image-size",
                "https://github.com/lodash/lodash-compat",
                "https://github.com/iarna/gauge",
                "https://github.com/mongodb-js/mongodb-schema",
                "https://github.com/sindresorhus/mem",
                "mailto:felix%40debuggable.com",
                "https://github.com/ampersandjs/ampersand-version",
                "https://github.com/hapijs/boom",
                "https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime",
                "https://github.com/wwayne/react-tooltip",
                "https://github.com/HenrikJoreteg/array-next",
                "mailto:leland.richardson%40airbnb.com",
                "mailto:tj%40vision-media.ca",
                "https://github.com/mongodb-js/query-parser",
                "mailto:mikeal.rogers%40gmail.com",
                "https://github.com/kevva/shebang-command",
                "mailto:hello%40blakeembrey.com",
                "https://github.com/visionmedia/debug",
                "https://github.com/yargs/cliui",
                "mailto:self%40cloudhead.net",
                "https://github.com/ljharb/define-properties",
                "https://github.com/isaacs/fstream-ignore",
                "https://github.com/afitiskin/redux-saga-routines",
                "https://github.com/tarruda/has",
                "https://github.com/justmoon/node-extend",
                "https://github.com/joyent/node-jsprim",
                "https://github.com/gaearon/disposables",
                "mailto:gajus%40gajus.com",
                "https://github.com/arekinath/node-getpass",
                "https://github.com/jslicense/spdx-correct.js",
                "https://github.com/nexdrew/which-module",
                "mailto:robert%40broofa.com",
                "https://github.com/bugsnag/bugsnag-js",
                "https://github.com/sindresorhus/os-homedir",
                "https://github.com/nodeca/argparse",
                "https://github.com/Marak/colors.js",
                "https://github.com/dominictarr/rc",
                "mailto:henrik%40andyet.net",
                "https://github.com/sindresorhus/parse-json",
                "https://github.com/rvagg/prr",
                "https://github.com/hapijs/cryptiles",
                "mailto:joerg%40peaksandpies.com",
                "mailto:dane%40mapbox.com",
                "mailto:david.bjorklund%40gmail.com",
                "https://github.com/d3/d3-scale",
                "https://github.com/d3/d3-time-format",
                "https://github.com/felixge/node-delayed-stream",
                "https://github.com/medikoo/event-emitter",
                "https://github.com/npm/osenv",
                "mailto:r%40va.gg",
                "mailto:mtscout6%40gmail.com",
                "https://github.com/d3/d3-quadtree",
                "mailto:christkv%40gmail.com",
                "mailto:hello%40agilemd.com",
                "https://github.com/sindresorhus/path-exists",
                "https://github.com/medikoo/cli-color",
                "mailto:david.tudury%40gmail.com",
                "mailto:manuel%40takimata.ch",
                "https://github.com/vega/vega-force",
                "https://github.com/dominictarr/stream-combiner",
                "https://github.com/ljharb/es-abstract",
                "https://github.com/d3/d3-path",
                "mailto:ariya.hidayat%40gmail.com",
                "https://github.com/ljharb/es-to-primitive",
                "https://github.com/d3/d3-format",
                "https://github.com/isaacs/core-util-is",
                "https://github.com/chalk/ansi-regex",
                "mailto:sebmck%40gmail.com",
                "https://github.com/ljharb/is-callable",
                "https://github.com/es-shims/Object.values",
                "mailto:zertosh%40gmail.com",
                "https://github.com/yargs/set-blocking",
                "https://github.com/substack/node-concat-map",
                "https://github.com/sindresorhus/os-tmpdir",
                "https://github.com/lydell/js-tokens",
                "https://github.com/mongodb-js/extended-json",
                "https://github.com/mongodb-js/ns",
                "https://github.com/ForbesLindesay/tar-pack",
                "https://github.com/yargs/yargs-parser",
                "mailto:jeremy%40documentcloud.org",
                "mailto:secoif%40gmail.com",
                "https://github.com/IndigoUnited/node-cross-spawn",
                "https://github.com/mikeal/caseless",
                "https://github.com/chalk/strip-ansi",
                "https://github.com/ampersandjs/ampersand-state",
                "https://github.com/d3/d3-force",
                "https://github.com/sindresorhus/mimic-fn",
                "https://github.com/jquery/esprima",
                "https://github.com/wayfind/is-utf8",
                "mailto:damon.oehlman%40gmail.com",
                "https://github.com/ljharb/is-regex",
                "https://github.com/rvagg/through2",
                "https://github.com/npm/hosted-git-info",
                "https://github.com/npm/inflight",
                "https://github.com/pegjs/pegjs",
                "https://github.com/substack/minimist",
                "https://github.com/inikulin/parse5",
                "https://github.com/moment/moment",
                "https://github.com/chrisdickinson/raf",
                "https://github.com/dominictarr/JSONStream",
                "https://github.com/kriskowal/asap",
                "https://github.com/es-shims/Object.entries",
                "https://github.com/HenrikJoreteg/key-tree-store",
                "mailto:iam%40alexindigo.com",
                "https://github.com/sindresorhus/locate-path",
                "https://github.com/juliangruber/brace-expansion",
                "https://github.com/blakeembrey/javascript-stringify",
                "https://github.com/chalk/wrap-ansi",
                "https://github.com/isaacs/minimatch",
                "mailto:chalkerx%40gmail.com",
                "https://github.com/vega/vega-transforms",
                "https://github.com/lovell/detect-libc",
                "https://github.com/ljharb/qs",
                "https://github.com/medikoo/d",
                "https://github.com/ampersandjs/ampersand-collection",
                "mailto:durran%40gmail.com",
                "https://github.com/mhart/StringStream",
                "mailto:jstashewsky%40salesforce.com",
                "https://github.com/vega/vega-event-selector",
                "https://github.com/harthur/nomnom",
                "https://github.com/react-bootstrap/react-overlays",
                "https://github.com/kemitchell/validate-npm-package-license.js",
                "https://github.com/babel/babel/tree/master/packages/babel-runtime",
                "mailto:jeremie%40jabber.org",
                "https://github.com/sindresorhus/is-stream",
                "https://github.com/substack/json-stable-stringify",
                "https://github.com/shinnn/spdx-license-ids",
                "https://github.com/mongodb/js-bson",
                "https://github.com/blesh/symbol-observable",
                "https://github.com/aweary/rst-selector-parser",
                "https://github.com/jshttp/mime-db",
                "https://github.com/vega/vega-view",
                "https://github.com/d3/d3-geo",
                "https://github.com/zloirock/core-js",
                "https://github.com/sindresorhus/array-uniq",
                "https://github.com/agilemd/find-root",
                "https://github.com/Qix-/color-convert",
                "mailto:me%40stephensugden.com",
                "https://github.com/codemirror/CodeMirror",
                "https://github.com/atom/underscore-plus",
                "mailto:javascriptismagic%40gmail.com",
                "https://github.com/substack/object-inspect",
                "https://github.com/ljharb/function.prototype.name",
                "https://github.com/sindresorhus/path-type",
                "https://github.com/kesla/parse-headers",
                "https://github.com/joyent/node-http-signature",
                "https://github.com/tapjs/signal-exit",
                "https://github.com/sindresorhus/macos-release",
                "https://github.com/creationix/jsonparse",
                "https://github.com/MathieuTurcotte/node-precond",
                "mailto:jon.carlos.rivera%40gmail.com",
                "https://github.com/react-bootstrap/react-prop-types",
                "https://github.com/less/less.js",
                "https://github.com/sindresorhus/get-stream",
                "https://github.com/sindresorhus/p-finally",
                "https://github.com/stefanpenner/get-caller-file",
                "https://github.com/dominictarr/pause-stream",
                "https://github.com/github/fetch",
                "mailto:iskren.chernev%40gmail.com",
                "https://github.com/medikoo/es6-symbol",
                "https://github.com/medikoo/memoizee",
                "mailto:lotsmanov89%40gmail.com",
                "https://github.com/hapijs/hoek",
                "https://github.com/visionmedia/node-progress",
                "https://github.com/FB55/domutils",
                "https://github.com/ampersandjs/ampersand-class-extend",
                "https://github.com/npm/fstream",
                "https://github.com/sindresorhus/find-up",
                "https://github.com/feross/safe-buffer",
                "https://github.com/isaacs/uid-number",
                "mailto:mattmuelle%40gmail.com",
                "https://github.com/reactjs/react-redux",
                "https://github.com/ljharb/is-boolean-object",
                "https://github.com/dominictarr/from",
                "https://github.com/ljharb/is-date-object",
                "mailto:trentm%40gmail.com",
                "mailto:monastic.panic%40gmail.com",
                "https://github.com/react-bootstrap/react-bootstrap",
                "https://github.com/d3/d3-dsv",
                "https://github.com/Raynos/min-document",
                "https://github.com/iarna/aproba",
                "https://github.com/isaacs/node-tar",
                "mailto:mcavage%40gmail.com",
                "https://github.com/fb55/css-select",
                "mailto:nfitzgerald%40mozilla.com",
                "https://github.com/visionmedia/node-delegates",
                "https://github.com/d3/d3-request",
                "https://github.com/andyperlitch/jsbn",
                "https://github.com/davepacheco/node-extsprintf",
                "mailto:dc%40davidchambers.me",
                "https://github.com/sindresorhus/code-point-at",
                "https://github.com/vega/vega",
                "https://github.com/react-dnd/react-dnd",
                "https://github.com/yargs/require-main-filename",
                "https://github.com/mongodb-js/metrics",
                "mailto:john.david.dalton%40gmail.com",
                "https://github.com/sindresorhus/object-assign",
                "https://github.com/sindresorhus/read-pkg-up",
                "mailto:dana%40danawoodman.com",
                "mailto:yelouafi%40gmail.com",
                "https://github.com/broofa/node-mime",
                "https://github.com/sindresorhus/os-locale",
                "https://github.com/MathieuTurcotte/node-backoff",
                "https://github.com/isaacs/rimraf",
                "https://github.com/ampersandjs/ampersand-collection-lodash-mixin",
                "https://github.com/nodejs/readable-stream",
                "https://github.com/medikoo/timers-ext",
                "https://github.com/chalk/ansi-styles",
                "https://github.com/medikoo/es6-weak-map",
                "https://github.com/mongodb-js/mongodb-core",
                "https://github.com/d3/d3-shape",
                "https://github.com/mcavage/node-assert-plus",
                "https://github.com/ryanbeard/singleton-js",
                "https://github.com/dtudury/discontinuous-range",
                "https://github.com/sindresorhus/read-pkg",
                "mailto:kyle%40kemitchell.com",
                "https://github.com/then/promise",
                "https://github.com/hueniverse/hawk",
                "https://github.com/imbcmdth/reservoir",
                "https://github.com/brycebaril/node-stats-lite",
                "mailto:soldair%40gmail.com",
                "https://github.com/dominictarr/split",
                "mailto:shtylman%40gmail.com",
                "https://github.com/troygoode/node-require-directory",
                "mailto:mcridgway%40gmail.com",
                "https://github.com/sindresorhus/win-release",
                "https://github.com/medikoo/next-tick",
                "https://github.com/sindresorhus/decamelize",
                "https://github.com/sindresorhus/lcid",
                "https://github.com/fent/randexp.js",
                "https://github.com/isaacs/yallist",
                "https://github.com/fb55/boolbase",
                "https://github.com/bcoe/yargs",
                "https://github.com/BerkeleyTrue/warning",
                "https://github.com/JedWatson/react-select",
                "https://github.com/sindresorhus/shebang-regex",
                "https://github.com/medikoo/lru-queue",
                "https://github.com/DamonOehlman/detect-browser",
                "https://github.com/arekinath/node-sshpk",
                "https://github.com/reactjs/reselect",
                "https://github.com/mongodb-js/mongodb-language-model",
                "https://github.com/iarna/has-unicode",
                "https://github.com/Raynos/duplexer",
                "https://github.com/isaacs/fs.realpath",
                "https://github.com/sindresorhus/query-string",
                "https://github.com/atom/less-cache",
                "https://github.com/vega/vega-hierarchy",
                "https://github.com/naugtur/xhr",
                "https://github.com/isaacs/pseudomap",
                "https://github.com/jonschlinkert/window-size",
                "https://github.com/zeit/ms",
                "https://github.com/ReactTraining/react-router",
                "https://github.com/timoxley/keycode",
                "mailto:ben%40benlesh.com",
                "https://github.com/fb55/node-entities",
                "https://github.com/isaacs/node-which",
                "mailto:medikoo%40medikoo.com",
                "https://github.com/vega/vega-runtime",
                "https://github.com/javascriptismagic/shebang-loader",
                "https://github.com/d3/d3-collection",
                "https://github.com/kelektiv/node-uuid",
                "mailto:hello%40alexei.ro",
                "mailto:mail%40juliangruber.com",
                "https://github.com/d3/d3-time",
                "https://github.com/sindresorhus/is-fullwidth-code-point",
                "https://github.com/christkv/require_optional",
                "https://github.com/dominictarr/event-stream",
                "mailto:merynstol%40gmail.com",
                "https://github.com/sindresorhus/path-key",
                "https://github.com/mongodb-js/mongodb-collection-sample",
                "https://github.com/sindresorhus/builtin-modules",
                "https://github.com/iarna/wide-align",
                "mailto:Alex.Ford%40CodeTunnel.com",
                "https://github.com/substack/jsonify",
                "https://github.com/kevva/strict-uri-encode",
                "mailto:i%40izs.me",
                "mailto:michael.hart.au%40gmail.com",
                "https://github.com/tabatkins/railroad-diagrams",
                "https://github.com/zertosh/loose-envify",
                "https://github.com/lucasfeliciano/fetch-everywhere",
                "https://github.com/mcavage/node-asn1",
                "mailto:acdlite%40me.com",
                "https://github.com/isaacs/isexe",
                "https://github.com/nathanpeck/clui",
                "https://github.com/tj/co",
                "mailto:me%40re-becca.org",
                "https://github.com/kriszyp/json-schema",
                "https://github.com/pixelsandbytes/caller-id",
                "https://github.com/medikoo/es6-iterator",
                "https://github.com/blakeembrey/pluralize",
                "https://github.com/davidchambers/Base64.js",
                "https://github.com/chalk/chalk",
                "https://github.com/topojson/topojson-client",
                "https://github.com/d3/d3-hierarchy",
                "https://github.com/epoberezkin/ajv",
                "mailto:pxandbytes%40gmail.com",
                "https://github.com/darrylwest/simple-node-logger",
                "https://github.com/iarna/console-control-strings",
                "https://github.com/sindresorhus/camelcase",
                "https://github.com/mzabriskie/react-draggable",
                "https://github.com/sindresorhus/os-name",
                "mailto:dan.abramov%40me.com",
                "https://github.com/facebook/fbjs",
                "https://github.com/vega/vega-projection",
                "https://github.com/qix-/node-error-ex",
                "https://github.com/vega/vega-expression",
                "https://github.com/Raynos/global",
                "https://github.com/sindresorhus/string-width",
                "https://github.com/lodash/lodash-fp",
                "mailto:rod%40vagg.org",
                "https://github.com/matthew-andrews/isomorphic-fetch",
                "https://github.com/vega/vega-view-transforms",
                "mailto:kevinmartensson%40gmail.com",
                "https://github.com/kemitchell/spdx-exceptions.json",
                "https://github.com/sindresorhus/is-builtin-module",
                "mailto:elias%40klughammer.com",
                "mailto:dave%40fontawesome.io",
                "https://github.com/sindresorhus/pify",
                "https://github.com/rvagg/isstream",
                "mailto:eran%40hammer.io",
                "https://github.com/mjackson/resolve-pathname",
                "mailto:guillermo%40learnboost.com",
                "https://github.com/reactjs/redux",
                "mailto:nathan%40tootallnate.net",
                "mailto:alexfitiskin%40gmail.com",
                "https://github.com/vega/vega-typings",
                "https://github.com/bestiejs/platform.js",
                "https://github.com/npm/nopt"
            ]
        },
        {
            "slug": "master/tutorial/movie-details/arrange-charts/index.html",
            "title": "Arrange the Charts on the Dashboard \u2014 Charts Manual 0.10",
            "headings": [
                "Arrange the Charts on the Dashboard",
                "Wrapping Up"
            ],
            "text": "\nArrange the Charts on the Dashboard\u00b6\n\nOn this page\n\nWrapping Up\n\n\nEstimated Time to Complete: 2 minutes\nNow that you have two charts on your dashboard, you can arrange them\nfor maximum legibility. These two charts are horizontally oriented,\nso you may wish to make them wider and stack them one above the other.\nYou can change the shape of each chart by clicking and dragging on the\nlower right corner of the chart, and you can move them around the page\nby clicking and dragging on the upper left corner of the chart.\n\nSee also\nManage Existing Dashboards\n\nYour finished dashboard should look similar to this:\n\n\n\n\nWrapping Up\u00b6\nYou now have a dashboard which provides easily accessible insight into\naward winning directors and award nominated films. Try adding additional\ncharts to the dashboard and see what other interesting insights you can\ndiscover.\n\n",
            "preview": "Estimated Time to Complete: 2 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/manage-dashboards/"
            ]
        },
        {
            "slug": "master/tutorial/movie-details/column-chart-director-awards/index.html",
            "title": "Column Chart Showing Directors with the Most Awards \u2014 Charts Manual 0.10",
            "headings": [
                "Column Chart Showing Directors with the Most Awards",
                "Construct the Chart",
                "Click Add My First Chart.",
                "In the Data Source dropdown, select test.movieDetails.",
                "Select the Chart Type.",
                "Add the desired fields to the proper encoding channels.",
                "Apply a limit to the X axis.",
                "Group awards by genre.",
                "Title your chart.",
                "Next Steps"
            ],
            "text": "\nColumn Chart Showing Directors with the Most Awards\u00b6\nEstimated Time to Complete: 5 minutes\nTo create each chart, you will populate the chart\u2019s\nencoding channels with fields from your\nschema. Encoding channels represent the information passed to\nMongoDB Charts which allows Charts to create the visualization.\nFor more information on encoding channels and the different types of\nchannels available, refer to the\nencoding channels section of the\ndocumentation.\n\nConstruct the Chart\u00b6\nTo discover which directors of films represented in this dataset have\nwon the most awards, use the directors and awards.wins database\nfields in your chart. Additionally, you can see which genres the\naward-winning films belong to stacking the genres field in the\ncolumns. A column chart makes it easy to\nsort and compare fields with numerical values, so it is a good choice\nfor this use case.\n1\nClick Add My First Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.movieDetails.\u00b6\n\n3\nSelect the Chart Type.\u00b6\n\nIn the Chart Type dropdown menu, select\nColumn.\nSelect the panel labeled Stacked below\nthe Chart Type dropdown menu.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the director property from the Fields\nsection of the Chart Builder view to the X Axis\nencoding channel. This tells MongoDB Charts to create a column\nfor each director value in the dataset.\n\nIn the Fields section click the awards field to\nexpand the awards object and view its properties.\n\nDrag the awards.wins field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nAggregation\nAggregation processes data records\nusing a wide variety of methods and returns computed results\nwhich may not be available in the original dataset. Because we\nare interested in the total number of awards won by each\ndirector, we use the awards.wins field here and will use\nan aggregation operator which will allow us to add up the\ntotal wins for each director.\n\n\nLeave the Aggregate dropdown menu for the\nY Axis encoding channel on its default\nvalue of sum. This value directs the aggregation\noperation to return the total number of award wins for each\ndirector.\n\n\n\n5\nApply a limit to the X axis.\u00b6\nAt this point there are too many columns in our X axis to show any\nmeaningful results. To bring the number down to a manageable level,\nwe\u2019ll sort the directors by their total number of awards won in\ndescending order, then apply a limit to get\nthe top ten:\n\nIn the X Axis channel, expand the\nSort By dropdown and select\nAggregated Value.\nTo order the results in descending order, click the\nAZ order button located to the right of the\nSort By dropdown.\nApply a limit to the number of columns in the X Axis by\ntoggling Limit Results, then setting Show\nto 10.\n\n\n6\nGroup awards by genre.\u00b6\n\nDrag the genres field to the Series encoding\nchannel, then click on the Array Reductions dropdown\nmenu and select unwind array. The X axis columns are now\nbroken down by movie genre.\n\nNote\nSome movies contain more than one genre, so the numbers\nshown in the columns may not be the exact number of awards\nfor each director.\n\n\n\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nDirectors with Most Awards, Split by Genre\n\n\n\n\nClick the green check mark to save your title.\n\nYour chart should now look like this:\n\n\n\n\nClick Save and Close to return to your\ndashboard.\n\n\n\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to build a\nscatter chart of award-nominated movies and\ntheir respective TomatoMeter ratings.\n\n",
            "preview": "Estimated Time to Complete: 5 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/sort-limit-data/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/scatter-chart-movies-ratings/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "http://docs.mongodb.org/manualaggregation"
            ]
        },
        {
            "slug": "master/tutorial/movie-details/create-dashboard/index.html",
            "title": "Create a New Dashboard \u2014 Charts Manual 0.10",
            "headings": [
                "Create a New Dashboard",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nCreate a New Dashboard\u00b6\nEstimated Time to Complete: 2 minutes\n\nInstructions\u00b6\nNow that you have created your data source and linked it to the\norder data collection, create a dashboard\nto hold your visualizations:\n\nClick the Dashboards tab.\n\nClick the New Dashboard button.\n\nCopy the following into the Title input:\n\n\n\ncopy\n\nMovie Details\n\n\n\n\n\n\nCopy the following into the Description input:\n\n\n\ncopy\n\nInsights from the Movie Details dataset.\n\n\n\n\nClick Create.\n\n\nAfter clicking create, Charts navigates you to your newly\ncreated dashboard and prompts you to add your first chart.\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to build a\ncolumn chart showing directors who won the most\nawards.\n\n",
            "preview": "Estimated Time to Complete: 2 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/dashboards/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/column-chart-director-awards/"
            ]
        },
        {
            "slug": "master/tutorial/movie-details/movie-details-tutorial-overview/index.html",
            "title": "Visualizing Movie Details \u2014 Charts Manual 0.10",
            "headings": [
                "Visualizing Movie Details",
                "Introduction",
                "Table of Contents"
            ],
            "text": "\nVisualizing Movie Details\u00b6\n\nOn this page\n\nIntroduction\nTable of Contents\n\n\nTotal Estimated Time to Complete: 20-30 minutes\n\nIntroduction\u00b6\nThis tutorial explores features and capabilities of MongoDB Charts with\na data source containing information gleaned\nfrom IMDb and Rotten Tomatoes. The tutorial demonstrates how to\nuse filters to refine a large result set down to an easily\nunderstandable chart, as well as how to use multi-series charts and\nmultiple encoding channels to add further\ninsights to your charts.\nIn this tutorial, you\u2019ll create two charts: a sorted column\nchart and a scatter chart.\n\nThe sorted column chart\ndisplays columns representing the number\nof awards won by directors with at least 50 total awards,\nsorted from highest to lowest and broken down by film genre.\nThe scatter chart shows\na diagram of movies with at least one\naward win along with their TomatoMeter rating\nand their MPAA rating\n(G, PG, PG-13, or R).\n\n\n\n\n\n\nTable of Contents\u00b6\n\nStep 1: Setup and Import the Data\nStep 2: Create a New Dashboard\nStep 3: Column Chart Showing Directors with the Most Awards\nStep 4: Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nStep 5: Arrange the Charts on the Dashboard\n\nTo get started, move ahead to the\nSetup and Import the Data page.\n\n\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n",
            "preview": "Total Estimated Time to Complete: 20-30 minutes",
            "tags": "",
            "links": [
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/prereqs-and-import-data/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/scatter-chart-movies-ratings/",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/column-chart-director-awards/",
                "https://www.imdb.com/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/arrange-charts/"
            ]
        },
        {
            "slug": "master/tutorial/movie-details/prereqs-and-import-data/index.html",
            "title": "Setup and Import the Data \u2014 Charts Manual 0.10",
            "headings": [
                "Setup and Import the Data",
                "Prerequisites",
                "Download the Data",
                "Import the Data",
                "Add the Data Collection as a Data Source",
                "Next Steps"
            ],
            "text": "\nSetup and Import the Data\u00b6\n\nOn this page\n\nPrerequisites\nDownload the Data\nImport the Data\nAdd the Data Collection as a Data Source\nNext Steps\n\n\nEstimated Time to Complete: 10 minutes\n\nPrerequisites\u00b6\nThe following items are required to complete this tutorial:\n\nA MongoDB Atlas\ncluster. Refer to the Create a Cluster page for\ninstructions on creating an Atlas cluster, and the\nLaunch Charts page for instructions\non launching MongoDB Charts from your Atlas cluster.\nmongoimport.\nmongoimport is included in the Community and Enterprise versions\nof MongoDB available in the download center.\n\n\n\nDownload the Data\u00b6\nDownload the example dataset from\nhttps://raw.githubusercontent.com/steveren/docs-assets/charts-tutorial/movieDetails.json.\nTo download the documents, right-click on the URL and select\nSave Link As. This file contains the data you will import\ninto the test.movieDetails collection of your Atlas cluster in the\nfollowing step.\nThe movieDetails.json file is 1.4 MB and contains records for 2250\nmovies. The following is a sample document from the dataset:\n\n\n\ncopy\n\n{\n     \"_id\" : ObjectId(\"5b107bec1d2952d0da904dd7\"),\n     \"title\" : \"Titan A.E.\",\n     \"year\" : 2000,\n     \"rated\" : \"PG\",\n     \"runtime\" : 94,\n     \"countries\" : [\n             \"USA\"\n     ],\n     \"genres\" : [\n             \"Animation\",\n             \"Action\",\n             \"Adventure\"\n     ],\n     \"director\" : \"Don Bluth, Gary Goldman, Art Vitello\",\n     \"writers\" : [\n             \"Hans Bauer\",\n             \"Randall McCormick\",\n             \"Ben Edlund\",\n             \"John August\",\n             \"Joss Whedon\"\n     ],\n     \"actors\" : [\n             \"Matt Damon\",\n             \"Bill Pullman\",\n             \"John Leguizamo\",\n             \"Nathan Lane\"\n     ],\n     \"plot\" : \"A young man learns that he has to find a hidden Earth ship before an enemy alien species does in order to secure the survival of humanity.\",\n     \"poster\" : \"http://ia.media-imdb.com/images/M/MV5BMjE0NTU0ODg4NV5BMl5BanBnXkFtZTcwNzY3MTQyMQ@@._V1_SX300.jpg\",\n     \"imdb\" : {\n             \"id\" : \"tt0120913\",\n             \"rating\" : 6.6,\n             \"votes\" : 50875\n     },\n     \"tomato\" : {\n             \"meter\" : 52,\n             \"image\" : \"rotten\",\n             \"rating\" : 5.7,\n             \"reviews\" : 99,\n             \"fresh\" : 51,\n             \"consensus\" : \"Great visuals, but the story feels like a cut-and-paste job of other sci-fi movies.\",\n             \"userMeter\" : 60,\n             \"userRating\" : 3.2,\n             \"userReviews\" : 69055\n     },\n     \"metacritic\" : 48,\n     \"awards\" : {\n             \"wins\" : 1,\n             \"nominations\" : 7,\n             \"text\" : \"1 win & 7 nominations.\"\n     },\n     \"type\" : \"movie\"\n}\n\n\n\n\n\nImport the Data\u00b6\nBefore you can use your dataset with Charts, you need to add\nit to a MongoDB collection. Use mongoimport to import the contents of that file\ninto the test.movieDetails collection on your Atlas cluster.\n\n\n\ncopy\n\nmongoimport --host <atlasHostname> --ssl -u <username> -p <password> --authenticationDatabase admin \\\n--db test --collection movieDetails \\\n--drop --file <path/to/movieDetails.json>\n\n\n\n\nNote\nRefer to mongoimport\nfor more information on using the import tool to add data to\na MongoDB collection.\n\n\n\nAdd the Data Collection as a Data Source\u00b6\nNow that the data is in the desired collection, add the collection as a\ndata source in MongoDB Charts. Adding a\ncollection as a data source links the collection to Charts and\nallows us to create visualizations using that data.\n\nLaunch Charts from the Atlas cluster\nwhich contains your imported data.\n\nClick the Data Sources tab.\n\nClick New Data Source.\n\nIn the New Data Source dialog, select the Atlas\nProject which contains your imported data.\n\nClick Connect.\n\nSelect the test.movieDetails collection.\n\nClick Set Permissions.\n\nLeave these options as default and click\nPublish Data Source.\n\nNote\nFor details on data source permissions, see the\nData Source Permissions\npage.\n\n\n\n\n\nNext Steps\u00b6\nNow that you have established the data source in Charts, you\ncan Create a New Dashboard which will\nhold the visualizations.\n\n",
            "preview": "Estimated Time to Complete: 10 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/launch-charts/",
                "https://www.mongodb.com/download-center/enterprise",
                "https://docs.atlas.mongodb.com/create-new-cluster/",
                "https://docs.mongodb.com/charts/master/data-source-permissions/",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/create-dashboard/",
                "https://www.mongodb.com/cloud/atlas",
                "https://raw.githubusercontent.com/steveren/docs-assets/charts-tutorial/movieDetails.json",
                "http://docs.mongodb.org/manual/reference/program/mongoimport/"
            ]
        },
        {
            "slug": "master/tutorial/movie-details/scatter-chart-movies-ratings/index.html",
            "title": "Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating \u2014 Charts Manual 0.10",
            "headings": [
                "Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating",
                "Construct the Chart",
                "Click Add Chart.",
                "In the Data Source dropdown, select test.movieDetails.",
                "Select the Chart Type.",
                "Add the desired fields to the proper encoding channels.",
                "Add a query filter.",
                "Differentiate the chart by MPAA rating.",
                "Title your chart.",
                "Next Steps"
            ],
            "text": "\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\u00b6\nEstimated Time to Complete: 5 minutes\n\nConstruct the Chart\u00b6\nNext, add a chart to your dashboard showing the TomatoMeter rating\nand MPAA rating\nof movies with the most award nominations. A\nscatter chart is a good choice for\nvisualizing how data points cluster together around certain values and\nallows the representation of several different data dimensions.\n1\nClick Add Chart.\u00b6\nThe Add Chart button is in the top right corner of the\ndashboard.\n\n2\nIn the Data Source dropdown, select test.movieDetails.\u00b6\n\n3\nSelect the Chart Type.\u00b6\n\nIn the Chart Type dropdown, select\nGrid.\nSelect the Scatter panel below the dropdown menu.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section, click the tomato field to\nexpand the tomato object and view its properties.\nDrag the tomato.meter field to the X Axis\nencoding channel.\nIn the Fields section click the awards field to\nexpand the awards object and view its properties.\nDrag the awards.nominations field to the Y Axis\nencoding channel.\n\n\n5\nAdd a query filter.\u00b6\nYou can see now that higher-rated movies have a higher density of\nawards, but the chart is rather noisy. Add a query filter to exclude\nmovies with zero awards and marginal MPAA ratings.\n\nIn the Filters box, add the\nfollowing query filter and click the Apply button:\n\n\n\ncopy\n\n{\"awards.nominations\": {$gte: 1}, rated: {$in: [\"G\", \"PG\", \"PG-13\", \"R\"]}}\n\n\n\n\n\n\n6\nDifferentiate the chart by MPAA rating.\u00b6\n\nIn the Fields section, click the rated field and\ndrag it to the color encoding channel.\n\n\nAdditional Data Options\nThere are three options for adding more data to your chart. You\ncan use any of your data fields to modify the size, color, and\nshape of the markers on the grid. The rated field works well\nhere because it has low cardinality; there are only four possible\nvalues (G, PG, PG-13, and R). Fields with higher\ncardinality may make the chart too noisy to read.\n\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nMovies with Most Awards Nominations, by Rating\n\n\n\n\nClick the green check mark to save your title.\n\nYour chart should now look like this:\n\n\n\n\nClick Save and Close to return to your\ndashboard.\n\n\n\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to see how we can\nrearrange the charts on the dashboard.\n\n",
            "preview": "Estimated Time to Complete: 5 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/arrange-charts/",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/scatter-chart/"
            ]
        },
        {
            "slug": "master/tutorial/order-data/area-chart-age-distribution/index.html",
            "title": "Area Chart Showing Age Distribution of Customers \u2014 Charts Manual 0.10",
            "headings": [
                "Area Chart Showing Age Distribution of Customers",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Wrapping Up"
            ],
            "text": "\nArea Chart Showing Age Distribution of Customers\u00b6\nTime to Complete: 5 minutes\nIn the final chart of the dashboard, highlight some of\nthe customer analytic information available in the schema using an\narea chart. By visualizing the age range\nand distribution of store customers, you can ensure that any advertising\nthe store performs is directed where it will be seen by the most\npotential buyers.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nArea.\nClick Discrete below the dropdown.\n\n\nArea Chart\nAn area chart is a good choice to easily visualize the ages where\ncustomers are the most concentrated. Since you are not concerned\nwith exact values in this scenario but rather general trends, an\narea chart makes more sense than a line chart because the filled-in\nvisualization allows us to more easily identify the most common age\nranges.\nWe use a discrete area chart, rather than continuous,\nbecause we are ultimately looking for a count of the customers in\neach particular age bracket determined by the chart\u2019s\nbin size. Discrete charts allow us\nto perform aggregation operations on the data, whereas in a\ncontinuous chart each data point must come from a distinct\ndocument.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section click the customer field to\nexpand the customer object and view its properties.\n\nDrag the customer.age field to the X Axis\nencoding channel. The X Axis encoding channel\ndictates which field to display on the horizontal axis.\n\nSet the Bin Size to 5.\n\nData Binning\nBinning data groups continuous data into bins of a\nspecified size. In this case, rather than plotting\npoints for each individual age in the dataset, the data\nis grouped into bins of 5 ages. This\nprovides a clearer look into the overall trend of\nthe age distribution.\nFor more information on data binning, see the\nData Binning section.\n\n\nDrag the _id field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nY Axis Encoding Channel\nBecause we will be performing a $count aggregation on the\ndocuments, it does not matter what field we use for this\nencoding channel because the chosen field does not affect the\nnumber of documents in each bin.\n\n\nIn the Y Axis Aggregate dropdown, select\ncount. This option counts the occurrence of each\ncustomer age from each sale and adds it to the visualization\nafter placing it in the appropriate bin.\n\n\nYour chart should now look something like this:\n\n\n\nIn general, customers appear to most commonly between the\nages 40-45. This is where the largest area region in the\nchart occurs. Additionally, the rest of the ages appear to be\nnormally distributed,\nmeaning the average customer age is at the center of the area chart\nand there are the same number of younger and older customers. You can\nuse this information to direct advertising where the largest\ncustomer age group is most likely to see company advertisements.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the title input:\n\n\n\ncopy\n\nDistribution of Customer Ages\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nAfter adding the last chart to your dashboard and performing\nsome final reorganizing, the finished dashboard should look\nsomething like this:\n\n\n\n\n\n\nWrapping Up\u00b6\nYou now have an effective orders dashboard which provides easily\naccessible insight into revenue data, sales details, and customer\nanalytics. However, with the information you have available in your\ndataset, there are several ways in which you might be able to\nadd additional charts and extend the dashboard even further. You may\nwant to depict:\n\nAverage customer satisfaction by store location\nThe amount of money that customers in various age groups typically\nspend on a purchase\nWhich items are most commonly bought in bulk, utilizing the\nitems.quantity field\n\nTry adding some of these additional charts to the dashboard and see\nwhat other interesting correlations between variables you can discover.\n\n",
            "preview": "In the final chart of the dashboard, highlight some of the customer analytic information available in the schema using an area chart. By visualizing the age range and distribution of store customers, you can ensure that any advertising the store performs is directed where it will be seen by the most potential buyers.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/bin-data/",
                "https://en.wikipedia.org/wiki/Normal_distribution",
                "http://docs.mongodb.org/manual/aggregation",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/line-area-chart/"
            ]
        },
        {
            "slug": "master/tutorial/order-data/column-chart-sales-by-store/index.html",
            "title": "Column Chart Showing Total Sales by Store Location \u2014 Charts Manual 0.10",
            "headings": [
                "Column Chart Showing Total Sales by Store Location",
                "Construct the Chart",
                "Click Add My First Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nColumn Chart Showing Total Sales by Store Location\u00b6\nTime to Complete: 5 minutes\nLooking at the data fields available in the schema, some of the most\nvaluable information you can relay revolves around revenue. You may\nwant to know how various stores are performing, specifically if there\nare any stores significantly under or overperforming compared to\nothers.\nA column chart works well for this type of\nvisualization because you can easily compare individual store revenue\nbased on the size of each column.\n\nConstruct the Chart\u00b6\n1\nClick Add My First Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nColumn.\nClick Stacked below the dropdown.\n\n\nColumn Chart\nThis chart renders a column for each store location\u2019s revenue.\nBecause there are six different store locations, the chart\nwill contain six columns.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the storeLocation property from the Fields\nsection of the Chart Builder view to the X Axis\nencoding channel. This tells MongoDB Charts to create a column\nfor each storeLocation value in the dataset.\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nNote\nMongoDB Charts infers the data type of each field and\nprovides symbols to easily determine these data types when\nbuilding your chart. For example, the calendar icon next to\nthe saleDate field signifies that this field is a\ntimestamp. These symbols can help ensure your chart renders as\nexpected by using proper data types for each\nencoding channel.\n\n\nDrag the items.price field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nAggregation\nAggregation processes data records\nusing a wide variety of methods and returns computed results\nwhich may not be available in the original dataset. Because we\nare interested in the total revenue from each store, we use\nthe items.price field here and will use an aggregation\noperator which will allow us to add the items.price fields\ntogether.\n\n\nIn the Array Reductions dropdown, select\nUnwind array.\n\nUnwind array\nArray reductions dictate how to process an array so\nits elements  can be visualized. The unwind array\noption creates a new document for each element in the array,\nso each item\u2019s price is added to the total for that store.\nFor more information on unwinding arrays, refer to the\nunwind aggregation documentation.\n\n\nIn the Aggregate dropdown, select sum.\n\nSum\nThis option adds the prices of all items per store together to\ndisplay the chart. For more information on the $sum\naggregation command, refer to the\nsum aggregation documentation.\n\n\n\nYour chart should now look something like this:\n\n\n\nNotice that the stores generating the most revenue are the\nDenver and Seattle locations.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nTotal Sales ($) by Store Location\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYou will be navigated back to your Super Store Supply\nSales dashboard and it should look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a visualization showing a high-level overview of store\nrevenue, one might wonder which type of item each store is selling the\nmost of. The following section of the tutorial illustrates how to build\na donut chart to analyze the tag names\nof items being sold.\n\n",
            "preview": "Looking at the data fields available in the schema, some of the most valuable information you can relay revolves around revenue. You may want to know how various stores are performing, specifically if there are any stores significantly under or overperforming compared to others.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/tutorial/order-data/donut-chart-item-tags/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/unwind/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/",
                "http://docs.mongodb.org/manual/aggregation",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/",
                "https://docs.mongodb.com/charts/master/encoding-channels/",
                "http://docs.mongodb.org/manualaggregation"
            ]
        },
        {
            "slug": "master/tutorial/order-data/create-new-dashboard/index.html",
            "title": "Create a New Dashboard \u2014 Charts Manual 0.10",
            "headings": [
                "Create a New Dashboard",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nCreate a New Dashboard\u00b6\nTime to Complete: 3 minutes\n\nInstructions\u00b6\nNow that you have created your data source and linked it to the\norder data collection, create a dashboard to hold all of your\nvisualizations:\n\nClick the Dashboards tab.\n\nClick the New Dashboard button.\n\nCopy the following into the Title input:\n\n\n\ncopy\n\nSuper Supply Store Orders\n\n\n\n\n\n\nCopy the following into the Description input:\n\n\n\ncopy\n\nSales, Customer Analytics, and More.\n\n\n\n\nClick Create.\n\n\nAfter clicking create, Charts navigates you to your newly\ncreated dashboard and prompts you to add your first chart.\n\n\nNext Steps\u00b6\nThe following sections of the tutorial walk through\nbuilding each chart for your dashboard. You\nwill be populating the dashboard with the following visualizations:\n\nA column chart for total sales by\nstore location\nA donut chart showing the frequencies\nof tags occurring in each item sold\nA grouped column chart showing the\nmost common items sold in each store location\nAn area chart showing a distribution\nof customer ages\n\nTo create each chart, you will populate the chart\u2019s\nencoding channels with fields from your\nschema. Encoding channels represent the information passed to\nMongoDB Charts which allows Charts to create the visualization.\nFor more information on encoding channels and the different types of\nchannels available, refer to the\nencoding channels section of the\ndocumentation.\nFollow along to the next section of the tutorial to build a\ncolumn chart showing total sales by\nstore location.\n\n",
            "preview": "Now that you have created your data source and linked it to the order data collection, create a dashboard to hold all of your visualizations:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/master/build-charts/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/master/encoding-channels/"
            ]
        },
        {
            "slug": "master/tutorial/order-data/donut-chart-item-tags/index.html",
            "title": "Donut Chart Showing Most Common Tags for Items Sold \u2014 Charts Manual 0.10",
            "headings": [
                "Donut Chart Showing Most Common Tags for Items Sold",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Copy the following filter into the Filters input above the main chart display.",
                "Click Apply to the right of the filter.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nDonut Chart Showing Most Common Tags for Items Sold\u00b6\nTime to Complete: 5 minutes\nNext we will add a chart where you can quickly see which types of items\nthe company is selling the most of. This information will be helpful\nfor the company marketing team to know how effectively direct\nadvertising.\nIn this scenario, your manager has expressed interest specifically\nin items sold from the Denver and New York store locations.\nAdditionally, they have requested to only visualize sales which\ncontain an item costing $1200 or more, in an effort to more closely\nexamine the new line of laptops being sold at these locations and what\ntypes of items are being bought with them. You can accomplish this\nusing a filter in your\ndonut chart, as shown in the following\nprocedure.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nCircular.\nClick Donut below the dropdown.\n\n\nDonut Chart\nA donut chart is a good choice for this chart because donut charts\nshow the relationship of parts to a whole. Using this chart type you\ncan easily get an idea of which tags make up the greatest portion of\ntotal sales.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nDrag the items.tags field to the Label\nencoding channel. The Label encoding channel\ndictates which field to use when dividing the sections of the\nchart.\n\nIn the array reduction dropdown for the\nitems array select Unwind array.\n\nUnwind Array\nUnwinding the array creates a new document for each element of\nthe items array, so each item from each sale is used in\nthe chart.\n\n\nIn the array reduction dropdowns for the\ntags select Array element by index. Using this\noption you can specify which element of the tags array to\nvisualize.\n\nEnter 0 for the Index input to only visualize the\nfirst element of the tags array. The first item tag is the\nmost relevant tag to the item, so it should be the main concern\nin the visualiztion. This is the primary item tag.\n\nNote\nSelecting an array element by index also ensures the chart\ndoes not get overcrowded with less important tags as it would\nhad you chosen to unwind the tags array rather than select\na specific element.\n\n\nDrag the items.tags field to the Arc\nencoding channel.\n\nArc Encoding Channel\nThe Arc encoding channel dictates\nwhich field to aggregate upon in the\nchart. Using the items.tags field here, you can select an\naggregation option which will provide the number of\noccurrences of each item tag.\n\n\nRepeat steps c-e for the Arc encoding channel.\n\nNote\nWhen constructing donut charts, most often you will be using the\nsame field for both the Label and Arc\nencoding channels.\n\n\nIn the Aggregate dropdown, select count.\nThis option counts the occurrences of the first tag of each item\nand adds them to the chart.\n\n\nYour chart should now look something like this:\n\n\n\n\n5\nCopy the following filter into the Filters input above the main chart display.\u00b6\n\n\n\ncopy\n\n{ storeLocation: { $in: [ \"Denver\", \"New York\" ] }, 'items.price': {$gte: 1200} }\n\n\n\nThis filter specifies that\nCharts only visualizes item tags from items sold from either\nthe Denver or New York store location where there was an\nitem in the sale costing $1200 or more.\n\n6\nClick Apply to the right of the filter.\u00b6\nYour chart should now look something like this:\n\n\n\nNotice how the electronics tag now takes a larger slice of the\ndistribution compared to when not using the filter. Based on this\nchart, notice that office and school are the two most common\nprimary item tags from sales matching the filter.\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nFrequency of Item Tags from Sales in Denver and New York with Price Threshold\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n8\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYour dashboard should now look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a chart showing the tags of the items sold, it would\nbe helpful to know which specific items are most commonly sold at the\nvarious store locations. To do so, refer to the next section to see how\nto implement a grouped column chart\nshowing the most common items sold by store location.\n\n",
            "preview": "Next we will add a chart where you can quickly see which types of items the company is selling the most of. This information will be helpful for the company marketing team to know how effectively direct advertising.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/master/filter-documents/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/grouped-column-items-sold/",
                "http://docs.mongodb.org/manual/aggregation"
            ]
        },
        {
            "slug": "master/tutorial/order-data/grouped-column-items-sold/index.html",
            "title": "Grouped Column Chart Showing Most Common Items Sold by Store Location \u2014 Charts Manual 0.10",
            "headings": [
                "Grouped Column Chart Showing Most Common Items Sold by Store Location",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nGrouped Column Chart Showing Most Common Items Sold by Store Location\u00b6\nTime to Complete: 5 minutes\nBy visualizing which items are sold most commonly at each store, you\ncan help ensure each store is properly stocked with the items they\nare most likely to sell out of. A grouped\ncolumn chart creates a group within the\nchart for each store location and display columns within each group\nreflecting the relative sales of each item.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nColumn.\nClick Grouped below the dropdown.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the storeLocation field to the X Axis\nencoding channel. The X Axis encoding channel\ndictates which field to use when creating the column groups.\n\nX Axis Encoding Channel\nUsing storeLocation for this encoding channel allows us\nto visualize a group of items per store location.\n\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nDrag the items.name field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nY Axis Encoding Channel\nUsing items.name for this encoding channel allows us to\naggregate and count the items sold in each location.\n\n\nIn the Array Reductions dropdown, select\nUnwind array.\n\nUnwind Array\nThe unwind array option creates a new document\nfor each element in the items array, so for each item sold\nby a particular store that item\u2019s name is added to the\nvisualization.\n\n\nIn the Aggregate dropdown, select count.\n\nCount\nThe count option counts the occurrences of each\nitem name after unwinding the items array and displays\nthem in the chart grouped by store location.\nFor more information on the $count aggregation command,\nrefer to the\ncount aggregation documentation.\n\n\nDrag the items.name field to the Series encoding\nchannel.\n\nSeries Encoding Channel\nThe Series encoding channel dictates how to\nsplit each group of the chart. Each member of the series\nbecomes a column within the group, so each item name becomes a\ncolumn within the store location group.\n\n\nIn the Series Array Reductions dropdown, select\nUnwind array.\n\nUnwind Array\nThis visualizes each tag from each element of the items\narray, enabling a complete count of the tags from every sale\nin the data set.\n\n\n\nYour chart should now look something like this:\n\n\n\nThe item sales look to be fairly evenly distributed by store\nlocation. Notice based on this chart that notepads are\nthe most common item sold at all store locations, which is\nuseful information when stocking each store with its\ninventory.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the title input:\n\n\n\ncopy\n\nMost Common Items Sold by Store Location\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYour dashboard should now look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a few charts the dashboard is starting to get a bit\ncrowded. Follow along to the next section of the tutorial to see how we\ncan rearrange and resize the\ncharts to make the dashboard easier to digest.\n\n",
            "preview": "By visualizing which items are sold most commonly at each store, you can help ensure each store is properly stocked with the items they are most likely to sell out of. A grouped column chart creates a group within the chart for each store location and display columns within each group reflecting the relative sales of each item.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/master/chart-type-reference/column-bar-chart/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/rearrange-resize/"
            ]
        },
        {
            "slug": "master/tutorial/order-data/order-data-tutorial-overview/index.html",
            "title": "Visualizing Order Data \u2014 Charts Manual 0.10",
            "headings": [
                "Visualizing Order Data",
                "Introduction",
                "Table of Contents"
            ],
            "text": "\nVisualizing Order Data\u00b6\n\nOn this page\n\nIntroduction\nTable of Contents\n\n\nTotal Estimated Time to Complete: 20-30 minutes\n\nIntroduction\u00b6\nThis tutorial walks through the features and capabilities of MongoDB Charts.\nYou will examine and visualize a data source\ncontaining order data from a mock office supply company.\nThis tutorial demonstrates how to create a\ndashboard containing charts of various types, and\nshows how to effectively use each chart\u2019s respective properties\nto obtain powerful visualizations.\nAfter completing the tutorial, you will have a dashboard which looks\nsimilar to the following:\n\n\n\n\n\nTable of Contents\u00b6\n\nStep 1: Setup and Import the Data\nStep 2: Create a New Dashboard\nStep 3: Column Chart Showing Total Sales by Store Location\nStep 4: Donut Chart Showing Most Common Tags for Items Sold\nStep 5: Grouped Column Chart Showing Most Common Items Sold by Store Location\nStep 6: Rearrange and Resize Charts\nStep 7: Area Chart Showing Age Distribution of Customers\n\nTo get started, move ahead to the\nSetup and Import the Data page.\n\n\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\n\n",
            "preview": "Total Estimated Time to Complete: 20-30 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/master/dashboards/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/prerequisites-setup/"
            ]
        },
        {
            "slug": "master/tutorial/order-data/prerequisites-setup/index.html",
            "title": "Setup and Import the Data \u2014 Charts Manual 0.10",
            "headings": [
                "Setup and Import the Data",
                "Prerequisites",
                "Download the Data",
                "Import the Data",
                "Add the Data Collection as a Data Source",
                "Next Steps"
            ],
            "text": "\nSetup and Import the Data\u00b6\n\nOn this page\n\nPrerequisites\nDownload the Data\nImport the Data\nAdd the Data Collection as a Data Source\nNext Steps\n\n\nTime to Complete: 8 minutes\n\nPrerequisites\u00b6\nThe following items are required to complete this tutorial:\n\nA MongoDB Atlas\ncluster. Refer to the Create a Cluster page for\ninstructions on creating an Atlas cluster, and the\nLaunch Charts page for instructions\non launching MongoDB Charts from your Atlas cluster.\nmongoimport.\nmongoimport is included in the Community and Enterprise versions\nof MongoDB available in the download center.\n\n\n\nDownload the Data\u00b6\nDownload the example dataset from\nhttps://raw.githubusercontent.com/mongodb/docs-assets/charts-tutorial/mgenerate-order-data.json.\nTo download the documents, right-click on the URL and select\nSave Link As. This file contains the data you will import\ninto the test.supplySales collection of your Atlas cluster in the\nfollowing step.\nTo give an idea of the data you will visualize, here is a sample\ndocument from the dataset:\n\n\n\ncopy\n\n{\n  \"_id\": {\"$oid\":\"5afb2c3dc09c8d2dd5852cf2\"},\n  \"saleDate\":{\"$date\":\"2017-11-08T19:06:53.449Z\"},\n  \"items\":[\n    {\n      \"name\":\"envelopes\",\n      \"tags\":[\"stationary\",\"office\",\"general\"],\n      \"price\":{\"$numberDecimal\":\"9.83\"},\n      \"quantity\":10\n    },\n    {\n      \"name\":\"pens\",\n      \"tags\":[\"office\",\"writing\",\"school\",\"stationary\"],\n      \"price\":{\"$numberDecimal\":\"73.62\"},\n      \"quantity\":2\n    },\n    {\n      \"name\":\"laptop\",\n      \"tags\":[\"office\",\"school\",\"electronics\"],\n      \"price\":{\"$numberDecimal\":\"595.72\"},\n      \"quantity\":4\n    },\n    {\n      \"name\":\"notepad\",\n      \"tags\":[\"office\",\"writing\",\"school\"],\n      \"price\":{\"$numberDecimal\":\"34.65\"},\n      \"quantity\":3\n    }\n  ],\n  \"storeLocation\":\"Seattle\",\n  \"customer\":{\n    \"gender\":\"M\",\n    \"age\":45,\n    \"email\":\"uga@we.so\",\n    \"satisfaction\":4\n  },\n  \"couponUsed\":false,\n  \"purchaseMethod\":\"Online\"\n}\n\n\n\n\n\nImport the Data\u00b6\nNow that you have a file containing the documents you will be\nvisualizing in Charts, use\nmongoimport to import the\ncontents of that file into the test.supplySales collection.\n\n\n\ncopy\n\nmongoimport --host <myAtlasHost> --ssl -u <USER> -p <PASSWORD> --authenticationDatabase admin \\\n--db test --collection supplySales \\\n--drop --file <path/to/mgenerate-order-data.json>\n\n\n\n\nNote\nRefer to the mongoimport\npage to familiarize yourself with the proper command syntax.\nAdditionally, the Atlas documentation for Connecting to a\nCluster using Command Line Tools\nmay prove helpful.\n\n\n\nAdd the Data Collection as a Data Source\u00b6\nNow that the data is in the desired collection, add the collection as a\ndata source in MongoDB Charts. Adding a\ncollection as a data source links the collection to Charts and\nallows us to create visualizations using that data.\n\nLaunch Charts from the Atlas cluster\nwhich contains your imported data.\n\nClick the Data Sources tab.\n\nClick New Data Source.\n\nIn the New Data Source dialog, select the Atlas\nProject which contains your imported data.\n\nClick Connect.\n\nSelect the test.supplySales collection.\n\nClick Set Permissions.\n\nLeave these options as default and click\nPublish Data Source.\n\nNote\nFor details on data source permissions, see the\nData Source Permissions\npage.\n\n\n\n\n\nNext Steps\u00b6\nNow that you have established the data source in Charts, you\ncan Create a New Dashboard which will\nuse this data source to create visualizations.\n\n",
            "preview": "The following items are required to complete this tutorial:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/launch-charts/",
                "https://www.mongodb.com/download-center/enterprise",
                "https://docs.atlas.mongodb.com/create-new-cluster/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/master/data-source-permissions/",
                "https://docs.mongodb.com/charts/master/data-sources/",
                "https://www.mongodb.com/cloud/atlas",
                "https://docs.atlas.mongodb.com/command-line-tools/",
                "http://docs.mongodb.org/manual/reference/program/mongoimport/",
                "https://raw.githubusercontent.com/mongodb/docs-assets/charts-tutorial/mgenerate-order-data.json"
            ]
        },
        {
            "slug": "master/tutorial/order-data/rearrange-resize/index.html",
            "title": "Rearrange and Resize Charts \u2014 Charts Manual 0.10",
            "headings": [
                "Rearrange and Resize Charts",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nRearrange and Resize Charts\u00b6\nTime to Complete: 2 minutes\nThe dashboard is starting to get crowded at the top row with plenty of\nempty space below. You can make the display easier to digest by\nrearranging and resizing some of the charts. Charts makes this\na straight-forward process by providing simple drag and drop\ncapabilities for reorganizing a dashboard.\n\nInstructions\u00b6\nYou can rearrange charts by dragging the top-left corner of the chart,\nand resize charts by dragging the bottom-right corner. For additional\ndetails on rearranging and resizing charts, see the\nManage Existing Dashboards section.\nTry reorganizing your dashboard to get something like this:\n\n\n\n\n\nNext Steps\u00b6\nIn the last chart of the dashboard, we will explore some of the\ncustomer data available in the schema to create an\narea chart showing the age distribution\nof customers.\n\n",
            "preview": "The dashboard is starting to get crowded at the top row with plenty of empty space below. You can make the display easier to digest by rearranging and resizing some of the charts. Charts makes this a straight-forward process by providing simple drag and drop capabilities for reorganizing a dashboard.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/manage-dashboards/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/area-chart-age-distribution/"
            ]
        },
        {
            "slug": "master/tutorials/index.html",
            "title": "Tutorials \u2014 Charts Manual 0.10",
            "headings": [
                "Tutorials"
            ],
            "text": "\nTutorials\u00b6\n\nVisualizing Order Data\nCreate a dashboard to visualize order data from a mock office\nsupply company. Build charts to gain insight on sales by location,\nthe types of items sold, and customer demographics.\nVisualizing Movie Details\nFollow this tutorial to create a dashboard to visualize movie\nmetadata and viewer rating data. Build charts to gain insight on\nwhich directors won the most awards and how award-nominated movies\ncorrespond to their viewer rating.\n\n\n\nVisualizing Order Data\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\nVisualizing Movie Details\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/movie-details-tutorial-overview/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/prereqs-and-import-data/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/order-data-tutorial-overview/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/scatter-chart-movies-ratings/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/master/tutorial/order-data/prerequisites-setup/",
                "https://docs.mongodb.com/charts/master/tutorial/movie-details/arrange-charts/"
            ]
        },
        {
            "slug": "v0.11/index.html",
            "title": "MongoDB Charts \u2014 Charts Manual 0.11",
            "headings": [
                "MongoDB Charts",
                "Features",
                "Concepts",
                "Chart Types",
                "Tutorials"
            ],
            "text": "\nMongoDB Charts\u00b6\n\nOn this page\n\nFeatures\nConcepts\nChart Types\nTutorials\n\n\nMongoDB Charts is a tool to create visual representations of\nyour MongoDB data. Data visualization is a key component to providing a\nclear understanding of your data, highlighting correlations between\nvariables and making it easy to discern patterns and trends within your\ndataset. MongoDB Charts makes communicating your data a straightforward\nprocess by providing built-in tools to easily share and collaborate on\nvisualizations.\n\nFeatures\u00b6\nOne of the most powerful features of MongoDB Charts is its built-in\naggregation functionality. Aggregation allows\nyou to process your collection data by a variety of metrics and perform\ncalculations such as mean and standard deviation to provide further\ninsight into your data.\nFurther, MongoDB Charts handles document-based data, including\nembedded objects and arrays. This\nprovides the flexibility of structuring data how it fits best for your\napplication while still retaining powerful visualization capabilities.\n\n\nConcepts\u00b6\nThe following elements of MongoDB Charts provide the flow of data from its\nsource to a visual representation:\n\n\n\n\n\n\nElement\nDescription\n\n\n\nData Source\nA reference to a MongoDB collection which contains the data you\nwish to visualize. Note that deleting a data source has no\neffect on the underlying MongoDB collection. For information on\nconnecting to and managing a data source, see\nData Sources.\n\nChart\nA visualization which maps to a single data source.\n\nDashboard\nA group of one or more charts.\n\n\n\nDashboards are the cornerstone of MongoDB Charts as they are where you create\nand view your data visualizations. For details on how to create,\nmanage, and share dashboards, see Dashboards.\n\nNote\nSince a chart can only display data from a single collection,\ndashboards which combine multiple charts are not only useful, but\nnecessary for visualizing data from multiple collections in a single\nview. This can lead to new insights into your data which may not be\nimmediately apparent.\n\n\nExample\nThe following dashboard contains two charts, each with distinct\nfocal points into a collection containing movie data:\n\n\n\n\n\n\nChart Types\u00b6\nThe following pages describe the specific construction and use cases\nfor each chart type in MongoDB Charts:\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n\nInstallation\nTutorials\nVisualizing Order Data\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\nVisualizing Movie Details\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n\nDashboards\nManage Existing Dashboards\nDashboard Permissions\n\n\nData Sources\nData Source Permissions\n\n\nBuild Charts\nEncoding Channels\nFilter Documents in the Visualization\nEmbedded Objects and Arrays\nBin Data\nSort and Limit Categorical Data\nCustomize Charts\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\nSample Mode\n\n\nChart Types\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\nUser Management\nAdministration\nBack Up and Restore Security Keys\nConfigure Charts Web Server to Use HTTPS\nConfigure TLS/SSL for Data Sources\nStart and Stop MongoDB Charts\n\n\nRelease Notes\nThird-Party Licenses\n\n\n\n\nTutorials\u00b6\nAfter you install MongoDB Charts, the following\ntutorials will help you get started building visualizations with your\ndata and explore key features offered by MongoDB Charts:\n\nMovie Details Tutorial\nThis tutorial walks through visualizing a data set containing\ndetails on movies, such as cast, critic reviews, and release.\nOrder Data Tutorial\nThis tutorial walks through visualizing a data set containing\nsales data from a mock office supply store. The tutorial\nillustrates how to visualize inventory, customer analytics, and\ntotal sales.\n\n\n",
            "preview": "MongoDB Charts is a tool to create visual representations of your MongoDB data. Data visualization is a key component to providing a clear understanding of your data, highlighting correlations between variables and making it easy to discern patterns and trends within your dataset. MongoDB Charts makes communicating your data a straightforward process by providing built-in tools to easily share and collaborate on visualizations.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/prereqs-and-import-data/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/scatter-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/v0.11/data-source-permissions/",
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "https://docs.mongodb.com/charts/v0.11/embedded-objects-arrays/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/v0.11/release-notes/",
                "https://docs.mongodb.com/charts/v0.11/installation/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/v0.11/administration/backup-and-restore-keys/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/arrange-charts/",
                "https://docs.mongodb.com/charts/v0.11/sample-mode/",
                "https://docs.mongodb.com/charts/v0.11/chart-types/",
                "https://docs.mongodb.com/charts/v0.11/administration/configure-https-deployment/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/prerequisites-setup/",
                "https://docs.mongodb.com/charts/v0.11/administration/start-stop-charts/",
                "https://docs.mongodb.com/charts/v0.11/administration/configure-ssl-data-sources/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/v0.11/tutorials/",
                "https://docs.mongodb.com/charts/v0.11/manage-dashboards/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/order-data-tutorial-overview/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.11/user-management/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.11/administration/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/",
                "https://docs.mongodb.com/charts/v0.11/third-party-licenses/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/data-table/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/movie-details-tutorial-overview/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/grid-charts/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/v0.11/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/scatter-chart-movies-ratings/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/field-level-options/"
            ]
        },
        {
            "slug": "v0.11/administration/index.html",
            "title": "Administration \u2014 Charts Manual 0.11",
            "headings": [
                "Administration"
            ],
            "text": "\nAdministration\u00b6\n\nBack Up and Restore Security Keys\nInstructions for backing up and restoring encryption keys for the\nCharts metadata database.\nConfigure Charts Web Server to Use HTTPS\nInstructions for configuring the MongoDB Charts web server to use the\nHTTPS protocol, as opposed to the default HTTP protocol.\nConfigure TLS/SSL for Data Sources\nInstructions for copying TLS/SSL certificates to the\nCharts host so data sources can access MongoDB deployments\nrunning with TLS/SSL enabled.\nStart and Stop MongoDB Charts\nInstructions for starting and stopping the MongoDB Charts application.\n\n\n\nBack Up and Restore Security Keys\nConfigure Charts Web Server to Use HTTPS\nConfigure TLS/SSL for Data Sources\nStart and Stop MongoDB Charts\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/administration/backup-and-restore-keys/",
                "https://docs.mongodb.com/charts/v0.11/administration/configure-https-deployment/",
                "http://docs.mongodb.org/manual/tutorial/configure-ssl",
                "https://docs.mongodb.com/charts/v0.11/administration/start-stop-charts/",
                "https://docs.mongodb.com/charts/v0.11/administration/configure-ssl-data-sources/"
            ]
        },
        {
            "slug": "v0.11/administration/backup-and-restore-keys/index.html",
            "title": "Back Up and Restore Security Keys \u2014 Charts Manual 0.11",
            "headings": [
                "Back Up and Restore Security Keys",
                "Back Up Keys",
                "Restore Keys"
            ],
            "text": "\nBack Up and Restore Security Keys\u00b6\n\nOn this page\n\nBack Up Keys\nRestore Keys\n\n\nMongoDB Charts uses a number of keys and tokens to secure your\ndeployment and encrypt sensitive data stored in the Charts\nmetadata database. When you first deploy Charts, new random\nkeys are automatically generated and saved to a\nDocker volume which\npersists the keys across container deployments.\n\nImportant\nIf you want to redeploy Charts or move Charts to a\nnew server, you will need to use the original keys in new\ndeployments. If you deploy a new instance of Charts and\npoint it to an existing Charts metadata database used by a\nprevious deployment, the encryption keys will not match and the\nnew instance of Charts will not be able to decrypt the\nmetadata.\n\nTo prevent this from occurring, you should back up the encryption keys\nafter the initial deployment and store them in a safe location. For a\nproduction Charts deployment you should also back up the data in the\nCharts metadata database using MongoDB backup methods.\n\nBack Up Keys\u00b6\nTo back up the keys, use the following commands to launch a temporary\ncontainer that copies the key files from the Charts volume to a\nnewly created directory on the host system:\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    \n\n\ncopy\n\nmkdir c:\\temp\\charts-keys-backup\ndocker run -it `\n  --volume mongodb-charts_keys:/volume `\n  --volume /c/temp/charts-keys-backup:/backup `\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\n\n\n\ncopy\n\nmkdir /tmp/charts-keys-backup\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n\n\n\n\ncopy\n\nmkdir /tmp/charts-keys-backup\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n    \n  \n\nImportant\nOnce the operation above completes, store the key in a secure\nlocation that is not on the Charts server.\n\n\n\nRestore Keys\u00b6\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    To restore the keys on the host of the new Charts deployment, first\ncopy the keys from the external location to the target host. For\nexample, C:\\temp\\charts-keys-backup. Then run the following commands\nbefore deploying Charts from the docker-compose file:\n\n\n\ncopy\n\ndocker volume create mongodb-charts_keys\ndocker run -it `\n  --volume mongodb-charts_keys:/volume `\n  --volume /c/temp/charts-keys-backup:/backup `\n  alpine sh -c 'cp /backup/* /volume'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\nTo restore the keys on the host of the new Charts deployment, first\ncopy the keys from the external location to the target host. For\nexample, /tmp/charts-keys-backup. Then run the following commands\nbefore deploying Charts from the docker-compose file:\n\n\n\ncopy\n\ndocker volume create mongodb-charts_keys\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /backup/* /volume'\n\n\n\n\nTo restore the keys on the host of the new Charts deployment, first\ncopy the keys from the external location to the target host. For\nexample, /tmp/charts-keys-backup. Then run the following commands\nbefore deploying Charts from the docker-compose file:\n\n\n\ncopy\n\ndocker volume create mongodb-charts_keys\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /backup/* /volume'\n\n\n\n    \n  \n\n",
            "preview": "MongoDB Charts uses a number of keys and tokens to secure your deployment and encrypt sensitive data stored in the Charts metadata database. When you first deploy Charts, new random keys are automatically generated and saved to a Docker volume which persists the keys across container deployments.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/core/backups",
                "https://docs.docker.com/storage/volumes/"
            ]
        },
        {
            "slug": "v0.11/administration/configure-https-deployment/index.html",
            "title": "Configure Charts Web Server to Use HTTPS \u2014 Charts Manual 0.11",
            "headings": [
                "Configure Charts Web Server to Use HTTPS",
                "Prerequisites",
                "Procedure",
                "Uncomment necessary lines of the Docker Compose file.",
                "Copy the certificate and key file to the Charts Docker volume.",
                "Redeploy the Charts Docker stack.",
                "Check Docker logs to ensure that you have correctly configured HTTPS"
            ],
            "text": "\nConfigure Charts Web Server to Use HTTPS\u00b6\n\nOn this page\n\nPrerequisites\nProcedure\n\n\nYou can configure the MongoDB Charts web server to use the HTTPS\nprotocol, as opposed to the default HTTP protocol. With the HTTPS\nprotocol, the web server encrypts your data using\nSSL, which ensures that the host\ntransmits data securely.\nThis process differs from configuring SSL for data sources, because this process\nenables TLS/SSL on the Charts web server itself, rather than\nconfiguring a connection to a specific MongoDB deployment with TLS/SSL\nenabled. When HTTPS is configured, Charts uses the standard\nHTTPS port 443 by default, and the Charts web server\nredirects any requests over HTTP (port 80) to the equivalent HTTPS\nport.\n\nPrerequisites\u00b6\nBefore you can configure HTTPS for your MongoDB Charts web server, you must\nfirst obtain an SSL key and certificate from an appropriate\ncertification authority. Instructions for obtaining an SSL key and\nproviding a list of trusted certificate authorities are out of scope\nfor this tutorial.\n\n\nProcedure\u00b6\nTo configure the MongoDB Charts web server to use the HTTPS protocol:\n1\nUncomment necessary lines of the Docker Compose file.\u00b6\nUncomment the following variables in the\nservices.charts.environment section of the Compose file you\ndownloaded as part of the Charts\ninstallation procedure:\n\nCHARTS_HTTPS_CERTIFICATE_FILE\nCHARTS_HTTPS_CERTIFICATE_KEY_FILE\n\nReplace the values of these variables with the names of your\ncertificate file and key file respectively. The certificate must\nbe in the .pem format and the key file must be a .key file.\n\nImportant\nThe values of these variables must be filenames, not complete\nfile paths. These files are always loaded from the\nweb-certs volume.\n\n\n2\nCopy the certificate and key file to the Charts Docker volume.\u00b6\n\n  \n    Windows\n    macOS\n    Linux\n  \n  \n    The following command copies certificate and key file in the\nC:\\path\\to\\certs directory to the Charts host.\nThis example uses a wildcard (*) in the file extension\nof the certificate to copy both mycert.pem and\nmycert.key to the host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_web-certs:/volume -v /c/path/to/certs:/localcerts alpine sh -c 'cp /localcerts/mycert.* /volume'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\nThe following command copies certificates in the\n/path/to/certs directory to the Charts host.\nThis example uses a wildcard (*) in the file extension\nof the certificate to copy both mycert.pem and\nmycert.key to the host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_web-certs:/volume -v /path/to/certs:/localcerts alpine sh -c 'cp /localcerts/mycert.* /volume'\n\n\n\n\nThe following command copies certificates in the\n/path/to/certs directory to the Charts host.\nThis example uses a wildcard (*) in the file extension\nof the certificate to copy both mycert.pem and\nmycert.key to the host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_web-certs:/volume -v /path/to/certs:/localcerts alpine sh -c 'cp /localcerts/mycert.* /volume'\n\n\n\n    \n  \n\n3\nRedeploy the Charts Docker stack.\u00b6\nIf MongoDB Charts is already running, remove the Charts Docker\nstack using the following command:\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\nBefore redeploying, execute docker ps a few times until it shows no\nrunning Charts containers. It can take a little while for the\ncontainers to shut down. Then, relaunch the stack using:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.11.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.11.0 with the version number of your release.\n\n\n4\nCheck Docker logs to ensure that you have correctly configured HTTPS\u00b6\nFirst, run the following command to obtain the Docker service ID for\nMongoDB Charts:\n\n\n\ncopy\n\ndocker service ls\n\n\n\nRetrieve the service logs by running the following command using the\nservice ID from the previous step:\n\n\n\ncopy\n\ndocker service logs <service ID>\n\n\n\nIf there are no errors reported in the logs, MongoDB Charts should now be\nconfigured to use HTTPS and will now automatically redirect from\nthe HTTP address to the HTTPS address in a web browser. If the logs\nreturn any errors, see the Troubleshooting section for possible solutions to\nthe issues listed.\n\n\n",
            "preview": "You can configure the MongoDB Charts web server to use the HTTPS protocol, as opposed to the default HTTP protocol. With the HTTPS protocol, the web server encrypts your data using SSL, which ensures that the host transmits data securely.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/installation/",
                "https://docs.mongodb.com/charts/v0.11/administration/configure-ssl-data-sources/"
            ]
        },
        {
            "slug": "v0.11/administration/configure-ssl-data-sources/index.html",
            "title": "Configure TLS/SSL for Data Sources \u2014 Charts Manual 0.11",
            "headings": [
                "Configure TLS/SSL for Data Sources",
                "Certificate Signed by a Trusted Root CA",
                "Self-Signed Certificate or Certificate Issued by an Internal CA",
                "Copy the certificates to the Charts Docker volume.",
                "Redeploy the Charts Docker stack.",
                "Add a Charts data source using TLS/SSL."
            ],
            "text": "\nConfigure TLS/SSL for Data Sources\u00b6\n\nOn this page\n\nCertificate Signed by a Trusted Root CA\nSelf-Signed Certificate or Certificate Issued by an Internal CA\n\n\nMongoDB Charts can connect to MongoDB deployments running with or without\nTLS/SSL enabled. If the deployment is running with TLS/SSL enabled,\nconfiguring your data source depends on whether the certificate is:\n\nsigned by a trusted root certificate authority, or\nself-signed or issued by an internal certificate authority.\n\n\nNote\nMongoDB deployments should use TLS/SSL 1.1 or later.\n\n\nCertificate Signed by a Trusted Root CA\u00b6\nTo connect Charts to a MongoDB deployment using a certificate\nsigned by a trusted root certificate authority,\nadd a data source and append the ssl=true\noption to the\nConnection String URI:\n\n\n\ncopy\n\nmongodb://[username:password@]<server>:<port>/<database>?ssl=true\n\n\n\n\nNote\nNo additional configuration is required when using a certificate\nsigned by a trusted root certificate authority.\n\n\n\nSelf-Signed Certificate or Certificate Issued by an Internal CA\u00b6\nTo connect Charts to a MongoDB deployment using a self-signed\ncertificate or a certificate issued by an internal certificate\nauthority, you must copy the certificate to the\nDocker volume. The\nfollowing steps copy the certificate to the Docker volume, redeploy the\nCharts application, and add a new data source configured to use\nTLS/SSL:\n1\nCopy the certificates to the Charts Docker volume.\u00b6\nThe certificate must be in the .pem format and will be either:\n\nthe self-signed certificate used by the MongoDB deployment, or\nthe CA\u2019s root certificate, if the certificate used by the MongoDB\ndeployment was issued by a CA.\n\n\n  \n    Windows\n    macOS\n    Linux\n  \n  \n    The following command copies certificates in the\nC:\\path\\to\\certs directory to the Charts host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_db-certs:/volume -v /c/path/to/certs:/localcerts alpine sh -c 'cp /localcerts/*.pem /volume'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\nThe following command copies certificates in the\n/path/to/certs directory to the Charts host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_db-certs:/volume -v /path/to/certs:/localcerts alpine sh -c 'cp /localcerts/*.pem /volume'\n\n\n\n\nThe following command copies certificates in the\n/path/to/certs directory to the Charts host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_db-certs:/volume -v /path/to/certs:/localcerts alpine sh -c 'cp /localcerts/*.pem /volume'\n\n\n\n    \n  \n\n2\nRedeploy the Charts Docker stack.\u00b6\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\nBefore redeploying, execute docker ps a few times until it shows no\nrunning Charts containers. It can take a little while for the\ncontainers to shut down. Then, relaunch the stack using:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.11.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.11.0 with the version number of your release.\n\n\n3\nAdd a Charts data source using TLS/SSL.\u00b6\nUsing the Charts application,\nadd a data source and append the ssl=true\noption to the Connection String URI\nto use TLS/SSL when connecting to this data source:\n\n\n\ncopy\n\nmongodb://[username:password@]<server>:<port>/<database>?ssl=true\n\n\n\n\n\n",
            "preview": "MongoDB Charts can connect to MongoDB deployments running with or without TLS/SSL enabled. If the deployment is running with TLS/SSL enabled, configuring your data source depends on whether the certificate is:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "http://docs.mongodb.org/manual/reference/connection-string",
                "https://docs.docker.com/storage/volumes/"
            ]
        },
        {
            "slug": "v0.11/administration/start-stop-charts/index.html",
            "title": "Start and Stop MongoDB Charts \u2014 Charts Manual 0.11",
            "headings": [
                "Start and Stop MongoDB Charts"
            ],
            "text": "\nStart and Stop MongoDB Charts\u00b6\nMongoDB Charts executes within a single Docker container managed by\nDocker Swarm.\nTo start Charts, deploy the stack using the supplied Docker Compose\nfile:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.11.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.11.0 with the version number of your release.\n\nTo stop Charts, ask Docker to remove the stack:\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\n",
            "preview": "MongoDB Charts executes within a single Docker container managed by Docker Swarm.",
            "tags": "",
            "links": []
        },
        {
            "slug": "v0.11/bin-data/index.html",
            "title": "Bin Data \u2014 Charts Manual 0.11",
            "headings": [
                "Bin Data",
                "Bin Date Fields",
                "Bin Numeric Fields"
            ],
            "text": "\nBin Data\u00b6\n\nOn this page\n\nBin Date Fields\nBin Numeric Fields\n\n\nMongoDB Charts supports binning both numeric and date fields in your\ndata. Binning breaks continuous data into discrete groups called\nbins, with each bin containing a contiguous subset of the original\nvalues. For example, you might group users into bins by the decade they were\nborn, or group timestamped calendar events by the month of their start\ndate.\n\nContinuous vs Discrete Data\nContinuous data can occupy any value over a continuous range.\nSome examples of continuous data include height, temperature, or\nthe time a person was born.\nAlternatively, discrete data is data which can only take certain\nvalues, categorized into a classification. Examples of discrete\ndata include eye color and the number of students in a class.\n\n\nBin Date Fields\u00b6\nWhen handling dates, this data often comes in a continuous\nform. It can be useful to split this data into a specific windows of\ntime to uncover additional trends and patterns. MongoDB Charts supports the\nfollowing bins for dates:\n\nYear\nMonth\nDate of the Month\nDay of the Week\n\n\nHour\nMinute\nSecond\n\n\nTo use binning for dates:\n\nDrag a date field (signified by a calendar icon in the\nFields section of the Chart Builder) to a\ncategory encoding channel.\nBy default, binning is enabled as indicated by the\nBinning On toggle.\n\nUse the dropdown to select the bin size for your dates.\n\n\n\nToggle the Periodic setting as desired.\n\nIf enabled, MongoDB Charts creates bins relative to the next highest\ntime period and repeats each bin to cover the timeframe spanned\nin the data field.\nIf disabled, the bins Charts creates do not repeat.\n\n\nExample\nConsider a date field containing data spanning 5 years, and\na bin selection of Month. If Periodic is\ndisabled, Charts adds the 60 months in the dataset to the\nvisualization.\nAlternatively, if Periodic is enabled, Charts\nonly plots the 12 calendar months, and visualizes the total\naggregated results from each calendar month.\n\n\nNote\nThe Periodic setting is always enabled when selecting\na bin size of Day of the Week.\nThe Periodic setting is always disabled when\nselecting a bin size of Year, because year is the\nlargest time period available in Charts.\n\n\n\nTo disable binning, toggle the Binning setting\nto off. In this case, each date from the field is added to the\nvisualization with no grouping performed.\n\nExample\nThe following chart visualizes historical sales data for an office\nsupply store. Every sale is represented by a document in the\nsupplySales collection. Each document in the collection includes\nthe date of the sale as salesDate and a list of items included\nin the sale as the items array.\nThe saleDate field contains continuous timestamp data. The field\nis binned by Date of the Month with the\nPeriodic setting enabled. This means that over the\ncourse of the several years the data spans, MongoDB Charts plots the\nmean value of sales from each individual date of the\nmonth:\n\n\n\n\n\n\nBin Numeric Fields\u00b6\nMongoDB Charts can also bin numeric fields from a continuous set into groups\nof a specified size. This\nTo use binning for numeric fields:\n\nDrag a numeric field (signified by the number sign icon in the\nFields section of the Chart Builder) to a\ncategory encoding channel.\nBy default, binning is enabled as indicated by the toggle stating\nBinning On.\n\nEnter the desired bin size in the Bin Size input.\n\n\nTo disable binning, toggle the Binning setting\nto off. In this case, each individual value from the field is added\nto the visualization, rather than being grouped into bins.\n\nExample\nThe following chart visualizes historical sales data for an office\nsupply store. Every sale is represented by a document in the\nsupplySales collection. Each sale document contains a\ncustomer object, which contains information on the customer\npurchasing the item(s).\nThe following chart applies binning to the customer.age field.\nThe age field contains continuous numeric data and is\nbinned by decade. Each age value is placed into the\nappropriate bin and Charts counts the number of ages in each\nbin to provide a high-level overview of the age distrubution of\nstore customers.\n\n\n\n\n\n",
            "preview": "MongoDB Charts supports binning both numeric and date fields in your data. Binning breaks continuous data into discrete groups called bins, with each bin containing a contiguous subset of the original values. For example, you might group users into bins by the decade they were born, or group timestamped calendar events by the month of their start date.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/"
            ]
        },
        {
            "slug": "v0.11/build-charts/index.html",
            "title": "Build Charts \u2014 Charts Manual 0.11",
            "headings": [
                "Build Charts",
                "Create a Chart"
            ],
            "text": "\nBuild Charts\u00b6\nCharts provide visual representations of the data in your\ndata source. A chart maps to a single\ndata source, and can display correlations between several fields in the\ndata. Charts reside inside dashboards. You must\nadd a data source and create a dashboard before you can begin building charts.\nFor a complete list of available chart types and how to build specific\ncharts, refer to the Chart Types page.\n\nCreate a Chart\u00b6\nTo build a new chart:\n\nFrom the Dashboards tab, select the dashboard where you\nwish to add a new chart. For instructions on setting up a dashboard,\nsee Dashboards.\n\nClick the Add Chart button at the top-right corner of\nthe dashboard view.\n\nIn the Data Source dropdown, select the data source to\nbe used for this chart. For information on adding data sources in\nMongoDB Charts, see\nData Sources.\n\nIn the Chart Type dropdown, select the type for this\nchart.\n\nNote\nEach chart type provides different visualization options\nfor the fields in your data, reflected by various\nencoding channels. These channels dictate how your data is\nvisualized and enable powerful\naggregations for\nyour data. For details on the different encoding channel types,\nrefer to the Encoding Channels\npage.\n\n\nDrag fields from the Fields section to the desired\nencoding channels below the\nChart Type dropdown. The fields listed correspond to the\nfields in your data source. You can search for a specific field in\nyour data source by using the Filter search bar at the\ntop of the Fields section.\n\nNote\nFor details on how MongoDB Charts handles embedded objects and\nembedded arrays in fields, see the\nEmbedded Objects and Arrays\npage.\n\n\nGive your chart a title by hovering over the\nEnter a title for your chart text clicking the\nPencil Icon. Click the Green Check Mark to\nsave your title.\n\nOnce you are satisfied with your chart, click\nSave Changes. This saves your chart to your dashboard\nand redirects you to the dashboard view.\n\n\n\n\nEncoding Channels\nFilter Documents in the Visualization\nEmbedded Objects and Arrays\nBin Data\nSort and Limit Categorical Data\nCustomize Charts\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\nSample Mode\n\n\n\n",
            "preview": "Charts provide visual representations of the data in your data source. A chart maps to a single data source, and can display correlations between several fields in the data. Charts reside inside dashboards. You must add a data source and create a dashboard before you can begin building charts.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.11/chart-types/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/",
                "https://docs.mongodb.com/charts/v0.11/sample-mode/",
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "https://docs.mongodb.com/charts/v0.11/embedded-objects-arrays/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/",
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/field-level-options/"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/column-bar-chart/index.html",
            "title": "Column and Bar Charts \u2014 Charts Manual 0.11",
            "headings": [
                "Column and Bar Charts",
                "Column and Bar Chart Encoding Channels",
                "Column and Bar Chart Types",
                "Use Cases",
                "Examples",
                "Grouped Column Chart",
                "Stacked Column Chart",
                "100% Stacked Bar Chart",
                "Colored Bar Chart"
            ],
            "text": "\nColumn and Bar Charts\u00b6\n\nOn this page\n\nColumn and Bar Chart Encoding Channels\nColumn and Bar Chart Types\nUse Cases\nExamples\n\n\nColumn and bar charts plot data in either horizontal or vetical\nsegments where the length of the segment is proportional to the data\nvalue. Column and bar charts provide high-level overviews of data\ntrends by comparing values within a specific category.\n\nColumn and Bar Chart Encoding Channels\u00b6\nColumn and bar charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX / Y Axis\n\nIn the category axis encoding channel, a bar or\ncolumn is rendered for each unique value from this field.\nIn a column chart, the category is the\nX Axis, which results in vertical segments. In a\nbar chart, the category is the\nY Axis, which results in horizontal segments.\n\nThe aggregation axis encoding channel dictates\nwhich field to aggregate on and the type of aggregation to\nperform. This ultimately dictates the size of each bar or\ncolumn.\n\nNote\nYou can aggregate upon multiple fields in your dataset to\ncreate multi-series charts. For more information, see\nMultiple Field Mappings.\n\n\n\n\n\nSeries\n(Optional) A category encoding channel that\nsegments the axis category based on the unique values in\nthis field.\nIf omitted, MongoDB Charts renders a basic bar or column chart with\njust a comparison of the X Axis and\nY Axis fields.\n\nNote\nThis option is only available for Grouped and Stacked charts with a single field mapped in\nthe aggregation channel.\n\n\n\nColor\n(Optional) An aggregation encoding channel for\nColored charts that changes the\nbars or columns\u2019 colors to reflect the aggregated\nvalue of the field, with darker colors meaning greater values.\n\n\n\n\n\nColumn and Bar Chart Types\u00b6\nColumn and bar charts provide the following sub-types:\n\n\n\n\n\n\nSub-Type Name\nDescription\n\n\n\nGrouped\nMongoDB Charts groups data by the category specified in the\ncategory encoding channel, and plots a bar or column for each value\nin the Series encoding channel.\n\n\nFor a more detailed example, refer to the\ngrouped column chart example.\n\n\n\nStacked\nMongoDB Charts creates a bar or column for each distinct value in the\ncategory encoding channel\nfield, and splits each bar or column into segments based on the\nthe Series encoding channel.\n\n\nFor a more detailed example, refer to the\nstacked bar chart example.\n\n\n\n100% Stacked\n100% stacked charts behave similarly to traditional stacked\ncharts, with the difference that in a 100% stacked chart each\nbar or column is normalized to a consistent value of 100%. Just\nas with traditional stacked charts, each bar or column is split\ninto segments based on the Series\nencoding channel. Each series is\nshown as a percentage of the whole.\nWhen using a traditional stacked chart, it can be difficult to\ncompare the proportions of each series to the whole if the\ntotal values of the bars / columns greatly differ. This type of\nchart makes it easier to compare proportions within each bar or\ncolumn by showing relative percentages.\n\nNote\nYou cannot customize the minimum, maximum, or logarithmic\nscale value axis options of 100%\nstacked charts.\n\n\n\nFor a more detailed example, refer to the\n100% stacked bar chart example.\n\n\n\nColored\nMongoDB Charts creates a bar or column for each distinct value in the\ncategory encoding channel\nfield, and the Color encoding channel changes the\ncolor of each bar / column based on the aggregated value of the\nvalue specified in the encoding channel.\n\n\nFor a more detailed example, refer to the\ncolored bar chart example.\n\n\n\n\n\n\n\nUse Cases\u00b6\nColumn and bar charts display information in similar manners and, as\nsuch, have similar use cases. There are, however, situations where it\nmay be beneficial to use one over the other:\n\nA bar chart may be a better choice than a column chart when the\ncategory labels are long, as it may be difficult to quickly\npinpoint which label applies to which column.\nA column chart may be a better choice when comparing sequential\nvalues (such as time or geographic data) because the viewer\nwill intuitively read these charts from left to right and attain the\nfull picture of the visualization.\n\n\nTip\nColumn and bar charts are best suited for data with limited\ncategories. When plotting data with many categories, such as\nyears across a long period of time, consider using a\nLine Chart.\nYou can also limit the number of categories displayed in your\nchart to focus on a subset of your data. MongoDB Charts provides the\nfollowing methods to reduce the number of bars or columns plotted\nin the visualization:\n\nFilter documents\nLimit Data\nBin data\n\n\n\n\nExamples\u00b6\n\nGrouped Column Chart\u00b6\nThe following grouped column chart shows the most common items sold\nfrom an office supply store across several store locations.\nThe X Axis category of storeLocation creates a group\nfor each store location in the data set, and each group is split by the\nseries column of item.name. This ultimately displays\nthe count of each item\u2019s name sold at each store location:\n\n\n\n\n\nStacked Column Chart\u00b6\nThe following stacked column chart shows the number of awards won by\nthe top 10 highest award-winning movie directors, with each bar\nsegmented by the genres of films directed by that director.\nThe X Axis category of director creates a column for each\ndirector in the data set, which we limit to\nonly the top 10 as sorted by the aggregated sum of awards.wins from\nthe Y Axis. The Series encoding channel field\nof genres segments each column to portray the genres of the films\ndirected by that director:\n\n\n\n\n\n100% Stacked Bar Chart\u00b6\nThe following 100% stacked bar chart visualizes the monthly cost\nof renting a home in three different suburbs of Austin, Texas, USA.\nUsing a 100% stacked chart allows us to easily visualize\nthe percentage of rental homes in each monthly_price\nbin within each neighborhood. This provides a\nclear picture of how these neighborhoods generally compare on rental\nprices.\nThis is the complete filter used for\nthis chart:\n\n\n\ncopy\n\n{\n  $and: [\n    { monthly_price:\n      { $exists: true, $lte: 2000 }\n    },\n    { 'address.suburb':\n      { $in: [\"Georgian Acres\", \"South Congress\", \"Wooten\"] }\n    }\n  ]\n}\n\n\n\nThe Y Axis category channel creates a bar for each of the\nthree suburbs in the filter. The X Axis channel aggregates\nto obtain a count of documents matching each respective suburb. The\nSeries encoding channel of monthly_price splits each\nbar into categories colored according to the legend on the right\nside of the chart:\n\n\n\n\n\nColored Bar Chart\u00b6\nThe following colored bar chart shows the average Rotten Tomatoes rating for countries with the 10\nhighest ratings, and colors each bar to show the average runtime for\nmovies from each country.\nThe Y Axis category creates a bar for each country in the\ndata set, which we limit to only the top 10 as sorted by the aggregated\nmean of the tomato.rating field from the X Axis. The\nColor encoding channel field of runtime colors each bar\nto show the average runtime for movies from each country. A darker\nshade of green indicates a longer average runtime:\n\n\n\n\n\n",
            "preview": "Column and bar charts plot data in either horizontal or vetical segments where the length of the segment is proportional to the data value. Column and bar charts provide high-level overviews of data trends by comparing values within a specific category.",
            "tags": "",
            "links": [
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/line-area-chart/"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/data-table/index.html",
            "title": "Data Table \u2014 Charts Manual 0.11",
            "headings": [
                "Data Table",
                "Data Table Encoding Channels",
                "Use Cases",
                "Examples",
                "Basic Data Table",
                "Data Table with Dynamic Columns",
                "Sort and Resize Data Table Columns",
                "Behavior",
                "Procedure",
                "Reorder Data Table Columns",
                "Considerations",
                "Toggle Row and Column Totals"
            ],
            "text": "\nData Table\u00b6\n\nOn this page\n\nData Table Encoding Channels\nUse Cases\nExamples\nSort and Resize Data Table Columns\nReorder Data Table Columns\nToggle Row and Column Totals\n\n\nData tables represent data in a tabular view, similar to a\nspreadsheet. Data tables\nsplit your data into categories, with each categorization field\nrepresented in the table columns. The unique categories are represented\nas the table rows, and Charts displays aggregated values in the\ntable body based on the fields selected.\n\nData Table Encoding Channels\u00b6\nData tables use the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nGroups\nThe category encoding channels. Charts\ncreates a row in the table for each unique value in this field.\nWhen multiple Groups are added to the chart,\nCharts creates a row for each unique combination of\ngroup fields.\n\nNote\nThe Groups encoding channel supports\nbinning for numeric and date fields.\n\n\n\nValues\nThe aggregation encoding channels. Charts\ncreates a column for each field mapped into the\nValues channel. Charts\naggregates the encoded Values fields using the\nselected aggregation methods and populates the grid cells with\nthe aggregated value for the corresponding Group.\n\nDynamic Columns\nA second Category encoding channel. When you use\nDynamic Columns, Charts creates table\ncolumns based on the unique values retrieved from the field\nmapped into the Dynamic Columns channel.\nCharts uses the field mapped into the Values\nchannel to populate the grid cells, aggregated against both the\nGroup and Dynamic Column categories.\nYou cannot apply dynamic columns to a table if you have selected\nmultiple Value encoding channels.\nFor an example of how to use dynamic columns, see the following\nexample.\n\nNote\nThe Dynamic Columns encoding channel supports\nbinning for numeric and date fields.\n\n\n\n\n\n\n\nUse Cases\u00b6\nData tables have a wide variety of applications, but are most useful\nwhen comparing multiple categories of calculated values. Visual charts\nstruggle to display multiple categories of data without losing their\naudience. Data tables present data with multiple categories such that\nyou can see which value applies to which slice of data.\nData tables are also useful for showing precise data values, rather\nthan comparing approximate values. Comparing approximate values is\nbest done with a visual representation, instead of text.\nYou can use data tables to show:\n\nThe total cost to rent an apartment, including rent, cleaning fees,\nand security deposits organized by location and total area of the\nunit.\nTime spent working out and total calories burned during various\nexercises categorized by the type of exercise and time of day the\nexercised was performed.\n\n\n\nExamples\u00b6\nThe following data table examples visualize data from a hospitality\nand property service. Each document in the collection\nrepresents a unit available for rent and includes information such as\nthe monthly unit price, neighborhood, and property type.\n\nBasic Data Table\u00b6\nThe following data table categorizes the rental listings by property\ntype and location, and shows the average review rating and average\nweekly rent for each group:\n\n\n\nThe Group encoding channels of property_type and\nsuburb create a row in the data table for each unique combination\nof those two fields in the data.\nThe Values of review_scores_rating and\nweekly_price each add a column to the table. For both values, we\naverage the rating and price for each property type and suburb\nusing aggregation and display the results in\nthe data table.\nThe results are formatted using the Customization tab to display the\nmean weekly price as currency and round the mean review score to an\nappropriate number of decimal places.\n\nNote\nWe have applied a filter to this\nchart to only display listings which have a weekly_price\nassociated with them.\n\n\n\nData Table with Dynamic Columns\u00b6\nThe following data table displays nearly the same data as the previous\nbasic data table example. In this example, instead of making\nproperty_type and suburb Groups, property_type\nfield is now a Dynamic Column:\n\n\n\nNow, rather than having two category columns in the table, the\nproperty_types become column titles. We are still aggregating\nthe mean of the weekly_price based on each combination of\nproperty_type and suburb.\nThe results are formatted using the Customization tab to display the\nmean weekly price as currency.\n\nNote\nBlank table cells indicate that there are no documents that match\nthe corresponding intersection of property_type and suburb.\n\n\n\n\nSort and Resize Data Table Columns\u00b6\nUsers with the viewer and author roles\non data tables can sort and resize data table columns. You\ncan sort and resize columns either in the\ndashboard or the Chart Builder.\n\nBehavior\u00b6\nWhen a viewer or author sorts or resizes columns from the\ndashboard, the changes do not persist as part of\nthe chart definition. In this case, the chart returns to its\noriginal state once the chart or corresponding dashboard is\nrefreshed.\nTo save the changes as part of the chart definition, an author must\nmake the changes in the Chart Builder. All Charts users will\nsee the new column sorting and sizing.\n\n\nProcedure\u00b6\n\nSort Columns\u00b6\nTo sort a data table column, click on its header. With each click, MongoDB Charts cycles between sorting the column in\nascending order, descending order, and the default chart sorting order.\nTo sort by multiple columns, Shift + Click on the additional columns\nby which you wish to sort. Charts applies the sort order in\nthe same order you select additional columns. Charts displays\nnumbers in the column headers indicating the order in which the\nsorting is applied.\n\n\nResize Columns\u00b6\nTo resize a column, click the the column divider and drag until the\ncolumn reaches the desired width.\nTo return a column to its default width, double-click on the column\ndivider.\n\n\n\n\nReorder Data Table Columns\u00b6\nUsers with the and author role on data tables\ncan reorder data table columns in the Chart Builder.\nTo reorder data table columns, click and drag column headers to the\ndesired order.\nWhen an author reorders data table columns and saves the\nchart, MongoDB Charts saves the specified order as part of the chart\ndefinition. All Charts users will see the new column order.\n\nNote\nData table authors can also reorder\ncolumns by modifying the order of the respective column\nencoding channels. MongoDB Charts renders data\ntable columns in the same order you specify the column encoding\nchannels. To modify the order of the encoding channels, drag and\ndrop one field on top of another to swap their order.\n\n\nConsiderations\u00b6\n\nYou can only reorder columns within their respective table sections,\nbeing Groups or Values.\nYou cannot reorder Dynamic Columns.\n\n\n\n\nToggle Row and Column Totals\u00b6\nBy default, data tables include a Column Totals row, which consists of\na row of values with sum totals for each column. Optionally, you can\nenable a Row Totals column, which consists of a column of\nvalues containing sum totals for each row.\nThe following image shows a detail from a data table with row and\ncolumn totals enabled and added text indicating which is which:\n\n\n\nTo toggle the totals on and off:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nColumn Totals and Row Totals toggles\nto the desired settings.\n\nFor a complete list of Chart Customization options, see Customize\nCharts.\n\n",
            "preview": "Data tables represent data in a tabular view, similar to a spreadsheet. Data tables split your data into categories, with each categorization field represented in the table columns. The unique categories are represented as the table rows, and Charts displays aggregated values in the table body based on the fields selected.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/",
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/",
                "https://docs.mongodb.com/charts/v0.11/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/",
                "https://en.wikipedia.org/wiki/Spreadsheet"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/donut-chart/index.html",
            "title": "Donut Chart \u2014 Charts Manual 0.11",
            "headings": [
                "Donut Chart",
                "Donut Chart Encoding Channels",
                "Use Cases",
                "Examples",
                "Donut Chart Using Count",
                "Donut Chart Using Sum"
            ],
            "text": "\nDonut Chart\u00b6\n\nOn this page\n\nDonut Chart Encoding Channels\nUse Cases\nExamples\n\n\nDonut charts display data in a series of segments of a circle, with\nlarger segments representing larger data values. The entire circle\nrepresents the summation of all data values, and each segment\nindicates the proportion of each category in the data to the total.\n\nDonut Chart Encoding Channels\u00b6\nDonut charts provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nLabel\nThe category encoding channel. MongoDB Charts creates a\nsegment in the donut for each unique value from this field.\n\nNote\nThe Label encoding channel supports\nbinning for numeric and date fields.\nThe channel supports sorting and\nlimiting for string fields.\n\n\n\nArc\nThe aggregation encoding channel. MongoDB Charts\naggregates this field\nbased on the aggregation method selected. This field dictates\nthe size of each circle segment.\n\n\n\n\n\nUse Cases\u00b6\nDonut charts are ideal for giving readers a quick overview of the\nproportional distribution of a dataset. Use donut charts when the\ngeneral trend of data is more important than precise data values.\nDonut charts are especially useful when there is a low number of\ncategories to visualize, because it is easier to compare fewer\nsegments of the circle to see which values make up the greatest\nparts of the whole.\nConsider using donut charts to display:\n\nThe proportion of store customers who place orders in-store versus\nonline\nThe proportion of various resources exported by a country\nThe choices thrown during several Rock, Paper, Scissors games\n\n\nNote\nAlthough you can bin or limit your data to reduce the number of categories\nin the visualization, this may not be the best choice for donut\ncharts. The purpose of donut charts is to show each value as a\nproportion of a total, so excluding categories may result in a\nmisleading visualization that reflects inaccurate proportions.\nWhen looking to compare individual data values, rather than show\nvalues as a proportion to a whole, consider using a\ncolumn or bar chart.\n\n\n\nExamples\u00b6\n\nDonut Chart Using Count\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale,\nwhich contains information on the item(s) sold and the customer\nconducting the purchase. This donut chart shows the proportional\ncounts of the three different purchase methods the store provides:\n\n\n\nThe Label field of purhcaseMethod tells MongoDB Charts to\ncreate a circle segment for each unique value in the purhcaseMethod\nfield. MongoDB Charts proportions each segment according to the aggregated\nvalue signified in the Arc encoding channel. In this case,\nwe aggregate to find the total count of documents with the\nsame purhcaseMethod value.\nWe see based on the visualization that the most common purchase method\nis In store, followed by Online.\n\nNote\nIn this example we are counting entire documents, so it does not\nmatter what field we select for the Arc field. No\nmatter what field we apply, the visualization will still be\nthe same.\n\n\n\nDonut Chart Using Sum\u00b6\nThe following chart visualizes personal workout data. Each document in\nthe collection represents a single workout activity, which includes\ninformation on the type of activity performed and the amount of time\nspent exercising. This donut chart shows the proportional time spent\nperforming each exercise activity:\n\n\n\nThe Label field of Activity Type tells MongoDB Charts to\ncreate a circle segment for each unique value in the Activity Type\nfield. MongoDB Charts proportions each segment according to the aggregated\nvalue signified in the Arc encoding channel. In this case,\nwe aggregate to find the total sum of workout times for\ndocuments with the same Activity Type value.\nWe see based on the visualization that the activity with the greatest\ntotal workout time is Surf, followed by Bike Ride.\n\n\n",
            "preview": "Donut charts display data in a series of segments of a circle, with larger segments representing larger data values. The entire circle represents the summation of all data values, and each segment indicates the proportion of each category in the data to the total.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/grid-charts/index.html",
            "title": "Grid Charts \u2014 Charts Manual 0.11",
            "headings": [
                "Grid Charts"
            ],
            "text": "\nGrid Charts\u00b6\n\n\nHeatmap\nScatter Chart\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/scatter-chart/"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/heatmap/index.html",
            "title": "Heatmap \u2014 Charts Manual 0.11",
            "headings": [
                "Heatmap",
                "Heatmap Encoding Channels",
                "Use Cases",
                "Example"
            ],
            "text": "\nHeatmap\u00b6\n\nOn this page\n\nHeatmap Encoding Channels\nUse Cases\nExample\n\n\nA heatmap represents data in a tabular format as a range of color. A\ndarker, or more intense, color represents a larger aggregated value\nfor a particular data point.\n\nHeatmap Encoding Channels\u00b6\nHeatmaps provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nA category encoding channel that creates a category\nalong the X axis for each unique value in this field.\n\nY Axis\nA category encoding channel that creates a category\nalong the Y axis for each unique value in this field.\n\nIntensity\nAn aggregation encoding channel that changes the\nshading of the matrix elements to reflect the aggregated value\nof this field. Darker colors in the visualization reflect\ngreater aggregated values.\n\n\n\n\nNote\nHeatmaps support sorting and\nlimiting for the\nX Axis encoding channel, but not the\nY Axis channel.\n\n\n\nUse Cases\u00b6\nHeatmaps reveal patterns or trends within your data. Use heatmaps\nwhen the exact data values are not as important as depicting\nhigher-level trends and relationships between your data points. They\ncan also highlight any significant outliers, or points which strongly\ngo against the general direction of your data. A heatmap is a good\nchoice to display:\n\nA comparison of average room rental prices based on location and\nproperty type.\nGeographic data, such as election results across different districts\nor population density.\nThe number of customer orders across various store locations by month\nof the year.\n\n\nTip\nHeatmaps work especially well with binned\ndata. With naturally ordered datasets, heatmaps highlight areas of\nconcentration within the data.\n\n\n\nExample\u00b6\nThe following chart visualizes data pertaining to movies. Each\ndocument in the collection represents a movie and contains general\ninformation about the film as well as ratings from critics. This\nheatmap shows the mean (average) Metacritic rating for different movie genres\n(Y Axis) over time (X Axis):\n\n\n\nWe bin the years along the X Axis into\ndecades and aggregate to find the mean metacritic score\nof films from each genre released in each decade.\nThe intensity field of metacritic shades each grid\nelement based on the mean metacritic field of all of the\nintersecting documents based on the X and\nY axes fields. Based on the chart, we see that\nfrom 1930-1940 there are a few genres with very high\naverage Metacritic scores, and over time a more even distribution of\nfilm ratings begins to occur.\n\nNote\nIf the space is white, there are no movies from that decade of that\nparticular genre in the dataset.\n\n\n",
            "preview": "A heatmap represents data in a tabular format as a range of color. A darker, or more intense, color represents a larger aggregated value for a particular data point.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "http://www.metacritic.com/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/line-area-chart/index.html",
            "title": "Line and Area Charts \u2014 Charts Manual 0.11",
            "headings": [
                "Line and Area Charts",
                "Discrete Line and Area Charts",
                "Discrete Chart Encoding Channels",
                "100% Stacked Area Charts",
                "Continuous Line and Area Charts",
                "Continuous Chart Encoding Channels",
                "Discrete Area Versus Continuous Area Charts Display",
                "Use Cases",
                "Examples",
                "Discrete Area Chart with Multiple Series",
                "100% Stacked Area Chart",
                "Discrete Line Chart with Multiple Aggregated Fields",
                "Continuous Line Chart"
            ],
            "text": "\nLine and Area Charts\u00b6\n\nOn this page\n\nDiscrete Line and Area Charts\nDiscrete Chart Encoding Channels\n100% Stacked Area Charts\n\n\nContinuous Line and Area Charts\nContinuous Chart Encoding Channels\n\n\nDiscrete Area Versus Continuous Area Charts Display\nUse Cases\nExamples\nDiscrete Area Chart with Multiple Series\n100% Stacked Area Chart\nDiscrete Line Chart with Multiple Aggregated Fields\nContinuous Line Chart\n\n\n\n\nLine charts and area charts display information as a series of data\npoints connected by straight line segments. In area charts, the\nspace beneath the line segments is filled in with color, whereas in\nline charts only the line segments are rendered with no additional\ncoloring or shading. These charts facilitate visualizing data over a\nperiod of time and identifying trends and patterns across the entire\ndata range. Line and area charts support visualuzing both\ndiscrete and continuous data.\n\nDiscrete Line and Area Charts\u00b6\nDiscrete line and area charts visualize categorical or binned data with some form of logical ordering, such as\ntime. MongoDB Charts always aggregates\nvalues in discrete charts such that any number of documents can\nsupply values to a given plotted point. A discrete chart would be\nuseful to visualize a store\u2019s average annual sales over time.\n\nDiscrete Chart Encoding Channels\u00b6\nDiscrete line and area charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nThe category encoding channel. MongoDB Charts renders a\ndata point for each unique value from the field assigned to this\nencoding channel.\n\nY Axis\nThe aggregation encoding channel. This channel\ndictates which field to aggregate on and the type of aggregation\nto perform. This ultimately dictates the position of each\ncategory\u2019s data point on the chart. Categories are defined by\nthe X Axis encoding channel.\n\nNote\nYou can aggregate upon multiple fields in your dataset to\ncreate multi-series charts. For more information, see\nMultiple Field Mappings.\n\n\n\nSeries\n(Optional) Adds an additional category encoding\nchannel to the visualization. When utilized, MongoDB Charts adds\nan additional line to the visualization for each unique\nvalue in this field. Use this field to map additional\ndiscrete categorical fields in your data, rather than multiple\naggregated fields.\n\nNote\nThis option is only available when there is a single field\nmapped to the Y Axis aggregation\nencoding channel.\n\n\n\n\n\n\n\n100% Stacked Area Charts\u00b6\n100% stacked area charts are a subtype of discrete area charts. In 100%\nstacked area charts, the total area shown is normalized to 100% and\nsplit into segments based on the category in the Series\nencoding channel. Each series is shown as a percentage of the whole.\nWhen using a traditional stacked area chart, it can be difficult to\ncompare the proportions of each series to the whole if the total\nvalue of the chart segments greatly differ. 100% stacked charts\nmake it easier to compare proportions of each series to the whole by\nshowing relative percentages.\nFor a detailed example, see the 100% Stacked Area Chart Example.\n\n\n\nContinuous Line and Area Charts\u00b6\nIn continuous line and area charts, every data point comes from a\ndistinct document in the data source.\nContinuous charts do not support aggregation or binning. A continuous\nchart would be useful to visualize stock closing prices over time,\nassuming each closing price comes from a distinct document in the\ndataset.\n\nContinuous Chart Encoding Channels\u00b6\nContinuous line and area charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nMongoDB Charts renders a data point for the values in this field\nfrom each document in the collection.\n\nY Axis\nFor each document in the data source, MongoDB Charts compares the\nvalue of this field against the X Axis\nfield and plots the resulting value.\n\nNote\nYou can add multiple value encoding channels to\nthe chart\u2019s Y Axis to create multi-series charts.\nFor more information, see Multiple Field Mappings.\n\n\n\nSeries\n(Optional) Adds an additional category encoding\nchannel to the visualization. When utilized, this field adds\nan additional line to the visualization for each unique\nvalue in this field.\n\nNote\nThis option is only available when there is a single field\nmapped to the Y Axis aggregation\nencoding channel.\n\n\n\n\n\n\n\n\nDiscrete Area Versus Continuous Area Charts Display\u00b6\nDiscrete area charts are stacked, meaning MongoDB Charts plots each\nseries above or below the others in the visualization. The chart shows\nthe total aggregated value of all of the series, so you can easily see\nthe proportion of each series in relation to the total.\nContinuous area charts are overlaid, meaning MongoDB Charts plots each\nseries directly on top of one another in the visualization.\n\n\nUse Cases\u00b6\nLine charts and area charts are closely related and are both useful\nfor depicting time series data and data with logical ordering. However,\nthere are scenarios when it may be beneficial to use one chart type\nover the other.\n\nConsider using a line chart when creating multi-series charts where each series represents an isolated\nfield. MongoDB Charts stacks multi-series area charts, as shown in\nthis example, which results\nin a chart where the stacked totals appear to share a relationship\ncontributing to a larger summed value. This may not be desireable\ndepending on the specific relationships within the data fields.\nThe line chart displays the data from each series in-line with one\nanother without stacking, which may provide a more accurate\nrepresentation of the data as shown in the\ndiscrete line chart.\n\n\nArea charts are useful for showing an overall trend while also\nhighlighting relative performances of individual components of\nthat sum.\nConsider using a discrete area chart when illustrating a\npart-to-whole relationship, such as tracking data metrics over\ntime. An example of this might be showing revenue compared with\nexpenses over the course of a year.\nA continuous area chart would work in this scenario if you were\nless concerned with the summation of the two fields and instead\nwanted a more direct comparison of the fields against one another.\n\n\n\n\nTip\nWhen your data does not have a logical order, consider instead using\na bar or column chart to visualize\nyour data. When the order of the data is not important, a bar or\ncolumn chart can quickly highlight the highest and lowest values in\nthe visualization, which may be more beneficial than suggesting the\nviewer read the chart from left to right as in a line or area chart.\n\n\n\nExamples\u00b6\n\nDiscrete Area Chart with Multiple Series\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale\nwith information on the item(s) sold and the customer\nconducting the purchase. This discrete area chart shows the\ndistribution of customer ages throughout sales in the collection:\n\n\n\nThe X Axis field of customer.age plots the ages of the\ncustomers along the X axis. We direct to Charts to bin the ages into groups of 5.\nThe Y Axis field of customer.age and\naggregate option of count counts the\noccurrences of each age in the corresponding bin.\nLastly, we apply the item.name field to the\nSeries encoding channel to split the age area into\nsegments displaying the count of each age group purchasing each\nstore item.\n\nNote\nFor more information on multi-series charts, see\nMulti-Series Charts.\n\n\n\n100% Stacked Area Chart\u00b6\nThe following chart visualizes data from a mock office supply\nstore. Each document in the collection represents an individual sale\nwith information on the item(s) sold and the customer\nconducting the purchase. This 100% stacked area chart shows the\nrelative percentages of items sold on each date of the month:\n\n\n\nThe X Axis field of saleDate plots each sale\naccording to its date. The Binning and\nPeriodic settings are enabled, so\nCharts groups the dates into bins based on each date of the\nmonth.\n\nNote\nFor more information on binning dates and the periodic setting,\nrefer to the Bin Data page.\n\nThe Y Axis field of _id runs a count aggregation to calculate the\ntotal number of sales that happened each day of the month. Since this\nis a 100% stacked chart, these values are all normalized to 100%, and\nare segmented by the Series encoding channel.\nThe Series field of item.name segments the total chart\narea based on the name of the item sold. Since there may\nbe multiple items in a single document, we Unwind this\narray to add each item to the visualization. This provides a clear\npicture of the relative percentages of items sold based on the\ndate of the month.\n\n\nDiscrete Line Chart with Multiple Aggregated Fields\u00b6\nThe following chart visualizes data pertaining to movies. Each\ndocument in the collection represents a movie and contains general\ninformation about the film and ratings from various rating\naggregators. This discrete line chart compares average\nRotten Tomatoes\ntomato.meter ratings and average Metacritic ratings of films over time. Both ratings\nare on a scale from 0 - 100:\n\n\n\nThe X Axis field of year plots each film according to\nits release year. We direct to Charts to bin the years into groups of 5.\nThe Y Axis fields of tomato.meter and metacritic\nalong with the aggregate option of mean\ncalculate and plot the average ratings of films from each\ngroup of 5 years.\n\nNote\nFor more information on creating charts with multiple aggregated\nfields, see Multiple Field Mappings.\n\n\n\nContinuous Line Chart\u00b6\nThe following chart visualizes data pertaining to the usage of a\nsolar-powered house battery. This continuous line graph shows the\nbattery level over time:\n\n\n\nThe X Axis field of timestamp plots each timestamp in\nthe data source. The Y Axis fields of energy_left and\ntotal_pack_energy each plot a series in the chart; the amount of\nenergy the battery has left and the total amount of energy the battery\nholds. This comparison shows how close the battery is to a full charge.\n\nNote\nA continuous chart works better than a discrete chart in this case\nbecause our X Axis field, timestamp is not a\ndiscrete, categorical variable, and is instead a continuous value\nalong a range.  We want to plot each timestamp as an individiual\npoint, rather than show an aggregated value from many data values.\n\n\n\n",
            "preview": "Line charts and area charts display information as a series of data points connected by straight line segments. In area charts, the space beneath the line segments is filled in with color, whereas in line charts only the line segments are rendered with no additional coloring or shading. These charts facilitate visualizing data over a period of time and identifying trends and patterns across the entire data range. Line and area charts support visualuzing both discrete and continuous data.",
            "tags": "",
            "links": [
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "http://www.metacritic.com/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/number-chart/index.html",
            "title": "Number Chart \u2014 Charts Manual 0.11",
            "headings": [
                "Number Chart",
                "Number Chart Encoding Channel",
                "Use Cases",
                "Examples",
                "Total Value of Store Sales",
                "Maximum Calories Burned During Workouts"
            ],
            "text": "\nNumber Chart\u00b6\n\nOn this page\n\nNumber Chart Encoding Channel\nUse Cases\nExamples\n\n\nNumber charts display a single aggregated value from a data field.\n\nNumber Chart Encoding Channel\u00b6\nNumber charts only require a single encoding channel, called\nNumber. This is an aggregation encoding channel\nwhich aggregates based on the field and aggregation method chosen, and\ndisplays the result in the chart.\n\n\nUse Cases\u00b6\nNumber charts are useful for highlighting grand totals or values which\nrepresent the overall state of your data. For example, a store may use\na number chart to represent the total dollar value of all sales.\nAdditionally, a hotel chain may use a number chart to represent the\naverage number of vacant rooms across all hotels, or apply a\nfilter to see the total number of\nvacant rooms in a select region.\n\n\nExamples\u00b6\n\nTotal Value of Store Sales\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale,\nwhich contains information on the item(s) sold and the purchaser. This\nnumber chart shows the total sum of all sales stored in the collection:\n\n\n\nThe Number field of items.price tells MongoDB Charts to\naggregate the field based on the selected method of\n$sum. Since\nitems is an array, we have to select an array reduction option\nbefore we can aggregate. In this example, we choose\nUnwind Array, which creates a new document for each\nelement in the items array. MongoDB Charts sums the price of each\nnewly created document and displays the value in the visualization.\n\n\nMaximum Calories Burned During Workouts\u00b6\nThe following chart visualizes workout data. Each document in the\ncollection represents an individual workout activity, which contains\ninformation on the type of activity performed and the amount of\ncalories burned during the workout. This number chart shows the\nmaximum calories burned across all swimming and surfing\nworkouts:\n\n\n\nThe Number field of Calories Burned (kCal) tells\nMongoDB Charts to aggregate the field based on the selected method of\n$max.\nWe have applied a filter to this chart\nto restrict the documents MongoDB Charts examines to only those with an\nActivity Type of Surf, Swim, or Indoor Swim. MongoDB Charts\ndetermines the maximum value of the Calories Burned (kCal) field\nacross all documents which match this criteria and displays the value\nin the visualization.\n\n\n",
            "preview": "Number charts display a single aggregated value from a data field.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/max/"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/scatter-chart/index.html",
            "title": "Scatter Chart \u2014 Charts Manual 0.11",
            "headings": [
                "Scatter Chart",
                "Scatter Chart Encoding Channels",
                "Use Cases",
                "Examples",
                "AirBnB Rentals",
                "Movies with the Most Award Nominations"
            ],
            "text": "\nScatter Chart\u00b6\n\nOn this page\n\nScatter Chart Encoding Channels\nUse Cases\nExamples\n\n\nScatter charts plot data with individual data points placed along the\nX and Y axes. Optionally, the data point representations may use shapes\nand colors to display additional data dimensions.\n\nScatter Chart Encoding Channels\u00b6\nScatter charts provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX / Y Axis\nThe X and Y axis encoding channels accept numerical and date\nfields and display the range of values from the field along the\ncorresponding axis.\n\nSize\n(Optional) An aggregation encoding channel that\nchanges the size of the data point markers, with larger sizes\nindicating larger aggregated values.\n\nColor\n(Optional) A category encoding channel that changes\nthe color of the data point markers to indicate a corresponding\ndata value. MongoDB Charts lists the colors used in a key to the right of\nthe chart.\n\nShape\n(Optional) A category encoding channel that changes\nthe shape of the data point markers to indicate a corresponding\ndata value. MongoDB Charts lists the shapes used in a key to the right of\nthe chart.\n\n\n\n\n\nUse Cases\u00b6\nScatter charts are useful for representing numerical data and\nshowing clearly how data points cluster together in certain areas.\nThe Size, Color, and Shape\nencoding channels allow you to reveal\nadditional trends for data dimensions with low cardinality.\n\nTip\nA chart with many different colors or shapes may result in a\ncluttered visualization which is difficult to read. You can limit\nthe number of categories in your chart by binning or limiting your data.\n\nScatter charts show an individual marker for each data point, so\nthey work better with smaller result sets. Outliers and extreme data\npoints are easy to identify.\nConsider using a scatter chart to display:\n\nTemperature data for selected cities\nVolume of sales data for selected retail outlets\nPopulation density figures across several countries\n\n\n\nExamples\u00b6\n\nAirBnB Rentals\u00b6\nThe following scatter chart uses a database of information about\nAirBnB rental properties in Sydney, Australia. The X axis shows the\nreview ratings given to individual properties, with the price per\nnight displayed along the Y axis. The query filter restricts the result set to properties with\nat least 100 reviews.\nThe chart shows that lower-priced properties have a wider range of\nreview scores, while higher-priced properties have a smaller score\nrange with generally higher scores.\n\n\n\n\n\nMovies with the Most Award Nominations\u00b6\nThe following more complex scatter chart uses a database with movie\ndata compiled from IMDb and Rotten Tomatoes. The chart shows the\nTomatoMeter rating (ranging from 0 to 100) of movies with at least\none award nomination. Each data point marker represents one movie.\nThe X axis shows the movie\u2019s TomatoMeter rating and the Y axis shows\nthe number of award nominations the movie received.\nThe query filter restricts the result\nset to exclude marginal data points.\nThe chart uses the Color and Shape encoding\nchannels to shed further light on the types of movies which receive\nthe most award nominations. The color of each data point shows the\nMPAA (Motion Picture Association of America) rating the movie received.\nThe chart uses the Shape encoding channel to indicate the year in\nwhich the movie was released, and bins the\ndata to place each movie into a time range, with each bin covering\n25 years. Without the bins, there would be a different shape for every\nyear, which would make the chart too noisy to read.\n\n\n\n\n\n",
            "preview": "Scatter charts plot data with individual data points placed along the X and Y axes. Optionally, the data point representations may use shapes and colors to display additional data dimensions.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/"
            ]
        },
        {
            "slug": "v0.11/chart-type-reference/text-charts/index.html",
            "title": "Text Charts \u2014 Charts Manual 0.11",
            "headings": [
                "Text Charts"
            ],
            "text": "\nText Charts\u00b6\n\n\nData Table\nNumber Chart\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/data-table/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/number-chart/"
            ]
        },
        {
            "slug": "v0.11/chart-types/index.html",
            "title": "Chart Types \u2014 Charts Manual 0.11",
            "headings": [
                "Chart Types"
            ],
            "text": "\nChart Types\u00b6\nThe following pages describe the specific construction and use cases\nfor each chart type in MongoDB Charts:\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n",
            "preview": "The following pages describe the specific construction and use cases for each chart type in MongoDB Charts:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/data-table/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/scatter-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/grid-charts/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/line-area-chart/"
            ]
        },
        {
            "slug": "v0.11/customize-charts/index.html",
            "title": "Customize Charts \u2014 Charts Manual 0.11",
            "headings": [
                "Customize Charts"
            ],
            "text": "\nCustomize Charts\u00b6\nMongoDB Charts provides various options to customize the format and display\nof your visualizations. You can use these options to display your data\nin the proper format, show data labels to relay precise measurements,\nand many other formatting techniques.\nMongoDB Charts provides three types of customization options:\n\nGeneral Customizaton Options\nGeneral Customization Options modify\nhigh-level aspects of the chart such as its colors and data labels.\nThese options affect the overall look and format of your data.\nField-Level Options\nField-Level Options modify how\nCharts renders data fields, such as specific formatting\nfor numbers and dates. These options apply to individual data fields\nencoded into your chart, rather than the\nchart as a whole. The field-level customization options available\ndepend on the data type and\nchannel type of the field you are\ncustomizing.\nValue Axis Options\nValue Axis Options modify the\nchart\u2019s axes, such as their scale and their minimum and maximum\nvalues. These options only affect the chart\u2019s axes, and not how\nCharts formats data points in the visualization.\n\nTo customize a chart, click the Customization tab above the\nencoding channels in the\nChart Builder:\n\n\n\nYour chart automatically updates as you modify customization options.\n\n\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\n",
            "preview": "MongoDB Charts provides various options to customize the format and display of your visualizations. You can use these options to display your data in the proper format, show data labels to relay precise measurements, and many other formatting techniques.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/field-level-options/"
            ]
        },
        {
            "slug": "v0.11/customize-charts/field-level-options/index.html",
            "title": "Field-Level Options \u2014 Charts Manual 0.11",
            "headings": [
                "Field-Level Options",
                "Field Label Override",
                "Number Formats",
                "Number Format Options",
                "Number Format Presets",
                "Date Format and Time Zone",
                "Date and Time Formatting",
                "Convert Time Zone"
            ],
            "text": "\nField-Level Options\u00b6\n\nOn this page\n\nField Label Override\nNumber Formats\nDate Format and Time Zone\n\n\nWithin the customization tab, you can modify how MongoDB Charts displays\ndata fields in your visualization. The customization options\navailable depend on the data type of the value you are customizing.\n\n\n\n\nField Label Override\u00b6\nWhen you encode a field in the\nChart Builder, MongoDB Charts automatically\ngenerates a label for the field in the visualization. Charts\ngenerates the label based on the field name and the type of\naggregation applied to the field if appropriate. You can use this\ncustomization option to override the default label to provide more\ninsightful or descriptive field labels.\nTo override a field label:\n\nNavigate to the Customization tab in the\nChart Builder.\nClick the field whose label you wish to modify to expand its\ncustomization options.\nSet the Label Override toggle switch to On.\nEnter the new desired field label in the text box.\n\nThis option affects all places in the chart the field label appears,\nincluding axis titles, legends, tooltips, etc. Your chart\nautomatically updates to show the new label. This option is available\non all chart types.\n\n\nNumber Formats\u00b6\nYou can use these customization options to specify how Charts\nformats numbers in your data fields. These options are available on all\nchart types.\n\nNumber Format Options\u00b6\nMongoDB Charts provides the following options for formatting numbers. You can\nuse any combination of these options to customize your chart:\n\n\n\n\n\n\nOption\nDescription\n\n\n\nDecimals\nSpecifies to how many decimal places Charts rounds each\ndata value or label. If you specify this option, Charts\ndisplays all values with the specified number of decimal\nplaces, either by rounding decimals or adding zeroes to whole\nnumbers. If you do not specify this option, Charts\ndisplays values in their original form with no modifications.\n\nMultiplier\nSpecifies a number by which Charts multiplies each data\nvalue or label. This option is useful for scaling data, such\nas showing values in terms of thousands or millions. You can\nalso use this option to convert measurements or currencies to\ndifferent units by multiplying your values by the appropriate\nfactor.\n\nPrefix\nSpecifies a string which Charts prepends to each data\nvalue or label. This option is useful for formatting currencies\nby prepending characters such as $ or \u20ac.\n\nSuffix\nSpecifies a string which Charts appends to the end of\neach data value or label. This option is useful for providing\ncontext to your data by appending units, such as \u00b0F or\nkm/h.\n\n\n\n\n\nNumber Format Presets\u00b6\nCharts provides the following preset customizations to format\nnumbers for common use cases:\n\n\n\n\n\n\nOption\nDescription\n\n\n\nPercentage\nMultiplies each value by 100 and appends a % sign to each\nvalue. Use this option to convert decimal values to percentages.\n\nDollars\nRounds each value to two decimal places and prepends a\n$ to each value.\n\nThousands\nDivides each value by 1,000 and appends a K to each\nvalue.\n\nMillions\nDivides each value by 1,000,000 and appends an M to each\nvalue.\n\n\n\nIf you select a preset, you can modify any of its attributes to\nfurther refine your numeric displays. Once you modify a preset\u2019s\nattribute, Charts changes the preset selection in the dropdown\nto Custom.\n\n\n\nDate Format and Time Zone\u00b6\nYou can customize how MongoDB Charts displays date fields, as well\nas convert dates to a specified time zone.\n\n\n\nTo customize date formats and configure time zones:\n\nNavigate to the Customization tab in the\nChart Builder.\nClick the field whose date format and time zone you wish to modify.\nConfigure the Date and Time Formatting and\nConvert Time Zone settings as desired.\n\n\nDate and Time Formatting\u00b6\nUse this option to specify how Charts formats\ndates and times. Click the dropdowns in this customization section to\nselect a preset format provided by Charts. Charts\nprovides one dropdown for selecting a date format and one dropdown for\nselecting a time format.\n\nNote\nDepending on the binning type selected for\nthe field, Charts may not show both date formatting\ndropdowns. Also, the options in the dropdowns change depending on\nthe binning type selected.\nFor more information, see the\nConsiderations section.\n\nYou can also use the input box below the dropdowns to specify a custom\ndatetime format. The following table shows how to create custom datetime formats:\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\nYYYY\nFull year.\n2018\n\nYY\nLast two digits of year.\n18\n\nMMMM\nFull month as letters.\nNovember\n\nMMM\nAbbreviated month as letters.\nNov\n\nMM\nMonth as numbers, with leading a zero if applicable.\n08\n\nM\nMonth as numbers with no leading zero.\n8\n\nDDDD\nDay of the year, with leading zeroes if applicable.\n076\n\nDDD\nDay of the year with no leading zeroes.\n76\n\nDD\nDay of the month with a leading zero if applicable.\n05\n\nD\nDay of the month with no leading zero.\n5\n\nHH\nHour with a leading zero if applicable. Uses 24-hour time\nformat.\n18\n\nH\nHour with no leading zero.\n8\n\nA\nAdds the applicable AM or PM period to the format. Uses\n12-hour time format.\nPM\n\nmm\nMinute with a leading zero if applicable.\n03\n\nm\nMinute with no leading zero.\n3\n\nss\nSecond with a leading zero if applicable.\n09\n\ns\nSecond with no leading zero.\n9\n\n\n\n\nExample\nConsider a timestamp of November 8th, 2018 1:30:58 PM. The following table shows how various custom date filters would output\nthe date:\n\n\n\n\n\n\nCustom Format\nOutput\n\n\n\nYYYY/MM/DD\n2018/11/18\n\nMMM YY\nNov 18\n\nDDD, YYYY HH:mm:ss\n322, 2018 13:30:58\n\nDD-MMM H:mm:ss A\n08-Nov 1:30:58 PM\n\n\n\n\nOnce you modify a preset\u2019s attribute, Charts\nchanges the preset selection in the dropdown to Custom.\n\nConsiderations\u00b6\nIf you bin your timeseries data, you\ncannot specify a unit of time in your custom format with smaller\ngranularity than your bin size. For example, if you bin data\nby Month, you cannot specify days, hours, minutes, or\nseconds in your custom format because Charts does not show\nthese values in the visualization. If you enter an invalid custom\ndatetime format, Charts highlights the format input box in red.\nSpecifying the Periodic option further limits valid\nformatting options. For example, if you bin data by Month,\nyou can only specify year in your date format if you disable the\nPeriodic option. If you enable the Periodic\noption, you cannot specify year because Charts only\ndisplays the month in the field.\n\n\n\nConvert Time Zone\u00b6\nBy default, MongoDB Charts displays timeseries data exactly how it appears\nin the original dataset, which is assumed to be in\nUTC. You can use this\ncustomization option to convert the time zone in which Charts\ndisplays the data to best fit the location of the data or the\nviewers of the chart.\nTo enable this option:\n\nSet the Convert Time Zone toggle switch to\nOn.\nUse the dropdown below the toggle to select the desired time zone\nfor your data.\n\n\nNote\nWhen you convert time zones, Charts automatically accounts\nfor Daylight Savings Time when required.\n\nYou can search the dropdown to easily filter for the desired time zone.\nType into the search bar above the dropdown to see all matching time\nzones.\n\n\n",
            "preview": "Within the customization tab, you can modify how MongoDB Charts displays data fields in your visualization. The customization options available depend on the data type of the value you are customizing.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/bin-data/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/"
            ]
        },
        {
            "slug": "v0.11/customize-charts/general-customization/index.html",
            "title": "General Customization Options \u2014 Charts Manual 0.11",
            "headings": [
                "General Customization Options",
                "Show or Hide Data Markers on a Line Chart",
                "Applicable Chart Types",
                "Show or Hide Data Value Labels",
                "Applicable Chart Types",
                "Show or Hide Data Category Labels on Donut Charts",
                "Color Palette Customization",
                "Applicable Chart Types"
            ],
            "text": "\nGeneral Customization Options\u00b6\n\nOn this page\n\nShow or Hide Data Markers on a Line Chart\nShow or Hide Data Value Labels\nShow or Hide Data Category Labels on Donut Charts\nColor Palette Customization\n\n\nMongoDB Charts provides general customization options which modify the\nvisualization at a high level, rather than individual pieces of the\nvisualization.\n\n\n\n\nShow or Hide Data Markers on a Line Chart\u00b6\nYou can dictate whether Charts displays visible data markers\nwhich represent individual data points on line charts. Enabling this\noption makes it easier to see exactly where your data points lie\nalong a line. Hovering over these markers shows the exact data values\nin a tooltip, making it easier view precise measurements.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Markers toggle switch to the desired setting.\n\nTo customize the formatting of the number in the data marker tooltip,\nmodify the Number Formatting\nsettings for the relevant field.\n\nApplicable Chart Types\u00b6\nThis customization option is available on the following chart types:\nDiscrete Line,\nContinuous Line,\nDiscrete Area, and\nContinuous Area.\n\n\n\nShow or Hide Data Value Labels\u00b6\nYou can dictate whether Charts displays text labels for your\ndata values. Data value labels show the exact values of the data points\nin the visualization.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Value Labels toggle switch to the desired\nsetting.\n\nTo customize the formatting of the number in the data label, modify\nthe Number Formatting settings for\nthe relevant field.\n\nApplicable Chart Types\u00b6\nThis customization option is available on the following chart types:\nGrouped Column,\nColored Column,\nGrouped Bar,\nColored Bar, Discrete\nLine, Continuous Line,\nDiscrete Area,\nContinuous Area, and\nDonut.\n\n\n\nShow or Hide Data Category Labels on Donut Charts\u00b6\nYou can dictate whether Charts displays category labels for\nsegments in your donut charts. Category labels display the category\ncorresponding to each donut section in text, which eliminates\nthe need to hover over a section or rely on the segment color to\ndetermine its category.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Category Labels toggle switch to the desired\nsetting.\n\n\n\nColor Palette Customization\u00b6\nPalette customization allows you to select custom colors for your\nchart. To enable color customization, select the\nCustomization tab of the Chart Type column.\nA toggle switch labeled Custom Color Palette appears in\nthe General Customization section.\nMost chart types allow you to customize individual colors in their\npalette. The heatmap and colored bar\nand column types use a gradient color scale,\nwhile other types use a custom color picker. The gradient color\nscale allows you to choose from a set of pre-defined gradients.\n\n\n\nOther chart types use a color picker for selecting a customized\nset of colors.\n\n\n\nFor chart types which use a color picker for customization,\neach numbered color swatch corresponds to a data series on the chart.\nSelect a color swatch to modify the color of its corresponding\ndata series. You can select a new color with a color slider, by\nentering a hex value, by entering RGB values, or by choosing a\npredefined color. You can also drag and drop the existing color\nselections if you want to use the current color choices but change\nwhich color goes with which data series.\n\nNote\nBy default, the custom color picker shows color swatches for 10\ndata series, but you can only modify as many of the swatches as\nyou have data series. The palette can expand to show 20 data series.\nCharts will use as many colors as needed to show your chart,\nstarting from the first color. For example, if you have only two\ndata series in your chart, only the colors numbered 1 and\n2 have any effect on your chart.\n\nTo close the color customization tool, click somewhere outside it.\nTo revert the entire chart to its default colors, set the\nCustom Color Palette toggle switch back to Off.\n\nApplicable Chart Types\u00b6\nThis customization option is available for all chart types except\nText.\n\n\n",
            "preview": "MongoDB Charts provides general customization options which modify the visualization at a high level, rather than individual pieces of the visualization.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/field-level-options/"
            ]
        },
        {
            "slug": "v0.11/customize-charts/value-axis-options/index.html",
            "title": "Value Axis Options \u2014 Charts Manual 0.11",
            "headings": [
                "Value Axis Options",
                "Max and Min",
                "Logarithmic Scale",
                "Logarithmic Scale Considerations",
                "Label Override"
            ],
            "text": "\nValue Axis Options\u00b6\n\nOn this page\n\nMax and Min\nLogarithmic Scale\nLabel Override\n\n\nMongoDB Charts offers several customization options which modify the\nrepresentation of a chart\u2019s X and Y value axes without affecting the\nformatting of the data points in the visualization.\n\n\n\n\nNote\nA value axis shows a continuous scale of values. Charts such as\nBar/Column and\nDiscrete Line/Area have just one\nvalue axis. Continuous line and area\nand scatter charts have two value\naxes.\n\n\nMax and Min\u00b6\nThe Max and Min value axis options allow\nyou to specify maximum and minimum values to display on a chart.\nAny data points with values outside the specified limits appear at\nthe boundaries of the chart. Setting a maximum display value\nis useful for removing outlying data from the chart and\nallowing the viewer to focus on more relevant information.\n\nNote\nChanging the minimum for bar and column charts from the default\nof zero is not recommended. Doing so means the length of the\nbars is no longer proportional to the data point values.\n\nAvailable for the following chart types: all Bar/Column except 100% stacked,\nDiscrete and Continuous Line, Discrete and Continuous Area, Scatter\n\n\nLogarithmic Scale\u00b6\nToggling the Logarithmic Scale switch to the\nOn position causes your chart\nto use a logarithmic scale instead of a linear scale for data\nvalues. Using a logarithmic scale is helpful for showing\nthe percentage change from one value to the next and for charts\nwith a large value differential from smallest to largest. Data sets\nsuch as stock market movements, earthquake strength measurements, and\nglobal population sizes are good use cases for a logarithmic scale\nchart.\n\nLogarithmic Scale Considerations\u00b6\n\nUse the Logarithmic Scale option only with chart data\nthat consists of either all positive values or all negative values.\nIf the chart includes a mix of positive and negative values, or if\nit includes the value 0, the chart will not render.\nBar and column charts normally have a baseline of 0, but\nlogarithmic scale charts have a baseline of 1 because\nlog(0) is undefined. As a result, charts with data points between\n0 and 1 do not render well. You can mitigate this effect by\nsetting the axis minimum of the chart to\na value greater than zero but smaller than the lowest value in the\ndata set.\n\nAvailable for the following chart types: Grouped and\nColored Bar/Column, Discrete and\nContinuous Line, Scatter\n\n\n\nLabel Override\u00b6\nThe Label Override field allows you to create a\ncustom axis label. Custom labels can be more descriptive\nthan the default labels and help chart viewers quickly grasp\nthe significance of chart data.\nThe Label Override customization option is available on the X\nor Y value axis for charts in which the author has encoded multiple\ndata series by mapping more than one field on a given axis.\nTo customize the axis label for charts that have a single field mapped,\nuse the Label Override option within that field\u2019s customization\noptions.\nAvailable for the following chart types: Bar/Column, Line,\nArea, Scatter\n\n",
            "preview": "MongoDB Charts offers several customization options which modify the representation of a chart\u2019s X and Y value axes without affecting the formatting of the data points in the visualization.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/scatter-chart/"
            ]
        },
        {
            "slug": "v0.11/dashboard-permissions/index.html",
            "title": "Dashboard Permissions \u2014 Charts Manual 0.11",
            "headings": [
                "Dashboard Permissions",
                "View Dashboard Permissions",
                "Modify Dashboard Permissions",
                "Specific User Permissions",
                "Access for All Users"
            ],
            "text": "\nDashboard Permissions\u00b6\n\nOn this page\n\nView Dashboard Permissions\nModify Dashboard Permissions\n\n\nDashboard permissions dictate which MongoDB Charts users have access to the\ndashboard and the actions they can perform on the dashboard. The\nfollowing dashboard permissions are available:\n\n\n\n\n\n\nPermission\nDescription\n\n\n\nViewer\nCan open a dashboard and view charts provided they have\n(at minimum) the read role on the data source used\nby the charts on the dashboard. If the user does not have the\nread role on a chart\u2019s corresponding data source, the\nchart will not render in the dashboard.\nViewers cannot make any modifications to the dashboard.\n\n\nAuthor\nCan add, modify, or delete charts, change dashboard layout, and\nrename the dashboard.\n\nOwner\nHas all privileges of Author and can also\nmanage permissions on the\ndasbhoard and delete the dashboard.\nThe creator of the dashboard automatically has the\nOwner permission. The creator cannot be removed from the\nlist of dashboard users and their Owner permission cannot be\nmodified.\n\n\n\n\n\nNote\nIt is also possible to have no permissions on a dashboard, meaning\nit will not appear on your dashboards tab.\nNewly-created dashboards are not shared by default, so no one except\nthe dashboard Owner can view the dashboard until more\nuser permissions are added.\n\n\nView Dashboard Permissions\u00b6\nTo view permissions for a specific dashboard, hover over the icon\nnext to the dashboard\u2019s Access button. A tooltip appears\ndescribing what permission you have on the dashboard, who the owner\nof the dashboard is, and who else has access to the dashboard.\nThe following table lists the possible icons and their associated\npermissions:\n\n\n\n\n\n\nIcon\nDescription\n\n\n\n\n\neye icon\n Eye Icon\nYou have Viewer permission.\n\n\n\nglobe icon\n Globe Icon\nYou have either Author or Owner permission and\nEveryone has some level\nof access to the dashboard.\n\n\n\nusers icon\n Group Icon\nYou have either Author or Owner permission and\nadditional users have\nsome level of access to the dashboard.\n\n\n\nlock icon\n Lock Icon\nYou have Owner permission and no other user has\naccess.\n\n\n\n\n\nModify Dashboard Permissions\u00b6\n\nImportant\nTo modify a dashboard\u2019s permissions, you\nmust have the Owner role on that dashboard.\n\nTo modify dashboard permissions, either click the click the\npermission icon at the top-right of\nthe dashboard from the Dashboards tab:\n\n\n\nOr click the Access button at the top-right of the\ndashboard within the specific dashboard view:\n\n\n\nWith the Dashboard Permissions dialog open, refer to the\nfollowing sections for instructions on granting a\nspecific user permissions on a\ndashboard and granting\nall users on your MongoDB Charts deployment permissions on a dashboard:\n\nSpecific User Permissions\u00b6\nTo give specific users permissions on the dashboard:\n\nSearch for the desired user using the search bar directly above\nwhere the dashboard users are listed. You can search for users\nby their username or email address.\nClick the desired user to add them to the permissions list.\nUse the dropdown to the right of the user\u2019s name to assign the\nappropriate permission.\nRepeat steps 1-3 for each user you would like to provide dashboard\npermissions for.\nClick Apply Changes.\n\nTo remove permissions for a user, click the trash can icon to the right\nof the user\u2019s name.\n\n\nAccess for All Users\u00b6\nTo allow access to the dashboard for all users on your MongoDB Charts\ndeployment:\n\nToggle the switch on the right-side of the Everyone user\nto On.\n\nSelect the permission to apply to all MongoDB Charts\nusers.\n\nNote\nIf permissions are assigned to both Everyone and a\nspecific user, the user\u2019s specific permissions take precedence\nover the permissions set to Everyone.\nFor example, if Everyone has the Author\npermission and a specific user Alice has the Viewer\npermission, Alice\u2019s effective permission is Viewer.\n\n\nClick Apply Changes.\n\n\n\n\n",
            "preview": "Dashboard permissions dictate which MongoDB Charts users have access to the dashboard and the actions they can perform on the dashboard. The following dashboard permissions are available:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/built-in-roles/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/",
                "https://docs.mongodb.com/charts/v0.11/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.11/dashboards/index.html",
            "title": "Dashboards \u2014 Charts Manual 0.11",
            "headings": [
                "Dashboards",
                "Dashboards Tab",
                "Create a New Dashboard",
                "Refresh Dashboard Data",
                "Manually Refresh Dashboard Data",
                "Configure Auto Refresh Settings",
                "Disable and Enable Auto Refresh",
                "Fullscreen View"
            ],
            "text": "\nDashboards\u00b6\n\nOn this page\n\nDashboards Tab\nCreate a New Dashboard\nRefresh Dashboard Data\nFullscreen View\n\n\nDashboards are a collection of charts assembled to create a single\nunified display of your data. Each chart shows data from a\nsingle MongoDB collection or view, so dashboards are essential to\nattain insight into multiple focal points of your data in a single\ndisplay.\n\nDashboards Tab\u00b6\nThe Dashboards tab shows all dashboards you have access to\nview. For more information on dashboard permissions in MongoDB Charts, see\nthe Dashboard Permissions page.\n\n\n\nEach dashboard shows the following information:\n\nTitle\nDescription\nA preview of the first three charts in the dashboard, including the\nchart title and type\nWhen the dashboard was last modified\n\nBy default, the most recently modified dashboards are shown first in\nthe list. You can change the sort order by using the\nSort By dropdown menu.\n\n\nCreate a New Dashboard\u00b6\nTo create a new dashboard:\n\nFrom the Dashboards tab, click the\nNew Dashboard button.\nIn the New Dashboard dialog, enter a title for your\ndashboard.\n(Optional) Enter a description for your dashboard.\nClick Create.\n\nAfter after clicking the Create button you are taken\nto the page for your newly created dashboard, where you are prompted to\nadd the first chart to your dashboard:\n\n\n\n\n\nRefresh Dashboard Data\u00b6\nYou can refresh dashboard data to update all charts on the dashboard\nwith the most current data from their respective data sources. When\nMongoDB Charts loads charts on a dashboard, it does not consistently query\nthe data source for each chart. Instead, MongoDB Charts queries the data\nsource when the dashboard first loads, and that data\nis stored in the browser cache and used to render the charts.\nMongoDB Charts provides options to both manually refresh dashboard data and\nconfigure the dashboard to automatically refresh at a specified time\ninterval.  These options allow you to control how current the data\ndisplayed on your dashboard is. By default, when you first create a\ndashboard, it is configured to refresh its data every hour. The\nAuto text next to the \n\nsync icon\n icon signifies that\nauto refresh is enabled.\n\nManually Refresh Dashboard Data\u00b6\nTo manually refresh dashboard data, first select a dashboard from the\nDashboards tab, then click the \n\nsync icon\n button at the\ntop-right of the dashboard.\n\n\nConfigure Auto Refresh Settings\u00b6\nYou can configure auto refresh settings to change the interval at which\nthe dashboard data is refreshed. The dashboard shows the time its data\nwas last updated and when the next update will occur at the top-right\nof the view.\nTo configure auto refresh settings for a dashboard:\n\nFrom the dashboard view, click the arrow next to the \n\nsync icon\n\nbutton and click Auto Refresh Settings.\nSelect the desired refresh interval.\nClick Save.\n\n\nNote\nAuto refresh settings are stored in the local browser state.\nSettings dictating whether auto refresh is enabled and its\nconfigured interval are not persisted with the dashboard or\nshared with other users.\n\n\n\nDisable and Enable Auto Refresh\u00b6\nTo disable auto refresh, click the arrow next to the \n\nsync icon\n\nbutton and click Disable Auto Refresh.\nTo enable auto refresh, click the arrow next to the \n\nsync icon\n\nbutton and click Enable Auto Refresh.\n\n\n\nFullscreen View\u00b6\nMongoDB Charts provides a fullscreen view for dashboards. In this view,\nMongoDB Charts hides the main navigation bar and exapands the dashboard to\nshow the title, description, time of last modification, and charts in\nthe entire space of the screen.\nTo open a dashboard in fullscreen view, first select a dashboard from\nthe Dashboards tab, then click the expanding arrows at the\ntop-right of the dashboard:\n\n\n\n\nNote\nYou can still remove, resize, rearrange, and access editing for charts in fullscreen view by hovering\nover the desired chart.\nAdditionally, in fullscreen view you can still configure\nauto-refresh settings and manually refresh chart data using the\nrefresh button.\n\nTo exit fullscreen view, either click the contracting arrows at the\ntop-right of the dashboard or press the escape key.\n\n\nManage Existing Dashboards\nDashboard Permissions\n\n\n\n",
            "preview": "Dashboards are a collection of charts assembled to create a single unified display of your data. Each chart shows data from a single MongoDB collection or view, so dashboards are essential to attain insight into multiple focal points of your data in a single display.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.11/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.11/data-source-permissions/index.html",
            "title": "Data Source Permissions \u2014 Charts Manual 0.11",
            "headings": [
                "Data Source Permissions",
                "View Data Source Permissions",
                "Set Data Source Permissions",
                "Specific User Access",
                "Access for All Users"
            ],
            "text": "\nData Source Permissions\u00b6\nData source permissions dictate which Charts\nusers have access to the data source and the actions they can perform\non the data source. The following data source permissions are\navailable:\n\n\n\n\n\n\nPermission\nDescription\n\n\n\nReader\nCan access the data source by viewing existing charts or\ncreating new charts which use the data source.\n\nManager\nHas all privileges of Reader and can also\nmodify the alias and\nmodify the connection URI of a data\nsource.\n\nOwner\nHas all privileges of Manager and can also\nmanage permissions on the\ndata source and remove the data source.\nThe creator of the data source automatically has the\nOwner role. The creator cannot be removed from the list of\ndata source users and thier Owner role cannot be modified.\n\n\n\n\n\nView Data Source Permissions\u00b6\nTo view permissions for a specific data source, navigate to the\nData Sources tab and hover over the\ndata source\u2019s Access button. A tooltip describing the data\nsource permissions will appear. The tooltip displays your permissions,\nthe owner of the data source, and all other users who have access.\nThe following table lists the possible icons and their associated\npermissions:\n\n\n\n\n\n\nIcon\nDescription\n\n\n\n\n\neye icon\n Eye Icon\nYou have Reader permission.\n\n\n\nglobe icon\n Globe Icon\nYou have either Manager or Owner permission and\nEveryone has some level\nof access to the data source.\n\n\n\nusers icon\n Group Icon\nYou have either Manager or Owner permission and\nadditional users have\nsome level of access to the data source.\n\n\n\nlock icon\n Lock Icon\nYou have Owner permission and no other user has\naccess.\n\n\n\n\n\nSet Data Source Permissions\u00b6\nYou can set data source permissions when you first\nadd a data source, or you can\nmodify permissions on a data\nsource which has already been created.\nRefer to the following sections for instructions on granting\nspecific users permissions on a\ndata source and granting\nall users on your MongoDB Charts deployment permissions on a data source:\n\nSpecific User Access\u00b6\nTo grant specific users permissions on your data source:\n\nSearch for the desired user using the search bar directly above\nwhere the data source users are listed. You can search for users\nby their username or email address.\n\nClick the desired user to add them to the permissions list.\n\nUse the dropdown to the right of the user\u2019s name to assign the\nappropriate role.\n\n\n\n\nRepeat steps 1-3 for each user you wish to grant data source access.\n\n\nTo remove access for a user you have added, click the trash can icon\nto the right of the user\u2019s name.\n\n\nAccess for All Users\u00b6\nIn addition, to allow access to the dashboard for all users on your\nMongoDB Charts deployment:\n\nToggle the switch on the right-side of the Everyone user\nto On.\n\nSelect the role to apply to all MongoDB Charts\nusers.\n\nNote\nIf permissions are assigned to both Everyone and a\nspecific user, the user\u2019s specific permissions take precedence\nover the permissions set to Everyone.\nFor example, if Everyone has the Manager\nrole and a specific user Alice has the Reader role,\nAlice\u2019s effective permission level is Reader.\n\n\n\n\n\n",
            "preview": "Data source permissions dictate which Charts users have access to the data source and the actions they can perform on the data source. The following data source permissions are available:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "https://docs.mongodb.com/charts/v0.11/dashboard-permissions/"
            ]
        },
        {
            "slug": "v0.11/data-sources/index.html",
            "title": "Data Sources \u2014 Charts Manual 0.11",
            "headings": [
                "Data Sources",
                "Data Sources View",
                "Filter Data Sources",
                "Add a Data Source",
                "Modify a Data Source",
                "Modify Data Source Alias",
                "Modify Deployment Connection URI",
                "Modify Data Source Permissions",
                "Remove a Data Source"
            ],
            "text": "\nData Sources\u00b6\n\nOn this page\n\nData Sources View\nFilter Data Sources\n\n\nAdd a Data Source\nModify a Data Source\nModify Data Source Alias\nModify Deployment Connection URI\nModify Data Source Permissions\n\n\nRemove a Data Source\n\n\nData sources in MongoDB Charts reference a collection\nor view in your MongoDB\ndeployment. When building a chart, you will need to specify the data\nsource that the chart uses.\nTo view, add, or remove data sources, click Data Sources on\nthe top navigation bar.\n\nData Sources View\u00b6\nThe Data Sources view displays existing data sources that\nthe currently logged-in user has permission to view. The data sources\nare displayed in a tabular format with the following columns:\n\n\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\nDeployment\nThe MongoDB deployment containing the source database and\ncollection. Identified by the hostname and port of the first host\nin the Connection String URI.\nTo modify a deployment\u2019s connection URI, see the\nModify a Data Source section.\n\n\nDatabase\nThe database containing the source collection or view.\n\nCollection\nThe collection or view from where Charts retrieves data.\n\nAlias\nOptional. The display name of the data source used by the\nChart Builder. Providing an Alias may result in a\nshorter and more identifiable name when selecting a data source\nin the chart builder.\nTo modify the Alias for a data source, see the\nModify a Data Source\nsection.\n\n\nLast modified\nThe date the data source was last modified.\n\nPermissions\nThe icon next to the Access button denotes the\npermissions you have on the data\nsource. For details on the various data source permissions, see\nData Source Permissions.\nTo modify the permissions for a data source, see the\nModify a Data Source\nsection.\n\n\n\n\n\nNote\nYou can sort data sources by any of the columns by clicking on the\ncolumn header.\n\n\nFilter Data Sources\u00b6\nTo search for specific data sources, use the search bar at the\nupper right corner of the Data Sources view. You can search\nby Deployment, Database,\nCollection, or Alias.\nAdditionally, you can use the dropdown to the left of the search bar to\nshow either all data sources on your MongoDB Charts deployment, or only data\nsources for which you have the Owner permission. For more\ninformation on data source permissions, see\nData Source Permissions.\n\n\n\nAdd a Data Source\u00b6\n\nFrom the Data Sources view, click the\nNew Data Source button.\n\nEnter the Connection String URI of the MongoDB deployment to which\nyou want to connect.\n\nImportant\nMongoDB Charts requires that MongoDB deployments run version 3.4 or\nlater.\nIf your MongoDB deployment is running with\nauthentication\nenabled, include a database user\u2019s credentials in the connection\nstring URI. Anonymous, SCRAM, and LDAP authentication mechanisms\nare supported. The database user must have\nread permissions on\nthe collections selected in the following step.\nIf the authenticated user does not have the\nlistDatabases privilege on the\ndeployment specified in the URI, they can still add the data\nsource by specifying the desired database as part of the URI. In\nthis case, the URI takes the following form:\n\n\n\ncopy\n\nmongodb://[username:password@]<server>:<port>/<database>\n\n\n\nIf your deployment is running with TLS/SSL enabled, add the\nssl=true option to the URI:\n\n\n\ncopy\n\nmongodb://[username:password@]<server>:<port>/<database>?ssl=true\n\n\n\nFor more information, see\nConfigure TLS/SSL for Data Sources.\n\n\nClick Connect.\n\nSelect the collections from which you wish to create data sources.\nCharts creates a separate data source for each selected\ncollection.\n\nClick Set Permissions.\n\nSet the permissions for the data source.\nYou can search for specific users by name or email address using\nthe search bar.\n\nClick Publish Data Source.\n\nNote\nIf you selected multiple collections for your data source in step\n4, the data source permissions you\nselect are applied to all of the selected collections when you\npublish your data source. If you wish to apply different\npermissions to individual collections that you have selected, you\nwill need to edit those data sources after publishing.\n\n\n\nYou will see your newly added data source listed in the\nData Sources view.\n\n\nModify a Data Source\u00b6\nMongoDB Charts users can modify certain properties of a data source provided\nthey have appropriate permissions on the\ntarget data source. The following data source properties may be\nmodified after a data source has been created:\n\nAlias\nDeployment Connection URI\nPermissions\n\n\nModify Data Source Alias\u00b6\nA data source Manager or Owner can modify the Alias\nof a data source by hovering over the row\u2019s Alias field,\nthen clicking either Add Alias or the edit button\n(pencil icon). Click the green check mark to save the alias.\n\n\nModify Deployment Connection URI\u00b6\nA datasource Manager or Owner can modify the Deployment\nConnection String URI of a\ndata source. This lets you seamlessly change the MongoDB cluster\nfrom which the data source pulls its data, or change connection\ndetails such as authentication passwords and SSL options.\n\nFrom the Data Sources view, click the ellipsis\n(\u2026) button on the right-hand side of the data source\nyou want to modify.\n\nClick Edit Deployment Connection.\n\nIn the Edit Deployment Connection dialog, enter the new\nconnection URI in the input.\n\nClick Test Connection to ensure you have supplied a\nvalid connection URI.\n\nImportant\nBelow the connection URI input, MongoDB Charts lists all of the\ndata sources currently sharing the same deployment connection. If\nthe MongoDB deployment corresponding to the updated connection\nstring URI does not contain all collections currently in use,\ncharts using those data sources must be reconfigured using a\ndifferent data source or deleted before you can update the\nconnection URI.\n\n\n\n\n\nModify Data Source Permissions\u00b6\nA data source Owner can add, modify, and remove\nuser permissions on a data source.\n\nFrom the Data Sources view, click the Access\nbutton in the Permissions column for the data source you\nwant to modify permissions.\nPerform the desired permission changes for the data source. Refer\nto the Data Source Permissions page for\ndetails on the permissions available and instructions on\nsetting the permissions.\nClick Apply Changes.\n\n\n\n\nRemove a Data Source\u00b6\n\nImportant\nTo remove a data source, you must have the Owner\npermission on that data source.\n\nTo remove a data source:\n\nFrom the Data Sources view, click the ellipsis\n(\u2026) button on the right-hand side of the data source\nyou want to delete.\nClick Delete Data Source.\nClick Delete Data Source again in the dialog to confirm\ndeletion.\n\n\nImportant\nAny charts using the deleted data source will need to be\nreconfigured using a different data source or deleted.\n\n\n\nData Source Permissions\n\n\n\n",
            "preview": "Data sources in MongoDB Charts reference a collection or view in your MongoDB deployment. When building a chart, you will need to specify the data source that the chart uses.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/connection-string",
                "http://docs.mongodb.org/manual/reference/built-in-roles/",
                "https://docs.mongodb.com/manual/core/databases-and-collections/",
                "https://docs.mongodb.com/charts/v0.11/data-source-permissions/",
                "http://docs.mongodb.org/manual/reference/privilege-actions/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/manual/core/views/",
                "https://docs.mongodb.com/charts/v0.11/administration/configure-ssl-data-sources/",
                "http://docs.mongodb.org/manual/core/authentication/"
            ]
        },
        {
            "slug": "v0.11/embedded-objects-arrays/index.html",
            "title": "Embedded Objects and Arrays \u2014 Charts Manual 0.11",
            "headings": [
                "Embedded Objects and Arrays",
                "Embedded Objects",
                "Array Fields",
                "General Array Reduction Options",
                "String Accumulates",
                "Numeric Accumulates",
                "Fields within an Array"
            ],
            "text": "\nEmbedded Objects and Arrays\u00b6\n\nOn this page\n\nEmbedded Objects\nArray Fields\n\n\nMongoDB Charts can directly access fields in embedded objects and can\nprocess array fields flexibly according to your use case.\n\nEmbedded Objects\u00b6\nEmbedded objects in the Fields section of the Chart Builder\nare indicated by curly brackets ({}) next to their name. To expand\nan object field, click the arrow to the left of the field name. You can\ndrag embedded object fields onto the desired\nencoding channels just like any other field\nto visualize those fields in your chart.\n\nExample\nThe video.movieDetails data source in the following example\ncontains embedded objects named awards and imdb. We expand the\nobjects by clicking the arrows to the left of their names, then in\nthe bar chart we compare the\nmean imdb.rating in the Y-axis with\nawards.wins in the X-axis.\n\n\n\n\nNote\nNotice the filter provided above the chart of\n{'awards.wins': {$gt: 0}}, meaning only movies which have won\nat least one award are included in the visualization. For more\ninformation on filtering documents in MongoDB Charts, see the\nFilter Documents page.\n\n\n\n\nArray Fields\u00b6\nArray fields in the Fields section of the Chart Builder\npage are indicated by square brackets ([]) next to their name. When\nadding an array field to an encoding channel, select an array reduction option to\nprocess the data in the best way for your visualization. The following\narray reduction options are available:\n\nGeneral Array Reduction Options\u00b6\nYou can apply these array reduction options to any array:\n\n\n\n\n\n\nArray Reduction Option\nDescription\n\n\n\nUnwind array\nDeconstructs the array field from the input documents to\noutput a document for each element. Each output document is\na copy of the input document with the value of the array field\nreplaced by the element.\n\nArray length\nCounts and returns the total number of items in the array.\n\nArray element by index\nReturns the array element at the specified zero-based index position.\n\n\n\n\n\nString Accumulates\u00b6\nYou can apply these accumulates to arrays of String values:\n\n\n\n\n\n\nAccumulate\nDescription\n\n\n\nconcat\nConcatenates the values of the array into a a single string.\n\nmin length\nReturns the length of the shortest string in the array.\n\nmax length\nReturns the length of the longest string in the array.\n\nlongest\nReturns the longest string in the array.\n\nshortest\nReturns the shortest string in the array.\n\nexistence of value\nReturns true if the specified string exists in the array,\nand false if the string does not exist in the array.\n\ncount of occurrences\nReturns the number of times the specified string occurs in the\narray.\n\n\n\n\n\nNumeric Accumulates\u00b6\nYou can apply these accumulates to arrays of Numeric values:\n\n\n\n\n\n\nAccumulate\nDescription\n\n\n\nmin\nReturns the minimum value in the array.\n\nmax\nReturns the maximum value in the array.\n\nmean\nReturns the mean of all values in the array.\n\nsum\nReturns the sum of all values in the array.\n\n\n\n\nNote\nMongoDB Charts only displays accumulate options which match the data\ntype of the field used in the visualization (i.e., only showing\nstring accumulate options for string data and numeric accumulate\noptions for numeric data).\n\n\n\nFields within an Array\u00b6\nAs with array-valued fields, encoding channels require an array reduction option to be specified\nwhen handling fields within an array. In this case, the selected\nreduction is applied to the array containing the target field.\nAdditionally, in the case of embedded arrays, you must select a reduction\noption for the top-level array and all sub-arrays. Note that different\nreduction options may be used for each embedded array.\n\n\n",
            "preview": "MongoDB Charts can directly access fields in embedded objects and can process array fields flexibly according to your use case.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/"
            ]
        },
        {
            "slug": "v0.11/encoding-channels/index.html",
            "title": "Encoding Channels \u2014 Charts Manual 0.11",
            "headings": [
                "Encoding Channels",
                "Aggregation",
                "Multi-Series Charts",
                "Multiple Field Mappings",
                "Series Encoding Channel"
            ],
            "text": "\nEncoding Channels\u00b6\n\nOn this page\n\nAggregation\nMulti-Series Charts\nMultiple Field Mappings\nSeries Encoding Channel\n\n\n\n\nEncoding channels are the building blocks of your visualizations.\nThese channels are the means by which Charts translates data\nfrom your collection to\nthe visualization. The encoding process dictates how that data\nappears in the chart based on the channel type selected.\nEach encoding channel type provides different capabilities for\nprocessing and visualizing your data, which vary based on the type of\ndata you provide to the channel (e.g., string versus numeric\ndata). The following table describes each encoding channel type in\nMongoDB Charts:\n\n\n\n\n\n\nEncoding Channel Type\nDescription\n\n\n\nValue\nA point on the chart is created from the chosen field for each\ndocument in the collection. You may only assign fields with a\nnumeric or date type to a Value channel.\n\nCategory\nEach unique value from this field in the collection is used\nas a chart category. The Category encoding channel\nprovides the following additional visualization options:\n\nFor fields with a string data type, you can specify a\nfield to sort on and the sort order.\nFor fields with a numeric data type, you can toggle\ndata binning and select the bin size.\nFor fields with a date data type, you can toggle date\ngrouping and select the grouping period.\n\n\n\nAggregation\nA point on the chart is created by applying an\naggregation function over the values of\nthis field from multiple documents; for example\n$count and\n$sum. For more\ninformation on aggregation in Charts, see the\nAggregation section.\n\n\n\n\nAggregation\u00b6\nDragging a field onto an aggregation\nencoding channel allows you to use an\naggregation pipeline operator\non that field. The aggregation operators available in the chart\nbuilder change based on the data type\nof the selected field. MongoDB Charts categorizes the field data type\nas either a number, string, or date and displays\nappropriate aggregation options accordingly.\n\nExample\nDonut charts provide two encoding channels:\n\nA category channel called Label dictating\nwhich field to use when dividing the sections of the chart.\nAn aggregation channel called Arc dictating\nthe aggregation operation to perform on the Label\ncategory.\n\nThe following donut chart examines NASA\u2019s Landslide data source to\nshow the frequency of various landslide triggers by performing a\n$count aggregation\non the trigger field:\n\n\n\nWe see from the chart that the most common landslide trigger is\nDownpour followed by Rain.\n\n\n\nMulti-Series Charts\u00b6\nMongoDB Charts supports building multi-series charts, which split your\nchart data into groups, or series, to compare additional\nfields within your schema. There are two ways to create multi-series\ncharts:\n\nUsing multiple aggregation or value field mappings. Use this method to compare or aggregate\nupon multiple non-categorical fields in the schema.\nUsing the Series field in the chart builder. Use this method when grouping data based\non a discrete list of items.\n\n\nMultiple Field Mappings\u00b6\nMongoDB Charts allows you to map multiple aggregation or value\nencoding channels to a single chart property\n(e.g. X Axis or Y Axis). This allows you to\ncompare additional fields in your visualization by creating new series\nbased on the encoding channels added.\nAfter dragging a field to an aggregation\nor value encoding channel, an\nadditional optional encoding channel of the same type appears below the\none which was just added, allowing you to add additional series to your\nvisualization. This process repeats with each channel you add, so\nyou can map as many fields as desired to your chart.\n\nExample\nThe following multi-series column chart shows average movie ratings\nby genre from two different sources: IMDB\nand Rotten Tomatoes:\n\n\n\nThere are two aggregation encoding channels on\nthe chart\u2019s Y Axis, one for each of the site\u2019s rating\nfields. By selecting the mean aggregation option, the\nchart aggregates these two fields using the\n$avg operator to\nprovide a comparison of the average of two fields in the same\ncolumn.\n\n\nTip\nUse multiple field mappings to create a multi-series chart when\nthe values being compared in the visualization come from two or more\nseparate fields in the schema.\nIn the example above, there is one series for Rotten Tomato ratings\nand one series for IMDB ratings. Since these are separate fields\nwithin the schema, adding multiple aggregation encoding\nchannels to map the data is the best choice to compare the fields.\n\n\n\nSeries Encoding Channel\u00b6\nYou can also create multi-series charts by using the Series\nfield in the chart builder. The Series field differs from\naggregation encoding channels\nbecause it instead utilizes a Category encoding channel. When creating a series using the\ncategory encoding channel, each unique value from the\ndata field becomes a series in the visualization.\n\nExample\nThe following multi-series column chart shows order data from an\noffice supply store, showing the most common items sold by\nstore location:\n\n\n\nBy using the item.name in the Series encoding\nchannel, a series within each location group is added for each\nitem name.\n\n\nTip\nThe Series field is useful when you are grouping data\nbased on a discrete list of items. This approach should be used when\nthe values for all series are stored in a single field, with a\nseparate field used to establish the discrete categories.\n\n\n\n",
            "preview": "Encoding channels are the building blocks of your visualizations. These channels are the means by which Charts translates data from your collection to the visualization. The encoding process dictates how that data appears in the chart based on the channel type selected.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/bson-types/",
                "https://www.rottentomatoes.com/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/",
                "http://docs.mongodb.org/manualaggregation",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/avg/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://www.imdb.com/",
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "http://docs.mongodb.org/manual/core/databases-and-collections/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/"
            ]
        },
        {
            "slug": "v0.11/filter-documents/index.html",
            "title": "Filter Documents in the Visualization \u2014 Charts Manual 0.11",
            "headings": [
                "Filter Documents in the Visualization",
                "Basic Filter Example",
                "Regular Expression (RegEx) Filter",
                "Relative Date Filter",
                "Relative Date Filter Example"
            ],
            "text": "\nFilter Documents in the Visualization\u00b6\n\nOn this page\n\nBasic Filter Example\nRegular Expression (RegEx) Filter\nRelative Date Filter\n\n\nTo display a subset of results in your data that match a given\ncriteria, use the Filters input bar above the chart\ndisplay. Input a filter document employing the same syntax used in the\nquery portion of the db.collection.find() method. After entering a filter document,\nclick Apply to see the filter reflected in your visualization.\n\nNote\nFilters on large collections may have performance issues if there\nare not appropriate indexes on the collection.\n\n\nBasic Filter Example\u00b6\nThe following chart shows the average runtime of movies by genre.\nThe filter of {runtime: {$gte: 120 }} means that we are only\ntaking into account movies which have a runtime greater than or\nequal to 120 minutes.\n\n\n\n\n\nRegular Expression (RegEx) Filter\u00b6\nRegEx filters allow you to apply a regular expression as the match\ncriteria to restrict the data MongoDB Charts displays. The expression\nuses the following syntax:\n\n\n\ncopy\n\n{ <field>: { $regex: \"pattern\", $options: \"<options>\" } }\n\n\n\nThe $options are optional and are the same as the\n$regex options in the MongoDB shell.\n\nExample\nFilter data to document fields that start with a specific letter\nTo find all documents where the jobs field begins with the\nletter A, you would write the following in the\nFilter bar:\n\n\n\ncopy\n\n{ \"job\" : { $regex : \"^A\" } }\n\n\n\nFilter data to document fields that start with a specific letter\nignoring case\nTo find all documents where the jobs field begins with the\nletter A or a, you would write the following in the\nFilter bar:\n\n\n\ncopy\n\n{ \"job\" : { $regex : \"^A\", $options : \"i\" } }\n\n\n\n\n\nNote\nThe quotation marks around the regular expression are required. You\nmay not use forward slashes to delineate the regex value as you may\nin the MongoDB shell.\n\n\n\nRelative Date Filter\u00b6\nRelative Date Filters allow you to specify a date from which MongoDB Charts\nrestricts the data displayed. For example, you can set a Relative Date\nFilter to display data from only the last month or last year. To\ncreate a filter spanning from the specified date to the current date,\nspecify the number of milliseconds since the Unix epoch of January 1,\n1970. Use this date in conjunction with a\ncomparison query operator\nto set the inclusive or exclusive time range of the data displayed.\n\nExample\nThe following Relative Date Filter returns documents that have a\ntimestamp field which resolves to a date less than 30 days from\nthe current date:\n\n\n\ncopy\n\n{ timestamp: {  $gt: new Date(new Date() - 30 * 24 * 60 * 60 * 1000 ) } }\n\n\n\nFirst, the inner new Date() constructor generates the current\ndate in milliseconds since the Unix epoch of January 1, 1970. The\nmathematical series 30 * 24 * 60 * 60 * 1000 results in the\nnumber of milliseconds elapsed in 30 days. The filter takes the\ncurrent date in milliseconds since the Unix epoch and subtracts the\nnumber of milliseconds in 30 days. This results in a new millisecond\nvalue which the filter passes to an outer new Date() constructor\nand resolves to the date 30 days prior to the time the user executes\nthe filter.\nUsing a mathematical series as shown here allows the filter to\nalways span a relative timeframe of 30 days prior to the time\nthe user executes the filter.\n\nFor a more complete example of a relative date filter, see the\nRelative Date Filter Example.\n\nISO-8601 Dates\nThe date functions utilized in MongoDB Charts filters are consistent and\ncompatible with the date functions used in the\nmongo shell. As a result, you can also use the\nISODate() constructor in your Charts query filters.\nSpecifying an ISODate() constructor with no parameters exhibits\nthe same behavior as specifying a new Date() constructor with no\nparamters, both returning the current date in their respective\nformats.\n\nExample\nThe following filter returns documents that have a\ntimestamp field between January 1, 2017 and December 31, 2017\ninclusively:\n\n\n\ncopy\n\n{$and: [{timestamp: {$gte: ISODate(\"2017-01-01\")}},\n{timestamp: {$lte: ISODate(\"2017-12-31\")}}]}\n\n\n\n\n\n\nRelative Date Filter Example\u00b6\nThe following chart visualizes workout data. Each document in the\ncollection represents an individual workout activity, which contains\ninformation such as the type of workout and various exercise\nstatistics. This line chart shows the distance per month covered\nacross all workouts over the past year (365 days):\n\n\n\nThe chart utilizes the following filter:\n\n\n\ncopy\n\n{ \"Workout Date (As Date)\": {$gte: new Date(new Date() - 365 * 24 * 60 * 60 * 1000 ) }}\n\n\n\nThis filter returns documents where the Workout Date (As Date)\nfield is within one year prior to the time Charts executes the\nquery. The (new Date() - 365 * 24 * 60 * 60 * 1000 ) parameter\nresults in the date one year prior to the current date as expressed in\nmilliseconds since the Unix epoch. Charts returns documents\nwith a value greater than or equal to this date, as signified by the\n$gte operator.\n\nDate() is not supported\nThe Date() function (as opposed to the new Date()\nconstructor) returns the current date as a string, so it cannot be\nused for filtering dates in Charts. Use:\n\nnew Date(),\nISODate(), or\nnew ISODate()\n\n\n\n\n",
            "preview": "To display a subset of results in your data that match a given criteria, use the Filters input bar above the chart display. Input a filter document employing the same syntax used in the query portion of the db.collection.find() method. After entering a filter document, click Apply to see the filter reflected in your visualization.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/mongo",
                "https://en.wikipedia.org/wiki/Regular_expression?oldid=858335070",
                "http://docs.mongodb.org/manual/tutorial/query-documents/",
                "http://docs.mongodb.org/manual/reference/operator/query/gte/",
                "http://docs.mongodb.org/manualindexes",
                "http://docs.mongodb.org/manual/reference/operator/query-comparison/",
                "https://docs.mongodb.com/manual/reference/operator/query/regex/"
            ]
        },
        {
            "slug": "v0.11/installation/index.html",
            "title": "Installation \u2014 Charts Manual 0.11",
            "headings": [
                "Installation",
                "System Requirements",
                "Metadata Database",
                "Charts Server",
                "Supported Browsers",
                "Before You Install",
                "Set up the Charts metadata database.",
                "Download and install Docker on the MongoDB Charts host.",
                "Delete older versions of Charts.",
                "Install MongoDB Charts",
                "Create a directory to store your Charts configuration.",
                "Download the MongoDB Charts Docker Compose file.",
                "Enable Docker Swarm mode.",
                "Pull down the Charts image.",
                "Test your connection to the Charts metadata database.",
                "Create a Docker secret for the Charts metadata database.",
                "(Optional) Configure the Feedback and Support widget.",
                "(Optional) Configure the MongoDB Charts web server to use HTTPS.",
                "Launch the Charts container.",
                "Verify the container is running.",
                "Create Charts users.",
                "Launch the Charts web application.",
                "Back up your Charts installation keys.",
                "Start and Stop MongoDB Charts",
                "Troubleshooting",
                "Verify the container is running.",
                "Retrieve the logs from the running service.",
                "Delete and recreate the Docker Secret for the metadata database.",
                "Redeploy the Docker stack.",
                "Contact MongoDB Support.",
                "Troubleshooting Docker Connections"
            ],
            "text": "\nInstallation\u00b6\n\nOn this page\n\nSystem Requirements\nBefore You Install\nInstall MongoDB Charts\nStart and Stop MongoDB Charts\nTroubleshooting\n\n\nThe following document describes how to install MongoDB Charts within your\nenvironment. For the latest information on Charts, please visit\nthe Charts web page.\n\nSystem Requirements\u00b6\n\nMetadata Database\u00b6\nMongoDB Charts requires a MongoDB deployment running version 3.4 or later to\nstore Charts metadata. The Charts metadata database can\nbe a cluster running on\nMongoDB Atlas, the cloud-hosted\nservice for running, monitoring, and maintaining MongoDB deployments.\n\nNote\nCharts does not require its own dedicated MongoDB\ndeployment. If Charts uses an existing MongoDB deployment,\nit will create and use the following databases: metadata,\napp, auth, and log.\n\n\n\nCharts Server\u00b6\nMongoDB Charts must be installed on a single server running Docker CE or EE\n(v17.06 or higher). The server must be in a network location that can\ncommunicate with the metadata database and MongoDB servers that contain\nthe data you wish to visualize.\n\n\nSupported Browsers\u00b6\nEnd users accessing MongoDB Charts must use a current desktop version of\nChrome, Firefox, or Safari on any operating system.\n\n\n\nBefore You Install\u00b6\nThis section lists the required steps to complete before installing\nCharts.\n1\nSet up the Charts metadata database.\u00b6\nIdentify or configure a MongoDB deployment to store Charts metadata.\nFor a production deployment, deploy MongoDB in a three member\nreplica set and\nenable authentication.\nThe connection URI of this deployment is required in a\nlater step.\n\n2\nDownload and install Docker on the MongoDB Charts host.\u00b6\nMongoDB Charts runs within a\nDocker Linux container.\nInstall Docker CE or EE (v17.06 or higher)\non the Charts host. Charts runs on any OS or\ndistribution supported by Docker, including Windows and macOS.\n\n3\nDelete older versions of Charts.\u00b6\nIf you have an older version of Charts deployed, delete it using the\nfollowing command:\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\n\nNote\nThis will not remove any persisted data.\n\n\n\n\nInstall MongoDB Charts\u00b6\nUse the following procedure to install MongoDB Charts:\n\nWindows Installation\nWhen installing MongoDB Charts on Windows, it is strongly recommended to\nuse Windows PowerShell, rather than the Command Prompt. Windows\nCommand Prompt does not handle quotation marks properly when\ncreating the Docker secret for MongoDB Charts in step 6.\n\n1\nCreate a directory to store your Charts configuration.\u00b6\nCreate a directory to store your Charts configuration, then\nchange to the new directory:\n\n\n\ncopy\n\nmkdir mongodb-charts\ncd mongodb-charts\n\n\n\n\n2\nDownload the MongoDB Charts Docker Compose file.\u00b6\nDownload the latest version of the Charts Docker Compose\nfile from the MongoDB Download Center and manually move\nit to the new directory.\n\n3\nEnable Docker Swarm mode.\u00b6\nRun the following command to enable Docker Swarm mode:\n\n\n\ncopy\n\ndocker swarm init\n\n\n\n\n4\nPull down the Charts image.\u00b6\n\n\n\ncopy\n\ndocker pull quay.io/mongodb/charts:v0.11.0\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.11.0 with the version number of your release.\n\nThis command may take a while as it downloads a large file to the\nhost server.\n\n5\nTest your connection to the Charts metadata database.\u00b6\nMongoDB Charts requires a Connection String URI to connect to a MongoDB deployment\nwhich will store the Charts metadata. The MongoDB deployment\nmust be reachable from the Charts host. If the MongoDB\ndeployment is running with authentication enabled, you must provide the credentials\nin the connection string, and the MongoDB user must have the\nreadWriteAnyDatabase role. When connecting to a replica\nset, the replicaSet URI option is required.\n\nRunning Metadata Database on localhost\nCharts interprets localhost as the Docker container\nCharts is running in. If the database is running on the\nsame host as the Charts Docker container but not in\nDocker, it will not be reachable via\nmongodb://localhost. Instead, use one of the following URIs\ndepending on your Docker version when creating the Docker secret\nin the command below:\n\nFor Docker versions 18.03 and later:\nFor Windows and macOS, use mongodb://host.docker.internal.\nFor Linux, use the IP address of the docker0 interface.\nNormally, this address is 172.17.0.1.\n\n\nFor Docker versions 17.06 up to but not including 18.03:\nFor Windows, use mongodb://docker.for.win.localhost.\nFor macOS, use mongodb://docker.for.mac.localhost.\nFor Linux, use the IP address of the docker0 interface.\nNormally, this address is 172.17.0.1.\n\n\n\n\nRun the following command to test your connection string. Replace\nthe placeholder connection string at the end of the command with\nyour connection string URI:\n\n\n\ncopy\n\ndocker run --rm quay.io/mongodb/charts:v0.11.0 charts-cli test-connection mongodb://<username>:<password>@myhost.com/\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.11.0 with the version number of your release.\n\nIf the MongoDB Charts successfully connects to the specified MongoDB\ndeployment, Charts displays the following message in the\ncommand line:\n\n\n\nMongoDB connection URI successfully verified.\n\n\n\nPay careful attention to the output of this command, as it\nmay include warnings of potential issues which could impact\nthe deployment process.\nIf MongoDB Charts cannot connect using the specified connection URI,\nCharts outlines possible troubleshooting actions to take\nto create a successful connection. For detailed troubleshooting\ninformation, refer to the Troubleshooting section.\n\n6\nCreate a Docker secret for the Charts metadata database.\u00b6\nOnce you have verified that MongoDB Charts can successfully connect to\nyour MongoDB deployment, create a Docker secret to hold the\nConnection String URI.\nRun the following command to create the Docker secret, substituting\nyour connection string from the previous step:\n\n\n\ncopy\n\necho \"<Verified connection string URI from step 5>\" | docker secret create charts-mongodb-uri -\n\n\n\n\nWindows Installation\nWindows users must execute this command in Windows PowerShell,\nnot Command Prompt, to ensure the quotation marks surrounding\nthe connection string are not included as a part of the secret.\n\n\nNote\nIf you are using a different orchestrator to run MongoDB Charts, such\nas Kubernetes, you may need to provide the MongoDB URI using an\nenvironment variable instead of a Docker secret. If you\nconfigure the CHARTS_MONGODB_URI environment variable within\nthe container, this variable directs Charts to use this\nvalue for the connection instead of using the Docker secret. How\nyou specify the environment variable depends on your chosen\nmethod for deploying the Charts Docker container.\n\n\n7\n(Optional) Configure the Feedback and Support widget.\u00b6\nMongoDB Charts includes a widget on every page that allows users to\nrequest assistance or provide feedback to MongoDB. It also enables\nthe transmission of usage statistics to MongoDB to help improve the\nproduct. These statistics include:\n\nOperations performed\nChart types created\nErrors that MongoDB Charts returns\n\nCharts sends the logged-in user\u2019s email and name to the\nIntercom system to help provide support. No data is collected or\ntransmitted from the user\u2019s databases.\nBy default, the Feedback and Support widget is enabled.\nTo disable the widget within MongoDB MongoDB Charts and prevent the\ntransmission of usage statistics:\n\nOpen charts-docker-compose.yml.\n\nSet the following value:\n\n\n\ncopy\n\nCHARTS_SUPPORT_WIDGET_AND_METRICS: \"off\"\n\n\n\n\nRestart MongoDB Charts.\n\n\nTo re-enable the widget\n\nOpen charts-docker-compose.yml.\n\nSet the following value:\n\n\n\ncopy\n\nCHARTS_SUPPORT_WIDGET_AND_METRICS: \"on\"\n\n\n\n\nRestart MongoDB Charts.\n\n\n\n8\n(Optional) Configure the MongoDB Charts web server to use HTTPS.\u00b6\nYou can either run MongoDB Charts using the default HTTP protocol, or\nconfigure the Charts web server to use the HTTPS protocol\nfor additional security. For instructions on configuring HTTPS for\nMongoDB Charts, see Configure MongoDB Charts Web Server to Use HTTPS.\n\n9\nLaunch the Charts container.\u00b6\nLaunch the Charts container as a Docker Stack using the\nCompose file:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.11.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.11.0 with the version number of your release.\n\n\n10\nVerify the container is running.\u00b6\nCheck that the container is running by executing:\n\n\n\ncopy\n\ndocker service ls\n\n\n\nThe Charts container should appear with mode replicated\nwith 1/1 replicas:\n\n\n\nID             NAME                    MODE         REPLICAS   IMAGE                   PORTS\nj77uo3slyg4l   mongodb-charts_charts   replicated   1/1        mongodb-charts:latest   *:80->80/tcp\n\n\n\n\nNote\nThe service\u2019s mode may not be replicated immediately. Docker\ndoes not display the status of certain deployment operations, so\nwait briefly then rerun docker service ls.\nIf the service is stuck at 0/1 replicas and it\u2019s mode is not\nreplicated after an extended period of time, the service may\nnot have deployed properly. For more information, see\nTroubleshooting.\n\n\n11\nCreate Charts users.\u00b6\nOnce the container is running, execute the charts-cli add-user\nscript within the container once for each Charts user account\nyou want to create within MongoDB Charts. At mininum, you must use the script\nto create one user with the UserAdmin role in order to be able to\nlog into Charts. After creating this initial user, you\ncan either use the Charts user interface to\nadd users or continue using the\ncharts-cli add-user script to add users with either the\nUserAdmin or User role.\nTo add users with the script, run the following command. Replace the\nplaceholders in angle brackets with the appropriate values.\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    \n\n\ncopy\n\ndocker exec -it `\n  $(docker container ls --filter name=_charts -q) `\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" `\n  --email \"<user@example.com>\" --password \"<Password>\" `\n  --role \"<UserAdmin|User>\"\n\n\n\n\n\n\n\ncopy\n\ndocker exec -it \\\n  $(docker container ls --filter name=_charts -q) \\\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" \\\n  --email \"<user@example.com>\" --password \"<Password>\" \\\n  --role \"<UserAdmin|User>\"\n\n\n\n\n\n\n\ncopy\n\ndocker exec -it \\\n  $(docker container ls --filter name=_charts -q) \\\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" \\\n  --email \"<user@example.com>\" --password \"<Password>\" \\\n  --role \"<UserAdmin|User>\"\n\n\n\n    \n  \nFor more information on roles and adding users, see\nUser Management.\n\n12\nLaunch the Charts web application.\u00b6\nAccess MongoDB Charts by opening a web browser and connecting to the\nname of the server running the container. Note that Charts\nruns on HTTP port 80 and HTTPS port 443 (if\nconfigured for HTTPS) unless you have\nmodified the Docker Compose file to use different ports.\n\n13\nBack up your Charts installation keys.\u00b6\nMongoDB Charts uses a number of keys and tokens to secure your\ndeployment and encrypt sensitive data stored in the Charts\nmetadata database. When you first deploy Charts, new random\nkeys are automatically generated and saved to a\nDocker volume which\npersists the keys across container deployments.\n\nImportant\nIf you want to redeploy Charts or move Charts to a\nnew server, you will need to use the original keys in new\ndeployments. If you deploy a new instance of Charts and\npoint it to an existing Charts metadata database used by a\nprevious deployment, the encryption keys will not match and the\nnew instance of Charts will not be able to decrypt the\nmetadata.\n\nTo back up the keys, use the following commands to launch a temporary\ncontainer that copies the key files from the Charts volume to a\nnewly created directory on the host system:\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    \n\n\ncopy\n\nmkdir c:\\temp\\charts-keys-backup\ndocker run -it `\n  --volume mongodb-charts_keys:/volume `\n  --volume /c/temp/charts-keys-backup:/backup `\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\n\n\n\ncopy\n\nmkdir /tmp/charts-keys-backup\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n\n\n\n\ncopy\n\nmkdir /tmp/charts-keys-backup\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n    \n  \n\nImportant\nOnce the operation above completes, store the key in a secure\nlocation that is not on the Charts server.\n\nFor more information, see\nBack Up and Restore Security Keys.\n\n\n\nStart and Stop MongoDB Charts\u00b6\nMongoDB Charts executes within a single Docker container managed by\nDocker Swarm.\nTo start Charts, deploy the stack using the supplied Docker Compose\nfile:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.11.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.11.0 with the version number of your release.\n\nTo stop Charts, ask Docker to remove the stack:\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\n\n\nTroubleshooting\u00b6\nIf MongoDB Charts does not successfully load in a browser after starting the\nDocker stack, try the following steps:\n1\nVerify the container is running.\u00b6\nCheck that the container is running by executing:\n\n\n\ncopy\n\ndocker service ls\n\n\n\nThe Charts container should appear with mode replicated\nwith 1/1 replicas:\n\n\n\nID             NAME                    MODE         REPLICAS   IMAGE                   PORTS\nj77uo3slyg4l   mongodb-charts_charts   replicated   1/1        mongodb-charts:latest   *:80->80/tcp\n\n\n\nProceed to the next step if any of the following conditions are met:\n\nThe service is stuck at 0/1 replicas and its mode is not\nreplicated after an extended period of time.  This may indicate\nthat the service did not deploy properly.\nIf you recieve errors when running the charts-cli add-user\nscript.\nThe Charts application is not loading in your web browser.\n\n\n2\nRetrieve the logs from the running service.\u00b6\nRetrieve the service logs by running the following command using the\nservice ID from the previous step:\n\n\n\ncopy\n\ndocker service logs <service ID>\n\n\n\nThe following example contains sample output from the command. Note\neach step has a tick or cross which could explain the issue:\n\n\n\ncopy\n\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 encryptionKeyPath\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 stitchConfigTemplate\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 tokens\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 stitchConfig\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 stitchConfigWritten (true)\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2716\nmongoDBReachable failure: Can't connect to MongoDB at mongodb://mongod. Too many\nfailed attempts. Last error: failed to connect to server [mongod:27017] on first\nconnect [MongoNetworkError: getaddrinfo ENOTFOUND mongod mongod:27017]\n\n\n\n\n3\nDelete and recreate the Docker Secret for the metadata database.\u00b6\nMalformed\nConnection String URIs\ncommonly cause issues when deploying Charts. To modify the\nURI, you must remove the old Docker secret:\n\n\n\ncopy\n\ndocker secret rm charts-mongodb-uri\n\n\n\nThen recreate the secret:\n\n\n\ncopy\n\necho \"mongodb://<username>:<password>@myhost.com/\" | docker secret create charts-mongodb-uri -\n\n\n\n\n4\nRedeploy the Docker stack.\u00b6\nIf there are no obvious problems with the configuration, try deleting\nand redeploying the Docker stack.\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\nBefore redeploying, execute docker ps a few times until it shows no\nrunning Charts containers. It can take a little while for the\ncontainers to shut down. Then, relaunch the stack using:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.11.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.11.0 with the version number of your release.\n\n\n5\nContact MongoDB Support.\u00b6\nIf you still have trouble accessing the Charts application,\nsubmit a post describing your issue to the\nMongoDB Community Support forum.\n\nNote\nYou must have a Google account to submit any posts to the\nCommunity Support forum.\n\nIf you encounter any issues after installing MongoDB Charts, copy the logs\nfrom step 2 and contact MongoDB Support via the chat button within\nthe MongoDB Charts application.\n\nNote\nThe chat feature is not available when the Feedback and Support\nwidget is disabled.\n\n\n\nTroubleshooting Docker Connections\u00b6\nYou may encounter issues connecting MongoDB Charts to a MongoDB deployment\nif the MongoDB deployment uses hostnames which are not routable\ninside the Docker container. In this case, specify the extra_hosts option\nin the Docker Compose file dowloaded in step 2 of the install\nprocedure to manually map the hosts to your Docker container:\n\n\n\ncopy\n\nservices:\n  charts:\n    # Other settings will be set here\n    extra_hosts:\n      - \"somehost:198.51.100.16\"\n      - \"otherhost:198.51.100.17\"\n      - \"anotherhost:203.0.113.0\"\n\n\n\n\nNote\nWhen manually mapping to a replica set, you must specify\nhost entries for each replica set member, not just those\nin the connection string URI.\n\n\n\n",
            "preview": "The following document describes how to install MongoDB Charts within your environment. For the latest information on Charts, please visit the Charts web page.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/connection-string",
                "https://groups.google.com/forum/",
                "https://www.mongodb.com/download-center/charts",
                "https://docs.mongodb.com/manual/reference/built-in-roles/",
                "https://docs.mongodb.com/manual/reference/connection-string/",
                "https://docs.docker.com/storage/volumes/",
                "http://docs.mongodb.org/manual/tutorial/deploy-replica-set",
                "https://docs.mongodb.com/charts/v0.11/administration/backup-and-restore-keys/",
                "https://docs.docker.com/compose/compose-file/",
                "https://www.docker.com/what-container",
                "https://docs.mongodb.com/charts/v0.11/user-management/",
                "http://mongodb.com/charts",
                "https://docs.mongodb.com/charts/v0.11/administration/configure-https-deployment/",
                "https://www.mongodb.com/cloud/atlas",
                "https://www.docker.com/get-docker",
                "http://docs.mongodb.org/manual/tutorial/enable-authentication"
            ]
        },
        {
            "slug": "v0.11/manage-dashboards/index.html",
            "title": "Manage Existing Dashboards \u2014 Charts Manual 0.11",
            "headings": [
                "Manage Existing Dashboards",
                "Viewer Actions",
                "Duplicate a Dashboard",
                "Author Actions",
                "Add a Chart",
                "Edit a Chart",
                "Remove a Chart",
                "Duplicate a Chart",
                "Move a Chart to a Different Dashboard",
                "Resize a Chart",
                "Reposition Charts",
                "Rename a Dashboard and Edit its Description",
                "Owner Actions",
                "Delete a Dashboard",
                "Modify Dashboard Permissions"
            ],
            "text": "\nManage Existing Dashboards\u00b6\n\nOn this page\n\nViewer Actions\nAuthor Actions\nOwner Actions\n\n\nThis page outlines various methods for modifying existing\ndashboards. The sections on this page outline the\nrequired permissions to perform the\nactions.\nTo begin modifying a dashboard, enter the dashboard view by\nclicking the desired dashboard from the Dashboards tab.\n\nNote\nYou can search for dashboards by title by using the search bar\nin the top-right corner of the page.\n\n\nViewer Actions\u00b6\nThe following action can be performed by any user with at least\nViewer permissions on the target\ndashboard, meaning any level of dashboard access is sufficient.\n\nDuplicate a Dashboard\u00b6\nYou can duplicate any dashboard in your Dashboards tab,\neven if you do not have editing permissions.\nTo duplicate a dashboard from the Dashboards tab:\n\nClick the ellipsis (\u2026) button on the desired dashboard.\nSelect Duplicate Dashboard from the pop-up menu.\nIn the Dashboard Details dialog, update the\nTitle and Description fields.\nClick Create to save the duplicated dashboard.\n\n\nNote\nThe user who duplicates a dashboard becomes the owner and only\nuser of the newly duplicated dashboard. To grant other users access,\nupdate the dashboard\u2019s permissions.\n\n\n\n\nAuthor Actions\u00b6\nThe following actions require either the Author or Owner\npermission on the target dashboard.\n\nAdd a Chart\u00b6\nTo add a chart to your dashboard, click the Add Chart\nbutton at the top-right of your dashboard. For detailed instructions on\ncreating charts, see Build Charts.\n\n\nEdit a Chart\u00b6\nTo edit a chart, hover over the desired chart and click the\nEdit button. For details on the available editing options,\nsee Build Charts.\n\n\nRemove a Chart\u00b6\n\nImportant\nRemoving a chart from a dashboard is a permanent operation. There\nis no way to recover a chart once it has been deleted, although\nthe underlying data in the collection the chart was created\nfrom will continue to exist.\n\nTo remove a chart from your dashboard, hover over the desired chart\nand click the ellipsis (\u2026) button at the top-right of the\nchart. Select Delete Chart, then click the\nDelete Chart button in the dialog to confirm the chart\ndeletion.\n\n\nDuplicate a Chart\u00b6\nTo quickly build multiple related charts without starting from scratch\neach time, you can duplicate any chart on a dashboard.\nTo duplicate a chart:\n\nHover over the desired chart on your dashboard and click the\nellipsis (\u2026) button at the top-right of the\nchart.\nSelect Duplicate Chart.\nMake any desired changes, then click the green\nSave and Close button to save the new chart. This saves\nthe chart on the same dashboard as the original copy.\n\n\n\nMove a Chart to a Different Dashboard\u00b6\n\nNote\nThis action requires the author or\nowner role on both the origin and\ndestination dashboards.\n\nTo move a chart to a different dashboard:\n\nNavigate to the dashboard which contains the chart you wish to move.\nHover over the desired chart and click the ellipsis\n(\u2026) button at the top-right of the chart.\nClick Move to.\nIn the Move to dialog, use the dropdown to select the\ntarget dashboard for the chart.\nClick Move Chart.\n\nCharts reloads the current dashboard and the target chart is no\nlonger present.\n\n\nResize a Chart\u00b6\nTo resize a chart, hover over the chart and drag the bottom-right\ncorner until the appearing blue rectangle reaches the deired size.\n\n\n\n\n\nReposition Charts\u00b6\nTo rearrange charts in your dashboard, hover over the chart and drag\nthe top-left corner until the appearing blue rectangle is in the\ndesired location. You can also see how moving the chart will affect the\nposition of other charts in your dashboard, as illustrated in the\nfollowing example:\n\n\n\n\n\nRename a Dashboard and Edit its Description\u00b6\nYou can rename a dashboard and edit its description either from the\nDashboards tab, which shows an overview of all\nyour dashboards, or from within an individual dashboard.\nFrom the Dashboards tab:\n\nEach dashboard has a button with an ellipsis icon (\u2026)\nin the upper right corner. Click the ellipsis button.\nSelect Edit Title / Description from the pop-up menu.\nIn the Dashboard Details dialog, update the\nTitle and Description of your dashboard.\nClick Update to save your changes.\n\nFrom within an individual dashboard:\n\nIn the upper left corner of the desired dashboard view, hover over\nthe dashboard title or description and click the\npencil icon.\nIn the Dashboard Details dialog, update the\nTitle and Description of your dashboard.\nClick Update to save your changes.\n\n\n\n\nOwner Actions\u00b6\nThe following actions require Owner permission on the target dashboard.\n\nDelete a Dashboard\u00b6\n\nImportant\nDeleting a dashboard is a permanent operation. There is no way to\nrecover a dashboard once it has been deleted, although the\nunderlying data in the collections used in the dashboard will\ncontinue to exist.\n\nTo delete a dashboard:\n\nIn the Dashboards tab, locate the dashboard you wish to\ndelete.\nClick the \u2026 button on the top-right of the dashboard.\nClick Delete Dashboard.\nClick Delete in the Delete Dashboard dialog\nto confirm deletion.\n\n\n\nModify Dashboard Permissions\u00b6\nA dashbaord Owner can modify which users can access the dashboard\nand their respective permission levels. For more information, refer to\nthe Dashboard Permissions page.\n\n\n",
            "preview": "This page outlines various methods for modifying existing dashboards. The sections on this page outline the required permissions to perform the actions.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/"
            ]
        },
        {
            "slug": "v0.11/release-notes/index.html",
            "title": "Release Notes \u2014 Charts Manual 0.11",
            "headings": [
                "Release Notes",
                "MongoDB Charts v0.11.0",
                "New Features",
                "Bug Fixes",
                "MongoDB Charts v0.10.0",
                "New Features",
                "Bug Fixes",
                "MongoDB Charts v0.9.0"
            ],
            "text": "\nRelease Notes\u00b6\n\nOn this page\n\nMongoDB Charts v0.11.0\nMongoDB Charts v0.10.0\nMongoDB Charts v0.9.0\n\n\n\nMongoDB Charts v0.11.0\u00b6\nReleased January 15, 2019\n\nNew Features\u00b6\n\nChart Customization\nChange axis labels\nChange number formats\nChange data formats\nConvert time zones\nChange color palettes\nShow/hide data labels\nShow/hide data points\nChange axis range\nSet logarithmic scale on axes\n\n\nNew Chart Types\nData Table\n100% Stacked Bar\n100% Stacked Column\n100% Stacked Area\n\n\nNew Dashboard Features\nZoom into charts\nRich tooltips on charts\nMove charts between dashboards\n\n\n\n\n\nBug Fixes\u00b6\n\nCharts now render correctly when the same field is mapped to\nmultiple encoding channels.\nSessions automatically refresh in Microsoft Edge.\nPrevent dashboard layout corruption when the dashboard is open in\nmultiple browsers.\n$count\naggregations no longer count documents where the field does not\nexist.\nImproved performance when loading dashboards.\nDates now render correctly on Scatter charts.\nProperly parse URIs in Docker Secrets created by Windows Command\nPrompt.\n\n\n\n\nMongoDB Charts v0.10.0\u00b6\nReleased August 20, 2018\n\nNew Features\u00b6\n\nTest Connection\ntool to help set the correct MongoDB URI during installation.\nAbility to supply connection URI via the CHARTS_MONGODB_URI\nenvironment variable as an alternative to the Docker Secret.\nNew Number chart type, which shows a single\nnumeric value.\nAbility to\nconfigure HTTPS\non the Charts web server.\nAbility to edit the MongoDB URI of an\nexisting data source.\nLonger query timeouts for newly created data sources.\nAbility to filter dashboard and data sources\nlists by the current user\u2019s role.\nCustomizable \u201cauto refresh\u201d options\nfor dashboards.\nAbility to edit a dashboard\u2019s title and description\nfrom the Dashboards tab.\nFull-Screen mode for dashboards.\nDuplicate a dashboard.\nDuplicate a chart.\nFilter and\nsort data source dropdown in the\nChart Builder.\nAllow use of the Date() operator in the\nChart Builder filter bar to execute relative date\nqueries.\nImproved color contrast for Coloured Bar and Coloured Column charts.\n\n\n\nBug Fixes\u00b6\n\nAbility to add Data Sources from databases with names containing\nspecial characters.\nPrevent crash when entering a filter prior to choosing a Data Source\nin the Chart Builder.\nAbility to use the multiple fields from an embedded array in the\nsame chart.\nStrip out extra quotes in MongoDB URI added by Windows echo command\nduring install procedure.\nMiscellaneous styling and usability improvements.\n\n\n\n\nMongoDB Charts v0.9.0\u00b6\nReleased June 27, 2018\nInitial public beta release of MongoDB Charts.\n\n",
            "preview": "Initial public beta release of MongoDB Charts.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/manage-dashboards/",
                "https://docs.mongodb.com/charts/v0.10/installation/",
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.11/chart-types/",
                "https://docs.mongodb.com/charts/v0.11/customize-charts/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/v0.11/administration/configure-https-deployment/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/",
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/"
            ]
        },
        {
            "slug": "v0.11/sample-mode/index.html",
            "title": "Sample Mode \u2014 Charts Manual 0.11",
            "headings": [
                "Sample Mode",
                "Use Cases"
            ],
            "text": "\nSample Mode\u00b6\nEnabling Sample Mode in MongoDB Charts restricts the input\ncollection to 1000 randomly selected documents. To toggle\nSample Mode, use the toggle above the\nData Source dropdown. The sample mode setting for a chart\npersists when the chart is rendered on a dashboard, meaning that if\nyou enable sample mode when building a chart, the data rendered in the\ndashboard will also be sampled.\n\nNote\nWhen sampling mode is enabled and you have specified a\nfilter, the sample of 1000\ndocuments is taken before the filter is applied, meaning there may\nbe fewer than 1000 documents used to plot the chart.\n\n\nUse Cases\u00b6\nConsider using sample mode in the following scenarios:\n\nWhen drafting a chart and heavily modifying chart options. In this\nsituation, sampling mode allows the chart to render quickly during\nthe building process. Once you are satisfied with your chart you can\ndisable sample mode to have all documents included in your\nfinal visualization if desired.\nWhen visualizing a large data source and the chosen data is\nsufficiently aggregated (e.g. showing averages of fields) so\nnot all documents are needed to obtain a useful visualization.\nIn this case, leaving sample mode enabled for the rendered dashboard\nallows you to retain a useful chart.\n\n\nNote\nDue to the random nature of sampling, when Sample Mode is enabled,\nit is possible your visualizations will change each time the\nchart is loaded.\n\n\n",
            "preview": "Enabling Sample Mode in MongoDB Charts restricts the input collection to 1000 randomly selected documents. To toggle Sample Mode, use the toggle above the Data Source dropdown. The sample mode setting for a chart persists when the chart is rendered on a dashboard, meaning that if you enable sample mode when building a chart, the data rendered in the dashboard will also be sampled.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/filter-documents/"
            ]
        },
        {
            "slug": "v0.11/sort-limit-data/index.html",
            "title": "Sort and Limit Categorical Data \u2014 Charts Manual 0.11",
            "headings": [
                "Sort and Limit Categorical Data",
                "Sort Data",
                "Limit Data"
            ],
            "text": "\nSort and Limit Categorical Data\u00b6\n\nOn this page\n\nSort Data\nLimit Data\n\n\nWhen adding a string field to a non-series category\nencoding channel, Charts\nprovides the ability to sort and\nlimit results of your data to achieve\nthe best visualization.\n\nSort Data\u00b6\nBy default, Charts sorts the data based on the\ncategory field in ascending order. This displays the values\nof the category field in alphabetical order.\nAlternatively, you can choose to sort the data by the\naggregated value of the visualization. To toggle between\nascending or descending sort order, click the a-z button to the\nright of the Sort By dropdown.\n\n\nLimit Data\u00b6\nYou can apply a limit to the category encoding channel\nto only include a specified number of categories in your visualization.\nThe categories included are the first matching categories based on\nthe sort order specified. Limiting data can\nbe useful when visualizing data with so many categories it becomes\ndifficult to create a meaningful chart.\n\nExample\nThe following chart shows the average\nIMDb rating of movies from a\nparticular country:\n\n\n\nThe dataset contains movies from many different countries, but it\nwould be most interesting to see which countries produce the\nhighest-rated movies. We can accomplish this by applying a limit to\nonly show countries with the 10 highest average ratings for movies.\nSwitch the Limit Results toggle to On and leave the\nShow input at the default value of 10. The chart is now\nmuch easier to understand, and we have a clear view of the countries\nwith the highest-rated movies:\n\n\n\n\n\n",
            "preview": "When adding a string field to a non-series category encoding channel, Charts provides the ability to sort and limit results of your data to achieve the best visualization.",
            "tags": "",
            "links": [
                "https://www.imdb.com/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/"
            ]
        },
        {
            "slug": "v0.11/third-party-licenses/index.html",
            "title": "Third-Party Licenses \u2014 Charts Manual 0.11",
            "headings": [
                "Third-Party Licenses"
            ],
            "text": "\nThird-Party Licenses\u00b6\nMongoDB Charts uses third-party libraries or other resources that may\nbe distributed under licenses different than the MongoDB software.\nThe following lists the third-party licenses as used in Charts.\nIn the event that we have accidentally failed to list a required notice,\nyou can bring it to our attention by emailing legal.\n\n\n\n\n\n\n\n\nLibrary\nVersion\nLicense Type\nPublisher\n\n\n\n@types/json-stable-stringify\n1.0.32\nMIT\n\u00a0\n\n@types/node\n10.0.3\nMIT\n\u00a0\n\nBase64\n1.0.1\n(Apache-2.0 OR WTFPL)\nDavid Chambers (dc@davidchambers.me)\n\nJSONStream\n1.3.2\n(MIT OR Apache-2.0)\nDominic Tarr (dominic.tarr@gmail.com)\n\nabbrev\n1.1.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\najv\n4.11.8\nMIT\nEvgeny Poberezkin\n\nampersand-class-extend\n2.0.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-collection-lodash-mixin\n4.0.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-collection\n2.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-events\n2.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-state\n5.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-version\n1.0.2\nMIT\nPhilip Roberts (phil@latentflip.com)\n\nansi-regex\n2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nansi-regex\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nansi-styles\n3.2.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\naproba\n1.2.0\nISC\nRebecca Turner (me@re-becca.org)\n\nare-we-there-yet\n1.1.4\nISC\nRebecca Turner\n\nargparse\n1.0.10\nMIT\n\u00a0\n\narray-next\n0.0.1\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\narray-uniq\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nasap\n2.0.6\nMIT\n\u00a0\n\nasn1\n0.2.3\nMIT\nMark Cavage (mcavage@gmail.com)\n\nassert-plus\n0.2.0\nMIT\nMark Cavage (mcavage@gmail.com)\n\nassert-plus\n1.0.0\nMIT\nMark Cavage (mcavage@gmail.com)\n\nasync\n1.5.2\nMIT\nCaolan McMahon\n\nasync\n2.6.0\nMIT\nCaolan McMahon\n\nasynckit\n0.4.0\nMIT\nAlex Indigo (iam@alexindigo.com)\n\naws-sign2\n0.6.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\naws4\n1.7.0\nMIT\nMichael Hart (michael.hart.au@gmail.com)\n\nbabel-runtime\n6.26.0\nMIT\nSebastian McKenzie (sebmck@gmail.com)\n\nbackoff\n2.5.0\nMIT\nMathieu Turcotte (turcotte.mat@gmail.com)\n\nbalanced-match\n1.0.0\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nbcrypt-pbkdf\n1.0.1\nBSD-3-Clause\n\u00a0\n\nblock-stream\n0.0.9\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nboolbase\n1.0.0\nISC\nFelix Boehm (me@feedic.com)\n\nboom\n2.10.1\nBSD-3-Clause\n\u00a0\n\nbootstrap\n3.3.5\nMIT\nTwitter, Inc.\n\nbrace-expansion\n1.1.11\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nbson\n1.0.6\nApache-2.0\nChristian Amor Kvalheim (christkv@gmail.com)\n\nbson\n2.0.6\nApache-2.0\nChristian Amor Kvalheim (christkv@gmail.com)\n\nbugsnag-js\n3.3.3\nMIT\n\u00a0\n\nbuiltin-modules\n1.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncaller-id\n0.1.0\nMIT\nPixels & Bytes (pxandbytes@gmail.com)\n\ncamelcase\n2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncamelcase\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncamelcase\n4.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncanvas-prebuilt\n1.6.0\nMIT\nCaleb Hearon (crh0872@gmail.com)\n\ncaseless\n0.12.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nchalk\n2.4.1\nMIT\n\u00a0\n\ncheerio\n1.0.0-rc.2\nMIT\nMatt Mueller (mattmuelle@gmail.com)\n\nclassnames\n2.2.5\nMIT\nJed Watson\n\ncli-color\n0.3.2\nMIT*\nMariusz Nowak (medyk@medikoo.com)\n\ncli-table\n0.3.1\nMIT*\nGuillermo Rauch (guillermo@learnboost.com)\n\ncliui\n3.2.0\nISC\nBen Coe (ben@npmjs.com)\n\ncliui\n4.1.0\nISC\nBen Coe (ben@npmjs.com)\n\nclui\n0.3.6\nMIT\nNathan Peck (nathan@storydesk.com)\n\nco\n4.6.0\nMIT\n\u00a0\n\ncode-point-at\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncodemirror-mongodb\n0.10.3\nApache-2.0\n\u00a0\n\ncodemirror\n5.37.0\nMIT\n\u00a0\n\ncolor-convert\n1.9.1\nMIT\nHeather Arthur (fayearthur@gmail.com)\n\ncolor-name\n1.1.3\nMIT\nDY (dfcreative@gmail.com)\n\ncolors\n0.5.1\nCustom: http://i.imgur.com/goJdO.png\nMarak Squires\n\ncolors\n1.0.3\nMIT\nMarak Squires\n\ncombined-stream\n1.0.6\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\ncommander\n2.15.1\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\nconcat-map\n0.0.1\nMIT\nJames Halliday (mail@substack.net)\n\nconsole-control-strings\n1.1.0\nISC\nRebecca Turner (me@re-becca.org)\n\ncontext-eval\n0.1.0\nMIT\namasad\n\ncore-js\n1.2.7\nMIT\n\u00a0\n\ncore-js\n2.5.5\nMIT\n\u00a0\n\ncore-util-is\n1.0.2\nMIT\nIsaac Z. Schlueter (i@izs.me)\n\ncreate-react-class\n15.6.3\nMIT\n\u00a0\n\ncross-spawn\n5.1.0\nMIT\nIndigoUnited (hello@indigounited.com)\n\ncryptiles\n2.0.5\nBSD-3-Clause\n\u00a0\n\ncss-select\n1.2.0\nBSD*\nFelix Boehm (me@feedic.com)\n\ncss-what\n2.1.0\nBSD*\nFelix B\u00f6hm (me@feedic.com)\n\nd3-array\n1.2.1\nBSD-3-Clause\nMike Bostock\n\nd3-collection\n1.0.4\nBSD-3-Clause\nMike Bostock\n\nd3-color\n1.1.0\nBSD-3-Clause\nMike Bostock\n\nd3-contour\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-dispatch\n1.0.3\nBSD-3-Clause\nMike Bostock\n\nd3-dsv\n1.0.8\nBSD-3-Clause\nMike Bostock\n\nd3-force\n1.1.0\nBSD-3-Clause\nMike Bostock\n\nd3-format\n1.2.2\nBSD-3-Clause\nMike Bostock\n\nd3-geo\n1.10.0\nBSD-3-Clause\nMike Bostock\n\nd3-hierarchy\n1.1.6\nBSD-3-Clause\nMike Bostock\n\nd3-interpolate\n1.1.6\nBSD-3-Clause\nMike Bostock\n\nd3-path\n1.0.5\nBSD-3-Clause\nMike Bostock\n\nd3-quadtree\n1.0.3\nBSD-3-Clause\nMike Bostock\n\nd3-request\n1.0.6\nBSD-3-Clause\nMike Bostock\n\nd3-scale-chromatic\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-scale\n2.0.0\nBSD-3-Clause\nMike Bostock\n\nd3-shape\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-time-format\n2.1.1\nBSD-3-Clause\nMike Bostock\n\nd3-time\n1.0.8\nBSD-3-Clause\nMike Bostock\n\nd3-timer\n1.0.7\nBSD-3-Clause\nMike Bostock\n\nd3-voronoi\n1.1.2\nBSD-3-Clause\nMike Bostock\n\nd\n0.1.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nd\n1.0.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\ndashdash\n1.14.1\nMIT\nTrent Mick (trentm@gmail.com)\n\ndebug\n2.2.3\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\ndebug\n2.6.9\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\ndecamelize\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ndeep-extend\n0.5.1\nMIT\nViacheslav Lotsmanov (lotsmanov89@gmail.com)\n\ndefine-properties\n1.1.2\nMIT\nJordan Harband\n\ndelayed-stream\n1.0.0\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\ndelegates\n1.0.0\nMIT\n\u00a0\n\ndetect-browser\n1.12.0\nMIT\nDamon Oehlman (damon.oehlman@gmail.com)\n\ndetect-libc\n1.0.3\nApache-2.0\nLovell Fuller (npm@lovell.info)\n\ndiscontinuous-range\n1.0.0\nMIT\nDavid Tudury (david.tudury@gmail.com)\n\ndisposables\n1.0.2\nApache-2.0\nCloud Programmability Team\n\ndnd-core\n2.6.0\nBSD-3-Clause\n\u00a0\n\ndom-helpers\n3.3.1\nMIT\nJason Quense (monastic.panic@gmail.com)\n\ndom-serializer\n0.1.0\nMIT\nFelix Boehm (me@feedic.com)\n\ndom-walk\n0.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\ndomelementtype\n1.1.3\nBSD*\nFelix Boehm (me@feedic.com)\n\ndomelementtype\n1.3.0\nBSD*\nFelix Boehm (me@feedic.com)\n\ndomhandler\n2.4.1\nBSD-2-Clause\nFelix Boehm (me@feedic.com)\n\ndomutils\n1.5.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nduplexer\n0.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\necc-jsbn\n0.1.1\nMIT\nJeremie Miller (jeremie@jabber.org)\n\nencoding\n0.1.12\nMIT\nAndris Reinman\n\nentities\n1.1.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nenzyme-adapter-react-15\n1.0.5\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nenzyme-adapter-utils\n1.3.0\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nenzyme\n3.3.0\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nerrno\n0.1.7\nMIT\n\u00a0\n\nerror-ex\n1.3.1\nMIT\n\u00a0\n\nes-abstract\n1.11.0\nMIT\nJordan Harband (ljharb@gmail.com)\n\nes-to-primitive\n1.1.1\nMIT\nJordan Harband\n\nes5-ext\n0.10.42\nISC\nMariusz Nowak (medyk@medikoo.com)\n\nes6-iterator\n0.1.3\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-iterator\n2.0.3\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-symbol\n2.0.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-symbol\n3.1.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-weak-map\n0.1.4\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nescape-string-regexp\n1.0.5\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nesprima\n4.0.0\nBSD-2-Clause\nAriya Hidayat (ariya.hidayat@gmail.com)\n\nevent-emitter\n0.3.5\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nevent-stream\n3.3.4\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nexeca\n0.7.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nextend\n3.0.1\nMIT\nStefan Thomas (justmoon@members.fsf.org)\n\nextsprintf\n1.3.0\nMIT\n\u00a0\n\nfbjs\n0.8.16\nMIT\n\u00a0\n\nfetch-everywhere\n1.0.5\nMIT\nLucas Feliciano (mail@lucasfeliciano.com)\n\nfigures\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfind-root\n0.1.2\nMIT\nAgileMD (hello@agilemd.com)\n\nfind-up\n1.1.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfind-up\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfont-awesome\n4.7.0\n(OFL-1.1 AND MIT)\nDave Gandy (dave@fontawesome.io)\n\nfor-each\n0.3.2\nMIT\nRaynos (raynos2@gmail.com)\n\nforeach\n2.0.5\nMIT\nManuel Stofer (manuel@takimata.ch)\n\nforever-agent\n0.6.1\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nform-data\n2.1.4\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\nfrom\n0.1.7\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nfs-plus\n3.0.2\nMIT\n\u00a0\n\nfs.realpath\n1.0.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfstream-ignore\n1.0.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfstream\n1.0.11\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfunction-bind\n1.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\nfunction.prototype.name\n1.1.0\nMIT\nJordan Harband\n\nfuzzaldrin-plus\n0.4.1\nMIT\n\u00a0\n\ngauge\n2.7.4\nISC\nRebecca Turner (me@re-becca.org)\n\nget-caller-file\n1.0.2\nISC\nStefan Penner\n\nget-stream\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ngetpass\n0.1.7\nMIT\nAlex Wilson (alex.wilson@joyent.com)\n\nglob\n7.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nglobal\n4.3.2\nMIT\nRaynos (raynos2@gmail.com)\n\ngraceful-fs\n4.1.11\nISC\n\u00a0\n\nhadron-react-buttons\n1.13.2\nApache-2.0\nDurran Jordan (durran@gmail.com)\n\nhadron-react-components\n1.14.1\nApache-2.0\nDurran Jordan (durran@gmail.com)\n\nhar-schema\n1.0.5\nISC\nAhmad Nassri (ahmad@ahmadnassri.com)\n\nhar-validator\n4.2.1\nISC\nAhmad Nassri (ahmad@ahmadnassri.com)\n\nhas-flag\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nhas-symbols\n1.0.0\nMIT\nJordan Harband (ljharb@gmail.com)\n\nhas-unicode\n2.0.1\nISC\nRebecca Turner (me@re-becca.org)\n\nhas\n1.0.1\nMIT\nThiago de Arruda (tpadilha84@gmail.com)\n\nhawk\n3.1.3\nBSD-3-Clause\nEran Hammer (eran@hammer.io)\n\nhistory\n4.7.2\nMIT\nMichael Jackson\n\nhoek\n2.16.3\nBSD-3-Clause\n\u00a0\n\nhoist-non-react-statics\n2.5.0\nBSD-3-Clause\nMichael Ridgway (mcridgway@gmail.com)\n\nhosted-git-info\n2.6.0\nISC\nRebecca Turner (me@re-becca.org)\n\nhtmlparser2\n3.9.2\nMIT\nFelix Boehm (me@feedic.com)\n\nhttp-signature\n1.1.1\nMIT\nJoyent, Inc\n\niconv-lite\n0.4.21\nMIT\nAlexander Shtuchkin (ashtuchkin@gmail.com)\n\nimage-size\n0.5.5\nMIT\nnetroy (aditya@netroy.in)\n\ninflight\n1.0.6\nISC\nIsaac Z. Schlueter (i@izs.me)\n\ninherits\n2.0.3\nISC\n\u00a0\n\nini\n1.3.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\ninvariant\n2.2.4\nMIT\nAndres Suarez (zertosh@gmail.com)\n\ninvert-kv\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-arrayish\n0.2.1\nMIT\nQix\n\nis-boolean-object\n1.0.0\nMIT\nJordan Harband\n\nis-builtin-module\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-callable\n1.1.3\nMIT\nJordan Harband (ljharb@gmail.com)\n\nis-date-object\n1.0.1\nMIT\nJordan Harband\n\nis-electron-renderer\n2.0.1\nMIT\nJP Richardson\n\nis-fullwidth-code-point\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-fullwidth-code-point\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-function\n1.0.1\nMIT\nStephen Sugden (me@stephensugden.com)\n\nis-json\n2.0.1\nISC\n@joaquimserafim\n\nis-number-object\n1.0.3\nMIT\nJordan Harband\n\nis-regex\n1.0.4\nMIT\nJordan Harband\n\nis-stream\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-string\n1.0.4\nMIT\nJordan Harband\n\nis-subset\n0.1.1\nMIT\nTomek Wiszniewski (t.wiszniewski@gmail.com)\n\nis-symbol\n1.0.1\nMIT\nJordan Harband\n\nis-typedarray\n1.0.0\nMIT\nHugh Kennedy (hughskennedy@gmail.com)\n\nis-utf8\n0.2.1\nMIT\nwayfind\n\nisarray\n0.0.1\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nisarray\n1.0.0\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nisexe\n2.0.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nisnumber\n1.0.0\nMIT\nBryce B. Baril\n\nisomorphic-fetch\n2.2.1\nMIT\nMatt Andrews (matt@mattandre.ws)\n\nisstream\n0.1.2\nMIT\nRod Vagg (rod@vagg.org)\n\njavascript-stringify\n1.6.0\nMIT\nBlake Embrey (hello@blakeembrey.com)\n\njs-tokens\n3.0.2\nMIT\nSimon Lydell\n\njs-yaml\n3.11.0\nMIT\nVladimir Zapparov (dervus.grim@gmail.com)\n\njsbn\n0.1.1\nMIT\nTom Wu\n\njson-schema\n0.2.3\nAFLv2.1,BSD\nKris Zyp\n\njson-stable-stringify\n1.0.1\nMIT\nJames Halliday (mail@substack.net)\n\njson-stringify-safe\n5.0.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\njsonify\n0.0.0\nPublic Domain\nDouglas Crockford\n\njsonparse\n1.3.1\nMIT\nTim Caswell (tim@creationix.com)\n\njsprim\n1.4.1\nMIT\n\u00a0\n\njwt-decode\n2.2.0\nMIT\nJose F. Romaniello (jfromaniello@gmail.com)\n\nkey-tree-store\n1.3.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nkeycode\n2.2.0\nMIT\nTim Oxley (secoif@gmail.com)\n\nlcid\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nless-cache\n1.1.0\nMIT\n\u00a0\n\nless\n2.7.3\nApache-2.0\nAlexis Sellier (self@cloudhead.net)\n\nload-json-file\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nlocate-path\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nlodash-compat\n3.10.2\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash-es\n4.17.10\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash-fp\n0.10.4\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.assign\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.chunk\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.debounce\n4.0.8\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.defaults\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.fill\n3.4.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.flattendeep\n4.4.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.get\n4.4.2\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isarray\n4.0.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isequal\n4.5.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isfunction\n3.0.9\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isnumber\n3.0.3\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isplainobject\n4.0.6\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isstring\n4.0.1\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.keys\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.map\n4.6.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.omit\n4.5.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.transform\n4.6.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash\n3.10.1\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash\n4.17.10\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nloose-envify\n1.3.1\nMIT\nAndres Suarez (zertosh@gmail.com)\n\nlru-cache\n4.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nlru-queue\n0.1.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nmacos-release\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmap-stream\n0.1.0\nCustom: https://github.com/dominictarr/event-stream\nDominic Tarr (dominic.tarr@gmail.com)\n\nmem\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmemoizee\n0.3.10\nMIT\nMariusz Nowak (medikoo@medikoo.com)\n\nmime-db\n1.33.0\nMIT\n\u00a0\n\nmime-types\n2.1.18\nMIT\n\u00a0\n\nmime\n1.6.0\nMIT\nRobert Kieffer (robert@broofa.com)\n\nmimic-fn\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmin-document\n2.19.0\nMIT\nRaynos (raynos2@gmail.com)\n\nminimatch\n3.0.4\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nminimist\n0.0.8\nMIT\nJames Halliday (mail@substack.net)\n\nminimist\n1.2.0\nMIT\nJames Halliday (mail@substack.net)\n\nmkdirp\n0.5.1\nMIT\nJames Halliday (mail@substack.net)\n\nmoment\n2.22.1\nMIT\nIskren Ivov Chernev (iskren.chernev@gmail.com)\n\nmongodb-collection-sample\n3.0.0\nApache-2.0\n\u00a0\n\nmongodb-core\n3.0.7\nApache-2.0\nChristian Kvalheim\n\nmongodb-extended-json\n1.10.0\nApache-2.0\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-extjson\n2.1.3\nApache-2.0\nChristian Kvalheim\n\nmongodb-js-metrics\n4.1.0\nApache-2.0\n\u00a0\n\nmongodb-language-model\n1.2.0\nApache-2.0\nThomas Rueckstiess (thomas@mongodb.com)\n\nmongodb-ns\n2.0.0\nMIT\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-query-parser\n1.0.2\nApache-2.0\n\u00a0\n\nmongodb-redact\n0.1.0\nApache-2.0\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-schema\n8.0.1\nApache-2.0\nThomas Rueckstiess (thomas@rueckstiess.net)\n\nmongodb-stitch\n3.1.2\nApache-2.0\n\u00a0\n\nmongodb\n3.0.7\nApache-2.0\nChristian Kvalheim\n\nms\n0.7.1, 2.0.0\nMIT\n\u00a0\n\nnearley\n2.13.0\nMIT\nHardmath123\n\nnext-tick\n0.2.2\nMIT\nMariusz Nowak (medykk@medikoo.com)\n\nnext-tick\n1.0.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nnode-fetch\n1.7.3\nMIT\nDavid Frank\n\nnode-pre-gyp\n0.6.39\nBSD-3-Clause\nDane Springmeyer (dane@mapbox.com)\n\nnomnom\n1.6.2\nMIT*\nHeather Arthur (fayearthur@gmail.com)\n\nnopt\n4.0.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nnormalize-package-data\n2.4.0\nBSD-2-Clause\nMeryn Stol (merynstol@gmail.com)\n\nnormalize.css\n7.0.0\nMIT\n\u00a0\n\nnormalizr\n3.2.4\nMIT\nPaul Armstrong\n\nnpm-run-path\n2.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nnpmlog\n4.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nnth-check\n1.0.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nnumber-is-nan\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nnumeral\n1.5.6\nMIT\nAdam Draper (adamwdraper@gmail.com)\n\nnumeral\n2.0.6\nMIT\nAdam Draper (adamwdraper@gmail.com)\n\noauth-sign\n0.8.2\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nobject-assign\n4.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nobject-inspect\n1.6.0\nMIT\nJames Halliday (mail@substack.net)\n\nobject-is\n1.0.1\nMIT\nJordan Harband\n\nobject-keys\n1.0.11\nMIT\nJordan Harband (ljharb@gmail.com)\n\nobject.assign\n4.1.0\nMIT\nJordan Harband\n\nobject.entries\n1.0.4\nMIT\nJordan Harband\n\nobject.values\n1.0.4\nMIT\nJordan Harband\n\nonce\n1.4.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nos-homedir\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-locale\n1.4.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-locale\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-name\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-tmpdir\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nosenv\n0.1.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\np-finally\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-limit\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-locate\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-try\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nparse-headers\n2.0.1\nMIT\nDavid Bj\u00f6rklund (david.bjorklund@gmail.com)\n\nparse-json\n2.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nparse5\n3.0.3\nMIT\nIvan Nikulin (ifaaan@gmail.com)\n\npath-exists\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-exists\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-is-absolute\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-key\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-to-regexp\n1.7.0\nMIT\n\u00a0\n\npath-type\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npause-stream\n0.0.11\nMIT,Apache2\nDominic Tarr (dominic.tarr@gmail.com)\n\npegjs\n0.10.0\nMIT\nDavid Majda (david@majda.cz)\n\nperformance-now\n0.2.0, 2.1.0\nMIT\nBraveg1rl (braveg1rl@outlook.com)\n\npify\n2.3.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npinkie-promise\n2.0.1\nMIT\nVsevolod Strukchinsky (floatdrop@gmail.com)\n\npinkie\n2.0.4\nMIT\nVsevolod Strukchinsky (floatdrop@gmail.com)\n\nplatform\n1.3.5\nMIT\nBenjamin Tan (demoneaux@gmail.com)\n\npluralize\n7.0.0\nMIT\nBlake Embrey (hello@blakeembrey.com)\n\nprecond\n0.2.3\nMIT*\nMathieu Turcotte (turcotte.mat@gmail.com)\n\nprocess-nextick-args\n2.0.0\nMIT\n\u00a0\n\nprocess\n0.5.2\nMIT*\nRoman Shtylman (shtylman@gmail.com)\n\nprogress\n1.1.8\nMIT*\nTJ Holowaychuk (tj@vision-media.ca)\n\npromise\n7.3.1\nMIT\nForbesLindesay\n\nprop-types-extra\n1.1.0\nMIT\nMatthew L Smith (mtscout6@gmail.com)\n\nprop-types\n15.6.1\nMIT\n\u00a0\n\nprr\n1.0.1\nMIT\nRod Vagg (rod@vagg.org)\n\npseudomap\n1.0.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\npunycode\n1.4.1\nMIT\nMathias Bynens\n\nqs\n6.4.0\nBSD-3-Clause\n\u00a0\n\nquery-string\n4.3.4\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nraf\n3.4.0\nMIT\nChris Dickinson (chris@neversaw.us)\n\nrailroad-diagrams\n1.0.0\nCC0-1.0\nTab Atkins Jr.\n\nrandexp\n0.4.6\nMIT\nRoly Fentanes\n\nrandomstring\n1.1.5\nMIT\nElias Klughammer (elias@klughammer.com)\n\nrc\n1.2.7\n(BSD-2-Clause OR MIT OR Apache-2.0)\nDominic Tarr (dominic.tarr@gmail.com)\n\nreact-bootstrap\n0.31.0\nMIT\nStephen J. Collings (stevoland@gmail.com)\n\nreact-bootstrap\n0.31.5\nMIT\nStephen J. Collings (stevoland@gmail.com)\n\nreact-codemirror\n1.0.0\nMIT\nJed Watson\n\nreact-dnd-html5-backend\n2.6.0\nBSD-3-Clause\n\u00a0\n\nreact-dnd\n2.6.0\nBSD-3-Clause\n\u00a0\n\nreact-dom\n15.6.2\nMIT\n\u00a0\n\nreact-draggable\n3.0.5\nMIT\nMatt Zabriskie\n\nreact-fontawesome\n1.6.1\nMIT\nDana Woodman (dana@danawoodman.com)\n\nreact-grid-layout\n0.15.3\nMIT\nSamuel Reed (samuel.trace.reed@gmail.com)\n\nreact-input-autosize\n2.2.1\nMIT\nJed Watson\n\nreact-is\n16.3.2\nMIT\n\u00a0\n\nreact-overlays\n0.7.4\nMIT\nJason Quense (monastic.panic@gmail.com)\n\nreact-prop-types\n0.4.0\nMIT\nMatthew L Smith (mtscout6@gmail.com)\n\nreact-redux\n5.0.7\nMIT\nDan Abramov (dan.abramov@me.com)\n\nreact-resizable\n1.7.5\nMIT\nSamuel Reed (samuel.trace.reed@gmail.com)\n\nreact-router-dom\n4.2.2\nMIT\n\u00a0\n\nreact-router-redux\n5.0.0-alpha.9\nMIT\n\u00a0\n\nreact-router\n4.2.0\nMIT\n\u00a0\n\nreact-select\n1.2.1\nMIT\nJed Watson\n\nreact-test-renderer\n15.6.2\nMIT\n\u00a0\n\nreact-tooltip\n3.5.1\nMIT\nwwayne\n\nreact-vega-lite\n1.1.3\nApache-2.0\nKrist Wongsuphasawat (krist.wongz@gmail.com)\n\nreact-vega\n3.1.2\nApache-2.0\nKrist Wongsuphasawat (krist.wongz@gmail.com)\n\nreact\n15.6.2\nMIT\n\u00a0\n\nread-pkg-up\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nread-pkg\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nreadable-stream\n1.0.34, 2.3.6\nMIT\n\u00a0\n\nreduce-reducers\n0.1.5\nMIT\nAndrew Clark (acdlite@me.com)\n\nredux-actions\n2.3.2\nMIT\nAndrew Clark (acdlite@me.com)\n\nredux-saga-routines\n2.2.3\nMIT\nAlex Fitiskin (alexfitiskin@gmail.com)\n\nredux-saga\n0.16.0\nMIT\nYassine ELOUAFI (yelouafi@gmail.com)\n\nredux\n3.7.2\nMIT\n\u00a0\n\nregenerator-runtime\n0.11.1\nMIT\nBen Newman (bn@cs.stanford.edu)\n\nrequest\n2.81.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nrequire-directory\n2.1.1\nMIT\nTroy Goode (troygoode@gmail.com)\n\nrequire-main-filename\n1.0.1\nISC\nBen Coe (ben@npmjs.com)\n\nrequire_optional\n1.0.1\nApache-2.0\nChristian Kvalheim Amor\n\nreselect\n3.0.1\nMIT\n\u00a0\n\nreservoir\n0.1.2\nMIT\nJon-Carlos Rivera (jon.carlos.rivera@gmail.com)\n\nresolve-from\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nresolve-pathname\n2.2.0\nMIT\nMichael Jackson\n\nret\n0.1.15\nMIT\nRoly Fentanes\n\nrimraf\n2.6.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nrst-selector-parser\n2.2.3\nBSD-3-Clause\nGajus Kuizinas (gajus@gajus.com)\n\nrw\n1.3.3\nBSD-3-Clause\nMike Bostock\n\nsafe-buffer\n5.1.2\nMIT\nFeross Aboukhadijeh (feross@feross.org)\n\nsafer-buffer\n2.1.2\nMIT\nNikita Skovoroda (chalkerx@gmail.com)\n\nsemver\n5.5.0\nISC\n\u00a0\n\nset-blocking\n2.0.0\nISC\nBen Coe (ben@npmjs.com)\n\nsetimmediate\n1.0.5\nMIT\nYuzuJS\n\nshebang-command\n1.2.0\nMIT\nKevin Martensson (kevinmartensson@gmail.com)\n\nshebang-loader\n0.0.1\nMIT\njavascriptismagic@gmail.com\n\nshebang-regex\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsignal-exit\n3.0.2\nISC\nBen Coe (ben@npmjs.com)\n\nsimple-node-logger\n0.93.37\nApache-2.0\ndarryl.west@raincitysoftware.com\n\nsingleton-js\n1.0.0\nMIT\nRyan Beard\n\nsntp\n1.0.9\nBSD\nEran Hammer (eran@hammer.io)\n\nsource-map\n0.5.7\nBSD-3-Clause\nNick Fitzgerald (nfitzgerald@mozilla.com)\n\nspdx-correct\n3.0.0\nApache-2.0\nKyle E. Mitchell (kyle@kemitchell.com)\n\nspdx-exceptions\n2.1.0\nCC-BY-3.0\nThe Linux Foundation\n\nspdx-expression-parse\n3.0.0\nMIT\nKyle E. Mitchell (kyle@kemitchell.com)\n\nspdx-license-ids\n3.0.0\nCC0-1.0\nShinnosuke Watanabe\n\nsplit\n0.3.3\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nsprintf-js\n1.0.3\nBSD-3-Clause\nAlexandru Marasteanu (hello@alexei.ro)\n\nsshpk\n1.14.1\nMIT\nJoyent, Inc\n\nstack-trace\n0.0.10\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\nstats-lite\n2.1.1\nMIT\nBryce B. Baril\n\nstream-combiner\n0.0.4\nMIT\n\u2018Dominic Tarr\u2019 (dominic.tarr@gmail.com)\n\nstrict-uri-encode\n1.1.0\nMIT\nKevin M\u00e5rtensson (kevinmartensson@gmail.com)\n\nstring-width\n1.0.2, 2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstring_decoder\n0.10.31, 1.1.1\nMIT\nRod Vagg (r@va.gg)\n\nstringstream\n0.0.5\nMIT\nMichael Hart (michael.hart.au@gmail.com)\n\nstrip-ansi\n3.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-ansi\n4.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-bom\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-eof\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-json-comments\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsupports-color\n5.4.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsymbol-observable\n1.2.0\nMIT\nBen Lesh (ben@benlesh.com)\n\ntar-pack\n3.4.1\nBSD-2-Clause\n\u00a0\n\ntar\n2.2.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nthrough2\n0.6.5\nMIT\nRod Vagg (r@va.gg)\n\nthrough\n2.3.8\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\ntimers-ext\n0.1.5\nISC\nMariusz Nowak (medyk@medikoo.com)\n\ntopojson-client\n3.0.0\nBSD-3-Clause\nMike Bostock\n\ntough-cookie\n2.3.4\nBSD-3-Clause\nJeremy Stashewsky (jstashewsky@salesforce.com)\n\ntrim\n0.0.1\nMIT*\nTJ Holowaychuk (tj@vision-media.ca)\n\ntslib\n1.9.0\nApache-2.0\nMicrosoft Corp.\n\ntunnel-agent\n0.6.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\ntweetnacl\n0.14.5\nUnlicense\nTweetNaCl-js contributors\n\nua-parser-js\n0.7.18\n(GPL-2.0 OR MIT)\nFaisal Salman (f@faisalman.com)\n\nuid-number\n0.0.6\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nuncontrollable\n4.1.0\nMIT\nJason Quense (monastic.panic@gmail.com)\n\nunderscore-plus\n1.6.6\nMIT\n\u00a0\n\nunderscore\n1.4.4, 1.6.0\nMIT*\nJeremy Ashkenas (jeremy@documentcloud.org)\n\nuniversal-analytics\n0.4.16\nMIT\nJ\u00f6rg Tillmann (joerg@peaksandpies.com)\n\nutil-deprecate\n1.0.2\nMIT\nNathan Rajlich (nathan@tootallnate.net)\n\nuuid\n3.2.1\nMIT\n\u00a0\n\nvalidate-npm-package-license\n3.0.3\nApache-2.0\nKyle E. Mitchell (kyle@kemitchell.com)\n\nvalue-equal\n0.4.0\nMIT\nMichael Jackson\n\nvega-canvas\n1.0.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-crossfilter\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-dataflow\n3.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-encode\n2.0.8\nBSD-3-Clause\nJeffrey Heer\n\nvega-event-selector\n2.0.0\nBSD-3-Clause\nUW Interactive Data Lab\n\nvega-expression\n2.3.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-force\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-geo\n2.2.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-hierarchy\n2.1.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-lite\n2.4.1\nBSD-3-Clause\nJeffrey Heer, Dominik Moritz, Kanit \u201cHam\u201d Wongsuphasawat\n\nvega-loader\n2.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-parser\n2.7.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-projection\n1.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-runtime\n2.0.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-scale\n2.1.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-scenegraph\n2.5.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-statistics\n1.2.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-transforms\n1.3.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-typings\n0.2.16\nBSD*\nDominik Moritz (domoritz@gmail.com)\n\nvega-util\n1.7.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-view-transforms\n1.2.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-view\n2.3.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-voronoi\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-wordcloud\n2.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega\n3.3.1\nBSD-3-Clause\nUW Interactive Data Lab\n\nverror\n1.10.0\nMIT\n\u00a0\n\nwalkdir\n0.0.11\nMIT\nRyan Day (soldair@gmail.com)\n\nwarning\n3.0.0\nBSD-3-Clause\nBerkeley Martinez (berkeley@r3dm.com)\n\nwhatwg-fetch\n2.0.4\nMIT\n\u00a0\n\nwhich-module\n1.0.0\nISC\nnexdrew\n\nwhich-module\n2.0.0\nISC\nnexdrew\n\nwhich\n1.3.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nwide-align\n1.1.2\nISC\nRebecca Turner (me@re-becca.org)\n\nwin-release\n1.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nwindow-size\n0.1.4\nMIT\nJon Schlinkert\n\nwindow-size\n0.2.0\nMIT\nJon Schlinkert\n\nwrap-ansi\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nwrappy\n1.0.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nxhr\n2.4.1\nMIT\nRaynos (raynos2@gmail.com)\n\nxmlhttprequest\n1.8.0\nMIT\nDan DeFelippi\n\nxtend\n4.0.1\nMIT\nRaynos (raynos2@gmail.com)\n\ny18n\n3.2.1\nISC\nBen Coe (ben@npmjs.com)\n\nyallist\n2.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nyargs-parser\n2.4.1\nISC\nBen Coe (ben@npmjs.com)\n\nyargs-parser\n9.0.2\nISC\nBen Coe (ben@npmjs.com)\n\nyargs (yargs)\n4.8.1, 11.0.0, 11.1.0\nMIT\n\u00a0\n\nyargs (bcoe)\n3.32.0\nMIT\nAlex Ford (Alex.Ford@CodeTunnel.com)\n\n\n\n",
            "preview": "MongoDB Charts uses third-party libraries or other resources that may be distributed under licenses different than the MongoDB software.",
            "tags": "",
            "links": [
                "mailto:medyk%40medikoo.com",
                "https://github.com/sindresorhus/has-flag",
                "https://github.com/mikeal/oauth-sign",
                "https://github.com/JedWatson/classnames",
                "https://github.com/sindresorhus/execa",
                "https://github.com/studio-b12/is-subset",
                "https://github.com/FortAwesome/Font-Awesome",
                "https://github.com/fent/ret.js",
                "https://github.com/npm/wrappy",
                "https://github.com/isaacs/json-stringify-safe",
                "https://github.com/joaquimserafim/is-json",
                "mailto:tpadilha84%40gmail.com",
                "https://github.com/salesforce/tough-cookie",
                "https://github.com/facebook/prop-types",
                "https://github.com/mongodb-js/codemirror-mongodb",
                "https://github.com/hardmath123/nearley",
                "https://github.com/YuzuJS/setImmediate",
                "https://github.com/jprichardson/is-electron-renderer",
                "https://github.com/ljharb/is-string",
                "https://github.com/ljharb/has-symbols",
                "https://github.com/vega/vega-parser",
                "https://github.com/mbostock/rw",
                "https://github.com/ahmadnassri/har-validator",
                "https://github.com/mongodb-js/mongodb-redact",
                "https://github.com/d3/d3-contour",
                "https://github.com/sindresorhus/npm-run-path",
                "https://github.com/manuelstofer/foreach",
                "https://github.com/STRML/react-resizable",
                "https://github.com/juliangruber/isarray",
                "https://github.com/jquense/uncontrollable",
                "https://github.com/vega/vega-lite",
                "https://github.com/trentm/node-dashdash",
                "mailto:ljharb%40gmail.com",
                "https://www.github.com/DefinitelyTyped/DefinitelyTyped",
                "mailto:phil%40latentflip.com",
                "https://github.com/sindresorhus/load-json-file",
                "https://github.com/faisalman/ua-parser-js",
                "mailto:ashtuchkin%40gmail.com",
                "https://github.com/sindresorhus/p-limit",
                "https://github.com/d3/d3-voronoi",
                "mailto:justmoon%40members.fsf.org",
                "https://github.com/d3/d3-interpolate",
                "https://github.com/medikoo/es5-ext",
                "mailto:domoritz%40gmail.com",
                "https://github.com/isaacs/node-graceful-fs",
                "mailto:npm%40lovell.info",
                "https://github.com/sindresorhus/invert-kv",
                "https://github.com/qix-/node-is-arrayish",
                "mailto:t.wiszniewski%40gmail.com",
                "https://github.com/ljharb/object-is",
                "https://github.com/quartzjer/ecc-jsbn",
                "https://github.com/sindresorhus/escape-string-regexp",
                "https://github.com/isaacs/inherits",
                "https://github.com/sindresorhus/figures",
                "https://github.com/hughsk/is-typedarray",
                "https://github.com/Raynos/dom-walk",
                "https://github.com/soldair/node-walkdir",
                "https://github.com/npm/normalize-package-data",
                "https://github.com/isaacs/abbrev-js",
                "https://github.com/Raynos/for-each",
                "https://github.com/yargs/yargs",
                "mailto:fayearthur%40gmail.com",
                "https://github.com/sindresorhus/number-is-nan",
                "https://github.com/npm/node-semver",
                "https://github.com/zertosh/invariant",
                "https://github.com/alexindigo/asynckit",
                "mailto:hello%40indigounited.com",
                "https://github.com/bitinn/node-fetch",
                "mailto:medykk%40medikoo.com",
                "https://github.com/npm/npmlog",
                "https://github.com/shtylman/node-process",
                "https://github.com/sindresorhus/path-is-absolute",
                "https://github.com/vega/vega-geo",
                "https://github.com/mongodb-js/mongodb-extjson",
                "mailto:ahmad%40ahmadnassri.com",
                "https://github.com/ChALkeR/safer-buffer",
                "https://github.com/iarna/are-we-there-yet",
                "https://github.com/nodeca/js-yaml",
                "https://github.com/d3/d3-array",
                "https://github.com/ampersandjs/ampersand-events",
                "mailto:krist.wongz%40gmail.com",
                "https://github.com/jquense/dom-helpers",
                "https://github.com/vega/vega-loader",
                "https://github.com/klughammer/node-randomstring",
                "https://github.com/redux-saga/redux-saga",
                "mailto:ben%40npmjs.com",
                "https://github.com/vega/vega-dataflow",
                "mailto:bn%40cs.stanford.edu",
                "mailto:matt%40mattandre.ws",
                "https://github.com/meryn/performance-now",
                "https://github.com/vega/vega-wordcloud",
                "https://github.com/vega/vega-crossfilter",
                "https://github.com/juliangruber/balanced-match",
                "https://github.com/request/request",
                "https://github.com/bestiejs/punycode.js",
                "mailto:turcotte.mat%40gmail.com",
                "https://github.com/mapbox/node-pre-gyp",
                "https://github.com/tj/commander.js",
                "https://github.com/mridgway/hoist-non-react-statics",
                "https://github.com/mongodb-js/hadron-react",
                "https://github.com/mikeal/forever-agent",
                "https://github.com/caolan/async",
                "https://github.com/jashkenas/underscore",
                "mailto:sindresorhus%40gmail.com",
                "https://github.com/chearon/node-canvas-prebuilt",
                "https://github.com/redux-utilities/reduce-reducers",
                "https://github.com/Raynos/function-bind",
                "https://github.com/ReactTraining/history",
                "https://github.com/Automattic/cli-table",
                "https://github.com/calvinmetcalf/process-nextick-args",
                "mailto:adamwdraper%40gmail.com",
                "mailto:ifaaan%40gmail.com",
                "https://github.com/kristw/react-vega",
                "https://github.com/dominictarr/through",
                "https://github.com/atom/fs-plus",
                "https://github.com/Microsoft/tslib",
                "https://github.com/ahmadnassri/har-schema",
                "https://github.com/d3/d3-color",
                "https://github.com/vega/vega-canvas",
                "https://github.com/ljharb/is-symbol",
                "mailto:thomas%40mongodb.com",
                "https://github.com/mikeal/aws-sign",
                "https://github.com/vega/vega-statistics",
                "mailto:nathan%40storydesk.com",
                "https://github.com/isaacs/once",
                "mailto:floatdrop%40gmail.com",
                "https://github.com/ljharb/is-number-object",
                "mailto:darryl.west%40raincitysoftware.com",
                "https://github.com/auth0/jwt-decode",
                "https://github.com/d3/d3-scale-chromatic",
                "mailto:alex.wilson%40joyent.com",
                "https://github.com/ljharb/object-keys",
                "mailto:hrabovsky.lucas%40gmail.com",
                "mailto:chris%40neversaw.us",
                "https://github.com/Raynos/xtend",
                "https://github.com/mozilla/source-map",
                "mailto:mail%40lucasfeliciano.com",
                "mailto:dfcreative%40gmail.com",
                "https://github.com/airbnb/enzyme",
                "mailto:legal%40mongodb.com",
                "https://github.com/chalk/supports-color",
                "https://github.com/hueniverse/sntp",
                "https://github.com/react-bootstrap/prop-types-extra",
                "https://github.com/sindresorhus/strip-eof",
                "https://github.com/davepacheco/node-verror",
                "https://github.com/danawoodman/react-fontawesome",
                "https://github.com/jslicense/spdx-expression-parse.js",
                "https://github.com/mhart/aws4",
                "https://github.com/driverdan/node-XMLHttpRequest",
                "https://github.com/unclechu/node-deep-extend",
                "https://github.com/redux-utilities/redux-actions",
                "https://github.com/paularmstrong/normalizr",
                "mailto:mail%40substack.net",
                "https://github.com/facebook/react",
                "https://github.com/vega/vega-scenegraph",
                "https://github.com/yargs/y18n",
                "https://github.com/floatdrop/pinkie-promise",
                "https://github.com/JedWatson/react-input-autosize",
                "https://github.com/vega/vega-encode",
                "https://github.com/twbs/bootstrap",
                "https://github.com/adamwdraper/Numeral-js",
                "mailto:thomas%40rueckstiess.net",
                "https://github.com/fb55/nth-check",
                "https://github.com/necolas/normalize.css",
                "https://github.com/d3/d3-timer",
                "https://github.com/fb55/css-what",
                "https://github.com/isaacs/ini",
                "https://github.com/andris9/encoding",
                "https://github.com/STRML/react-grid-layout",
                "https://github.com/isaacs/block-stream",
                "https://github.com/peaksandpies/universal-analytics",
                "https://github.com/isaacs/node-glob",
                "https://github.com/jeancroy/fuzzaldrin-plus",
                "https://github.com/brycebaril/node-isnumber",
                "https://github.com/mikeal/tunnel-agent",
                "https://github.com/ljharb/object.assign",
                "mailto:f%40faisalman.com",
                "mailto:troygoode%40gmail.com",
                "https://github.com/dchest/tweetnacl-js",
                "https://github.com/mjackson/value-equal",
                "https://github.com/vega/vega-scale",
                "https://github.com/ashtuchkin/iconv-lite",
                "https://github.com/vega/vega-util",
                "https://github.com/d3/d3-dispatch",
                "http://i.imgur.com/goJdO.png",
                "https://github.com/substack/node-mkdirp",
                "https://github.com/vega/vega-voronoi",
                "https://github.com/felixge/node-stack-trace",
                "https://github.com/sindresorhus/resolve-from",
                "https://github.com/mongodb/node-mongodb-native",
                "mailto:berkeley%40r3dm.com",
                "mailto:crh0872%40gmail.com",
                "mailto:samuel.trace.reed%40gmail.com",
                "mailto:feross%40feross.org",
                "https://github.com/sindresorhus/strip-bom",
                "mailto:braveg1rl%40outlook.com",
                "https://docs.mongodb.com/charts/v0.11/third-party-licenses/undefined",
                "mailto:raynos2%40gmail.com",
                "mailto:aditya%40netroy.in",
                "https://github.com/dfcreative/color-name",
                "mailto:stevoland%40gmail.com",
                "https://github.com/form-data/form-data",
                "https://github.com/nodejs/string_decoder",
                "https://github.com/alexei/sprintf.js",
                "https://github.com/rvagg/node-errno",
                "mailto:david%40majda.cz",
                "mailto:me%40feedic.com",
                "mailto:tim%40creationix.com",
                "https://github.com/dominictarr/map-stream",
                "https://github.com/sindresorhus/p-try",
                "https://github.com/jshttp/mime-types",
                "https://github.com/TooTallNate/util-deprecate",
                "https://github.com/FB55/domelementtype",
                "https://github.com/JedWatson/react-codemirror",
                "https://github.com/sindresorhus/p-locate",
                "https://github.com/pillarjs/path-to-regexp",
                "https://github.com/fb55/DomHandler",
                "https://github.com/isaacs/node-lru-cache",
                "mailto:demoneaux%40gmail.com",
                "https://github.com/cheeriojs/dom-renderer",
                "https://github.com/lodash/lodash",
                "https://github.com/grncdr/js-is-function",
                "mailto:jfromaniello%40gmail.com",
                "mailto:hughskennedy%40gmail.com",
                "mailto:dominic.tarr%40gmail.com",
                "https://github.com/cheeriojs/cheerio",
                "https://github.com/sindresorhus/strip-json-comments",
                "https://github.com/kristw/react-vega-lite",
                "https://github.com/fb55/htmlparser2",
                "https://github.com/floatdrop/pinkie",
                "https://github.com/felixge/node-combined-stream",
                "mailto:dervus.grim%40gmail.com",
                "https://github.com/image-size/image-size",
                "https://github.com/lodash/lodash-compat",
                "https://github.com/iarna/gauge",
                "https://github.com/mongodb-js/mongodb-schema",
                "https://github.com/sindresorhus/mem",
                "mailto:felix%40debuggable.com",
                "https://github.com/ampersandjs/ampersand-version",
                "https://github.com/hapijs/boom",
                "https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime",
                "https://github.com/wwayne/react-tooltip",
                "https://github.com/HenrikJoreteg/array-next",
                "mailto:leland.richardson%40airbnb.com",
                "mailto:tj%40vision-media.ca",
                "https://github.com/mongodb-js/query-parser",
                "mailto:mikeal.rogers%40gmail.com",
                "https://github.com/kevva/shebang-command",
                "mailto:hello%40blakeembrey.com",
                "https://github.com/visionmedia/debug",
                "https://github.com/yargs/cliui",
                "mailto:self%40cloudhead.net",
                "https://github.com/ljharb/define-properties",
                "https://github.com/isaacs/fstream-ignore",
                "https://github.com/afitiskin/redux-saga-routines",
                "https://github.com/tarruda/has",
                "https://github.com/justmoon/node-extend",
                "https://github.com/joyent/node-jsprim",
                "https://github.com/gaearon/disposables",
                "mailto:gajus%40gajus.com",
                "https://github.com/arekinath/node-getpass",
                "https://github.com/jslicense/spdx-correct.js",
                "https://github.com/nexdrew/which-module",
                "mailto:robert%40broofa.com",
                "https://github.com/bugsnag/bugsnag-js",
                "https://github.com/sindresorhus/os-homedir",
                "https://github.com/nodeca/argparse",
                "https://github.com/Marak/colors.js",
                "https://github.com/dominictarr/rc",
                "mailto:henrik%40andyet.net",
                "https://github.com/sindresorhus/parse-json",
                "https://github.com/rvagg/prr",
                "https://github.com/hapijs/cryptiles",
                "mailto:joerg%40peaksandpies.com",
                "mailto:dane%40mapbox.com",
                "mailto:david.bjorklund%40gmail.com",
                "https://github.com/d3/d3-scale",
                "https://github.com/d3/d3-time-format",
                "https://github.com/felixge/node-delayed-stream",
                "https://github.com/medikoo/event-emitter",
                "https://github.com/npm/osenv",
                "mailto:r%40va.gg",
                "mailto:mtscout6%40gmail.com",
                "https://github.com/d3/d3-quadtree",
                "mailto:christkv%40gmail.com",
                "mailto:hello%40agilemd.com",
                "https://github.com/sindresorhus/path-exists",
                "https://github.com/medikoo/cli-color",
                "mailto:david.tudury%40gmail.com",
                "mailto:manuel%40takimata.ch",
                "https://github.com/vega/vega-force",
                "https://github.com/dominictarr/stream-combiner",
                "https://github.com/ljharb/es-abstract",
                "https://github.com/d3/d3-path",
                "mailto:ariya.hidayat%40gmail.com",
                "https://github.com/ljharb/es-to-primitive",
                "https://github.com/d3/d3-format",
                "https://github.com/isaacs/core-util-is",
                "https://github.com/chalk/ansi-regex",
                "mailto:sebmck%40gmail.com",
                "https://github.com/ljharb/is-callable",
                "https://github.com/es-shims/Object.values",
                "mailto:zertosh%40gmail.com",
                "https://github.com/yargs/set-blocking",
                "https://github.com/substack/node-concat-map",
                "https://github.com/sindresorhus/os-tmpdir",
                "https://github.com/lydell/js-tokens",
                "https://github.com/mongodb-js/extended-json",
                "https://github.com/mongodb-js/ns",
                "https://github.com/ForbesLindesay/tar-pack",
                "https://github.com/yargs/yargs-parser",
                "mailto:jeremy%40documentcloud.org",
                "mailto:secoif%40gmail.com",
                "https://github.com/IndigoUnited/node-cross-spawn",
                "https://github.com/mikeal/caseless",
                "https://github.com/chalk/strip-ansi",
                "https://github.com/ampersandjs/ampersand-state",
                "https://github.com/d3/d3-force",
                "https://github.com/sindresorhus/mimic-fn",
                "https://github.com/jquery/esprima",
                "https://github.com/wayfind/is-utf8",
                "mailto:damon.oehlman%40gmail.com",
                "https://github.com/ljharb/is-regex",
                "https://github.com/rvagg/through2",
                "https://github.com/npm/hosted-git-info",
                "https://github.com/npm/inflight",
                "https://github.com/pegjs/pegjs",
                "https://github.com/substack/minimist",
                "https://github.com/inikulin/parse5",
                "https://github.com/moment/moment",
                "https://github.com/chrisdickinson/raf",
                "https://github.com/dominictarr/JSONStream",
                "https://github.com/kriskowal/asap",
                "https://github.com/es-shims/Object.entries",
                "https://github.com/HenrikJoreteg/key-tree-store",
                "mailto:iam%40alexindigo.com",
                "https://github.com/sindresorhus/locate-path",
                "https://github.com/juliangruber/brace-expansion",
                "https://github.com/blakeembrey/javascript-stringify",
                "https://github.com/chalk/wrap-ansi",
                "https://github.com/isaacs/minimatch",
                "mailto:chalkerx%40gmail.com",
                "https://github.com/vega/vega-transforms",
                "https://github.com/lovell/detect-libc",
                "https://github.com/ljharb/qs",
                "https://github.com/medikoo/d",
                "https://github.com/ampersandjs/ampersand-collection",
                "mailto:durran%40gmail.com",
                "https://github.com/mhart/StringStream",
                "mailto:jstashewsky%40salesforce.com",
                "https://github.com/vega/vega-event-selector",
                "https://github.com/harthur/nomnom",
                "https://github.com/react-bootstrap/react-overlays",
                "https://github.com/kemitchell/validate-npm-package-license.js",
                "https://github.com/babel/babel/tree/master/packages/babel-runtime",
                "mailto:jeremie%40jabber.org",
                "https://github.com/sindresorhus/is-stream",
                "https://github.com/substack/json-stable-stringify",
                "https://github.com/shinnn/spdx-license-ids",
                "https://github.com/mongodb/js-bson",
                "https://github.com/blesh/symbol-observable",
                "https://github.com/aweary/rst-selector-parser",
                "https://github.com/jshttp/mime-db",
                "https://github.com/vega/vega-view",
                "https://github.com/d3/d3-geo",
                "https://github.com/zloirock/core-js",
                "https://github.com/sindresorhus/array-uniq",
                "https://github.com/agilemd/find-root",
                "https://github.com/Qix-/color-convert",
                "mailto:me%40stephensugden.com",
                "https://github.com/codemirror/CodeMirror",
                "https://github.com/atom/underscore-plus",
                "mailto:javascriptismagic%40gmail.com",
                "https://github.com/substack/object-inspect",
                "https://github.com/ljharb/function.prototype.name",
                "https://github.com/sindresorhus/path-type",
                "https://github.com/kesla/parse-headers",
                "https://github.com/joyent/node-http-signature",
                "https://github.com/tapjs/signal-exit",
                "https://github.com/sindresorhus/macos-release",
                "https://github.com/creationix/jsonparse",
                "https://github.com/MathieuTurcotte/node-precond",
                "mailto:jon.carlos.rivera%40gmail.com",
                "https://github.com/react-bootstrap/react-prop-types",
                "https://github.com/less/less.js",
                "https://github.com/sindresorhus/get-stream",
                "https://github.com/sindresorhus/p-finally",
                "https://github.com/stefanpenner/get-caller-file",
                "https://github.com/dominictarr/pause-stream",
                "https://github.com/github/fetch",
                "mailto:iskren.chernev%40gmail.com",
                "https://github.com/medikoo/es6-symbol",
                "https://github.com/medikoo/memoizee",
                "mailto:lotsmanov89%40gmail.com",
                "https://github.com/hapijs/hoek",
                "https://github.com/visionmedia/node-progress",
                "https://github.com/FB55/domutils",
                "https://github.com/ampersandjs/ampersand-class-extend",
                "https://github.com/npm/fstream",
                "https://github.com/sindresorhus/find-up",
                "https://github.com/feross/safe-buffer",
                "https://github.com/isaacs/uid-number",
                "mailto:mattmuelle%40gmail.com",
                "https://github.com/reactjs/react-redux",
                "https://github.com/ljharb/is-boolean-object",
                "https://github.com/dominictarr/from",
                "https://github.com/ljharb/is-date-object",
                "mailto:trentm%40gmail.com",
                "mailto:monastic.panic%40gmail.com",
                "https://github.com/react-bootstrap/react-bootstrap",
                "https://github.com/d3/d3-dsv",
                "https://github.com/Raynos/min-document",
                "https://github.com/iarna/aproba",
                "https://github.com/isaacs/node-tar",
                "mailto:mcavage%40gmail.com",
                "https://github.com/fb55/css-select",
                "mailto:nfitzgerald%40mozilla.com",
                "https://github.com/visionmedia/node-delegates",
                "https://github.com/d3/d3-request",
                "https://github.com/andyperlitch/jsbn",
                "https://github.com/davepacheco/node-extsprintf",
                "mailto:dc%40davidchambers.me",
                "https://github.com/sindresorhus/code-point-at",
                "https://github.com/vega/vega",
                "https://github.com/react-dnd/react-dnd",
                "https://github.com/yargs/require-main-filename",
                "https://github.com/mongodb-js/metrics",
                "mailto:john.david.dalton%40gmail.com",
                "https://github.com/sindresorhus/object-assign",
                "https://github.com/sindresorhus/read-pkg-up",
                "mailto:dana%40danawoodman.com",
                "mailto:yelouafi%40gmail.com",
                "https://github.com/broofa/node-mime",
                "https://github.com/sindresorhus/os-locale",
                "https://github.com/MathieuTurcotte/node-backoff",
                "https://github.com/isaacs/rimraf",
                "https://github.com/ampersandjs/ampersand-collection-lodash-mixin",
                "https://github.com/nodejs/readable-stream",
                "https://github.com/medikoo/timers-ext",
                "https://github.com/chalk/ansi-styles",
                "https://github.com/medikoo/es6-weak-map",
                "https://github.com/mongodb-js/mongodb-core",
                "https://github.com/d3/d3-shape",
                "https://github.com/mcavage/node-assert-plus",
                "https://github.com/ryanbeard/singleton-js",
                "https://github.com/dtudury/discontinuous-range",
                "https://github.com/sindresorhus/read-pkg",
                "mailto:kyle%40kemitchell.com",
                "https://github.com/then/promise",
                "https://github.com/hueniverse/hawk",
                "https://github.com/imbcmdth/reservoir",
                "https://github.com/brycebaril/node-stats-lite",
                "mailto:soldair%40gmail.com",
                "https://github.com/dominictarr/split",
                "mailto:shtylman%40gmail.com",
                "https://github.com/troygoode/node-require-directory",
                "mailto:mcridgway%40gmail.com",
                "https://github.com/sindresorhus/win-release",
                "https://github.com/medikoo/next-tick",
                "https://github.com/sindresorhus/decamelize",
                "https://github.com/sindresorhus/lcid",
                "https://github.com/fent/randexp.js",
                "https://github.com/isaacs/yallist",
                "https://github.com/fb55/boolbase",
                "https://github.com/bcoe/yargs",
                "https://github.com/BerkeleyTrue/warning",
                "https://github.com/JedWatson/react-select",
                "https://github.com/sindresorhus/shebang-regex",
                "https://github.com/medikoo/lru-queue",
                "https://github.com/DamonOehlman/detect-browser",
                "https://github.com/arekinath/node-sshpk",
                "https://github.com/reactjs/reselect",
                "https://github.com/mongodb-js/mongodb-language-model",
                "https://github.com/iarna/has-unicode",
                "https://github.com/Raynos/duplexer",
                "https://github.com/isaacs/fs.realpath",
                "https://github.com/sindresorhus/query-string",
                "https://github.com/atom/less-cache",
                "https://github.com/vega/vega-hierarchy",
                "https://github.com/naugtur/xhr",
                "https://github.com/isaacs/pseudomap",
                "https://github.com/jonschlinkert/window-size",
                "https://github.com/zeit/ms",
                "https://github.com/ReactTraining/react-router",
                "https://github.com/timoxley/keycode",
                "mailto:ben%40benlesh.com",
                "https://github.com/fb55/node-entities",
                "https://github.com/isaacs/node-which",
                "mailto:medikoo%40medikoo.com",
                "https://github.com/vega/vega-runtime",
                "https://github.com/javascriptismagic/shebang-loader",
                "https://github.com/d3/d3-collection",
                "https://github.com/kelektiv/node-uuid",
                "mailto:hello%40alexei.ro",
                "mailto:mail%40juliangruber.com",
                "https://github.com/d3/d3-time",
                "https://github.com/sindresorhus/is-fullwidth-code-point",
                "https://github.com/christkv/require_optional",
                "https://github.com/dominictarr/event-stream",
                "mailto:merynstol%40gmail.com",
                "https://github.com/sindresorhus/path-key",
                "https://github.com/mongodb-js/mongodb-collection-sample",
                "https://github.com/sindresorhus/builtin-modules",
                "https://github.com/iarna/wide-align",
                "mailto:Alex.Ford%40CodeTunnel.com",
                "https://github.com/substack/jsonify",
                "https://github.com/kevva/strict-uri-encode",
                "mailto:i%40izs.me",
                "mailto:michael.hart.au%40gmail.com",
                "https://github.com/tabatkins/railroad-diagrams",
                "https://github.com/zertosh/loose-envify",
                "https://github.com/lucasfeliciano/fetch-everywhere",
                "https://github.com/mcavage/node-asn1",
                "mailto:acdlite%40me.com",
                "https://github.com/isaacs/isexe",
                "https://github.com/nathanpeck/clui",
                "https://github.com/tj/co",
                "mailto:me%40re-becca.org",
                "https://github.com/kriszyp/json-schema",
                "https://github.com/pixelsandbytes/caller-id",
                "https://github.com/medikoo/es6-iterator",
                "https://github.com/blakeembrey/pluralize",
                "https://github.com/davidchambers/Base64.js",
                "https://github.com/chalk/chalk",
                "https://github.com/topojson/topojson-client",
                "https://github.com/d3/d3-hierarchy",
                "https://github.com/epoberezkin/ajv",
                "mailto:pxandbytes%40gmail.com",
                "https://github.com/darrylwest/simple-node-logger",
                "https://github.com/iarna/console-control-strings",
                "https://github.com/sindresorhus/camelcase",
                "https://github.com/mzabriskie/react-draggable",
                "https://github.com/sindresorhus/os-name",
                "mailto:dan.abramov%40me.com",
                "https://github.com/facebook/fbjs",
                "https://github.com/vega/vega-projection",
                "https://github.com/qix-/node-error-ex",
                "https://github.com/vega/vega-expression",
                "https://github.com/Raynos/global",
                "https://github.com/sindresorhus/string-width",
                "https://github.com/lodash/lodash-fp",
                "mailto:rod%40vagg.org",
                "https://github.com/matthew-andrews/isomorphic-fetch",
                "https://github.com/vega/vega-view-transforms",
                "mailto:kevinmartensson%40gmail.com",
                "https://github.com/kemitchell/spdx-exceptions.json",
                "https://github.com/sindresorhus/is-builtin-module",
                "mailto:elias%40klughammer.com",
                "mailto:dave%40fontawesome.io",
                "https://github.com/sindresorhus/pify",
                "https://github.com/rvagg/isstream",
                "mailto:eran%40hammer.io",
                "https://github.com/mjackson/resolve-pathname",
                "mailto:guillermo%40learnboost.com",
                "https://github.com/reactjs/redux",
                "mailto:nathan%40tootallnate.net",
                "mailto:alexfitiskin%40gmail.com",
                "https://github.com/vega/vega-typings",
                "https://github.com/bestiejs/platform.js",
                "https://github.com/npm/nopt"
            ]
        },
        {
            "slug": "v0.11/tutorial/movie-details/arrange-charts/index.html",
            "title": "Arrange the Charts on the Dashboard \u2014 Charts Manual 0.11",
            "headings": [
                "Arrange the Charts on the Dashboard",
                "Wrapping Up"
            ],
            "text": "\nArrange the Charts on the Dashboard\u00b6\n\nOn this page\n\nWrapping Up\n\n\nEstimated Time to Complete: 2 minutes\nNow that you have two charts on your dashboard, you can arrange them\nfor maximum legibility. These two charts are horizontally oriented,\nso you may wish to make them wider and stack them one above the other.\nYou can change the shape of each chart by clicking and dragging on the\nlower right corner of the chart, and you can move them around the page\nby clicking and dragging on the upper left corner of the chart.\n\nSee also\nManage Existing Dashboards\n\nYour finished dashboard should look similar to this:\n\n\n\n\nWrapping Up\u00b6\nYou now have a dashboard which provides easily accessible insight into\naward winning directors and award nominated films. Try adding additional\ncharts to the dashboard and see what other interesting insights you can\ndiscover.\n\n",
            "preview": "Estimated Time to Complete: 2 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.11/tutorial/movie-details/column-chart-director-awards/index.html",
            "title": "Column Chart Showing Directors with the Most Awards \u2014 Charts Manual 0.11",
            "headings": [
                "Column Chart Showing Directors with the Most Awards",
                "Construct the Chart",
                "Click Add My First Chart.",
                "In the Data Source dropdown, select test.movieDetails.",
                "Select the Chart Type.",
                "Add the desired fields to the proper encoding channels.",
                "Apply a limit to the X axis.",
                "Group awards by genre.",
                "Title your chart.",
                "Next Steps"
            ],
            "text": "\nColumn Chart Showing Directors with the Most Awards\u00b6\nEstimated Time to Complete: 5 minutes\nTo create each chart, you will populate the chart\u2019s\nencoding channels with fields from your\nschema. Encoding channels represent the information passed to\nMongoDB Charts which allows Charts to create the visualization.\nFor more information on encoding channels and the different types of\nchannels available, refer to the\nencoding channels section of the\ndocumentation.\n\nConstruct the Chart\u00b6\nTo discover which directors of films represented in this dataset have\nwon the most awards, use the directors and awards.wins database\nfields in your chart. Additionally, you can see which genres the\naward-winning films belong to stacking the genres field in the\ncolumns. A column chart makes it easy to\nsort and compare fields with numerical values, so it is a good choice\nfor this use case.\n1\nClick Add My First Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.movieDetails.\u00b6\n\n3\nSelect the Chart Type.\u00b6\n\nIn the Chart Type dropdown menu, select\nColumn.\nSelect the panel labeled Stacked below\nthe Chart Type dropdown menu.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the director property from the Fields\nsection of the Chart Builder view to the X Axis\nencoding channel. This tells MongoDB Charts to create a column\nfor each director value in the dataset.\n\nIn the Fields section click the awards field to\nexpand the awards object and view its properties.\n\nDrag the awards.wins field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nAggregation\nAggregation processes data records\nusing a wide variety of methods and returns computed results\nwhich may not be available in the original dataset. Because we\nare interested in the total number of awards won by each\ndirector, we use the awards.wins field here and will use\nan aggregation operator which will allow us to add up the\ntotal wins for each director.\n\n\nLeave the Aggregate dropdown menu for the\nY Axis encoding channel on its default\nvalue of sum. This value directs the aggregation\noperation to return the total number of award wins for each\ndirector.\n\n\n\n5\nApply a limit to the X axis.\u00b6\nAt this point there are too many columns in our X axis to show any\nmeaningful results. To bring the number down to a manageable level,\nwe\u2019ll sort the directors by their total number of awards won in\ndescending order, then apply a limit to get\nthe top ten:\n\nIn the X Axis channel, expand the\nSort By dropdown and select\nAggregated Value.\nTo order the results in descending order, click the\nAZ order button located to the right of the\nSort By dropdown.\nApply a limit to the number of columns in the X Axis by\ntoggling Limit Results, then setting Show\nto 10.\n\n\n6\nGroup awards by genre.\u00b6\n\nDrag the genres field to the Series encoding\nchannel, then click on the Array Reductions dropdown\nmenu and select unwind array. The X axis columns are now\nbroken down by movie genre.\n\nNote\nSome movies contain more than one genre, so the numbers\nshown in the columns may not be the exact number of awards\nfor each director.\n\n\n\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nDirectors with Most Awards, Split by Genre\n\n\n\n\nClick the green check mark to save your title.\n\nYour chart should now look like this:\n\n\n\n\nClick Save and Close to return to your\ndashboard.\n\n\n\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to build a\nscatter chart of award-nominated movies and\ntheir respective TomatoMeter ratings.\n\n",
            "preview": "Estimated Time to Complete: 5 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/v0.11/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "http://docs.mongodb.org/manualaggregation",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/scatter-chart-movies-ratings/"
            ]
        },
        {
            "slug": "v0.11/tutorial/movie-details/create-dashboard/index.html",
            "title": "Create a New Dashboard \u2014 Charts Manual 0.11",
            "headings": [
                "Create a New Dashboard",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nCreate a New Dashboard\u00b6\nEstimated Time to Complete: 2 minutes\n\nInstructions\u00b6\nNow that you have created your data source and linked it to the\norder data collection, create a dashboard\nto hold your visualizations:\n\nClick the Dashboards tab.\n\nClick the New Dashboard button.\n\nCopy the following into the Title input:\n\n\n\ncopy\n\nMovie Details\n\n\n\n\n\n\nCopy the following into the Description input:\n\n\n\ncopy\n\nInsights from the Movie Details dataset.\n\n\n\n\nClick Create.\n\n\nAfter clicking create, Charts navigates you to your newly\ncreated dashboard and prompts you to add your first chart.\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to build a\ncolumn chart showing directors who won the most\nawards.\n\n",
            "preview": "Estimated Time to Complete: 2 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/"
            ]
        },
        {
            "slug": "v0.11/tutorial/movie-details/movie-details-tutorial-overview/index.html",
            "title": "Visualizing Movie Details \u2014 Charts Manual 0.11",
            "headings": [
                "Visualizing Movie Details",
                "Introduction",
                "Table of Contents"
            ],
            "text": "\nVisualizing Movie Details\u00b6\n\nOn this page\n\nIntroduction\nTable of Contents\n\n\nTotal Estimated Time to Complete: 20-30 minutes\n\nIntroduction\u00b6\nThis tutorial explores features and capabilities of MongoDB Charts with\na data source containing information gleaned\nfrom IMDb and Rotten Tomatoes. The tutorial demonstrates how to\nuse filters to refine a large result set down to an easily\nunderstandable chart, as well as how to use multi-series charts and\nmultiple encoding channels to add further\ninsights to your charts.\nIn this tutorial, you\u2019ll create two charts: a sorted column\nchart and a scatter chart.\n\nThe sorted column chart\ndisplays columns representing the number\nof awards won by directors with at least 50 total awards,\nsorted from highest to lowest and broken down by film genre.\nThe scatter chart shows\na diagram of movies with at least one\naward win along with their TomatoMeter rating\nand their MPAA rating\n(G, PG, PG-13, or R).\n\n\n\n\n\n\nTable of Contents\u00b6\n\nStep 1: Setup and Import the Data\nStep 2: Create a New Dashboard\nStep 3: Column Chart Showing Directors with the Most Awards\nStep 4: Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nStep 5: Arrange the Charts on the Dashboard\n\nTo get started, move ahead to the\nSetup and Import the Data page.\n\n\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n",
            "preview": "Total Estimated Time to Complete: 20-30 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/column-chart-director-awards/",
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/prereqs-and-import-data/",
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/arrange-charts/",
                "https://www.imdb.com/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/scatter-chart-movies-ratings/"
            ]
        },
        {
            "slug": "v0.11/tutorial/movie-details/prereqs-and-import-data/index.html",
            "title": "Setup and Import the Data \u2014 Charts Manual 0.11",
            "headings": [
                "Setup and Import the Data",
                "Prerequisites",
                "Download the Data",
                "Import the Data",
                "Add the Data Collection as a Data Source",
                "Next Steps"
            ],
            "text": "\nSetup and Import the Data\u00b6\n\nOn this page\n\nPrerequisites\nDownload the Data\nImport the Data\nAdd the Data Collection as a Data Source\nNext Steps\n\n\nEstimated Time to Complete: 10 minutes\n\nPrerequisites\u00b6\nThe following items are required to complete this tutorial:\n\nA MongoDB Atlas\ncluster. Refer to this page for\ninstructions on creating an Atlas cluster.\nmongoimport.\nmongoimport is included in the Community and Enterprise versions\nof MongoDB available in the download center.\n\n\n\nDownload the Data\u00b6\nDownload the example dataset from\nhttps://raw.githubusercontent.com/steveren/docs-assets/charts-tutorial/movieDetails.json.\nTo download the documents, right-click on the URL and select\nSave Link As. This file contains the data you will import\ninto the test.movieDetails collection of your Atlas cluster in the\nfollowing step.\nThe movieDetails.json file is 1.4 MB and contains records for 2250\nmovies. The following is a sample document from the dataset:\n\n\n\ncopy\n\n{\n     \"_id\" : ObjectId(\"5b107bec1d2952d0da904dd7\"),\n     \"title\" : \"Titan A.E.\",\n     \"year\" : 2000,\n     \"rated\" : \"PG\",\n     \"runtime\" : 94,\n     \"countries\" : [\n             \"USA\"\n     ],\n     \"genres\" : [\n             \"Animation\",\n             \"Action\",\n             \"Adventure\"\n     ],\n     \"director\" : \"Don Bluth, Gary Goldman, Art Vitello\",\n     \"writers\" : [\n             \"Hans Bauer\",\n             \"Randall McCormick\",\n             \"Ben Edlund\",\n             \"John August\",\n             \"Joss Whedon\"\n     ],\n     \"actors\" : [\n             \"Matt Damon\",\n             \"Bill Pullman\",\n             \"John Leguizamo\",\n             \"Nathan Lane\"\n     ],\n     \"plot\" : \"A young man learns that he has to find a hidden Earth ship before an enemy alien species does in order to secure the survival of humanity.\",\n     \"poster\" : \"http://ia.media-imdb.com/images/M/MV5BMjE0NTU0ODg4NV5BMl5BanBnXkFtZTcwNzY3MTQyMQ@@._V1_SX300.jpg\",\n     \"imdb\" : {\n             \"id\" : \"tt0120913\",\n             \"rating\" : 6.6,\n             \"votes\" : 50875\n     },\n     \"tomato\" : {\n             \"meter\" : 52,\n             \"image\" : \"rotten\",\n             \"rating\" : 5.7,\n             \"reviews\" : 99,\n             \"fresh\" : 51,\n             \"consensus\" : \"Great visuals, but the story feels like a cut-and-paste job of other sci-fi movies.\",\n             \"userMeter\" : 60,\n             \"userRating\" : 3.2,\n             \"userReviews\" : 69055\n     },\n     \"metacritic\" : 48,\n     \"awards\" : {\n             \"wins\" : 1,\n             \"nominations\" : 7,\n             \"text\" : \"1 win & 7 nominations.\"\n     },\n     \"type\" : \"movie\"\n}\n\n\n\n\n\nImport the Data\u00b6\nBefore you can use your dataset with Charts, you need to add\nit to a MongoDB collection. Use mongoimport to import the contents of that file\ninto the test.movieDetails collection on your Atlas cluster.\n\n\n\ncopy\n\nmongoimport --host <atlasHostname> --ssl -u <username> -p <password> --authenticationDatabase admin \\\n--db test --collection movieDetails \\\n--drop --file <path/to/movieDetails.json>\n\n\n\n\nNote\nRefer to mongoimport\nfor more information on using the import tool to add data to\na MongoDB collection.\n\n\n\nAdd the Data Collection as a Data Source\u00b6\nNow that the data is in the desired collection, add the collection as a\ndata source in MongoDB Charts. Adding a\ncollection as a data source links the collection to Charts and\nallows us to create visualizations using that data.\n\nNote\nBefore completing this procedure, ensure that you have allowed your\nAtlas cluster to\naccept connections\nfrom MongoDB Charts.\n\n\nClick the Data Sources tab.\n\nClick New Data Source.\n\nIn the New Data Source dialog, enter the\nconnection string\nwhich points to the cluster containing the imported data.\n\nExample\nThe following connection string points to an Atlas cluster called\njefftestcluster and authenticates a user named admin on\nthe admin database.\n\n\n\ncopy\n\nmongodb://admin:<password>@jefftestcluster-shard-00-00-bfkni.mongodb.net:27017,jefftestcluster-shard-00-01-bfkni.mongodb.net:27017,jefftestcluster-shard-00-02-bfkni.mongodb.net:27017/test?ssl=true&replicaSet=JeffTestCluster-shard-0&authSource=admin\n\n\n\nFor further instructions on determining your Atlas connection\nstring, see the\nConnect Your Application\nAtlas documentation.\n\n\nClick Connect.\n\nSelect the test.movieDetails collection.\n\nClick Set Permissions.\nLeave the permissions as the default Private option.\nFor more information on user permissions in Charts, see\npermissions.\n\nClick Publish Data Source.\n\n\nYou\u2019re now ready to create a dashboard and start adding charts to it.\n\n\nNext Steps\u00b6\nNow that you have established the data source in Charts, you\ncan now Create a New Dashboard which will\nhold the visualizations.\n\n",
            "preview": "Estimated Time to Complete: 10 minutes",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/connection-string/index.html",
                "https://www.mongodb.com/download-center/enterprise",
                "https://docs.atlas.mongodb.com/create-new-cluster/",
                "https://docs.atlas.mongodb.com/driver-connection/",
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "https://docs.mongodb.com/charts/v0.11/data-source-permissions/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/create-dashboard/",
                "https://www.mongodb.com/cloud/atlas",
                "https://raw.githubusercontent.com/steveren/docs-assets/charts-tutorial/movieDetails.json",
                "https://docs.atlas.mongodb.com/security-whitelist/",
                "http://docs.mongodb.org/manual/reference/program/mongoimport/"
            ]
        },
        {
            "slug": "v0.11/tutorial/movie-details/scatter-chart-movies-ratings/index.html",
            "title": "Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating \u2014 Charts Manual 0.11",
            "headings": [
                "Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating",
                "Construct the Chart",
                "Click Add Chart.",
                "In the Data Source dropdown, select test.movieDetails.",
                "Select the Chart Type.",
                "Add the desired fields to the proper encoding channels.",
                "Add a query filter.",
                "Differentiate the chart by MPAA rating.",
                "Title your chart.",
                "Next Steps"
            ],
            "text": "\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\u00b6\nEstimated Time to Complete: 5 minutes\n\nConstruct the Chart\u00b6\nNext, add a chart to your dashboard showing the TomatoMeter rating\nand MPAA rating\nof movies with the most award nominations. A\nscatter chart is a good choice for\nvisualizing how data points cluster together around certain values and\nallows the representation of several different data dimensions.\n1\nClick Add Chart.\u00b6\nThe Add Chart button is in the top right corner of the\ndashboard.\n\n2\nIn the Data Source dropdown, select test.movieDetails.\u00b6\n\n3\nSelect the Chart Type.\u00b6\n\nIn the Chart Type dropdown, select\nGrid.\nSelect the Scatter panel below the dropdown menu.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section, click the tomato field to\nexpand the tomato object and view its properties.\nDrag the tomato.meter field to the X Axis\nencoding channel.\nIn the Fields section click the awards field to\nexpand the awards object and view its properties.\nDrag the awards.nominations field to the Y Axis\nencoding channel.\n\n\n5\nAdd a query filter.\u00b6\nYou can see now that higher-rated movies have a higher density of\nawards, but the chart is rather noisy. Add a query filter to exclude\nmovies with zero awards and marginal MPAA ratings.\n\nIn the Filters box, add the\nfollowing query filter and click the Apply button:\n\n\n\ncopy\n\n{\"awards.nominations\": {$gte: 1}, rated: {$in: [\"G\", \"PG\", \"PG-13\", \"R\"]}}\n\n\n\n\n\n\n6\nDifferentiate the chart by MPAA rating.\u00b6\n\nIn the Fields section, click the rated field and\ndrag it to the color encoding channel.\n\n\nAdditional Data Options\nThere are three options for adding more data to your chart. You\ncan use any of your data fields to modify the size, color, and\nshape of the markers on the grid. The rated field works well\nhere because it has low cardinality; there are only four possible\nvalues (G, PG, PG-13, and R). Fields with higher\ncardinality may make the chart too noisy to read.\n\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nMovies with Most Awards Nominations, by Rating\n\n\n\n\nClick the green check mark to save your title.\n\nYour chart should now look like this:\n\n\n\n\nClick Save and Close to return to your\ndashboard.\n\n\n\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to see how we can\nrearrange the charts on the dashboard.\n\n",
            "preview": "Estimated Time to Complete: 5 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/scatter-chart/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/arrange-charts/"
            ]
        },
        {
            "slug": "v0.11/tutorial/order-data/area-chart-age-distribution/index.html",
            "title": "Area Chart Showing Age Distribution of Customers \u2014 Charts Manual 0.11",
            "headings": [
                "Area Chart Showing Age Distribution of Customers",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Wrapping Up"
            ],
            "text": "\nArea Chart Showing Age Distribution of Customers\u00b6\nTime to Complete: 5 minutes\nIn the final chart of the dashboard, highlight some of\nthe customer analytic information available in the schema using an\narea chart. By visualizing the age range\nand distribution of store customers, you can ensure that any advertising\nthe store performs is directed where it will be seen by the most\npotential buyers.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nArea.\nClick Discrete below the dropdown.\n\n\nArea Chart\nAn area chart is a good choice to easily visualize the ages where\ncustomers are the most concentrated. Since you are not concerned\nwith exact values in this scenario but rather general trends, an\narea chart makes more sense than a line chart because the filled-in\nvisualization allows us to more easily identify the most common age\nranges.\nWe use a discrete area chart, rather than continuous,\nbecause we are ultimately looking for a count of the customers in\neach particular age bracket determined by the chart\u2019s\nbin size. Discrete charts allow us\nto perform aggregation operations on the data, whereas in a\ncontinuous chart each data point must come from a distinct\ndocument.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section click the customer field to\nexpand the customer object and view its properties.\n\nDrag the customer.age field to the X Axis\nencoding channel. The X Axis encoding channel\ndictates which field to display on the horizontal axis.\n\nSet the Bin Size to 5.\n\nData Binning\nBinning data groups continuous data into bins of a\nspecified size. In this case, rather than plotting\npoints for each individual age in the dataset, the data\nis grouped into bins of 5 ages. This\nprovides a clearer look into the overall trend of\nthe age distribution.\nFor more information on data binning, see the\nData Binning section.\n\n\nDrag the _id field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nY Axis Encoding Channel\nBecause we will be performing a $count aggregation on the\ndocuments, it does not matter what field we use for this\nencoding channel because the chosen field does not affect the\nnumber of documents in each bin.\n\n\nIn the Y Axis Aggregate dropdown, select\ncount. This option counts the occurrence of each\ncustomer age from each sale and adds it to the visualization\nafter placing it in the appropriate bin.\n\n\nYour chart should now look something like this:\n\n\n\nIn general, customers appear to most commonly between the\nages 40-45. This is where the largest area region in the\nchart occurs. Additionally, the rest of the ages appear to be\nnormally distributed,\nmeaning the average customer age is at the center of the area chart\nand there are the same number of younger and older customers. You can\nuse this information to direct advertising where the largest\ncustomer age group is most likely to see company advertisements.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the title input:\n\n\n\ncopy\n\nDistribution of Customer Ages\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nAfter adding the last chart to your dashboard and performing\nsome final reorganizing, the finished dashboard should look\nsomething like this:\n\n\n\n\n\n\nWrapping Up\u00b6\nYou now have an effective orders dashboard which provides easily\naccessible insight into revenue data, sales details, and customer\nanalytics. However, with the information you have available in your\ndataset, there are several ways in which you might be able to\nadd additional charts and extend the dashboard even further. You may\nwant to depict:\n\nAverage customer satisfaction by store location\nThe amount of money that customers in various age groups typically\nspend on a purchase\nWhich items are most commonly bought in bulk, utilizing the\nitems.quantity field\n\nTry adding some of these additional charts to the dashboard and see\nwhat other interesting correlations between variables you can discover.\n\n",
            "preview": "In the final chart of the dashboard, highlight some of the customer analytic information available in the schema using an area chart. By visualizing the age range and distribution of store customers, you can ensure that any advertising the store performs is directed where it will be seen by the most potential buyers.",
            "tags": "",
            "links": [
                "https://en.wikipedia.org/wiki/Normal_distribution",
                "http://docs.mongodb.org/manual/aggregation",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/v0.11/bin-data/"
            ]
        },
        {
            "slug": "v0.11/tutorial/order-data/column-chart-sales-by-store/index.html",
            "title": "Column Chart Showing Total Sales by Store Location \u2014 Charts Manual 0.11",
            "headings": [
                "Column Chart Showing Total Sales by Store Location",
                "Construct the Chart",
                "Click Add My First Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nColumn Chart Showing Total Sales by Store Location\u00b6\nTime to Complete: 5 minutes\nLooking at the data fields available in the schema, some of the most\nvaluable information you can relay revolves around revenue. You may\nwant to know how various stores are performing, specifically if there\nare any stores significantly under or overperforming compared to\nothers.\nA column chart works well for this type of\nvisualization because you can easily compare individual store revenue\nbased on the size of each column.\n\nConstruct the Chart\u00b6\n1\nClick Add My First Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nColumn.\nClick Stacked below the dropdown.\n\n\nColumn Chart\nThis chart renders a column for each store location\u2019s revenue.\nBecause there are six different store locations, the chart\nwill contain six columns.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the storeLocation property from the Fields\nsection of the Chart Builder view to the X Axis\nencoding channel. This tells MongoDB Charts to create a column\nfor each storeLocation value in the dataset.\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nNote\nMongoDB Charts infers the data type of each field and\nprovides symbols to easily determine these data types when\nbuilding your chart. For example, the calendar icon next to\nthe saleDate field signifies that this field is a\ntimestamp. These symbols can help ensure your chart renders as\nexpected by using proper data types for each\nencoding channel.\n\n\nDrag the items.price field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nAggregation\nAggregation processes data records\nusing a wide variety of methods and returns computed results\nwhich may not be available in the original dataset. Because we\nare interested in the total revenue from each store, we use\nthe items.price field here and will use an aggregation\noperator which will allow us to add the items.price fields\ntogether.\n\n\nIn the Array Reductions dropdown, select\nUnwind array.\n\nUnwind array\nArray reductions dictate how to process an array so\nits elements  can be visualized. The unwind array\noption creates a new document for each element in the array,\nso each item\u2019s price is added to the total for that store.\nFor more information on unwinding arrays, refer to the\nunwind aggregation documentation.\n\n\nIn the Aggregate dropdown, select sum.\n\nSum\nThis option adds the prices of all items per store together to\ndisplay the chart. For more information on the $sum\naggregation command, refer to the\nsum aggregation documentation.\n\n\n\nYour chart should now look something like this:\n\n\n\nNotice that the stores generating the most revenue are the\nDenver and Seattle locations.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nTotal Sales ($) by Store Location\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYou will be navigated back to your Super Store Supply\nSales dashboard and it should look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a visualization showing a high-level overview of store\nrevenue, one might wonder which type of item each store is selling the\nmost of. The following section of the tutorial illustrates how to build\na donut chart to analyze the tag names\nof items being sold.\n\n",
            "preview": "Looking at the data fields available in the schema, some of the most valuable information you can relay revolves around revenue. You may want to know how various stores are performing, specifically if there are any stores significantly under or overperforming compared to others.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/operator/aggregation/unwind/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "http://docs.mongodb.org/manual/aggregation",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "http://docs.mongodb.org/manualaggregation"
            ]
        },
        {
            "slug": "v0.11/tutorial/order-data/create-new-dashboard/index.html",
            "title": "Create a New Dashboard \u2014 Charts Manual 0.11",
            "headings": [
                "Create a New Dashboard",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nCreate a New Dashboard\u00b6\nTime to Complete: 3 minutes\n\nInstructions\u00b6\nNow that you have created your data source and linked it to the\norder data collection, create a dashboard to hold all of your\nvisualizations:\n\nClick the Dashboards tab.\n\nClick the New Dashboard button.\n\nCopy the following into the Title input:\n\n\n\ncopy\n\nSuper Supply Store Orders\n\n\n\n\n\n\nCopy the following into the Description input:\n\n\n\ncopy\n\nSales, Customer Analytics, and More.\n\n\n\n\nClick Create.\n\n\nAfter clicking create, Charts navigates you to your newly\ncreated dashboard and prompts you to add your first chart.\n\n\nNext Steps\u00b6\nThe following sections of the tutorial walk through\nbuilding each chart for your dashboard. You\nwill be populating the dashboard with the following visualizations:\n\nA column chart for total sales by\nstore location\nA donut chart showing the frequencies\nof tags occurring in each item sold\nA grouped column chart showing the\nmost common items sold in each store location\nAn area chart showing a distribution\nof customer ages\n\nTo create each chart, you will populate the chart\u2019s\nencoding channels with fields from your\nschema. Encoding channels represent the information passed to\nMongoDB Charts which allows Charts to create the visualization.\nFor more information on encoding channels and the different types of\nchannels available, refer to the\nencoding channels section of the\ndocumentation.\nFollow along to the next section of the tutorial to build a\ncolumn chart showing total sales by\nstore location.\n\n",
            "preview": "Now that you have created your data source and linked it to the order data collection, create a dashboard to hold all of your visualizations:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.11/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/area-chart-age-distribution/"
            ]
        },
        {
            "slug": "v0.11/tutorial/order-data/donut-chart-item-tags/index.html",
            "title": "Donut Chart Showing Most Common Tags for Items Sold \u2014 Charts Manual 0.11",
            "headings": [
                "Donut Chart Showing Most Common Tags for Items Sold",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Copy the following filter into the Filters input above the main chart display.",
                "Click Apply to the right of the filter.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nDonut Chart Showing Most Common Tags for Items Sold\u00b6\nTime to Complete: 5 minutes\nNext we will add a chart where you can quickly see which types of items\nthe company is selling the most of. This information will be helpful\nfor the company marketing team to know how effectively direct\nadvertising.\nIn this scenario, your manager has expressed interest specifically\nin items sold from the Denver and New York store locations.\nAdditionally, they have requested to only visualize sales which\ncontain an item costing $1200 or more, in an effort to more closely\nexamine the new line of laptops being sold at these locations and what\ntypes of items are being bought with them. You can accomplish this\nusing a filter in your\ndonut chart, as shown in the following\nprocedure.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nCircular.\nClick Donut below the dropdown.\n\n\nDonut Chart\nA donut chart is a good choice for this chart because donut charts\nshow the relationship of parts to a whole. Using this chart type you\ncan easily get an idea of which tags make up the greatest portion of\ntotal sales.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nDrag the items.tags field to the Label\nencoding channel. The Label encoding channel\ndictates which field to use when dividing the sections of the\nchart.\n\nIn the array reduction dropdown for the\nitems array select Unwind array.\n\nUnwind Array\nUnwinding the array creates a new document for each element of\nthe items array, so each item from each sale is used in\nthe chart.\n\n\nIn the array reduction dropdowns for the\ntags select Array element by index. Using this\noption you can specify which element of the tags array to\nvisualize.\n\nEnter 0 for the Index input to only visualize the\nfirst element of the tags array. The first item tag is the\nmost relevant tag to the item, so it should be the main concern\nin the visualiztion. This is the primary item tag.\n\nNote\nSelecting an array element by index also ensures the chart\ndoes not get overcrowded with less important tags as it would\nhad you chosen to unwind the tags array rather than select\na specific element.\n\n\nDrag the items.tags field to the Arc\nencoding channel.\n\nArc Encoding Channel\nThe Arc encoding channel dictates\nwhich field to aggregate upon in the\nchart. Using the items.tags field here, you can select an\naggregation option which will provide the number of\noccurrences of each item tag.\n\n\nRepeat steps c-e for the Arc encoding channel.\n\nNote\nWhen constructing donut charts, most often you will be using the\nsame field for both the Label and Arc\nencoding channels.\n\n\nIn the Aggregate dropdown, select count.\nThis option counts the occurrences of the first tag of each item\nand adds them to the chart.\n\n\nYour chart should now look something like this:\n\n\n\n\n5\nCopy the following filter into the Filters input above the main chart display.\u00b6\n\n\n\ncopy\n\n{ storeLocation: { $in: [ \"Denver\", \"New York\" ] }, 'items.price': {$gte: 1200} }\n\n\n\nThis filter specifies that\nCharts only visualizes item tags from items sold from either\nthe Denver or New York store location where there was an\nitem in the sale costing $1200 or more.\n\n6\nClick Apply to the right of the filter.\u00b6\nYour chart should now look something like this:\n\n\n\nNotice how the electronics tag now takes a larger slice of the\ndistribution compared to when not using the filter. Based on this\nchart, notice that office and school are the two most common\nprimary item tags from sales matching the filter.\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nFrequency of Item Tags from Sales in Denver and New York with Price Threshold\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n8\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYour dashboard should now look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a chart showing the tags of the items sold, it would\nbe helpful to know which specific items are most commonly sold at the\nvarious store locations. To do so, refer to the next section to see how\nto implement a grouped column chart\nshowing the most common items sold by store location.\n\n",
            "preview": "Next we will add a chart where you can quickly see which types of items the company is selling the most of. This information will be helpful for the company marketing team to know how effectively direct advertising.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/v0.11/filter-documents/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/donut-chart/"
            ]
        },
        {
            "slug": "v0.11/tutorial/order-data/grouped-column-items-sold/index.html",
            "title": "Grouped Column Chart Showing Most Common Items Sold by Store Location \u2014 Charts Manual 0.11",
            "headings": [
                "Grouped Column Chart Showing Most Common Items Sold by Store Location",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nGrouped Column Chart Showing Most Common Items Sold by Store Location\u00b6\nTime to Complete: 5 minutes\nBy visualizing which items are sold most commonly at each store, you\ncan help ensure each store is properly stocked with the items they\nare most likely to sell out of. A grouped\ncolumn chart creates a group within the\nchart for each store location and display columns within each group\nreflecting the relative sales of each item.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nColumn.\nClick Grouped below the dropdown.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the storeLocation field to the X Axis\nencoding channel. The X Axis encoding channel\ndictates which field to use when creating the column groups.\n\nX Axis Encoding Channel\nUsing storeLocation for this encoding channel allows us\nto visualize a group of items per store location.\n\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nDrag the items.name field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nY Axis Encoding Channel\nUsing items.name for this encoding channel allows us to\naggregate and count the items sold in each location.\n\n\nIn the Array Reductions dropdown, select\nUnwind array.\n\nUnwind Array\nThe unwind array option creates a new document\nfor each element in the items array, so for each item sold\nby a particular store that item\u2019s name is added to the\nvisualization.\n\n\nIn the Aggregate dropdown, select count.\n\nCount\nThe count option counts the occurrences of each\nitem name after unwinding the items array and displays\nthem in the chart grouped by store location.\nFor more information on the $count aggregation command,\nrefer to the\ncount aggregation documentation.\n\n\nDrag the items.name field to the Series encoding\nchannel.\n\nSeries Encoding Channel\nThe Series encoding channel dictates how to\nsplit each group of the chart. Each member of the series\nbecomes a column within the group, so each item name becomes a\ncolumn within the store location group.\n\n\nIn the Series Array Reductions dropdown, select\nUnwind array.\n\nUnwind Array\nThis visualizes each tag from each element of the items\narray, enabling a complete count of the tags from every sale\nin the data set.\n\n\n\nYour chart should now look something like this:\n\n\n\nThe item sales look to be fairly evenly distributed by store\nlocation. Notice based on this chart that notepads are\nthe most common item sold at all store locations, which is\nuseful information when stocking each store with its\ninventory.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the title input:\n\n\n\ncopy\n\nMost Common Items Sold by Store Location\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYour dashboard should now look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a few charts the dashboard is starting to get a bit\ncrowded. Follow along to the next section of the tutorial to see how we\ncan rearrange and resize the\ncharts to make the dashboard easier to digest.\n\n",
            "preview": "By visualizing which items are sold most commonly at each store, you can help ensure each store is properly stocked with the items they are most likely to sell out of. A grouped column chart creates a group within the chart for each store location and display columns within each group reflecting the relative sales of each item.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/rearrange-resize/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/v0.11/chart-type-reference/column-bar-chart/",
                "http://docs.mongodb.org/manual/aggregation"
            ]
        },
        {
            "slug": "v0.11/tutorial/order-data/order-data-tutorial-overview/index.html",
            "title": "Visualizing Order Data \u2014 Charts Manual 0.11",
            "headings": [
                "Visualizing Order Data",
                "Introduction",
                "Table of Contents"
            ],
            "text": "\nVisualizing Order Data\u00b6\n\nOn this page\n\nIntroduction\nTable of Contents\n\n\nTotal Estimated Time to Complete: 20-30 minutes\n\nIntroduction\u00b6\nThis tutorial walks through the features and capabilities of MongoDB Charts.\nYou will examine and visualize a data source\ncontaining order data from a mock office supply company.\nThis tutorial demonstrates how to create a\ndashboard containing charts of various types, and\nshows how to effectively use each chart\u2019s respective properties\nto obtain powerful visualizations.\nAfter completing the tutorial, you will have a dashboard which looks\nsimilar to the following:\n\n\n\n\n\nTable of Contents\u00b6\n\nStep 1: Setup and Import the Data\nStep 2: Create a New Dashboard\nStep 3: Column Chart Showing Total Sales by Store Location\nStep 4: Donut Chart Showing Most Common Tags for Items Sold\nStep 5: Grouped Column Chart Showing Most Common Items Sold by Store Location\nStep 6: Rearrange and Resize Charts\nStep 7: Area Chart Showing Age Distribution of Customers\n\nTo get started, move ahead to the\nSetup and Import the Data page.\n\n\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\n\n",
            "preview": "Total Estimated Time to Complete: 20-30 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/prerequisites-setup/"
            ]
        },
        {
            "slug": "v0.11/tutorial/order-data/prerequisites-setup/index.html",
            "title": "Setup and Import the Data \u2014 Charts Manual 0.11",
            "headings": [
                "Setup and Import the Data",
                "Prerequisites",
                "Download the Data",
                "Import the Data",
                "Add the Data Collection as a Data Source",
                "Next Steps"
            ],
            "text": "\nSetup and Import the Data\u00b6\n\nOn this page\n\nPrerequisites\nDownload the Data\nImport the Data\nAdd the Data Collection as a Data Source\nNext Steps\n\n\nTime to Complete: 8 minutes\n\nPrerequisites\u00b6\nThe following items are required to complete this tutorial:\n\nA MongoDB Atlas\ncluster. Refer to this page for\ninstructions on creating an Atlas cluster.\nmongoimport.\nmongoimport is included in the Community and Enterprise versions\nof MongoDB available in the download center.\n\n\n\nDownload the Data\u00b6\nDownload the example dataset from\nhttps://raw.githubusercontent.com/mongodb/docs-assets/charts-tutorial/mgenerate-order-data.json.\nTo download the documents, right-click on the URL and select\nSave Link As. This file contains the data you will import\ninto the test.supplySales collection of your Atlas cluster in the\nfollowing step.\nTo give an idea of the data you will visualize, here is a sample\ndocument from the dataset:\n\n\n\ncopy\n\n{\n  \"_id\": {\"$oid\":\"5afb2c3dc09c8d2dd5852cf2\"},\n  \"saleDate\":{\"$date\":\"2017-11-08T19:06:53.449Z\"},\n  \"items\":[\n    {\n      \"name\":\"envelopes\",\n      \"tags\":[\"stationary\",\"office\",\"general\"],\n      \"price\":{\"$numberDecimal\":\"9.83\"},\n      \"quantity\":10\n    },\n    {\n      \"name\":\"pens\",\n      \"tags\":[\"office\",\"writing\",\"school\",\"stationary\"],\n      \"price\":{\"$numberDecimal\":\"73.62\"},\n      \"quantity\":2\n    },\n    {\n      \"name\":\"laptop\",\n      \"tags\":[\"office\",\"school\",\"electronics\"],\n      \"price\":{\"$numberDecimal\":\"595.72\"},\n      \"quantity\":4\n    },\n    {\n      \"name\":\"notepad\",\n      \"tags\":[\"office\",\"writing\",\"school\"],\n      \"price\":{\"$numberDecimal\":\"34.65\"},\n      \"quantity\":3\n    }\n  ],\n  \"storeLocation\":\"Seattle\",\n  \"customer\":{\n    \"gender\":\"M\",\n    \"age\":45,\n    \"email\":\"uga@we.so\",\n    \"satisfaction\":4\n  },\n  \"couponUsed\":false,\n  \"purchaseMethod\":\"Online\"\n}\n\n\n\n\n\nImport the Data\u00b6\nNow that you have a file containing the documents you will be\nvisualizing in Charts, use\nmongoimport to import the\ncontents of that file into the test.supplySales collection.\n\n\n\ncopy\n\nmongoimport --host <myAtlasHost> --ssl -u <USER> -p <PASSWORD> --authenticationDatabase admin \\\n--db test --collection supplySales \\\n--drop --file <path/to/mgenerate-order-data.json>\n\n\n\n\nNote\nRefer to the mongoimport\npage to familiarize yourself with the proper command syntax.\nAdditionally, the Atlas documentation for Connecting to a\nCluster using Command Line Tools\nmay prove helpful.\n\n\n\nAdd the Data Collection as a Data Source\u00b6\nNow that the data is in the desired collection, add the collection as a\ndata source in MongoDB Charts. Adding a\ncollection as a data source links the collection to Charts and\nallows us to create visualizations using that data.\n\nNote\nBefore completing this procedure, ensure that you have allowed your\nAtlas cluster to\naccept connections\nfrom MongoDB Charts.\n\n\nClick the Data Sources tab.\n\nClick New Data Source.\n\nIn the New Data Source dialog, enter the\nconnection string\nwhich points to the cluster containing the imported data.\n\nExample\nThe following connection string points to an Atlas cluster called\njefftestcluster and authenticates a user named admin on\nthe admin database.\n\n\n\ncopy\n\nmongodb://admin:<password>@jefftestcluster-shard-00-00-bfkni.mongodb.net:27017,jefftestcluster-shard-00-01-bfkni.mongodb.net:27017,jefftestcluster-shard-00-02-bfkni.mongodb.net:27017/test?ssl=true&replicaSet=JeffTestCluster-shard-0&authSource=admin\n\n\n\nFor further instructions on determining your Atlas connection\nstring, see the\nConnect Your Application\nAtlas documentation.\n\n\nClick Connect.\n\nSelect the test.supplySales collection.\n\nClick Set Permissions.\n\nSelect the Open Access option.\n\nClick Publish Data Source.\n\n\n\n\nNext Steps\u00b6\nNow that you have established the data source in Charts, you\ncan now Create a New Dashboard which will\nhold the visualizations.\n\n",
            "preview": "The following items are required to complete this tutorial:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/connection-string/index.html",
                "https://www.mongodb.com/download-center/enterprise",
                "https://docs.atlas.mongodb.com/create-new-cluster/",
                "https://docs.atlas.mongodb.com/security-whitelist/",
                "https://docs.atlas.mongodb.com/driver-connection/",
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/create-new-dashboard/",
                "https://www.mongodb.com/cloud/atlas",
                "https://docs.atlas.mongodb.com/command-line-tools/",
                "http://docs.mongodb.org/manual/reference/program/mongoimport/",
                "https://raw.githubusercontent.com/mongodb/docs-assets/charts-tutorial/mgenerate-order-data.json"
            ]
        },
        {
            "slug": "v0.11/tutorial/order-data/rearrange-resize/index.html",
            "title": "Rearrange and Resize Charts \u2014 Charts Manual 0.11",
            "headings": [
                "Rearrange and Resize Charts",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nRearrange and Resize Charts\u00b6\nTime to Complete: 2 minutes\nThe dashboard is starting to get crowded at the top row with plenty of\nempty space below. You can make the display easier to digest by\nrearranging and resizing some of the charts. Charts makes this\na straight-forward process by providing simple drag and drop\ncapabilities for reorganizing a dashboard.\n\nInstructions\u00b6\nYou can rearrange charts by dragging the top-left corner of the chart,\nand resize charts by dragging the bottom-right corner. For additional\ndetails on rearranging and resizing charts, see the\nManage Existing Dashboards section.\nTry reorganizing your dashboard to get something like this:\n\n\n\n\n\nNext Steps\u00b6\nIn the last chart of the dashboard, we will explore some of the\ncustomer data available in the schema to create an\narea chart showing the age distribution\nof customers.\n\n",
            "preview": "The dashboard is starting to get crowded at the top row with plenty of empty space below. You can make the display easier to digest by rearranging and resizing some of the charts. Charts makes this a straight-forward process by providing simple drag and drop capabilities for reorganizing a dashboard.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.11/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.11/tutorials/index.html",
            "title": "Tutorials \u2014 Charts Manual 0.11",
            "headings": [
                "Tutorials"
            ],
            "text": "\nTutorials\u00b6\n\nVisualizing Order Data\nCreate a dashboard to visualize order data from a mock office\nsupply company. Build charts to gain insight on sales by location,\nthe types of items sold, and customer demographics.\nVisualizing Movie Details\nFollow this tutorial to create a dashboard to visualize movie\nmetadata and viewer rating data. Build charts to gain insight on\nwhich directors won the most awards and how award-nominated movies\ncorrespond to their viewer rating.\n\n\n\nVisualizing Order Data\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\nVisualizing Movie Details\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/prereqs-and-import-data/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/order-data-tutorial-overview/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/arrange-charts/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/movie-details-tutorial-overview/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/order-data/prerequisites-setup/",
                "https://docs.mongodb.com/charts/v0.11/tutorial/movie-details/scatter-chart-movies-ratings/"
            ]
        },
        {
            "slug": "v0.11/user-management/index.html",
            "title": "User Management \u2014 Charts Manual 0.11",
            "headings": [
                "User Management",
                "Roles",
                "Add a User",
                "User Management Interface",
                "Add User Script",
                "Delete a User",
                "Edit a Profile",
                "Change Passwords"
            ],
            "text": "\nUser Management\u00b6\n\nOn this page\n\nRoles\nAdd a User\nDelete a User\nEdit a Profile\nChange Passwords\n\n\nMongoDB Charts user administrators are authorized to add users, delete\nusers, edit other user\u2019s profiles and change their passwords. User\nadministrators can access the user management view by clicking the\nUser Management tab on the top navigation bar.\n\n\n\n\nRoles\u00b6\nCharts users are assigned one of the following roles upon\ncreation depending on whether they are a standard user or a user\nadministrator:\n\n\n\n\n\n\nRole\nDescription\n\n\n\nUser\nAuthorized to add data sources, create\ndashboards, build\ncharts, and change their own passwords.\nWhen sharing a data source or dashboard with a user, the roles\ngranted to that user may authorize them to view, modify, or\ndelete the shared resources. For more information, see\nData Source Permissions and\nDashboard Permissions.\n\n\nUserAdmin\nIncludes all privileges from the User role and is authorized\nto add users, delete users, edit the profile of other users,\nand change the password of other users.\nUser administrators are unable to view, modify, or delete\nthe data sources and dashboards of other users unless they are\nshared with the appropriate permissions.\n\n\n\n\n\n\nAdd a User\u00b6\nYou can add a user either through the Charts User Management\ninterface or by executing the charts-cli add-user script on the\nCharts host.\n\nUser Management Interface\u00b6\nTo add a user, log in to Charts as a user administrator with the\nUserAdmin role:\n\nFrom the User Management view, click the\nNew User button.\nFill in all form fields, then click Add User.\n\n\nNote\nFor more information on the actions each role authorizes, see\nRoles.\n\n\n\nAdd User Script\u00b6\nSystem administrators with access to the Charts host can add\nusers via the charts-cli add-user script.\nTo add users with the script, run the following command. Replace the\nplaceholders in angle brackets with the appropriate values.\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    \n\n\ncopy\n\ndocker exec -it `\n  $(docker container ls --filter name=_charts -q) `\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" `\n  --email \"<user@example.com>\" --password \"<Password>\" `\n  --role \"<UserAdmin|User>\"\n\n\n\n\n\n\n\ncopy\n\ndocker exec -it \\\n  $(docker container ls --filter name=_charts -q) \\\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" \\\n  --email \"<user@example.com>\" --password \"<Password>\" \\\n  --role \"<UserAdmin|User>\"\n\n\n\n\n\n\n\ncopy\n\ndocker exec -it \\\n  $(docker container ls --filter name=_charts -q) \\\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" \\\n  --email \"<user@example.com>\" --password \"<Password>\" \\\n  --role \"<UserAdmin|User>\"\n\n\n\n    \n  \n\nNote\nThe first Charts user must be created using this script.\nSubsequent users can be added by either rerunning the script or using\nthe user management interface.\n\n\n\n\nDelete a User\u00b6\n\nImportant\nBefore deleting a user, update the permissions for any data sources\nor dashboards for which they are the sole owner. Any items owned\nsolely by the user being deleted will not be transferred and may\nbecome orphaned.\n\nTo delete a user:\n\nFrom the User Management view, click the red trash can\nicon on the right-hand side of the user you wish to delete.\nClick Delete User to confirm deletion.\n\n\n\nEdit a Profile\u00b6\nUser administrators can edit the profile of other users, including\nother user administrators:\n\nFrom the User Management view, click the ellipses,\n\u2026, of the user whose profile you wish to edit.\nClick Edit Profile.\nFill in the form and click Save.\n\n\nNote\nUser administrators can not edit the email address of another\nuser.\n\n\n\nChange Passwords\u00b6\nIn MongoDB Charts, users can change their own passwords and user\nadministrators can change the password of any user.\nTo change your own password:\n\nClick the down arrow next to your name on the upper-right hand side\nof the application.\nClick Change Password.\nFill in the form and click Save.\n\nTo change another user\u2019s password as a user administrator:\n\nFrom the User Management view, click the ellipses,\n\u2026, of the user whose password you wish to change.\nClick Change Password.\nFill in the form and click Save.\n\n\n",
            "preview": "MongoDB Charts user administrators are authorized to add users, delete users, edit other user\u2019s profiles and change their passwords. User administrators can access the user management view by clicking the User Management tab on the top navigation bar.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.11/data-sources/",
                "https://docs.mongodb.com/charts/v0.11/data-source-permissions/",
                "https://docs.mongodb.com/charts/v0.11/build-charts/",
                "https://docs.mongodb.com/charts/v0.11/dashboards/",
                "https://docs.mongodb.com/charts/v0.11/dashboard-permissions/"
            ]
        },
        {
            "slug": "v0.12/index.html",
            "title": "MongoDB Charts \u2014 Charts Manual 0.12",
            "headings": [
                "MongoDB Charts",
                "Features",
                "Concepts",
                "Chart Types",
                "Tutorials"
            ],
            "text": "\nMongoDB Charts\u00b6\n\nOn this page\n\nFeatures\nConcepts\nChart Types\nTutorials\n\n\nMongoDB Charts is a tool to create visual representations of\nyour MongoDB data. Data visualization is a key component to providing a\nclear understanding of your data, highlighting correlations between\nvariables and making it easy to discern patterns and trends within your\ndataset. MongoDB Charts makes communicating your data a straightforward\nprocess by providing built-in tools to easily share and collaborate on\nvisualizations.\n\nFeatures\u00b6\nOne of the most powerful features of MongoDB Charts is its built-in\naggregation functionality. Aggregation allows\nyou to process your collection data by a variety of metrics and perform\ncalculations such as mean and standard deviation to provide further\ninsight into your data.\nFurther, MongoDB Charts handles document-based data, including\nembedded objects and arrays. This\nprovides the flexibility of structuring data how it fits best for your\napplication while still retaining powerful visualization capabilities.\n\n\nConcepts\u00b6\nThe following elements of MongoDB Charts provide the flow of data from its\nsource to a visual representation:\n\n\n\n\n\n\nElement\nDescription\n\n\n\nData Source\nA reference to a MongoDB collection which contains the data you\nwish to visualize. Note that deleting a data source has no\neffect on the underlying MongoDB collection. For information on\nconnecting to and managing a data source, see\nData Sources.\n\nChart\nA visualization which maps to a single data source.\n\nDashboard\nA group of one or more charts.\n\n\n\nDashboards are the cornerstone of MongoDB Charts as they are where you create\nand view your data visualizations. For details on how to create,\nmanage, and share dashboards, see Dashboards.\n\nNote\nSince a chart can only display data from a single collection,\ndashboards which combine multiple charts are not only useful, but\nnecessary for visualizing data from multiple collections in a single\nview. This can lead to new insights into your data which may not be\nimmediately apparent.\n\n\nExample\nThe following dashboard contains two charts, each with distinct\nfocal points into a collection containing movie data:\n\n\n\n\n\n\nChart Types\u00b6\nThe following pages describe the specific construction and use cases\nfor each chart type in MongoDB Charts:\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n\nInstallation\nTutorials\nVisualizing Order Data\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\nVisualizing Movie Details\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n\nDashboards\nManage Existing Dashboards\nDashboard Permissions\n\n\nData Sources\nData Source Permissions\n\n\nBuild Charts\nEncoding Channels\nFilter Documents in the Visualization\nEmbedded Objects and Arrays\nBin Data\nSort and Limit Categorical Data\nCustomize Charts\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\nSample Mode\n\n\nChart Types\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\nUser Management\nAdministration\nBack Up and Restore Security Keys\nConfigure Charts Web Server to Use HTTPS\nConfigure TLS/SSL for Data Sources\nStart and Stop MongoDB Charts\n\n\nRelease Notes\nThird-Party Licenses\n\n\n\n\nTutorials\u00b6\nAfter you install MongoDB Charts, the following\ntutorials will help you get started building visualizations with your\ndata and explore key features offered by MongoDB Charts:\n\nMovie Details Tutorial\nThis tutorial walks through visualizing a data set containing\ndetails on movies, such as cast, critic reviews, and release.\nOrder Data Tutorial\nThis tutorial walks through visualizing a data set containing\nsales data from a mock office supply store. The tutorial\nillustrates how to visualize inventory, customer analytics, and\ntotal sales.\n\n\n",
            "preview": "MongoDB Charts is a tool to create visual representations of your MongoDB data. Data visualization is a key component to providing a clear understanding of your data, highlighting correlations between variables and making it easy to discern patterns and trends within your dataset. MongoDB Charts makes communicating your data a straightforward process by providing built-in tools to easily share and collaborate on visualizations.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/scatter-chart/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/prereqs-and-import-data/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/movie-details-tutorial-overview/",
                "https://docs.mongodb.com/charts/v0.12/administration/backup-and-restore-keys/",
                "https://docs.mongodb.com/charts/v0.12/administration/configure-ssl-data-sources/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/field-level-options/",
                "https://docs.mongodb.com/charts/v0.12/user-management/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/column-chart-sales-by-store/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/line-area-chart/",
                "https://docs.mongodb.com/charts/v0.12/manage-dashboards/",
                "https://docs.mongodb.com/charts/v0.12/release-notes/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.12/chart-types/",
                "https://docs.mongodb.com/charts/v0.12/administration/",
                "https://docs.mongodb.com/charts/v0.12/installation/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/v0.12/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/v0.12/administration/configure-https-deployment/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/arrange-charts/",
                "https://docs.mongodb.com/charts/v0.12/third-party-licenses/",
                "https://docs.mongodb.com/charts/v0.12/embedded-objects-arrays/",
                "https://docs.mongodb.com/charts/v0.12/data-source-permissions/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/order-data-tutorial-overview/",
                "https://docs.mongodb.com/charts/v0.12/dashboards/",
                "https://docs.mongodb.com/charts/v0.12/tutorials/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/prerequisites-setup/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/scatter-chart-movies-ratings/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/v0.12/sample-mode/",
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "https://docs.mongodb.com/charts/v0.12/administration/start-stop-charts/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/data-table/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/grid-charts/"
            ]
        },
        {
            "slug": "v0.12/administration/index.html",
            "title": "Administration \u2014 Charts Manual 0.12",
            "headings": [
                "Administration"
            ],
            "text": "\nAdministration\u00b6\n\nBack Up and Restore Security Keys\nInstructions for backing up and restoring encryption keys for the\nCharts metadata database.\nConfigure Charts Web Server to Use HTTPS\nInstructions for configuring the MongoDB Charts web server to use the\nHTTPS protocol, as opposed to the default HTTP protocol.\nConfigure TLS/SSL for Data Sources\nInstructions for copying TLS/SSL certificates to the\nCharts host so data sources can access MongoDB deployments\nrunning with TLS/SSL enabled.\nStart and Stop MongoDB Charts\nInstructions for starting and stopping the MongoDB Charts application.\n\n\n\nBack Up and Restore Security Keys\nConfigure Charts Web Server to Use HTTPS\nConfigure TLS/SSL for Data Sources\nStart and Stop MongoDB Charts\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/administration/configure-https-deployment/",
                "https://docs.mongodb.com/charts/v0.12/administration/start-stop-charts/",
                "http://docs.mongodb.org/manual/tutorial/configure-ssl",
                "https://docs.mongodb.com/charts/v0.12/administration/backup-and-restore-keys/",
                "https://docs.mongodb.com/charts/v0.12/administration/configure-ssl-data-sources/"
            ]
        },
        {
            "slug": "v0.12/administration/backup-and-restore-keys/index.html",
            "title": "Back Up and Restore Security Keys \u2014 Charts Manual 0.12",
            "headings": [
                "Back Up and Restore Security Keys",
                "Back Up Keys",
                "Restore Keys"
            ],
            "text": "\nBack Up and Restore Security Keys\u00b6\n\nOn this page\n\nBack Up Keys\nRestore Keys\n\n\nMongoDB Charts uses a number of keys and tokens to secure your\ndeployment and encrypt sensitive data stored in the Charts\nmetadata database. When you first deploy Charts, new random\nkeys are automatically generated and saved to a\nDocker volume which\npersists the keys across container deployments.\n\nImportant\nIf you want to redeploy Charts or move Charts to a\nnew server, you will need to use the original keys in new\ndeployments. If you deploy a new instance of Charts and\npoint it to an existing Charts metadata database used by a\nprevious deployment, the encryption keys will not match and the\nnew instance of Charts will not be able to decrypt the\nmetadata.\n\nTo prevent this from occurring, you should back up the encryption keys\nafter the initial deployment and store them in a safe location. For a\nproduction Charts deployment you should also back up the data in the\nCharts metadata database using MongoDB backup methods.\n\nBack Up Keys\u00b6\nTo back up the keys, use the following commands to launch a temporary\ncontainer that copies the key files from the Charts volume to a\nnewly created directory on the host system:\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    \n\n\ncopy\n\nmkdir c:\\temp\\charts-keys-backup\ndocker run -it `\n  --volume mongodb-charts_keys:/volume `\n  --volume /c/temp/charts-keys-backup:/backup `\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\n\n\n\ncopy\n\nmkdir /tmp/charts-keys-backup\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n\n\n\n\ncopy\n\nmkdir /tmp/charts-keys-backup\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n    \n  \n\nImportant\nOnce the operation above completes, store the key in a secure\nlocation that is not on the Charts server.\n\n\n\nRestore Keys\u00b6\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    To restore the keys on the host of the new Charts deployment, first\ncopy the keys from the external location to the target host. For\nexample, C:\\temp\\charts-keys-backup. Then run the following commands\nbefore deploying Charts from the docker-compose file:\n\n\n\ncopy\n\ndocker volume create mongodb-charts_keys\ndocker run -it `\n  --volume mongodb-charts_keys:/volume `\n  --volume /c/temp/charts-keys-backup:/backup `\n  alpine sh -c 'cp /backup/* /volume'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\nTo restore the keys on the host of the new Charts deployment, first\ncopy the keys from the external location to the target host. For\nexample, /tmp/charts-keys-backup. Then run the following commands\nbefore deploying Charts from the docker-compose file:\n\n\n\ncopy\n\ndocker volume create mongodb-charts_keys\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /backup/* /volume'\n\n\n\n\nTo restore the keys on the host of the new Charts deployment, first\ncopy the keys from the external location to the target host. For\nexample, /tmp/charts-keys-backup. Then run the following commands\nbefore deploying Charts from the docker-compose file:\n\n\n\ncopy\n\ndocker volume create mongodb-charts_keys\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /backup/* /volume'\n\n\n\n    \n  \n\n",
            "preview": "MongoDB Charts uses a number of keys and tokens to secure your deployment and encrypt sensitive data stored in the Charts metadata database. When you first deploy Charts, new random keys are automatically generated and saved to a Docker volume which persists the keys across container deployments.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/core/backups",
                "https://docs.docker.com/storage/volumes/"
            ]
        },
        {
            "slug": "v0.12/administration/configure-https-deployment/index.html",
            "title": "Configure Charts Web Server to Use HTTPS \u2014 Charts Manual 0.12",
            "headings": [
                "Configure Charts Web Server to Use HTTPS",
                "Prerequisites",
                "Procedure",
                "Uncomment necessary lines of the Docker Compose file.",
                "Copy the certificate and key file to the Charts Docker volume.",
                "Redeploy the Charts Docker stack.",
                "Check Docker logs to ensure that you have correctly configured HTTPS"
            ],
            "text": "\nConfigure Charts Web Server to Use HTTPS\u00b6\n\nOn this page\n\nPrerequisites\nProcedure\n\n\nYou can configure the MongoDB Charts web server to use the HTTPS\nprotocol, as opposed to the default HTTP protocol. With the HTTPS\nprotocol, the web server encrypts your data using\nSSL, which ensures that the host\ntransmits data securely.\nThis process differs from configuring SSL for data sources, because this process\nenables TLS/SSL on the Charts web server itself, rather than\nconfiguring a connection to a specific MongoDB deployment with TLS/SSL\nenabled. When HTTPS is configured, Charts uses the standard\nHTTPS port 443 by default, and the Charts web server\nredirects any requests over HTTP (port 80) to the equivalent HTTPS\nport.\n\nPrerequisites\u00b6\nBefore you can configure HTTPS for your MongoDB Charts web server, you must\nfirst obtain an SSL key and certificate from an appropriate\ncertification authority. Instructions for obtaining an SSL key and\nproviding a list of trusted certificate authorities are out of scope\nfor this tutorial.\n\n\nProcedure\u00b6\nTo configure the MongoDB Charts web server to use the HTTPS protocol:\n1\nUncomment necessary lines of the Docker Compose file.\u00b6\nUncomment the following variables in the\nservices.charts.environment section of the Compose file you\ndownloaded as part of the Charts\ninstallation procedure:\n\nCHARTS_HTTPS_CERTIFICATE_FILE\nCHARTS_HTTPS_CERTIFICATE_KEY_FILE\n\nReplace the values of these variables with the names of your\ncertificate file and key file respectively. The certificate must\nbe in the .pem format and the key file must be a .key file.\n\nImportant\nThe values of these variables must be filenames, not complete\nfile paths. These files are always loaded from the\nweb-certs volume.\n\n\n2\nCopy the certificate and key file to the Charts Docker volume.\u00b6\n\n  \n    Windows\n    macOS\n    Linux\n  \n  \n    The following command copies certificate and key file in the\nC:\\path\\to\\certs directory to the Charts host.\nThis example uses a wildcard (*) in the file extension\nof the certificate to copy both mycert.pem and\nmycert.key to the host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_web-certs:/volume -v /c/path/to/certs:/localcerts alpine sh -c 'cp /localcerts/mycert.* /volume'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\nThe following command copies certificates in the\n/path/to/certs directory to the Charts host.\nThis example uses a wildcard (*) in the file extension\nof the certificate to copy both mycert.pem and\nmycert.key to the host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_web-certs:/volume -v /path/to/certs:/localcerts alpine sh -c 'cp /localcerts/mycert.* /volume'\n\n\n\n\nThe following command copies certificates in the\n/path/to/certs directory to the Charts host.\nThis example uses a wildcard (*) in the file extension\nof the certificate to copy both mycert.pem and\nmycert.key to the host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_web-certs:/volume -v /path/to/certs:/localcerts alpine sh -c 'cp /localcerts/mycert.* /volume'\n\n\n\n    \n  \n\n3\nRedeploy the Charts Docker stack.\u00b6\nIf MongoDB Charts is already running, remove the Charts Docker\nstack using the following command:\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\nBefore redeploying, execute docker ps a few times until it shows no\nrunning Charts containers. It can take a little while for the\ncontainers to shut down. Then, relaunch the stack using:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.12.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.12.0 with the version number of your release.\n\n\n4\nCheck Docker logs to ensure that you have correctly configured HTTPS\u00b6\nFirst, run the following command to obtain the Docker service ID for\nMongoDB Charts:\n\n\n\ncopy\n\ndocker service ls\n\n\n\nRetrieve the service logs by running the following command using the\nservice ID from the previous step:\n\n\n\ncopy\n\ndocker service logs <service ID>\n\n\n\nIf there are no errors reported in the logs, MongoDB Charts should now be\nconfigured to use HTTPS and will now automatically redirect from\nthe HTTP address to the HTTPS address in a web browser. If the logs\nreturn any errors, see the Troubleshooting section for possible solutions to\nthe issues listed.\n\n\n",
            "preview": "You can configure the MongoDB Charts web server to use the HTTPS protocol, as opposed to the default HTTP protocol. With the HTTPS protocol, the web server encrypts your data using SSL, which ensures that the host transmits data securely.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/administration/configure-ssl-data-sources/",
                "https://docs.mongodb.com/charts/v0.12/installation/"
            ]
        },
        {
            "slug": "v0.12/administration/configure-ssl-data-sources/index.html",
            "title": "Configure TLS/SSL for Data Sources \u2014 Charts Manual 0.12",
            "headings": [
                "Configure TLS/SSL for Data Sources",
                "Certificate Signed by a Trusted Root CA",
                "Self-Signed Certificate or Certificate Issued by an Internal CA",
                "Copy the certificates to the Charts Docker volume.",
                "Redeploy the Charts Docker stack.",
                "Add a Charts data source using TLS/SSL."
            ],
            "text": "\nConfigure TLS/SSL for Data Sources\u00b6\n\nOn this page\n\nCertificate Signed by a Trusted Root CA\nSelf-Signed Certificate or Certificate Issued by an Internal CA\n\n\nMongoDB Charts can connect to MongoDB deployments running with or without\nTLS/SSL enabled. If the deployment is running with TLS/SSL enabled,\nconfiguring your data source depends on whether the certificate is:\n\nsigned by a trusted root certificate authority, or\nself-signed or issued by an internal certificate authority.\n\n\nNote\nMongoDB deployments should use TLS/SSL 1.1 or later.\n\n\nCertificate Signed by a Trusted Root CA\u00b6\nTo connect Charts to a MongoDB deployment using a certificate\nsigned by a trusted root certificate authority,\nadd a data source and append the ssl=true\noption to the\nConnection String URI:\n\n\n\ncopy\n\nmongodb://[username:password@]<server>:<port>/<database>?ssl=true\n\n\n\n\nNote\nNo additional configuration is required when using a certificate\nsigned by a trusted root certificate authority.\n\n\n\nSelf-Signed Certificate or Certificate Issued by an Internal CA\u00b6\nTo connect Charts to a MongoDB deployment using a self-signed\ncertificate or a certificate issued by an internal certificate\nauthority, you must copy the certificate to the\nDocker volume. The\nfollowing steps copy the certificate to the Docker volume, redeploy the\nCharts application, and add a new data source configured to use\nTLS/SSL:\n1\nCopy the certificates to the Charts Docker volume.\u00b6\nThe certificate must be in the .pem format and will be either:\n\nthe self-signed certificate used by the MongoDB deployment, or\nthe CA\u2019s root certificate, if the certificate used by the MongoDB\ndeployment was issued by a CA.\n\n\n  \n    Windows\n    macOS\n    Linux\n  \n  \n    The following command copies certificates in the\nC:\\path\\to\\certs directory to the Charts host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_db-certs:/volume -v /c/path/to/certs:/localcerts alpine sh -c 'cp /localcerts/*.pem /volume'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\nThe following command copies certificates in the\n/path/to/certs directory to the Charts host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_db-certs:/volume -v /path/to/certs:/localcerts alpine sh -c 'cp /localcerts/*.pem /volume'\n\n\n\n\nThe following command copies certificates in the\n/path/to/certs directory to the Charts host:\n\n\n\ncopy\n\ndocker run -it -v mongodb-charts_db-certs:/volume -v /path/to/certs:/localcerts alpine sh -c 'cp /localcerts/*.pem /volume'\n\n\n\n    \n  \n\n2\nRedeploy the Charts Docker stack.\u00b6\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\nBefore redeploying, execute docker ps a few times until it shows no\nrunning Charts containers. It can take a little while for the\ncontainers to shut down. Then, relaunch the stack using:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.12.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.12.0 with the version number of your release.\n\n\n3\nAdd a Charts data source using TLS/SSL.\u00b6\nUsing the Charts application,\nadd a data source and append the ssl=true\noption to the Connection String URI\nto use TLS/SSL when connecting to this data source:\n\n\n\ncopy\n\nmongodb://[username:password@]<server>:<port>/<database>?ssl=true\n\n\n\n\n\n",
            "preview": "MongoDB Charts can connect to MongoDB deployments running with or without TLS/SSL enabled. If the deployment is running with TLS/SSL enabled, configuring your data source depends on whether the certificate is:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "http://docs.mongodb.org/manual/reference/connection-string",
                "https://docs.docker.com/storage/volumes/"
            ]
        },
        {
            "slug": "v0.12/administration/start-stop-charts/index.html",
            "title": "Start and Stop MongoDB Charts \u2014 Charts Manual 0.12",
            "headings": [
                "Start and Stop MongoDB Charts"
            ],
            "text": "\nStart and Stop MongoDB Charts\u00b6\nMongoDB Charts executes within a single Docker container managed by\nDocker Swarm.\nTo start Charts, deploy the stack using the supplied Docker Compose\nfile:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.12.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.12.0 with the version number of your release.\n\nTo stop Charts, ask Docker to remove the stack:\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\n",
            "preview": "MongoDB Charts executes within a single Docker container managed by Docker Swarm.",
            "tags": "",
            "links": []
        },
        {
            "slug": "v0.12/bin-data/index.html",
            "title": "Bin Data \u2014 Charts Manual 0.12",
            "headings": [
                "Bin Data",
                "Bin Date Fields",
                "Bin Numeric Fields"
            ],
            "text": "\nBin Data\u00b6\n\nOn this page\n\nBin Date Fields\nBin Numeric Fields\n\n\nMongoDB Charts supports binning both numeric and date fields in your\ndata. Binning breaks continuous data into discrete groups called\nbins, with each bin containing a contiguous subset of the original\nvalues. For example, you might group users into bins by the decade they were\nborn, or group timestamped calendar events by the month of their start\ndate.\n\nContinuous vs Discrete Data\nContinuous data can occupy any value over a continuous range.\nSome examples of continuous data include height, temperature, or\nthe time a person was born.\nAlternatively, discrete data is data which can only take certain\nvalues, categorized into a classification. Examples of discrete\ndata include eye color and the number of students in a class.\n\n\nBin Date Fields\u00b6\nWhen handling dates, this data often comes in a continuous\nform. It can be useful to split this data into a specific windows of\ntime to uncover additional trends and patterns. MongoDB Charts supports the\nfollowing bins for dates:\n\nYear\nMonth\nDate of the Month\nDay of the Week\n\n\nHour\nMinute\nSecond\n\n\nTo use binning for dates:\n\nDrag a date field (signified by a calendar icon in the\nFields section of the Chart Builder) to a\ncategory encoding channel.\nBy default, binning is enabled as indicated by the\nBinning On toggle.\n\nUse the dropdown to select the bin size for your dates.\n\n\n\nToggle the Periodic setting as desired.\n\nIf enabled, MongoDB Charts creates bins relative to the next highest\ntime period and repeats each bin to cover the timeframe spanned\nin the data field.\nIf disabled, the bins Charts creates do not repeat.\n\n\nExample\nConsider a date field containing data spanning 5 years, and\na bin selection of Month. If Periodic is\ndisabled, Charts adds the 60 months in the dataset to the\nvisualization.\nAlternatively, if Periodic is enabled, Charts\nonly plots the 12 calendar months, and visualizes the total\naggregated results from each calendar month.\n\n\nNote\nThe Periodic setting is always enabled when selecting\na bin size of Day of the Week.\nThe Periodic setting is always disabled when\nselecting a bin size of Year, because year is the\nlargest time period available in Charts.\n\n\n\nTo disable binning, toggle the Binning setting\nto off. In this case, each date from the field is added to the\nvisualization with no grouping performed.\n\nExample\nThe following chart visualizes historical sales data for an office\nsupply store. Every sale is represented by a document in the\nsupplySales collection. Each document in the collection includes\nthe date of the sale as salesDate and a list of items included\nin the sale as the items array.\nThe saleDate field contains continuous timestamp data. The field\nis binned by Date of the Month with the\nPeriodic setting enabled. This means that over the\ncourse of the several years the data spans, MongoDB Charts plots the\nmean value of sales from each individual date of the\nmonth:\n\n\n\n\n\n\nBin Numeric Fields\u00b6\nMongoDB Charts can also bin numeric fields from a continuous set into groups\nof a specified size. This\nTo use binning for numeric fields:\n\nDrag a numeric field (signified by the number sign icon in the\nFields section of the Chart Builder) to a\ncategory encoding channel.\nBy default, binning is enabled as indicated by the toggle stating\nBinning On.\n\nEnter the desired bin size in the Bin Size input.\n\n\nTo disable binning, toggle the Binning setting\nto off. In this case, each individual value from the field is added\nto the visualization, rather than being grouped into bins.\n\nExample\nThe following chart visualizes historical sales data for an office\nsupply store. Every sale is represented by a document in the\nsupplySales collection. Each sale document contains a\ncustomer object, which contains information on the customer\npurchasing the item(s).\nThe following chart applies binning to the customer.age field.\nThe age field contains continuous numeric data and is\nbinned by decade. Each age value is placed into the\nappropriate bin and Charts counts the number of ages in each\nbin to provide a high-level overview of the age distrubution of\nstore customers.\n\n\n\n\n\n",
            "preview": "MongoDB Charts supports binning both numeric and date fields in your data. Binning breaks continuous data into discrete groups called bins, with each bin containing a contiguous subset of the original values. For example, you might group users into bins by the decade they were born, or group timestamped calendar events by the month of their start date.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/"
            ]
        },
        {
            "slug": "v0.12/build-charts/index.html",
            "title": "Build Charts \u2014 Charts Manual 0.12",
            "headings": [
                "Build Charts",
                "Create a Chart"
            ],
            "text": "\nBuild Charts\u00b6\nCharts provide visual representations of the data in your\ndata source. A chart maps to a single\ndata source, and can display correlations between several fields in the\ndata. Charts reside inside dashboards. You must\nadd a data source and create a dashboard before you can begin building charts.\nFor a complete list of available chart types and how to build specific\ncharts, refer to the Chart Types page.\n\nCreate a Chart\u00b6\nTo build a new chart:\n\nFrom the Dashboards tab, select the dashboard where you\nwish to add a new chart. For instructions on setting up a dashboard,\nsee Dashboards.\n\nClick the Add Chart button at the top-right corner of\nthe dashboard view.\n\nIn the Data Source dropdown, select the data source to\nbe used for this chart. For information on adding data sources in\nMongoDB Charts, see\nData Sources.\n\nIn the Chart Type dropdown, select the type for this\nchart.\n\nNote\nEach chart type provides different visualization options\nfor the fields in your data, reflected by various\nencoding channels. These channels dictate how your data is\nvisualized and enable powerful\naggregations for\nyour data. For details on the different encoding channel types,\nrefer to the Encoding Channels\npage.\n\n\nDrag fields from the Fields section to the desired\nencoding channels below the\nChart Type dropdown. The fields listed correspond to the\nfields in your data source. You can search for a specific field in\nyour data source by using the Filter search bar at the\ntop of the Fields section.\n\nNote\nFor details on how MongoDB Charts handles embedded objects and\nembedded arrays in fields, see the\nEmbedded Objects and Arrays\npage.\n\n\nGive your chart a title by hovering over the\nEnter a title for your chart text clicking the\nPencil Icon. Click the Green Check Mark to\nsave your title.\n\nOnce you are satisfied with your chart, click\nSave Changes. This saves your chart to your dashboard\nand redirects you to the dashboard view.\n\n\n\n\nEncoding Channels\nFilter Documents in the Visualization\nEmbedded Objects and Arrays\nBin Data\nSort and Limit Categorical Data\nCustomize Charts\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\nSample Mode\n\n\n\n",
            "preview": "Charts provide visual representations of the data in your data source. A chart maps to a single data source, and can display correlations between several fields in the data. Charts reside inside dashboards. You must add a data source and create a dashboard before you can begin building charts.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/customize-charts/field-level-options/",
                "https://docs.mongodb.com/charts/v0.12/chart-types/",
                "https://docs.mongodb.com/charts/v0.12/sample-mode/",
                "https://docs.mongodb.com/charts/v0.12/embedded-objects-arrays/",
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/",
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.12/dashboards/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/value-axis-options/"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/column-bar-chart/index.html",
            "title": "Column and Bar Charts \u2014 Charts Manual 0.12",
            "headings": [
                "Column and Bar Charts",
                "Column and Bar Chart Encoding Channels",
                "Column and Bar Chart Types",
                "Use Cases",
                "Examples",
                "Grouped Column Chart",
                "Stacked Column Chart",
                "100% Stacked Bar Chart",
                "Colored Bar Chart"
            ],
            "text": "\nColumn and Bar Charts\u00b6\n\nOn this page\n\nColumn and Bar Chart Encoding Channels\nColumn and Bar Chart Types\nUse Cases\nExamples\n\n\nColumn and bar charts plot data in either horizontal or vetical\nsegments where the length of the segment is proportional to the data\nvalue. Column and bar charts provide high-level overviews of data\ntrends by comparing values within a specific category.\n\nColumn and Bar Chart Encoding Channels\u00b6\nColumn and bar charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX / Y Axis\n\nIn the category axis encoding channel, a bar or\ncolumn is rendered for each unique value from this field.\nIn a column chart, the category is the\nX Axis, which results in vertical segments. In a\nbar chart, the category is the\nY Axis, which results in horizontal segments.\n\nThe aggregation axis encoding channel dictates\nwhich field to aggregate on and the type of aggregation to\nperform. This ultimately dictates the size of each bar or\ncolumn.\n\nNote\nYou can aggregate upon multiple fields in your dataset to\ncreate multi-series charts. For more information, see\nMultiple Field Mappings.\n\n\n\n\n\nSeries\n(Optional) A category encoding channel that\nsegments the axis category based on the unique values in\nthis field.\nIf omitted, MongoDB Charts renders a basic bar or column chart with\njust a comparison of the X Axis and\nY Axis fields.\n\nNote\nThis option is only available for Grouped and Stacked charts with a single field mapped in\nthe aggregation channel.\n\n\n\nColor\n(Optional) An aggregation encoding channel for\nColored charts that changes the\nbars or columns\u2019 colors to reflect the aggregated\nvalue of the field, with darker colors meaning greater values.\n\n\n\n\n\nColumn and Bar Chart Types\u00b6\nColumn and bar charts provide the following sub-types:\n\n\n\n\n\n\nSub-Type Name\nDescription\n\n\n\nGrouped\nMongoDB Charts groups data by the category specified in the\ncategory encoding channel, and plots a bar or column for each value\nin the Series encoding channel.\n\n\nFor a more detailed example, refer to the\ngrouped column chart example.\n\n\n\nStacked\nMongoDB Charts creates a bar or column for each distinct value in the\ncategory encoding channel\nfield, and splits each bar or column into segments based on the\nthe Series encoding channel.\n\n\nFor a more detailed example, refer to the\nstacked bar chart example.\n\n\n\n100% Stacked\n100% stacked charts behave similarly to traditional stacked\ncharts, with the difference that in a 100% stacked chart each\nbar or column is normalized to a consistent value of 100%. Just\nas with traditional stacked charts, each bar or column is split\ninto segments based on the Series\nencoding channel. Each series is\nshown as a percentage of the whole.\nWhen using a traditional stacked chart, it can be difficult to\ncompare the proportions of each series to the whole if the\ntotal values of the bars / columns greatly differ. This type of\nchart makes it easier to compare proportions within each bar or\ncolumn by showing relative percentages.\n\nNote\nYou cannot customize the minimum, maximum, or logarithmic\nscale value axis options of 100%\nstacked charts.\n\n\n\nFor a more detailed example, refer to the\n100% stacked bar chart example.\n\n\n\nColored\nMongoDB Charts creates a bar or column for each distinct value in the\ncategory encoding channel\nfield, and the Color encoding channel changes the\ncolor of each bar / column based on the aggregated value of the\nvalue specified in the encoding channel.\n\n\nFor a more detailed example, refer to the\ncolored bar chart example.\n\n\n\n\n\n\n\nUse Cases\u00b6\nColumn and bar charts display information in similar manners and, as\nsuch, have similar use cases. There are, however, situations where it\nmay be beneficial to use one over the other:\n\nA bar chart may be a better choice than a column chart when the\ncategory labels are long, as it may be difficult to quickly\npinpoint which label applies to which column.\nA column chart may be a better choice when comparing sequential\nvalues (such as time or geographic data) because the viewer\nwill intuitively read these charts from left to right and attain the\nfull picture of the visualization.\n\n\nTip\nColumn and bar charts are best suited for data with limited\ncategories. When plotting data with many categories, such as\nyears across a long period of time, consider using a\nLine Chart.\nYou can also limit the number of categories displayed in your\nchart to focus on a subset of your data. MongoDB Charts provides the\nfollowing methods to reduce the number of bars or columns plotted\nin the visualization:\n\nFilter documents\nLimit Data\nBin data\n\n\n\n\nExamples\u00b6\n\nGrouped Column Chart\u00b6\nThe following grouped column chart shows the most common items sold\nfrom an office supply store across several store locations.\nThe X Axis category of storeLocation creates a group\nfor each store location in the data set, and each group is split by the\nseries column of item.name. This ultimately displays\nthe count of each item\u2019s name sold at each store location:\n\n\n\n\n\nStacked Column Chart\u00b6\nThe following stacked column chart shows the number of awards won by\nthe top 10 highest award-winning movie directors, with each bar\nsegmented by the genres of films directed by that director.\nThe X Axis category of director creates a column for each\ndirector in the data set, which we limit to\nonly the top 10 as sorted by the aggregated sum of awards.wins from\nthe Y Axis. The Series encoding channel field\nof genres segments each column to portray the genres of the films\ndirected by that director:\n\n\n\n\n\n100% Stacked Bar Chart\u00b6\nThe following 100% stacked bar chart visualizes the monthly cost\nof renting a home in three different suburbs of Austin, Texas, USA.\nUsing a 100% stacked chart allows us to easily visualize\nthe percentage of rental homes in each monthly_price\nbin within each neighborhood. This provides a\nclear picture of how these neighborhoods generally compare on rental\nprices.\nThis is the complete filter used for\nthis chart:\n\n\n\ncopy\n\n{\n  $and: [\n    { monthly_price:\n      { $exists: true, $lte: 2000 }\n    },\n    { 'address.suburb':\n      { $in: [\"Georgian Acres\", \"South Congress\", \"Wooten\"] }\n    }\n  ]\n}\n\n\n\nThe Y Axis category channel creates a bar for each of the\nthree suburbs in the filter. The X Axis channel aggregates\nto obtain a count of documents matching each respective suburb. The\nSeries encoding channel of monthly_price splits each\nbar into categories colored according to the legend on the right\nside of the chart:\n\n\n\n\n\nColored Bar Chart\u00b6\nThe following colored bar chart shows the average Rotten Tomatoes rating for countries with the 10\nhighest ratings, and colors each bar to show the average runtime for\nmovies from each country.\nThe Y Axis category creates a bar for each country in the\ndata set, which we limit to only the top 10 as sorted by the aggregated\nmean of the tomato.rating field from the X Axis. The\nColor encoding channel field of runtime colors each bar\nto show the average runtime for movies from each country. A darker\nshade of green indicates a longer average runtime:\n\n\n\n\n\n",
            "preview": "Column and bar charts plot data in either horizontal or vetical segments where the length of the segment is proportional to the data value. Column and bar charts provide high-level overviews of data trends by comparing values within a specific category.",
            "tags": "",
            "links": [
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/value-axis-options/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/line-area-chart/"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/data-table/index.html",
            "title": "Data Table \u2014 Charts Manual 0.12",
            "headings": [
                "Data Table",
                "Data Table Encoding Channels",
                "Use Cases",
                "Examples",
                "Basic Data Table",
                "Data Table with Dynamic Columns",
                "Sort and Resize Data Table Columns",
                "Behavior",
                "Procedure",
                "Reorder Data Table Columns",
                "Considerations",
                "Toggle Row and Column Totals"
            ],
            "text": "\nData Table\u00b6\n\nOn this page\n\nData Table Encoding Channels\nUse Cases\nExamples\nSort and Resize Data Table Columns\nReorder Data Table Columns\nToggle Row and Column Totals\n\n\nData tables represent data in a tabular view, similar to a\nspreadsheet. Data tables\nsplit your data into categories, with each categorization field\nrepresented in the table columns. The unique categories are represented\nas the table rows, and Charts displays aggregated values in the\ntable body based on the fields selected.\n\nData Table Encoding Channels\u00b6\nData tables use the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nGroups\nThe category encoding channels. Charts\ncreates a row in the table for each unique value in this field.\nWhen multiple Groups are added to the chart,\nCharts creates a row for each unique combination of\ngroup fields.\n\nNote\nThe Groups encoding channel supports\nbinning for numeric and date fields.\n\n\n\nValues\nThe aggregation encoding channels. Charts\ncreates a column for each field mapped into the\nValues channel. Charts\naggregates the encoded Values fields using the\nselected aggregation methods and populates the grid cells with\nthe aggregated value for the corresponding Group.\n\nDynamic Columns\nA second Category encoding channel. When you use\nDynamic Columns, Charts creates table\ncolumns based on the unique values retrieved from the field\nmapped into the Dynamic Columns channel.\nCharts uses the field mapped into the Values\nchannel to populate the grid cells, aggregated against both the\nGroup and Dynamic Column categories.\nYou cannot apply dynamic columns to a table if you have selected\nmultiple Value encoding channels.\nFor an example of how to use dynamic columns, see the following\nexample.\n\nNote\nThe Dynamic Columns encoding channel supports\nbinning for numeric and date fields.\n\n\n\n\n\n\n\nUse Cases\u00b6\nData tables have a wide variety of applications, but are most useful\nwhen comparing multiple categories of calculated values. Visual charts\nstruggle to display multiple categories of data without losing their\naudience. Data tables present data with multiple categories such that\nyou can see which value applies to which slice of data.\nData tables are also useful for showing precise data values, rather\nthan comparing approximate values. Comparing approximate values is\nbest done with a visual representation, instead of text.\nYou can use data tables to show:\n\nThe total cost to rent an apartment, including rent, cleaning fees,\nand security deposits organized by location and total area of the\nunit.\nTime spent working out and total calories burned during various\nexercises categorized by the type of exercise and time of day the\nexercised was performed.\n\n\n\nExamples\u00b6\nThe following data table examples visualize data from a hospitality\nand property service. Each document in the collection\nrepresents a unit available for rent and includes information such as\nthe monthly unit price, neighborhood, and property type.\n\nBasic Data Table\u00b6\nThe following data table categorizes the rental listings by property\ntype and location, and shows the average review rating and average\nweekly rent for each group:\n\n\n\nThe Group encoding channels of property_type and\nsuburb create a row in the data table for each unique combination\nof those two fields in the data.\nThe Values of review_scores_rating and\nweekly_price each add a column to the table. For both values, we\naverage the rating and price for each property type and suburb\nusing aggregation and display the results in\nthe data table.\nThe results are formatted using the Customization tab to display the\nmean weekly price as currency and round the mean review score to an\nappropriate number of decimal places.\n\nNote\nWe have applied a filter to this\nchart to only display listings which have a weekly_price\nassociated with them.\n\n\n\nData Table with Dynamic Columns\u00b6\nThe following data table displays nearly the same data as the previous\nbasic data table example. In this example, instead of making\nproperty_type and suburb Groups, property_type\nfield is now a Dynamic Column:\n\n\n\nNow, rather than having two category columns in the table, the\nproperty_types become column titles. We are still aggregating\nthe mean of the weekly_price based on each combination of\nproperty_type and suburb.\nThe results are formatted using the Customization tab to display the\nmean weekly price as currency.\n\nNote\nBlank table cells indicate that there are no documents that match\nthe corresponding intersection of property_type and suburb.\n\n\n\n\nSort and Resize Data Table Columns\u00b6\nUsers with the viewer and author roles\non data tables can sort and resize data table columns. You\ncan sort and resize columns either in the\ndashboard or the Chart Builder.\n\nBehavior\u00b6\nWhen a viewer or author sorts or resizes columns from the\ndashboard, the changes do not persist as part of\nthe chart definition. In this case, the chart returns to its\noriginal state once the chart or corresponding dashboard is\nrefreshed.\nTo save the changes as part of the chart definition, an author must\nmake the changes in the Chart Builder. All Charts users will\nsee the new column sorting and sizing.\n\n\nProcedure\u00b6\n\nSort Columns\u00b6\nTo sort a data table column, click on its header. With each click, MongoDB Charts cycles between sorting the column in\nascending order, descending order, and the default chart sorting order.\nTo sort by multiple columns, Shift + Click on the additional columns\nby which you wish to sort. Charts applies the sort order in\nthe same order you select additional columns. Charts displays\nnumbers in the column headers indicating the order in which the\nsorting is applied.\n\n\nResize Columns\u00b6\nTo resize a column, click the the column divider and drag until the\ncolumn reaches the desired width.\nTo return a column to its default width, double-click on the column\ndivider.\n\n\n\n\nReorder Data Table Columns\u00b6\nUsers with the and author role on data tables\ncan reorder data table columns in the Chart Builder.\nTo reorder data table columns, click and drag column headers to the\ndesired order.\nWhen an author reorders data table columns and saves the\nchart, MongoDB Charts saves the specified order as part of the chart\ndefinition. All Charts users will see the new column order.\n\nNote\nData table authors can also reorder\ncolumns by modifying the order of the respective column\nencoding channels. MongoDB Charts renders data\ntable columns in the same order you specify the column encoding\nchannels. To modify the order of the encoding channels, drag and\ndrop one field on top of another to swap their order.\n\n\nConsiderations\u00b6\n\nYou can only reorder columns within their respective table sections,\nbeing Groups or Values.\nYou cannot reorder Dynamic Columns.\n\n\n\n\nToggle Row and Column Totals\u00b6\nBy default, data tables include a Column Totals row, which consists of\na row of values with sum totals for each column. Optionally, you can\nenable a Row Totals column, which consists of a column of\nvalues containing sum totals for each row.\nThe following image shows a detail from a data table with row and\ncolumn totals enabled and added text indicating which is which:\n\n\n\nTo toggle the totals on and off:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nColumn Totals and Row Totals toggles\nto the desired settings.\n\nFor a complete list of Chart Customization options, see Customize\nCharts.\n\n",
            "preview": "Data tables represent data in a tabular view, similar to a spreadsheet. Data tables split your data into categories, with each categorization field represented in the table columns. The unique categories are represented as the table rows, and Charts displays aggregated values in the table body based on the fields selected.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "https://docs.mongodb.com/charts/v0.12/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "https://docs.mongodb.com/charts/v0.12/dashboards/",
                "https://en.wikipedia.org/wiki/Spreadsheet"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/donut-chart/index.html",
            "title": "Donut Chart \u2014 Charts Manual 0.12",
            "headings": [
                "Donut Chart",
                "Donut Chart Encoding Channels",
                "Use Cases",
                "Examples",
                "Donut Chart Using Count",
                "Donut Chart Using Sum"
            ],
            "text": "\nDonut Chart\u00b6\n\nOn this page\n\nDonut Chart Encoding Channels\nUse Cases\nExamples\n\n\nDonut charts display data in a series of segments of a circle, with\nlarger segments representing larger data values. The entire circle\nrepresents the summation of all data values, and each segment\nindicates the proportion of each category in the data to the total.\n\nDonut Chart Encoding Channels\u00b6\nDonut charts provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nLabel\nThe category encoding channel. MongoDB Charts creates a\nsegment in the donut for each unique value from this field.\n\nNote\nThe Label encoding channel supports\nbinning for numeric and date fields.\nThe channel supports sorting and\nlimiting for string fields.\n\n\n\nArc\nThe aggregation encoding channel. MongoDB Charts\naggregates this field\nbased on the aggregation method selected. This field dictates\nthe size of each circle segment.\n\n\n\n\n\nUse Cases\u00b6\nDonut charts are ideal for giving readers a quick overview of the\nproportional distribution of a dataset. Use donut charts when the\ngeneral trend of data is more important than precise data values.\nDonut charts are especially useful when there is a low number of\ncategories to visualize, because it is easier to compare fewer\nsegments of the circle to see which values make up the greatest\nparts of the whole.\nConsider using donut charts to display:\n\nThe proportion of store customers who place orders in-store versus\nonline\nThe proportion of various resources exported by a country\nThe choices thrown during several Rock, Paper, Scissors games\n\n\nNote\nAlthough you can bin or limit your data to reduce the number of categories\nin the visualization, this may not be the best choice for donut\ncharts. The purpose of donut charts is to show each value as a\nproportion of a total, so excluding categories may result in a\nmisleading visualization that reflects inaccurate proportions.\nWhen looking to compare individual data values, rather than show\nvalues as a proportion to a whole, consider using a\ncolumn or bar chart.\n\n\n\nExamples\u00b6\n\nDonut Chart Using Count\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale,\nwhich contains information on the item(s) sold and the customer\nconducting the purchase. This donut chart shows the proportional\ncounts of the three different purchase methods the store provides:\n\n\n\nThe Label field of purhcaseMethod tells MongoDB Charts to\ncreate a circle segment for each unique value in the purhcaseMethod\nfield. MongoDB Charts proportions each segment according to the aggregated\nvalue signified in the Arc encoding channel. In this case,\nwe aggregate to find the total count of documents with the\nsame purhcaseMethod value.\nWe see based on the visualization that the most common purchase method\nis In store, followed by Online.\n\nNote\nIn this example we are counting entire documents, so it does not\nmatter what field we select for the Arc field. No\nmatter what field we apply, the visualization will still be\nthe same.\n\n\n\nDonut Chart Using Sum\u00b6\nThe following chart visualizes personal workout data. Each document in\nthe collection represents a single workout activity, which includes\ninformation on the type of activity performed and the amount of time\nspent exercising. This donut chart shows the proportional time spent\nperforming each exercise activity:\n\n\n\nThe Label field of Activity Type tells MongoDB Charts to\ncreate a circle segment for each unique value in the Activity Type\nfield. MongoDB Charts proportions each segment according to the aggregated\nvalue signified in the Arc encoding channel. In this case,\nwe aggregate to find the total sum of workout times for\ndocuments with the same Activity Type value.\nWe see based on the visualization that the activity with the greatest\ntotal workout time is Surf, followed by Bike Ride.\n\n\n",
            "preview": "Donut charts display data in a series of segments of a circle, with larger segments representing larger data values. The entire circle represents the summation of all data values, and each segment indicates the proportion of each category in the data to the total.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/grid-charts/index.html",
            "title": "Grid Charts \u2014 Charts Manual 0.12",
            "headings": [
                "Grid Charts"
            ],
            "text": "\nGrid Charts\u00b6\n\n\nHeatmap\nScatter Chart\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/scatter-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/heatmap/"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/heatmap/index.html",
            "title": "Heatmap \u2014 Charts Manual 0.12",
            "headings": [
                "Heatmap",
                "Heatmap Encoding Channels",
                "Use Cases",
                "Example"
            ],
            "text": "\nHeatmap\u00b6\n\nOn this page\n\nHeatmap Encoding Channels\nUse Cases\nExample\n\n\nA heatmap represents data in a tabular format as a range of color. A\ndarker, or more intense, color represents a larger aggregated value\nfor a particular data point.\n\nHeatmap Encoding Channels\u00b6\nHeatmaps provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nA category encoding channel that creates a category\nalong the X axis for each unique value in this field.\n\nY Axis\nA category encoding channel that creates a category\nalong the Y axis for each unique value in this field.\n\nIntensity\nAn aggregation encoding channel that changes the\nshading of the matrix elements to reflect the aggregated value\nof this field. Darker colors in the visualization reflect\ngreater aggregated values.\n\n\n\n\nNote\nHeatmaps support sorting and\nlimiting for the\nX Axis encoding channel, but not the\nY Axis channel.\n\n\n\nUse Cases\u00b6\nHeatmaps reveal patterns or trends within your data. Use heatmaps\nwhen the exact data values are not as important as depicting\nhigher-level trends and relationships between your data points. They\ncan also highlight any significant outliers, or points which strongly\ngo against the general direction of your data. A heatmap is a good\nchoice to display:\n\nA comparison of average room rental prices based on location and\nproperty type.\nGeographic data, such as election results across different districts\nor population density.\nThe number of customer orders across various store locations by month\nof the year.\n\n\nTip\nHeatmaps work especially well with binned\ndata. With naturally ordered datasets, heatmaps highlight areas of\nconcentration within the data.\n\n\n\nExample\u00b6\nThe following chart visualizes data pertaining to movies. Each\ndocument in the collection represents a movie and contains general\ninformation about the film as well as ratings from critics. This\nheatmap shows the mean (average) Metacritic rating for different movie genres\n(Y Axis) over time (X Axis):\n\n\n\nWe bin the years along the X Axis into\ndecades and aggregate to find the mean metacritic score\nof films from each genre released in each decade.\nThe intensity field of metacritic shades each grid\nelement based on the mean metacritic field of all of the\nintersecting documents based on the X and\nY axes fields. Based on the chart, we see that\nfrom 1930-1940 there are a few genres with very high\naverage Metacritic scores, and over time a more even distribution of\nfilm ratings begins to occur.\n\nNote\nIf the space is white, there are no movies from that decade of that\nparticular genre in the dataset.\n\n\n",
            "preview": "A heatmap represents data in a tabular format as a range of color. A darker, or more intense, color represents a larger aggregated value for a particular data point.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "http://www.metacritic.com/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/line-area-chart/index.html",
            "title": "Line and Area Charts \u2014 Charts Manual 0.12",
            "headings": [
                "Line and Area Charts",
                "Discrete Line and Area Charts",
                "Discrete Chart Encoding Channels",
                "100% Stacked Area Charts",
                "Continuous Line and Area Charts",
                "Continuous Chart Encoding Channels",
                "Discrete Area Versus Continuous Area Charts Display",
                "Use Cases",
                "Examples",
                "Discrete Area Chart with Multiple Series",
                "100% Stacked Area Chart",
                "Discrete Line Chart with Multiple Aggregated Fields",
                "Continuous Line Chart"
            ],
            "text": "\nLine and Area Charts\u00b6\n\nOn this page\n\nDiscrete Line and Area Charts\nDiscrete Chart Encoding Channels\n100% Stacked Area Charts\n\n\nContinuous Line and Area Charts\nContinuous Chart Encoding Channels\n\n\nDiscrete Area Versus Continuous Area Charts Display\nUse Cases\nExamples\nDiscrete Area Chart with Multiple Series\n100% Stacked Area Chart\nDiscrete Line Chart with Multiple Aggregated Fields\nContinuous Line Chart\n\n\n\n\nLine charts and area charts display information as a series of data\npoints connected by straight line segments. In area charts, the\nspace beneath the line segments is filled in with color, whereas in\nline charts only the line segments are rendered with no additional\ncoloring or shading. These charts facilitate visualizing data over a\nperiod of time and identifying trends and patterns across the entire\ndata range. Line and area charts support visualuzing both\ndiscrete and continuous data.\n\nDiscrete Line and Area Charts\u00b6\nDiscrete line and area charts visualize categorical or binned data with some form of logical ordering, such as\ntime. MongoDB Charts always aggregates\nvalues in discrete charts such that any number of documents can\nsupply values to a given plotted point. A discrete chart would be\nuseful to visualize a store\u2019s average annual sales over time.\n\nDiscrete Chart Encoding Channels\u00b6\nDiscrete line and area charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nThe category encoding channel. MongoDB Charts renders a\ndata point for each unique value from the field assigned to this\nencoding channel.\n\nY Axis\nThe aggregation encoding channel. This channel\ndictates which field to aggregate on and the type of aggregation\nto perform. This ultimately dictates the position of each\ncategory\u2019s data point on the chart. Categories are defined by\nthe X Axis encoding channel.\n\nNote\nYou can aggregate upon multiple fields in your dataset to\ncreate multi-series charts. For more information, see\nMultiple Field Mappings.\n\n\n\nSeries\n(Optional) Adds an additional category encoding\nchannel to the visualization. When utilized, MongoDB Charts adds\nan additional line to the visualization for each unique\nvalue in this field. Use this field to map additional\ndiscrete categorical fields in your data, rather than multiple\naggregated fields.\n\nNote\nThis option is only available when there is a single field\nmapped to the Y Axis aggregation\nencoding channel.\n\n\n\n\n\n\n\n100% Stacked Area Charts\u00b6\n100% stacked area charts are a subtype of discrete area charts. In 100%\nstacked area charts, the total area shown is normalized to 100% and\nsplit into segments based on the category in the Series\nencoding channel. Each series is shown as a percentage of the whole.\nWhen using a traditional stacked area chart, it can be difficult to\ncompare the proportions of each series to the whole if the total\nvalue of the chart segments greatly differ. 100% stacked charts\nmake it easier to compare proportions of each series to the whole by\nshowing relative percentages.\nFor a detailed example, see the 100% Stacked Area Chart Example.\n\n\n\nContinuous Line and Area Charts\u00b6\nIn continuous line and area charts, every data point comes from a\ndistinct document in the data source.\nContinuous charts do not support aggregation or binning. A continuous\nchart would be useful to visualize stock closing prices over time,\nassuming each closing price comes from a distinct document in the\ndataset.\n\nContinuous Chart Encoding Channels\u00b6\nContinuous line and area charts provide the following\nencoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX Axis\nMongoDB Charts renders a data point for the values in this field\nfrom each document in the collection.\n\nY Axis\nFor each document in the data source, MongoDB Charts compares the\nvalue of this field against the X Axis\nfield and plots the resulting value.\n\nNote\nYou can add multiple value encoding channels to\nthe chart\u2019s Y Axis to create multi-series charts.\nFor more information, see Multiple Field Mappings.\n\n\n\nSeries\n(Optional) Adds an additional category encoding\nchannel to the visualization. When utilized, this field adds\nan additional line to the visualization for each unique\nvalue in this field.\n\nNote\nThis option is only available when there is a single field\nmapped to the Y Axis aggregation\nencoding channel.\n\n\n\n\n\n\n\n\nDiscrete Area Versus Continuous Area Charts Display\u00b6\nDiscrete area charts are stacked, meaning MongoDB Charts plots each\nseries above or below the others in the visualization. The chart shows\nthe total aggregated value of all of the series, so you can easily see\nthe proportion of each series in relation to the total.\nContinuous area charts are overlaid, meaning MongoDB Charts plots each\nseries directly on top of one another in the visualization.\n\n\nUse Cases\u00b6\nLine charts and area charts are closely related and are both useful\nfor depicting time series data and data with logical ordering. However,\nthere are scenarios when it may be beneficial to use one chart type\nover the other.\n\nConsider using a line chart when creating multi-series charts where each series represents an isolated\nfield. MongoDB Charts stacks multi-series area charts, as shown in\nthis example, which results\nin a chart where the stacked totals appear to share a relationship\ncontributing to a larger summed value. This may not be desireable\ndepending on the specific relationships within the data fields.\nThe line chart displays the data from each series in-line with one\nanother without stacking, which may provide a more accurate\nrepresentation of the data as shown in the\ndiscrete line chart.\n\n\nArea charts are useful for showing an overall trend while also\nhighlighting relative performances of individual components of\nthat sum.\nConsider using a discrete area chart when illustrating a\npart-to-whole relationship, such as tracking data metrics over\ntime. An example of this might be showing revenue compared with\nexpenses over the course of a year.\nA continuous area chart would work in this scenario if you were\nless concerned with the summation of the two fields and instead\nwanted a more direct comparison of the fields against one another.\n\n\n\n\nTip\nWhen your data does not have a logical order, consider instead using\na bar or column chart to visualize\nyour data. When the order of the data is not important, a bar or\ncolumn chart can quickly highlight the highest and lowest values in\nthe visualization, which may be more beneficial than suggesting the\nviewer read the chart from left to right as in a line or area chart.\n\n\n\nExamples\u00b6\n\nDiscrete Area Chart with Multiple Series\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale\nwith information on the item(s) sold and the customer\nconducting the purchase. This discrete area chart shows the\ndistribution of customer ages throughout sales in the collection:\n\n\n\nThe X Axis field of customer.age plots the ages of the\ncustomers along the X axis. We direct to Charts to bin the ages into groups of 5.\nThe Y Axis field of customer.age and\naggregate option of count counts the\noccurrences of each age in the corresponding bin.\nLastly, we apply the item.name field to the\nSeries encoding channel to split the age area into\nsegments displaying the count of each age group purchasing each\nstore item.\n\nNote\nFor more information on multi-series charts, see\nMulti-Series Charts.\n\n\n\n100% Stacked Area Chart\u00b6\nThe following chart visualizes data from a mock office supply\nstore. Each document in the collection represents an individual sale\nwith information on the item(s) sold and the customer\nconducting the purchase. This 100% stacked area chart shows the\nrelative percentages of items sold on each date of the month:\n\n\n\nThe X Axis field of saleDate plots each sale\naccording to its date. The Binning and\nPeriodic settings are enabled, so\nCharts groups the dates into bins based on each date of the\nmonth.\n\nNote\nFor more information on binning dates and the periodic setting,\nrefer to the Bin Data page.\n\nThe Y Axis field of _id runs a count aggregation to calculate the\ntotal number of sales that happened each day of the month. Since this\nis a 100% stacked chart, these values are all normalized to 100%, and\nare segmented by the Series encoding channel.\nThe Series field of item.name segments the total chart\narea based on the name of the item sold. Since there may\nbe multiple items in a single document, we Unwind this\narray to add each item to the visualization. This provides a clear\npicture of the relative percentages of items sold based on the\ndate of the month.\n\n\nDiscrete Line Chart with Multiple Aggregated Fields\u00b6\nThe following chart visualizes data pertaining to movies. Each\ndocument in the collection represents a movie and contains general\ninformation about the film and ratings from various rating\naggregators. This discrete line chart compares average\nRotten Tomatoes\ntomato.meter ratings and average Metacritic ratings of films over time. Both ratings\nare on a scale from 0 - 100:\n\n\n\nThe X Axis field of year plots each film according to\nits release year. We direct to Charts to bin the years into groups of 5.\nThe Y Axis fields of tomato.meter and metacritic\nalong with the aggregate option of mean\ncalculate and plot the average ratings of films from each\ngroup of 5 years.\n\nNote\nFor more information on creating charts with multiple aggregated\nfields, see Multiple Field Mappings.\n\n\n\nContinuous Line Chart\u00b6\nThe following chart visualizes data pertaining to the usage of a\nsolar-powered house battery. This continuous line graph shows the\nbattery level over time:\n\n\n\nThe X Axis field of timestamp plots each timestamp in\nthe data source. The Y Axis fields of energy_left and\ntotal_pack_energy each plot a series in the chart; the amount of\nenergy the battery has left and the total amount of energy the battery\nholds. This comparison shows how close the battery is to a full charge.\n\nNote\nA continuous chart works better than a discrete chart in this case\nbecause our X Axis field, timestamp is not a\ndiscrete, categorical variable, and is instead a continuous value\nalong a range.  We want to plot each timestamp as an individiual\npoint, rather than show an aggregated value from many data values.\n\n\n\n",
            "preview": "Line charts and area charts display information as a series of data points connected by straight line segments. In area charts, the space beneath the line segments is filled in with color, whereas in line charts only the line segments are rendered with no additional coloring or shading. These charts facilitate visualizing data over a period of time and identifying trends and patterns across the entire data range. Line and area charts support visualuzing both discrete and continuous data.",
            "tags": "",
            "links": [
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "http://www.metacritic.com/"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/number-chart/index.html",
            "title": "Number Chart \u2014 Charts Manual 0.12",
            "headings": [
                "Number Chart",
                "Number Chart Encoding Channel",
                "Use Cases",
                "Examples",
                "Total Value of Store Sales",
                "Maximum Calories Burned During Workouts"
            ],
            "text": "\nNumber Chart\u00b6\n\nOn this page\n\nNumber Chart Encoding Channel\nUse Cases\nExamples\n\n\nNumber charts display a single aggregated value from a data field.\n\nNumber Chart Encoding Channel\u00b6\nNumber charts only require a single encoding channel, called\nNumber. This is an aggregation encoding channel\nwhich aggregates based on the field and aggregation method chosen, and\ndisplays the result in the chart.\n\n\nUse Cases\u00b6\nNumber charts are useful for highlighting grand totals or values which\nrepresent the overall state of your data. For example, a store may use\na number chart to represent the total dollar value of all sales.\nAdditionally, a hotel chain may use a number chart to represent the\naverage number of vacant rooms across all hotels, or apply a\nfilter to see the total number of\nvacant rooms in a select region.\n\n\nExamples\u00b6\n\nTotal Value of Store Sales\u00b6\nThe following chart visualizes sales data from a mock office supply\nstore. Each document in the collection represents an individual sale,\nwhich contains information on the item(s) sold and the purchaser. This\nnumber chart shows the total sum of all sales stored in the collection:\n\n\n\nThe Number field of items.price tells MongoDB Charts to\naggregate the field based on the selected method of\n$sum. Since\nitems is an array, we have to select an array reduction option\nbefore we can aggregate. In this example, we choose\nUnwind Array, which creates a new document for each\nelement in the items array. MongoDB Charts sums the price of each\nnewly created document and displays the value in the visualization.\n\n\nMaximum Calories Burned During Workouts\u00b6\nThe following chart visualizes workout data. Each document in the\ncollection represents an individual workout activity, which contains\ninformation on the type of activity performed and the amount of\ncalories burned during the workout. This number chart shows the\nmaximum calories burned across all swimming and surfing\nworkouts:\n\n\n\nThe Number field of Calories Burned (kCal) tells\nMongoDB Charts to aggregate the field based on the selected method of\n$max.\nWe have applied a filter to this chart\nto restrict the documents MongoDB Charts examines to only those with an\nActivity Type of Surf, Swim, or Indoor Swim. MongoDB Charts\ndetermines the maximum value of the Calories Burned (kCal) field\nacross all documents which match this criteria and displays the value\nin the visualization.\n\n\n",
            "preview": "Number charts display a single aggregated value from a data field.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/max/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/scatter-chart/index.html",
            "title": "Scatter Chart \u2014 Charts Manual 0.12",
            "headings": [
                "Scatter Chart",
                "Scatter Chart Encoding Channels",
                "Use Cases",
                "Examples",
                "AirBnB Rentals",
                "Movies with the Most Award Nominations"
            ],
            "text": "\nScatter Chart\u00b6\n\nOn this page\n\nScatter Chart Encoding Channels\nUse Cases\nExamples\n\n\nScatter charts plot data with individual data points placed along the\nX and Y axes. Optionally, the data point representations may use shapes\nand colors to display additional data dimensions.\n\nScatter Chart Encoding Channels\u00b6\nScatter charts provide the following encoding channels:\n\n\n\n\n\n\nEncoding Channel\nDescription\n\n\n\nX / Y Axis\nThe X and Y axis encoding channels accept numerical and date\nfields and display the range of values from the field along the\ncorresponding axis.\n\nSize\n(Optional) An aggregation encoding channel that\nchanges the size of the data point markers, with larger sizes\nindicating larger aggregated values.\n\nColor\n(Optional) A category encoding channel that changes\nthe color of the data point markers to indicate a corresponding\ndata value. MongoDB Charts lists the colors used in a key to the right of\nthe chart.\n\nShape\n(Optional) A category encoding channel that changes\nthe shape of the data point markers to indicate a corresponding\ndata value. MongoDB Charts lists the shapes used in a key to the right of\nthe chart.\n\n\n\n\n\nUse Cases\u00b6\nScatter charts are useful for representing numerical data and\nshowing clearly how data points cluster together in certain areas.\nThe Size, Color, and Shape\nencoding channels allow you to reveal\nadditional trends for data dimensions with low cardinality.\n\nTip\nA chart with many different colors or shapes may result in a\ncluttered visualization which is difficult to read. You can limit\nthe number of categories in your chart by binning or limiting your data.\n\nScatter charts show an individual marker for each data point, so\nthey work better with smaller result sets. Outliers and extreme data\npoints are easy to identify.\nConsider using a scatter chart to display:\n\nTemperature data for selected cities\nVolume of sales data for selected retail outlets\nPopulation density figures across several countries\n\n\n\nExamples\u00b6\n\nAirBnB Rentals\u00b6\nThe following scatter chart uses a database of information about\nAirBnB rental properties in Sydney, Australia. The X axis shows the\nreview ratings given to individual properties, with the price per\nnight displayed along the Y axis. The query filter restricts the result set to properties with\nat least 100 reviews.\nThe chart shows that lower-priced properties have a wider range of\nreview scores, while higher-priced properties have a smaller score\nrange with generally higher scores.\n\n\n\n\n\nMovies with the Most Award Nominations\u00b6\nThe following more complex scatter chart uses a database with movie\ndata compiled from IMDb and Rotten Tomatoes. The chart shows the\nTomatoMeter rating (ranging from 0 to 100) of movies with at least\none award nomination. Each data point marker represents one movie.\nThe X axis shows the movie\u2019s TomatoMeter rating and the Y axis shows\nthe number of award nominations the movie received.\nThe query filter restricts the result\nset to exclude marginal data points.\nThe chart uses the Color and Shape encoding\nchannels to shed further light on the types of movies which receive\nthe most award nominations. The color of each data point shows the\nMPAA (Motion Picture Association of America) rating the movie received.\nThe chart uses the Shape encoding channel to indicate the year in\nwhich the movie was released, and bins the\ndata to place each movie into a time range, with each bin covering\n25 years. Without the bins, there would be a different shape for every\nyear, which would make the chart too noisy to read.\n\n\n\n\n\n",
            "preview": "Scatter charts plot data with individual data points placed along the X and Y axes. Optionally, the data point representations may use shapes and colors to display additional data dimensions.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/"
            ]
        },
        {
            "slug": "v0.12/chart-type-reference/text-charts/index.html",
            "title": "Text Charts \u2014 Charts Manual 0.12",
            "headings": [
                "Text Charts"
            ],
            "text": "\nText Charts\u00b6\n\n\nData Table\nNumber Chart\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/data-table/"
            ]
        },
        {
            "slug": "v0.12/chart-types/index.html",
            "title": "Chart Types \u2014 Charts Manual 0.12",
            "headings": [
                "Chart Types"
            ],
            "text": "\nChart Types\u00b6\nThe following pages describe the specific construction and use cases\nfor each chart type in MongoDB Charts:\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n\nColumn and Bar Charts\nLine and Area Charts\nGrid Charts\nHeatmap\nScatter Chart\n\n\nDonut Chart\nText Charts\nData Table\nNumber Chart\n\n\n\n\n",
            "preview": "The following pages describe the specific construction and use cases for each chart type in MongoDB Charts:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/scatter-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/data-table/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/grid-charts/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/line-area-chart/"
            ]
        },
        {
            "slug": "v0.12/customize-charts/index.html",
            "title": "Customize Charts \u2014 Charts Manual 0.12",
            "headings": [
                "Customize Charts"
            ],
            "text": "\nCustomize Charts\u00b6\nMongoDB Charts provides various options to customize the format and display\nof your visualizations. You can use these options to display your data\nin the proper format, show data labels to relay precise measurements,\nand many other formatting techniques.\nMongoDB Charts provides three types of customization options:\n\nGeneral Customizaton Options\nGeneral Customization Options modify\nhigh-level aspects of the chart such as its colors and data labels.\nThese options affect the overall look and format of your data.\nField-Level Options\nField-Level Options modify how\nCharts renders data fields, such as specific formatting\nfor numbers and dates. These options apply to individual data fields\nencoded into your chart, rather than the\nchart as a whole. The field-level customization options available\ndepend on the data type and\nchannel type of the field you are\ncustomizing.\nValue Axis Options\nValue Axis Options modify the\nchart\u2019s axes, such as their scale and their minimum and maximum\nvalues. These options only affect the chart\u2019s axes, and not how\nCharts formats data points in the visualization.\n\nTo customize a chart, click the Customization tab above the\nencoding channels in the\nChart Builder:\n\n\n\nYour chart automatically updates as you modify customization options.\n\n\nGeneral Customization Options\nField-Level Options\nValue Axis Options\n\n\n",
            "preview": "MongoDB Charts provides various options to customize the format and display of your visualizations. You can use these options to display your data in the proper format, show data labels to relay precise measurements, and many other formatting techniques.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/customize-charts/general-customization/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/field-level-options/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/value-axis-options/"
            ]
        },
        {
            "slug": "v0.12/customize-charts/field-level-options/index.html",
            "title": "Field-Level Options \u2014 Charts Manual 0.12",
            "headings": [
                "Field-Level Options",
                "Field Label Override",
                "Number Formats",
                "Number Format Options",
                "Number Format Presets",
                "Date Format and Time Zone",
                "Date and Time Formatting",
                "Convert Time Zone"
            ],
            "text": "\nField-Level Options\u00b6\n\nOn this page\n\nField Label Override\nNumber Formats\nDate Format and Time Zone\n\n\nWithin the customization tab, you can modify how MongoDB Charts displays\ndata fields in your visualization. The customization options\navailable depend on the data type of the value you are customizing.\n\n\n\n\nField Label Override\u00b6\nWhen you encode a field in the\nChart Builder, MongoDB Charts automatically\ngenerates a label for the field in the visualization. Charts\ngenerates the label based on the field name and the type of\naggregation applied to the field if appropriate. You can use this\ncustomization option to override the default label to provide more\ninsightful or descriptive field labels.\nTo override a field label:\n\nNavigate to the Customization tab in the\nChart Builder.\nClick the field whose label you wish to modify to expand its\ncustomization options.\nSet the Label Override toggle switch to On.\nEnter the new desired field label in the text box.\n\nThis option affects all places in the chart the field label appears,\nincluding axis titles, legends, tooltips, etc. Your chart\nautomatically updates to show the new label. This option is available\non all chart types.\n\n\nNumber Formats\u00b6\nYou can use these customization options to specify how Charts\nformats numbers in your data fields. These options are available on all\nchart types.\n\nNumber Format Options\u00b6\nMongoDB Charts provides the following options for formatting numbers. You can\nuse any combination of these options to customize your chart:\n\n\n\n\n\n\nOption\nDescription\n\n\n\nDecimals\nSpecifies to how many decimal places Charts rounds each\ndata value or label. If you specify this option, Charts\ndisplays all values with the specified number of decimal\nplaces, either by rounding decimals or adding zeroes to whole\nnumbers. If you do not specify this option, Charts\ndisplays values in their original form with no modifications.\n\nMultiplier\nSpecifies a number by which Charts multiplies each data\nvalue or label. This option is useful for scaling data, such\nas showing values in terms of thousands or millions. You can\nalso use this option to convert measurements or currencies to\ndifferent units by multiplying your values by the appropriate\nfactor.\n\nPrefix\nSpecifies a string which Charts prepends to each data\nvalue or label. This option is useful for formatting currencies\nby prepending characters such as $ or \u20ac.\n\nSuffix\nSpecifies a string which Charts appends to the end of\neach data value or label. This option is useful for providing\ncontext to your data by appending units, such as \u00b0F or\nkm/h.\n\n\n\n\n\nNumber Format Presets\u00b6\nCharts provides the following preset customizations to format\nnumbers for common use cases:\n\n\n\n\n\n\nOption\nDescription\n\n\n\nPercentage\nMultiplies each value by 100 and appends a % sign to each\nvalue. Use this option to convert decimal values to percentages.\n\nDollars\nRounds each value to two decimal places and prepends a\n$ to each value.\n\nThousands\nDivides each value by 1,000 and appends a K to each\nvalue.\n\nMillions\nDivides each value by 1,000,000 and appends an M to each\nvalue.\n\n\n\nIf you select a preset, you can modify any of its attributes to\nfurther refine your numeric displays. Once you modify a preset\u2019s\nattribute, Charts changes the preset selection in the dropdown\nto Custom.\n\n\n\nDate Format and Time Zone\u00b6\nYou can customize how MongoDB Charts displays date fields, as well\nas convert dates to a specified time zone.\n\n\n\nTo customize date formats and configure time zones:\n\nNavigate to the Customization tab in the\nChart Builder.\nClick the field whose date format and time zone you wish to modify.\nConfigure the Date and Time Formatting and\nConvert Time Zone settings as desired.\n\n\nDate and Time Formatting\u00b6\nUse this option to specify how Charts formats\ndates and times. Click the dropdowns in this customization section to\nselect a preset format provided by Charts. Charts\nprovides one dropdown for selecting a date format and one dropdown for\nselecting a time format.\n\nNote\nDepending on the binning type selected for\nthe field, Charts may not show both date formatting\ndropdowns. Also, the options in the dropdowns change depending on\nthe binning type selected.\nFor more information, see the\nConsiderations section.\n\nYou can also use the input box below the dropdowns to specify a custom\ndatetime format. The following table shows how to create custom datetime formats:\n\n\n\n\n\n\n\nSymbol\nMeaning\nExample\n\n\n\nYYYY\nFull year.\n2018\n\nYY\nLast two digits of year.\n18\n\nMMMM\nFull month as letters.\nNovember\n\nMMM\nAbbreviated month as letters.\nNov\n\nMM\nMonth as numbers, with leading a zero if applicable.\n08\n\nM\nMonth as numbers with no leading zero.\n8\n\nDDDD\nDay of the year, with leading zeroes if applicable.\n076\n\nDDD\nDay of the year with no leading zeroes.\n76\n\nDD\nDay of the month with a leading zero if applicable.\n05\n\nD\nDay of the month with no leading zero.\n5\n\nHH\nHour with a leading zero if applicable. Uses 24-hour time\nformat.\n18\n\nH\nHour with no leading zero.\n8\n\nA\nAdds the applicable AM or PM period to the format. Uses\n12-hour time format.\nPM\n\nmm\nMinute with a leading zero if applicable.\n03\n\nm\nMinute with no leading zero.\n3\n\nss\nSecond with a leading zero if applicable.\n09\n\ns\nSecond with no leading zero.\n9\n\n\n\n\nExample\nConsider a timestamp of November 8th, 2018 1:30:58 PM. The following table shows how various custom date filters would output\nthe date:\n\n\n\n\n\n\nCustom Format\nOutput\n\n\n\nYYYY/MM/DD\n2018/11/18\n\nMMM YY\nNov 18\n\nDDD, YYYY HH:mm:ss\n322, 2018 13:30:58\n\nDD-MMM H:mm:ss A\n08-Nov 1:30:58 PM\n\n\n\n\nOnce you modify a preset\u2019s attribute, Charts\nchanges the preset selection in the dropdown to Custom.\n\nConsiderations\u00b6\nIf you bin your timeseries data, you\ncannot specify a unit of time in your custom format with smaller\ngranularity than your bin size. For example, if you bin data\nby Month, you cannot specify days, hours, minutes, or\nseconds in your custom format because Charts does not show\nthese values in the visualization. If you enter an invalid custom\ndatetime format, Charts highlights the format input box in red.\nSpecifying the Periodic option further limits valid\nformatting options. For example, if you bin data by Month,\nyou can only specify year in your date format if you disable the\nPeriodic option. If you enable the Periodic\noption, you cannot specify year because Charts only\ndisplays the month in the field.\n\n\n\nConvert Time Zone\u00b6\nBy default, MongoDB Charts displays timeseries data exactly how it appears\nin the original dataset, which is assumed to be in\nUTC. You can use this\ncustomization option to convert the time zone in which Charts\ndisplays the data to best fit the location of the data or the\nviewers of the chart.\nTo enable this option:\n\nSet the Convert Time Zone toggle switch to\nOn.\nUse the dropdown below the toggle to select the desired time zone\nfor your data.\n\n\nNote\nWhen you convert time zones, Charts automatically accounts\nfor Daylight Savings Time when required.\n\nYou can search the dropdown to easily filter for the desired time zone.\nType into the search bar above the dropdown to see all matching time\nzones.\n\n\n",
            "preview": "Within the customization tab, you can modify how MongoDB Charts displays data fields in your visualization. The customization options available depend on the data type of the value you are customizing.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/"
            ]
        },
        {
            "slug": "v0.12/customize-charts/general-customization/index.html",
            "title": "General Customization Options \u2014 Charts Manual 0.12",
            "headings": [
                "General Customization Options",
                "Show or Hide Data Markers on a Line Chart",
                "Applicable Chart Types",
                "Show or Hide Data Value Labels",
                "Applicable Chart Types",
                "Show or Hide Data Category Labels on Donut Charts",
                "Color Palette Customization",
                "Applicable Chart Types"
            ],
            "text": "\nGeneral Customization Options\u00b6\n\nOn this page\n\nShow or Hide Data Markers on a Line Chart\nShow or Hide Data Value Labels\nShow or Hide Data Category Labels on Donut Charts\nColor Palette Customization\n\n\nMongoDB Charts provides general customization options which modify the\nvisualization at a high level, rather than individual pieces of the\nvisualization.\n\n\n\n\nShow or Hide Data Markers on a Line Chart\u00b6\nYou can dictate whether Charts displays visible data markers\nwhich represent individual data points on line charts. Enabling this\noption makes it easier to see exactly where your data points lie\nalong a line. Hovering over these markers shows the exact data values\nin a tooltip, making it easier view precise measurements.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Markers toggle switch to the desired setting.\n\nTo customize the formatting of the number in the data marker tooltip,\nmodify the Number Formatting\nsettings for the relevant field.\n\nApplicable Chart Types\u00b6\nThis customization option is available on the following chart types:\nDiscrete Line,\nContinuous Line,\nDiscrete Area, and\nContinuous Area.\n\n\n\nShow or Hide Data Value Labels\u00b6\nYou can dictate whether Charts displays text labels for your\ndata values. Data value labels show the exact values of the data points\nin the visualization.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Value Labels toggle switch to the desired\nsetting.\n\nTo customize the formatting of the number in the data label, modify\nthe Number Formatting settings for\nthe relevant field.\n\nApplicable Chart Types\u00b6\nThis customization option is available on the following chart types:\nGrouped Column,\nColored Column,\nGrouped Bar,\nColored Bar, Discrete\nLine, Continuous Line,\nDiscrete Area,\nContinuous Area, and\nDonut.\n\n\n\nShow or Hide Data Category Labels on Donut Charts\u00b6\nYou can dictate whether Charts displays category labels for\nsegments in your donut charts. Category labels display the category\ncorresponding to each donut section in text, which eliminates\nthe need to hover over a section or rely on the segment color to\ndetermine its category.\nTo set this option:\n\nNavigate to the Customization tab in the\nChart Builder.\nIn the General Customization section, set the\nData Category Labels toggle switch to the desired\nsetting.\n\n\n\nColor Palette Customization\u00b6\nPalette customization allows you to select custom colors for your\nchart. To enable color customization, select the\nCustomization tab of the Chart Type column.\nA toggle switch labeled Custom Color Palette appears in\nthe General Customization section.\nMost chart types allow you to customize individual colors in their\npalette. The heatmap and colored bar\nand column types use a gradient color scale,\nwhile other types use a custom color picker. The gradient color\nscale allows you to choose from a set of pre-defined gradients.\n\n\n\nOther chart types use a color picker for selecting a customized\nset of colors.\n\n\n\nFor chart types which use a color picker for customization,\neach numbered color swatch corresponds to a data series on the chart.\nSelect a color swatch to modify the color of its corresponding\ndata series. You can select a new color with a color slider, by\nentering a hex value, by entering RGB values, or by choosing a\npredefined color. You can also drag and drop the existing color\nselections if you want to use the current color choices but change\nwhich color goes with which data series.\n\nNote\nBy default, the custom color picker shows color swatches for 10\ndata series, but you can only modify as many of the swatches as\nyou have data series. The palette can expand to show 20 data series.\nCharts will use as many colors as needed to show your chart,\nstarting from the first color. For example, if you have only two\ndata series in your chart, only the colors numbered 1 and\n2 have any effect on your chart.\n\nTo close the color customization tool, click somewhere outside it.\nTo revert the entire chart to its default colors, set the\nCustom Color Palette toggle switch back to Off.\n\nApplicable Chart Types\u00b6\nThis customization option is available for all chart types except\nText.\n\n\n",
            "preview": "MongoDB Charts provides general customization options which modify the visualization at a high level, rather than individual pieces of the visualization.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/heatmap/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/text-charts/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/field-level-options/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/donut-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/line-area-chart/"
            ]
        },
        {
            "slug": "v0.12/customize-charts/value-axis-options/index.html",
            "title": "Value Axis Options \u2014 Charts Manual 0.12",
            "headings": [
                "Value Axis Options",
                "Max and Min",
                "Logarithmic Scale",
                "Logarithmic Scale Considerations",
                "Label Override"
            ],
            "text": "\nValue Axis Options\u00b6\n\nOn this page\n\nMax and Min\nLogarithmic Scale\nLabel Override\n\n\nMongoDB Charts offers several customization options which modify the\nrepresentation of a chart\u2019s X and Y value axes without affecting the\nformatting of the data points in the visualization.\n\n\n\n\nNote\nA value axis shows a continuous scale of values. Charts such as\nBar/Column and\nDiscrete Line/Area have just one\nvalue axis. Continuous line and area\nand scatter charts have two value\naxes.\n\n\nMax and Min\u00b6\nThe Max and Min value axis options allow\nyou to specify maximum and minimum values to display on a chart.\nAny data points with values outside the specified limits appear at\nthe boundaries of the chart. Setting a maximum display value\nis useful for removing outlying data from the chart and\nallowing the viewer to focus on more relevant information.\n\nNote\nChanging the minimum for bar and column charts from the default\nof zero is not recommended. Doing so means the length of the\nbars is no longer proportional to the data point values.\n\nAvailable for the following chart types: all Bar/Column except 100% stacked,\nDiscrete and Continuous Line, Discrete and Continuous Area, Scatter\n\n\nLogarithmic Scale\u00b6\nToggling the Logarithmic Scale switch to the\nOn position causes your chart\nto use a logarithmic scale instead of a linear scale for data\nvalues. Using a logarithmic scale is helpful for showing\nthe percentage change from one value to the next and for charts\nwith a large value differential from smallest to largest. Data sets\nsuch as stock market movements, earthquake strength measurements, and\nglobal population sizes are good use cases for a logarithmic scale\nchart.\n\nLogarithmic Scale Considerations\u00b6\n\nUse the Logarithmic Scale option only with chart data\nthat consists of either all positive values or all negative values.\nIf the chart includes a mix of positive and negative values, or if\nit includes the value 0, the chart will not render.\nBar and column charts normally have a baseline of 0, but\nlogarithmic scale charts have a baseline of 1 because\nlog(0) is undefined. As a result, charts with data points between\n0 and 1 do not render well. You can mitigate this effect by\nsetting the axis minimum of the chart to\na value greater than zero but smaller than the lowest value in the\ndata set.\n\nAvailable for the following chart types: Grouped and\nColored Bar/Column, Discrete and\nContinuous Line, Scatter\n\n\n\nLabel Override\u00b6\nThe Label Override field allows you to create a\ncustom axis label. Custom labels can be more descriptive\nthan the default labels and help chart viewers quickly grasp\nthe significance of chart data.\nThe Label Override customization option is available on the X\nor Y value axis for charts in which the author has encoded multiple\ndata series by mapping more than one field on a given axis.\nTo customize the axis label for charts that have a single field mapped,\nuse the Label Override option within that field\u2019s customization\noptions.\nAvailable for the following chart types: Bar/Column, Line,\nArea, Scatter\n\n",
            "preview": "MongoDB Charts offers several customization options which modify the representation of a chart\u2019s X and Y value axes without affecting the formatting of the data points in the visualization.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/scatter-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/line-area-chart/"
            ]
        },
        {
            "slug": "v0.12/dashboard-permissions/index.html",
            "title": "Dashboard Permissions \u2014 Charts Manual 0.12",
            "headings": [
                "Dashboard Permissions",
                "View Dashboard Permissions",
                "Modify Dashboard Permissions",
                "Specific User Permissions",
                "Access for All Users"
            ],
            "text": "\nDashboard Permissions\u00b6\n\nOn this page\n\nView Dashboard Permissions\nModify Dashboard Permissions\n\n\nDashboard permissions dictate which MongoDB Charts users have access to the\ndashboard and the actions they can perform on the dashboard. The\nfollowing dashboard permissions are available:\n\n\n\n\n\n\nPermission\nDescription\n\n\n\nViewer\nCan open a dashboard and view charts provided they have\n(at minimum) the read role on the data source used\nby the charts on the dashboard. If the user does not have the\nread role on a chart\u2019s corresponding data source, the\nchart will not render in the dashboard.\nViewers cannot make any modifications to the dashboard.\n\n\nAuthor\nCan add, modify, or delete charts, change dashboard layout, and\nrename the dashboard.\n\nOwner\nHas all privileges of Author and can also\nmanage permissions on the\ndasbhoard and delete the dashboard.\nThe creator of the dashboard automatically has the\nOwner permission. The creator cannot be removed from the\nlist of dashboard users and their Owner permission cannot be\nmodified.\n\n\n\n\n\nNote\nIt is also possible to have no permissions on a dashboard, meaning\nit will not appear on your dashboards tab.\nNewly-created dashboards are not shared by default, so no one except\nthe dashboard Owner can view the dashboard until more\nuser permissions are added.\n\n\nView Dashboard Permissions\u00b6\nTo view permissions for a specific dashboard, hover over the icon\nnext to the dashboard\u2019s Access button. A tooltip appears\ndescribing what permission you have on the dashboard, who the owner\nof the dashboard is, and who else has access to the dashboard.\nThe following table lists the possible icons and their associated\npermissions:\n\n\n\n\n\n\nIcon\nDescription\n\n\n\n\n\neye icon\n Eye Icon\nYou have Viewer permission.\n\n\n\nglobe icon\n Globe Icon\nYou have either Author or Owner permission and\nEveryone has some level\nof access to the dashboard.\n\n\n\nusers icon\n Group Icon\nYou have either Author or Owner permission and\nadditional users have\nsome level of access to the dashboard.\n\n\n\nlock icon\n Lock Icon\nYou have Owner permission and no other user has\naccess.\n\n\n\n\n\nModify Dashboard Permissions\u00b6\n\nImportant\nTo modify a dashboard\u2019s permissions, you\nmust have the Owner role on that dashboard.\n\nTo modify dashboard permissions, either click the click the\npermission icon at the top-right of\nthe dashboard from the Dashboards tab:\n\n\n\nOr click the Access button at the top-right of the\ndashboard within the specific dashboard view:\n\n\n\nWith the Dashboard Permissions dialog open, refer to the\nfollowing sections for instructions on granting a\nspecific user permissions on a\ndashboard and granting\nall users on your MongoDB Charts deployment permissions on a dashboard:\n\nSpecific User Permissions\u00b6\nTo give specific users permissions on the dashboard:\n\nSearch for the desired user using the search bar directly above\nwhere the dashboard users are listed. You can search for users\nby their username or email address.\nClick the desired user to add them to the permissions list.\nUse the dropdown to the right of the user\u2019s name to assign the\nappropriate permission.\nRepeat steps 1-3 for each user you would like to provide dashboard\npermissions for.\nClick Apply Changes.\n\nTo remove permissions for a user, click the trash can icon to the right\nof the user\u2019s name.\n\n\nAccess for All Users\u00b6\nTo allow access to the dashboard for all users on your MongoDB Charts\ndeployment:\n\nToggle the switch on the right-side of the Everyone user\nto On.\n\nSelect the permission to apply to all MongoDB Charts\nusers.\n\nNote\nIf permissions are assigned to both Everyone and a\nspecific user, the user\u2019s specific permissions take precedence\nover the permissions set to Everyone.\nFor example, if Everyone has the Author\npermission and a specific user Alice has the Viewer\npermission, Alice\u2019s effective permission is Viewer.\n\n\nClick Apply Changes.\n\n\n\n\n",
            "preview": "Dashboard permissions dictate which MongoDB Charts users have access to the dashboard and the actions they can perform on the dashboard. The following dashboard permissions are available:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/dashboards/",
                "http://docs.mongodb.org/manual/reference/built-in-roles/",
                "https://docs.mongodb.com/charts/v0.12/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.12/dashboards/index.html",
            "title": "Dashboards \u2014 Charts Manual 0.12",
            "headings": [
                "Dashboards",
                "Dashboards Tab",
                "Create a New Dashboard",
                "Refresh Dashboard Data",
                "Manually Refresh Dashboard Data",
                "Configure Auto Refresh Settings",
                "Disable and Enable Auto Refresh",
                "Fullscreen View"
            ],
            "text": "\nDashboards\u00b6\n\nOn this page\n\nDashboards Tab\nCreate a New Dashboard\nRefresh Dashboard Data\nFullscreen View\n\n\nDashboards are a collection of charts assembled to create a single\nunified display of your data. Each chart shows data from a\nsingle MongoDB collection or view, so dashboards are essential to\nattain insight into multiple focal points of your data in a single\ndisplay.\n\nDashboards Tab\u00b6\nThe Dashboards tab shows all dashboards you have access to\nview. For more information on dashboard permissions in MongoDB Charts, see\nthe Dashboard Permissions page.\n\n\n\nEach dashboard shows the following information:\n\nTitle\nDescription\nA preview of the first three charts in the dashboard, including the\nchart title and type\nWhen the dashboard was last modified\n\nBy default, the most recently modified dashboards are shown first in\nthe list. You can change the sort order by using the\nSort By dropdown menu.\n\n\nCreate a New Dashboard\u00b6\nTo create a new dashboard:\n\nFrom the Dashboards tab, click the\nNew Dashboard button.\nIn the New Dashboard dialog, enter a title for your\ndashboard.\n(Optional) Enter a description for your dashboard.\nClick Create.\n\nAfter after clicking the Create button you are taken\nto the page for your newly created dashboard, where you are prompted to\nadd the first chart to your dashboard:\n\n\n\n\n\nRefresh Dashboard Data\u00b6\nYou can refresh dashboard data to update all charts on the dashboard\nwith the most current data from their respective data sources. When\nMongoDB Charts loads charts on a dashboard, it does not consistently query\nthe data source for each chart. Instead, MongoDB Charts queries the data\nsource when the dashboard first loads, and that data\nis stored in the browser cache and used to render the charts.\nMongoDB Charts provides options to both manually refresh dashboard data and\nconfigure the dashboard to automatically refresh at a specified time\ninterval.  These options allow you to control how current the data\ndisplayed on your dashboard is. By default, when you first create a\ndashboard, it is configured to refresh its data every hour. The\nAuto text next to the \n\nsync icon\n icon signifies that\nauto refresh is enabled.\n\nManually Refresh Dashboard Data\u00b6\nTo manually refresh dashboard data, first select a dashboard from the\nDashboards tab, then click the \n\nsync icon\n button at the\ntop-right of the dashboard.\n\n\nConfigure Auto Refresh Settings\u00b6\nYou can configure auto refresh settings to change the interval at which\nthe dashboard data is refreshed. The dashboard shows the time its data\nwas last updated and when the next update will occur at the top-right\nof the view.\nTo configure auto refresh settings for a dashboard:\n\nFrom the dashboard view, click the arrow next to the \n\nsync icon\n\nbutton and click Auto Refresh Settings.\nSelect the desired refresh interval.\nClick Save.\n\n\nNote\nAuto refresh settings are stored in the local browser state.\nSettings dictating whether auto refresh is enabled and its\nconfigured interval are not persisted with the dashboard or\nshared with other users.\n\n\n\nDisable and Enable Auto Refresh\u00b6\nTo disable auto refresh, click the arrow next to the \n\nsync icon\n\nbutton and click Disable Auto Refresh.\nTo enable auto refresh, click the arrow next to the \n\nsync icon\n\nbutton and click Enable Auto Refresh.\n\n\n\nFullscreen View\u00b6\nMongoDB Charts provides a fullscreen view for dashboards. In this view,\nMongoDB Charts hides the main navigation bar and exapands the dashboard to\nshow the title, description, time of last modification, and charts in\nthe entire space of the screen.\nTo open a dashboard in fullscreen view, first select a dashboard from\nthe Dashboards tab, then click the expanding arrows at the\ntop-right of the dashboard:\n\n\n\n\nNote\nYou can still remove, resize, rearrange, and access editing for charts in fullscreen view by hovering\nover the desired chart.\nAdditionally, in fullscreen view you can still configure\nauto-refresh settings and manually refresh chart data using the\nrefresh button.\n\nTo exit fullscreen view, either click the contracting arrows at the\ntop-right of the dashboard or press the escape key.\n\n\nManage Existing Dashboards\nDashboard Permissions\n\n\n\n",
            "preview": "Dashboards are a collection of charts assembled to create a single unified display of your data. Each chart shows data from a single MongoDB collection or view, so dashboards are essential to attain insight into multiple focal points of your data in a single display.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.12/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.12/data-source-permissions/index.html",
            "title": "Data Source Permissions \u2014 Charts Manual 0.12",
            "headings": [
                "Data Source Permissions",
                "View Data Source Permissions",
                "Set Data Source Permissions",
                "Specific User Access",
                "Access for All Users"
            ],
            "text": "\nData Source Permissions\u00b6\nData source permissions dictate which Charts\nusers have access to the data source and the actions they can perform\non the data source. The following data source permissions are\navailable:\n\n\n\n\n\n\nPermission\nDescription\n\n\n\nReader\nCan access the data source by viewing existing charts or\ncreating new charts which use the data source.\n\nManager\nHas all privileges of Reader and can also\nmodify the alias and\nmodify the connection URI of a data\nsource.\n\nOwner\nHas all privileges of Manager and can also\nmanage permissions on the\ndata source and remove the data source.\nThe creator of the data source automatically has the\nOwner role. The creator cannot be removed from the list of\ndata source users and thier Owner role cannot be modified.\n\n\n\n\n\nView Data Source Permissions\u00b6\nTo view permissions for a specific data source, navigate to the\nData Sources tab and hover over the\ndata source\u2019s Access button. A tooltip describing the data\nsource permissions will appear. The tooltip displays your permissions,\nthe owner of the data source, and all other users who have access.\nThe following table lists the possible icons and their associated\npermissions:\n\n\n\n\n\n\nIcon\nDescription\n\n\n\n\n\neye icon\n Eye Icon\nYou have Reader permission.\n\n\n\nglobe icon\n Globe Icon\nYou have either Manager or Owner permission and\nEveryone has some level\nof access to the data source.\n\n\n\nusers icon\n Group Icon\nYou have either Manager or Owner permission and\nadditional users have\nsome level of access to the data source.\n\n\n\nlock icon\n Lock Icon\nYou have Owner permission and no other user has\naccess.\n\n\n\n\n\nSet Data Source Permissions\u00b6\nYou can set data source permissions when you first\nadd a data source, or you can\nmodify permissions on a data\nsource which has already been created.\nRefer to the following sections for instructions on granting\nspecific users permissions on a\ndata source and granting\nall users on your MongoDB Charts deployment permissions on a data source:\n\nSpecific User Access\u00b6\nTo grant specific users permissions on your data source:\n\nSearch for the desired user using the search bar directly above\nwhere the data source users are listed. You can search for users\nby their username or email address.\n\nClick the desired user to add them to the permissions list.\n\nUse the dropdown to the right of the user\u2019s name to assign the\nappropriate role.\n\n\n\n\nRepeat steps 1-3 for each user you wish to grant data source access.\n\n\nTo remove access for a user you have added, click the trash can icon\nto the right of the user\u2019s name.\n\n\nAccess for All Users\u00b6\nIn addition, to allow access to the dashboard for all users on your\nMongoDB Charts deployment:\n\nToggle the switch on the right-side of the Everyone user\nto On.\n\nSelect the role to apply to all MongoDB Charts\nusers.\n\nNote\nIf permissions are assigned to both Everyone and a\nspecific user, the user\u2019s specific permissions take precedence\nover the permissions set to Everyone.\nFor example, if Everyone has the Manager\nrole and a specific user Alice has the Reader role,\nAlice\u2019s effective permission level is Reader.\n\n\n\n\n\n",
            "preview": "Data source permissions dictate which Charts users have access to the data source and the actions they can perform on the data source. The following data source permissions are available:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/"
            ]
        },
        {
            "slug": "v0.12/data-sources/index.html",
            "title": "Data Sources \u2014 Charts Manual 0.12",
            "headings": [
                "Data Sources",
                "Data Sources View",
                "Filter Data Sources",
                "Add a Data Source",
                "Modify a Data Source",
                "Modify Data Source Alias",
                "Modify Deployment Connection URI",
                "Modify Data Source Permissions",
                "Remove a Data Source"
            ],
            "text": "\nData Sources\u00b6\n\nOn this page\n\nData Sources View\nFilter Data Sources\n\n\nAdd a Data Source\nModify a Data Source\nModify Data Source Alias\nModify Deployment Connection URI\nModify Data Source Permissions\n\n\nRemove a Data Source\n\n\nData sources in MongoDB Charts reference a collection\nor view in your MongoDB\ndeployment. When building a chart, you will need to specify the data\nsource that the chart uses.\nTo view, add, or remove data sources, click Data Sources on\nthe top navigation bar.\n\nData Sources View\u00b6\nThe Data Sources view displays existing data sources that\nthe currently logged-in user has permission to view. The data sources\nare displayed in a tabular format with the following columns:\n\n\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\nDeployment\nThe MongoDB deployment containing the source database and\ncollection. Identified by the hostname and port of the first host\nin the Connection String URI.\nTo modify a deployment\u2019s connection URI, see the\nModify a Data Source section.\n\n\nDatabase\nThe database containing the source collection or view.\n\nCollection\nThe collection or view from where Charts retrieves data.\n\nAlias\nOptional. The display name of the data source used by the\nChart Builder. Providing an Alias may result in a\nshorter and more identifiable name when selecting a data source\nin the chart builder.\nTo modify the Alias for a data source, see the\nModify a Data Source\nsection.\n\n\nLast modified\nThe date the data source was last modified.\n\nPermissions\nThe icon next to the Access button denotes the\npermissions you have on the data\nsource. For details on the various data source permissions, see\nData Source Permissions.\nTo modify the permissions for a data source, see the\nModify a Data Source\nsection.\n\n\n\n\n\nNote\nYou can sort data sources by any of the columns by clicking on the\ncolumn header.\n\n\nFilter Data Sources\u00b6\nTo search for specific data sources, use the search bar at the\nupper right corner of the Data Sources view. You can search\nby Deployment, Database,\nCollection, or Alias.\nAdditionally, you can use the dropdown to the left of the search bar to\nshow either all data sources on your MongoDB Charts deployment, or only data\nsources for which you have the Owner permission. For more\ninformation on data source permissions, see\nData Source Permissions.\n\n\n\nAdd a Data Source\u00b6\n\nFrom the Data Sources view, click the\nNew Data Source button.\n\nEnter the Connection String URI of the MongoDB deployment to which\nyou want to connect.\n\nImportant\nMongoDB Charts requires that MongoDB deployments run version 3.4 or\nlater.\nIf your MongoDB deployment is running with\nauthentication\nenabled, include a database user\u2019s credentials in the connection\nstring URI. Anonymous, SCRAM, and LDAP authentication mechanisms\nare supported. The database user must have\nread permissions on\nthe collections selected in the following step.\nIf the authenticated user does not have the\nlistDatabases privilege on the\ndeployment specified in the URI, they can still add the data\nsource by specifying the desired database as part of the URI. In\nthis case, the URI takes the following form:\n\n\n\ncopy\n\nmongodb://[username:password@]<server>:<port>/<database>\n\n\n\nIf your deployment is running with TLS/SSL enabled, add the\nssl=true option to the URI:\n\n\n\ncopy\n\nmongodb://[username:password@]<server>:<port>/<database>?ssl=true\n\n\n\nFor more information, see\nConfigure TLS/SSL for Data Sources.\n\n\nClick Connect.\n\nSelect the collections from which you wish to create data sources.\nCharts creates a separate data source for each selected\ncollection.\n\nClick Set Permissions.\n\nSet the permissions for the data source.\nYou can search for specific users by name or email address using\nthe search bar.\n\nClick Publish Data Source.\n\nNote\nIf you selected multiple collections for your data source in step\n4, the data source permissions you\nselect are applied to all of the selected collections when you\npublish your data source. If you wish to apply different\npermissions to individual collections that you have selected, you\nwill need to edit those data sources after publishing.\n\n\n\nYou will see your newly added data source listed in the\nData Sources view.\n\n\nModify a Data Source\u00b6\nMongoDB Charts users can modify certain properties of a data source provided\nthey have appropriate permissions on the\ntarget data source. The following data source properties may be\nmodified after a data source has been created:\n\nAlias\nDeployment Connection URI\nPermissions\n\n\nModify Data Source Alias\u00b6\nA data source Manager or Owner can modify the Alias\nof a data source by hovering over the row\u2019s Alias field,\nthen clicking either Add Alias or the edit button\n(pencil icon). Click the green check mark to save the alias.\n\n\nModify Deployment Connection URI\u00b6\nA datasource Manager or Owner can modify the Deployment\nConnection String URI of a\ndata source. This lets you seamlessly change the MongoDB cluster\nfrom which the data source pulls its data, or change connection\ndetails such as authentication passwords and SSL options.\n\nFrom the Data Sources view, click the ellipsis\n(\u2026) button on the right-hand side of the data source\nyou want to modify.\n\nClick Edit Deployment Connection.\n\nIn the Edit Deployment Connection dialog, enter the new\nconnection URI in the input.\n\nClick Test Connection to ensure you have supplied a\nvalid connection URI.\n\nImportant\nBelow the connection URI input, MongoDB Charts lists all of the\ndata sources currently sharing the same deployment connection. If\nthe MongoDB deployment corresponding to the updated connection\nstring URI does not contain all collections currently in use,\ncharts using those data sources must be reconfigured using a\ndifferent data source or deleted before you can update the\nconnection URI.\n\n\n\n\n\nModify Data Source Permissions\u00b6\nA data source Owner can add, modify, and remove\nuser permissions on a data source.\n\nFrom the Data Sources view, click the Access\nbutton in the Permissions column for the data source you\nwant to modify permissions.\nPerform the desired permission changes for the data source. Refer\nto the Data Source Permissions page for\ndetails on the permissions available and instructions on\nsetting the permissions.\nClick Apply Changes.\n\n\n\n\nRemove a Data Source\u00b6\n\nImportant\nTo remove a data source, you must have the Owner\npermission on that data source.\n\nTo remove a data source:\n\nFrom the Data Sources view, click the ellipsis\n(\u2026) button on the right-hand side of the data source\nyou want to delete.\nClick Delete Data Source.\nClick Delete Data Source again in the dialog to confirm\ndeletion.\n\n\nImportant\nAny charts using the deleted data source will need to be\nreconfigured using a different data source or deleted.\n\n\n\nData Source Permissions\n\n\n\n",
            "preview": "Data sources in MongoDB Charts reference a collection or view in your MongoDB deployment. When building a chart, you will need to specify the data source that the chart uses.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/administration/configure-ssl-data-sources/",
                "http://docs.mongodb.org/manual/reference/connection-string",
                "http://docs.mongodb.org/manual/reference/built-in-roles/",
                "https://docs.mongodb.com/charts/v0.12/data-source-permissions/",
                "https://docs.mongodb.com/manual/core/databases-and-collections/",
                "http://docs.mongodb.org/manual/reference/privilege-actions/",
                "https://docs.mongodb.com/manual/core/views/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "http://docs.mongodb.org/manual/core/authentication/"
            ]
        },
        {
            "slug": "v0.12/embedded-objects-arrays/index.html",
            "title": "Embedded Objects and Arrays \u2014 Charts Manual 0.12",
            "headings": [
                "Embedded Objects and Arrays",
                "Embedded Objects",
                "Array Fields",
                "General Array Reduction Options",
                "String Accumulates",
                "Numeric Accumulates",
                "Fields within an Array"
            ],
            "text": "\nEmbedded Objects and Arrays\u00b6\n\nOn this page\n\nEmbedded Objects\nArray Fields\n\n\nMongoDB Charts can directly access fields in embedded objects and can\nprocess array fields flexibly according to your use case.\n\nEmbedded Objects\u00b6\nEmbedded objects in the Fields section of the Chart Builder\nare indicated by curly brackets ({}) next to their name. To expand\nan object field, click the arrow to the left of the field name. You can\ndrag embedded object fields onto the desired\nencoding channels just like any other field\nto visualize those fields in your chart.\n\nExample\nThe video.movieDetails data source in the following example\ncontains embedded objects named awards and imdb. We expand the\nobjects by clicking the arrows to the left of their names, then in\nthe bar chart we compare the\nmean imdb.rating in the Y-axis with\nawards.wins in the X-axis.\n\n\n\n\nNote\nNotice the filter provided above the chart of\n{'awards.wins': {$gt: 0}}, meaning only movies which have won\nat least one award are included in the visualization. For more\ninformation on filtering documents in MongoDB Charts, see the\nFilter Documents page.\n\n\n\n\nArray Fields\u00b6\nArray fields in the Fields section of the Chart Builder\npage are indicated by square brackets ([]) next to their name. When\nadding an array field to an encoding channel, select an array reduction option to\nprocess the data in the best way for your visualization. The following\narray reduction options are available:\n\nGeneral Array Reduction Options\u00b6\nYou can apply these array reduction options to any array:\n\n\n\n\n\n\nArray Reduction Option\nDescription\n\n\n\nUnwind array\nDeconstructs the array field from the input documents to\noutput a document for each element. Each output document is\na copy of the input document with the value of the array field\nreplaced by the element.\n\nArray length\nCounts and returns the total number of items in the array.\n\nArray element by index\nReturns the array element at the specified zero-based index position.\n\n\n\n\n\nString Accumulates\u00b6\nYou can apply these accumulates to arrays of String values:\n\n\n\n\n\n\nAccumulate\nDescription\n\n\n\nconcat\nConcatenates the values of the array into a a single string.\n\nmin length\nReturns the length of the shortest string in the array.\n\nmax length\nReturns the length of the longest string in the array.\n\nlongest\nReturns the longest string in the array.\n\nshortest\nReturns the shortest string in the array.\n\nexistence of value\nReturns true if the specified string exists in the array,\nand false if the string does not exist in the array.\n\ncount of occurrences\nReturns the number of times the specified string occurs in the\narray.\n\n\n\n\n\nNumeric Accumulates\u00b6\nYou can apply these accumulates to arrays of Numeric values:\n\n\n\n\n\n\nAccumulate\nDescription\n\n\n\nmin\nReturns the minimum value in the array.\n\nmax\nReturns the maximum value in the array.\n\nmean\nReturns the mean of all values in the array.\n\nsum\nReturns the sum of all values in the array.\n\n\n\n\nNote\nMongoDB Charts only displays accumulate options which match the data\ntype of the field used in the visualization (i.e., only showing\nstring accumulate options for string data and numeric accumulate\noptions for numeric data).\n\n\n\nFields within an Array\u00b6\nAs with array-valued fields, encoding channels require an array reduction option to be specified\nwhen handling fields within an array. In this case, the selected\nreduction is applied to the array containing the target field.\nAdditionally, in the case of embedded arrays, you must select a reduction\noption for the top-level array and all sub-arrays. Note that different\nreduction options may be used for each embedded array.\n\n\n",
            "preview": "MongoDB Charts can directly access fields in embedded objects and can process array fields flexibly according to your use case.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/"
            ]
        },
        {
            "slug": "v0.12/encoding-channels/index.html",
            "title": "Encoding Channels \u2014 Charts Manual 0.12",
            "headings": [
                "Encoding Channels",
                "Aggregation",
                "Multi-Series Charts",
                "Multiple Field Mappings",
                "Series Encoding Channel"
            ],
            "text": "\nEncoding Channels\u00b6\n\nOn this page\n\nAggregation\nMulti-Series Charts\nMultiple Field Mappings\nSeries Encoding Channel\n\n\n\n\nEncoding channels are the building blocks of your visualizations.\nThese channels are the means by which Charts translates data\nfrom your collection to\nthe visualization. The encoding process dictates how that data\nappears in the chart based on the channel type selected.\nEach encoding channel type provides different capabilities for\nprocessing and visualizing your data, which vary based on the type of\ndata you provide to the channel (e.g., string versus numeric\ndata). The following table describes each encoding channel type in\nMongoDB Charts:\n\n\n\n\n\n\nEncoding Channel Type\nDescription\n\n\n\nValue\nA point on the chart is created from the chosen field for each\ndocument in the collection. You may only assign fields with a\nnumeric or date type to a Value channel.\n\nCategory\nEach unique value from this field in the collection is used\nas a chart category. The Category encoding channel\nprovides the following additional visualization options:\n\nFor fields with a string data type, you can specify a\nfield to sort on and the sort order.\nFor fields with a numeric data type, you can toggle\ndata binning and select the bin size.\nFor fields with a date data type, you can toggle date\ngrouping and select the grouping period.\n\n\n\nAggregation\nA point on the chart is created by applying an\naggregation function over the values of\nthis field from multiple documents; for example\n$count and\n$sum. For more\ninformation on aggregation in Charts, see the\nAggregation section.\n\n\n\n\nAggregation\u00b6\nDragging a field onto an aggregation\nencoding channel allows you to use an\naggregation pipeline operator\non that field. The aggregation operators available in the chart\nbuilder change based on the data type\nof the selected field. MongoDB Charts categorizes the field data type\nas either a number, string, or date and displays\nappropriate aggregation options accordingly.\n\nExample\nDonut charts provide two encoding channels:\n\nA category channel called Label dictating\nwhich field to use when dividing the sections of the chart.\nAn aggregation channel called Arc dictating\nthe aggregation operation to perform on the Label\ncategory.\n\nThe following donut chart examines NASA\u2019s Landslide data source to\nshow the frequency of various landslide triggers by performing a\n$count aggregation\non the trigger field:\n\n\n\nWe see from the chart that the most common landslide trigger is\nDownpour followed by Rain.\n\n\n\nMulti-Series Charts\u00b6\nMongoDB Charts supports building multi-series charts, which split your\nchart data into groups, or series, to compare additional\nfields within your schema. There are two ways to create multi-series\ncharts:\n\nUsing multiple aggregation or value field mappings. Use this method to compare or aggregate\nupon multiple non-categorical fields in the schema.\nUsing the Series field in the chart builder. Use this method when grouping data based\non a discrete list of items.\n\n\nMultiple Field Mappings\u00b6\nMongoDB Charts allows you to map multiple aggregation or value\nencoding channels to a single chart property\n(e.g. X Axis or Y Axis). This allows you to\ncompare additional fields in your visualization by creating new series\nbased on the encoding channels added.\nAfter dragging a field to an aggregation\nor value encoding channel, an\nadditional optional encoding channel of the same type appears below the\none which was just added, allowing you to add additional series to your\nvisualization. This process repeats with each channel you add, so\nyou can map as many fields as desired to your chart.\n\nExample\nThe following multi-series column chart shows average movie ratings\nby genre from two different sources: IMDB\nand Rotten Tomatoes:\n\n\n\nThere are two aggregation encoding channels on\nthe chart\u2019s Y Axis, one for each of the site\u2019s rating\nfields. By selecting the mean aggregation option, the\nchart aggregates these two fields using the\n$avg operator to\nprovide a comparison of the average of two fields in the same\ncolumn.\n\n\nTip\nUse multiple field mappings to create a multi-series chart when\nthe values being compared in the visualization come from two or more\nseparate fields in the schema.\nIn the example above, there is one series for Rotten Tomato ratings\nand one series for IMDB ratings. Since these are separate fields\nwithin the schema, adding multiple aggregation encoding\nchannels to map the data is the best choice to compare the fields.\n\n\n\nSeries Encoding Channel\u00b6\nYou can also create multi-series charts by using the Series\nfield in the chart builder. The Series field differs from\naggregation encoding channels\nbecause it instead utilizes a Category encoding channel. When creating a series using the\ncategory encoding channel, each unique value from the\ndata field becomes a series in the visualization.\n\nExample\nThe following multi-series column chart shows order data from an\noffice supply store, showing the most common items sold by\nstore location:\n\n\n\nBy using the item.name in the Series encoding\nchannel, a series within each location group is added for each\nitem name.\n\n\nTip\nThe Series field is useful when you are grouping data\nbased on a discrete list of items. This approach should be used when\nthe values for all series are stored in a single field, with a\nseparate field used to establish the discrete categories.\n\n\n\n",
            "preview": "Encoding channels are the building blocks of your visualizations. These channels are the means by which Charts translates data from your collection to the visualization. The encoding process dictates how that data appears in the chart based on the channel type selected.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/bson-types/",
                "https://www.rottentomatoes.com/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/",
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/avg/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://www.imdb.com/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/",
                "http://docs.mongodb.org/manual/core/databases-and-collections/",
                "http://docs.mongodb.org/manualaggregation"
            ]
        },
        {
            "slug": "v0.12/filter-documents/index.html",
            "title": "Filter Documents in the Visualization \u2014 Charts Manual 0.12",
            "headings": [
                "Filter Documents in the Visualization",
                "Basic Filter Example",
                "Regular Expression (RegEx) Filter",
                "Relative Date Filter",
                "Relative Date Filter Example"
            ],
            "text": "\nFilter Documents in the Visualization\u00b6\n\nOn this page\n\nBasic Filter Example\nRegular Expression (RegEx) Filter\nRelative Date Filter\n\n\nTo display a subset of results in your data that match a given\ncriteria, use the Filters input bar above the chart\ndisplay. Input a filter document employing the same syntax used in the\nquery portion of the db.collection.find() method. After entering a filter document,\nclick Apply to see the filter reflected in your visualization.\n\nNote\nFilters on large collections may have performance issues if there\nare not appropriate indexes on the collection.\n\n\nBasic Filter Example\u00b6\nThe following chart shows the average runtime of movies by genre.\nThe filter of {runtime: {$gte: 120 }} means that we are only\ntaking into account movies which have a runtime greater than or\nequal to 120 minutes.\n\n\n\n\n\nRegular Expression (RegEx) Filter\u00b6\nRegEx filters allow you to apply a regular expression as the match\ncriteria to restrict the data MongoDB Charts displays. The expression\nuses the following syntax:\n\n\n\ncopy\n\n{ <field>: { $regex: \"pattern\", $options: \"<options>\" } }\n\n\n\nThe $options are optional and are the same as the\n$regex options in the MongoDB shell.\n\nExample\nFilter data to document fields that start with a specific letter\nTo find all documents where the jobs field begins with the\nletter A, you would write the following in the\nFilter bar:\n\n\n\ncopy\n\n{ \"job\" : { $regex : \"^A\" } }\n\n\n\nFilter data to document fields that start with a specific letter\nignoring case\nTo find all documents where the jobs field begins with the\nletter A or a, you would write the following in the\nFilter bar:\n\n\n\ncopy\n\n{ \"job\" : { $regex : \"^A\", $options : \"i\" } }\n\n\n\n\n\nNote\nThe quotation marks around the regular expression are required. You\nmay not use forward slashes to delineate the regex value as you may\nin the MongoDB shell.\n\n\n\nRelative Date Filter\u00b6\nRelative Date Filters allow you to specify a date from which MongoDB Charts\nrestricts the data displayed. For example, you can set a Relative Date\nFilter to display data from only the last month or last year. To\ncreate a filter spanning from the specified date to the current date,\nspecify the number of milliseconds since the Unix epoch of January 1,\n1970. Use this date in conjunction with a\ncomparison query operator\nto set the inclusive or exclusive time range of the data displayed.\n\nExample\nThe following Relative Date Filter returns documents that have a\ntimestamp field which resolves to a date less than 30 days from\nthe current date:\n\n\n\ncopy\n\n{ timestamp: {  $gt: new Date(new Date() - 30 * 24 * 60 * 60 * 1000 ) } }\n\n\n\nFirst, the inner new Date() constructor generates the current\ndate in milliseconds since the Unix epoch of January 1, 1970. The\nmathematical series 30 * 24 * 60 * 60 * 1000 results in the\nnumber of milliseconds elapsed in 30 days. The filter takes the\ncurrent date in milliseconds since the Unix epoch and subtracts the\nnumber of milliseconds in 30 days. This results in a new millisecond\nvalue which the filter passes to an outer new Date() constructor\nand resolves to the date 30 days prior to the time the user executes\nthe filter.\nUsing a mathematical series as shown here allows the filter to\nalways span a relative timeframe of 30 days prior to the time\nthe user executes the filter.\n\nFor a more complete example of a relative date filter, see the\nRelative Date Filter Example.\n\nISO-8601 Dates\nThe date functions utilized in MongoDB Charts filters are consistent and\ncompatible with the date functions used in the\nmongo shell. As a result, you can also use the\nISODate() constructor in your Charts query filters.\nSpecifying an ISODate() constructor with no parameters exhibits\nthe same behavior as specifying a new Date() constructor with no\nparamters, both returning the current date in their respective\nformats.\n\nExample\nThe following filter returns documents that have a\ntimestamp field between January 1, 2017 and December 31, 2017\ninclusively:\n\n\n\ncopy\n\n{$and: [{timestamp: {$gte: ISODate(\"2017-01-01\")}},\n{timestamp: {$lte: ISODate(\"2017-12-31\")}}]}\n\n\n\n\n\n\nRelative Date Filter Example\u00b6\nThe following chart visualizes workout data. Each document in the\ncollection represents an individual workout activity, which contains\ninformation such as the type of workout and various exercise\nstatistics. This line chart shows the distance per month covered\nacross all workouts over the past year (365 days):\n\n\n\nThe chart utilizes the following filter:\n\n\n\ncopy\n\n{ \"Workout Date (As Date)\": {$gte: new Date(new Date() - 365 * 24 * 60 * 60 * 1000 ) }}\n\n\n\nThis filter returns documents where the Workout Date (As Date)\nfield is within one year prior to the time Charts executes the\nquery. The (new Date() - 365 * 24 * 60 * 60 * 1000 ) parameter\nresults in the date one year prior to the current date as expressed in\nmilliseconds since the Unix epoch. Charts returns documents\nwith a value greater than or equal to this date, as signified by the\n$gte operator.\n\nDate() is not supported\nThe Date() function (as opposed to the new Date()\nconstructor) returns the current date as a string, so it cannot be\nused for filtering dates in Charts. Use:\n\nnew Date(),\nISODate(), or\nnew ISODate()\n\n\n\n\n",
            "preview": "To display a subset of results in your data that match a given criteria, use the Filters input bar above the chart display. Input a filter document employing the same syntax used in the query portion of the db.collection.find() method. After entering a filter document, click Apply to see the filter reflected in your visualization.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/mongo",
                "https://en.wikipedia.org/wiki/Regular_expression?oldid=858335070",
                "http://docs.mongodb.org/manual/tutorial/query-documents/",
                "http://docs.mongodb.org/manual/reference/operator/query/gte/",
                "http://docs.mongodb.org/manualindexes",
                "http://docs.mongodb.org/manual/reference/operator/query-comparison/",
                "https://docs.mongodb.com/manual/reference/operator/query/regex/"
            ]
        },
        {
            "slug": "v0.12/installation/index.html",
            "title": "Installation \u2014 Charts Manual 0.12",
            "headings": [
                "Installation",
                "System Requirements",
                "Metadata Database",
                "Charts Server",
                "Supported Browsers",
                "Before You Install",
                "Set up the Charts metadata database.",
                "Download and install Docker on the MongoDB Charts host.",
                "Delete older versions of Charts.",
                "Install MongoDB Charts",
                "Create a directory to store your Charts configuration.",
                "Download the MongoDB Charts Docker Compose file.",
                "Enable Docker Swarm mode.",
                "Pull down the Charts image.",
                "Test your connection to the Charts metadata database.",
                "Create a Docker secret for the Charts metadata database.",
                "(Optional) Configure the Feedback and Support widget.",
                "(Optional) Configure the MongoDB Charts web server to use HTTPS.",
                "Launch the Charts container.",
                "Verify the container is running.",
                "Create Charts users.",
                "Launch the Charts web application.",
                "Back up your Charts installation keys.",
                "Start and Stop MongoDB Charts",
                "Troubleshooting",
                "Verify the container is running.",
                "Retrieve the logs from the running service.",
                "Delete and recreate the Docker Secret for the metadata database.",
                "Redeploy the Docker stack.",
                "Contact MongoDB Support.",
                "Troubleshooting Docker Connections"
            ],
            "text": "\nInstallation\u00b6\n\nOn this page\n\nSystem Requirements\nBefore You Install\nInstall MongoDB Charts\nStart and Stop MongoDB Charts\nTroubleshooting\n\n\nThe following document describes how to install MongoDB Charts within your\nenvironment. For the latest information on Charts, please visit\nthe Charts web page.\n\nSystem Requirements\u00b6\n\nMetadata Database\u00b6\nMongoDB Charts requires a MongoDB deployment running version 3.4 or later to\nstore Charts metadata. The Charts metadata database can\nbe a cluster running on\nMongoDB Atlas, the cloud-hosted\nservice for running, monitoring, and maintaining MongoDB deployments.\n\nNote\nCharts does not require its own dedicated MongoDB\ndeployment. If Charts uses an existing MongoDB deployment,\nit will create and use the following databases: metadata,\napp, auth, and log.\n\n\n\nCharts Server\u00b6\nMongoDB Charts must be installed on a single server running Docker CE or EE\n(v17.06 or higher). The server must be in a network location that can\ncommunicate with the metadata database and MongoDB servers that contain\nthe data you wish to visualize.\n\n\nSupported Browsers\u00b6\nEnd users accessing MongoDB Charts must use a current desktop version of\nChrome, Firefox, or Safari on any operating system.\n\n\n\nBefore You Install\u00b6\nThis section lists the required steps to complete before installing\nCharts.\n1\nSet up the Charts metadata database.\u00b6\nIdentify or configure a MongoDB deployment to store Charts metadata.\nFor a production deployment, deploy MongoDB in a three member\nreplica set and\nenable authentication.\nThe connection URI of this deployment is required in a\nlater step.\n\n2\nDownload and install Docker on the MongoDB Charts host.\u00b6\nMongoDB Charts runs within a\nDocker Linux container.\nInstall Docker CE or EE (v17.06 or higher)\non the Charts host. Charts runs on any OS or\ndistribution supported by Docker, including Windows and macOS.\n\n3\nDelete older versions of Charts.\u00b6\nIf you have an older version of Charts deployed, delete it using the\nfollowing command:\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\n\nNote\nThis will not remove any persisted data.\n\n\n\n\nInstall MongoDB Charts\u00b6\nUse the following procedure to install MongoDB Charts:\n\nWindows Installation\nWhen installing MongoDB Charts on Windows, it is strongly recommended to\nuse Windows PowerShell, rather than the Command Prompt. Windows\nCommand Prompt does not handle quotation marks properly when\ncreating the Docker secret for MongoDB Charts in step 6.\n\n1\nCreate a directory to store your Charts configuration.\u00b6\nCreate a directory to store your Charts configuration, then\nchange to the new directory:\n\n\n\ncopy\n\nmkdir mongodb-charts\ncd mongodb-charts\n\n\n\n\n2\nDownload the MongoDB Charts Docker Compose file.\u00b6\nDownload the latest version of the Charts Docker Compose\nfile from the MongoDB Download Center and manually move\nit to the new directory.\n\n3\nEnable Docker Swarm mode.\u00b6\nRun the following command to enable Docker Swarm mode:\n\n\n\ncopy\n\ndocker swarm init\n\n\n\n\n4\nPull down the Charts image.\u00b6\n\n\n\ncopy\n\ndocker pull quay.io/mongodb/charts:v0.12.0\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.12.0 with the version number of your release.\n\nThis command may take a while as it downloads a large file to the\nhost server.\n\n5\nTest your connection to the Charts metadata database.\u00b6\nMongoDB Charts requires a Connection String URI to connect to a MongoDB deployment\nwhich will store the Charts metadata. The MongoDB deployment\nmust be reachable from the Charts host. If the MongoDB\ndeployment is running with authentication enabled, you must provide the credentials\nin the connection string, and the MongoDB user must have the\nreadWriteAnyDatabase role. When connecting to a replica\nset, the replicaSet URI option is required.\n\nRunning Metadata Database on localhost\nCharts interprets localhost as the Docker container\nCharts is running in. If the database is running on the\nsame host as the Charts Docker container but not in\nDocker, it will not be reachable via\nmongodb://localhost. Instead, use one of the following URIs\ndepending on your Docker version when creating the Docker secret\nin the command below:\n\nFor Docker versions 18.03 and later:\nFor Windows and macOS, use mongodb://host.docker.internal.\nFor Linux, use the IP address of the docker0 interface.\nNormally, this address is 172.17.0.1.\n\n\nFor Docker versions 17.06 up to but not including 18.03:\nFor Windows, use mongodb://docker.for.win.localhost.\nFor macOS, use mongodb://docker.for.mac.localhost.\nFor Linux, use the IP address of the docker0 interface.\nNormally, this address is 172.17.0.1.\n\n\n\n\nRun the following command to test your connection string. Replace\nthe placeholder connection string at the end of the command with\nyour connection string URI:\n\n\n\ncopy\n\ndocker run --rm quay.io/mongodb/charts:v0.12.0 charts-cli test-connection mongodb://<username>:<password>@myhost.com/\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.12.0 with the version number of your release.\n\nIf the MongoDB Charts successfully connects to the specified MongoDB\ndeployment, Charts displays the following message in the\ncommand line:\n\n\n\nMongoDB connection URI successfully verified.\n\n\n\nPay careful attention to the output of this command, as it\nmay include warnings of potential issues which could impact\nthe deployment process.\nIf MongoDB Charts cannot connect using the specified connection URI,\nCharts outlines possible troubleshooting actions to take\nto create a successful connection. For detailed troubleshooting\ninformation, refer to the Troubleshooting section.\n\n6\nCreate a Docker secret for the Charts metadata database.\u00b6\nOnce you have verified that MongoDB Charts can successfully connect to\nyour MongoDB deployment, create a Docker secret to hold the\nConnection String URI.\nRun the following command to create the Docker secret, substituting\nyour connection string from the previous step:\n\n\n\ncopy\n\necho \"<Verified connection string URI from step 5>\" | docker secret create charts-mongodb-uri -\n\n\n\n\nWindows Installation\nWindows users must execute this command in Windows PowerShell,\nnot Command Prompt, to ensure the quotation marks surrounding\nthe connection string are not included as a part of the secret.\n\n\nNote\nIf you are using a different orchestrator to run MongoDB Charts, such\nas Kubernetes, you may need to provide the MongoDB URI using an\nenvironment variable instead of a Docker secret. If you\nconfigure the CHARTS_MONGODB_URI environment variable within\nthe container, this variable directs Charts to use this\nvalue for the connection instead of using the Docker secret. How\nyou specify the environment variable depends on your chosen\nmethod for deploying the Charts Docker container.\n\n\n7\n(Optional) Configure the Feedback and Support widget.\u00b6\nMongoDB Charts includes a widget on every page that allows users to\nrequest assistance or provide feedback to MongoDB. It also enables\nthe transmission of usage statistics to MongoDB to help improve the\nproduct. These statistics include:\n\nOperations performed\nChart types created\nErrors that MongoDB Charts returns\n\nCharts sends the logged-in user\u2019s email and name to the\nIntercom system to help provide support. No data is collected or\ntransmitted from the user\u2019s databases.\nBy default, the Feedback and Support widget is enabled.\nTo disable the widget within MongoDB MongoDB Charts and prevent the\ntransmission of usage statistics:\n\nOpen charts-docker-compose.yml.\n\nSet the following value:\n\n\n\ncopy\n\nCHARTS_SUPPORT_WIDGET_AND_METRICS: \"off\"\n\n\n\n\nRestart MongoDB Charts.\n\n\nTo re-enable the widget\n\nOpen charts-docker-compose.yml.\n\nSet the following value:\n\n\n\ncopy\n\nCHARTS_SUPPORT_WIDGET_AND_METRICS: \"on\"\n\n\n\n\nRestart MongoDB Charts.\n\n\n\n8\n(Optional) Configure the MongoDB Charts web server to use HTTPS.\u00b6\nYou can either run MongoDB Charts using the default HTTP protocol, or\nconfigure the Charts web server to use the HTTPS protocol\nfor additional security. For instructions on configuring HTTPS for\nMongoDB Charts, see Configure MongoDB Charts Web Server to Use HTTPS.\n\n9\nLaunch the Charts container.\u00b6\nLaunch the Charts container as a Docker Stack using the\nCompose file:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.12.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.12.0 with the version number of your release.\n\n\n10\nVerify the container is running.\u00b6\nCheck that the container is running by executing:\n\n\n\ncopy\n\ndocker service ls\n\n\n\nThe Charts container should appear with mode replicated\nwith 1/1 replicas:\n\n\n\nID             NAME                    MODE         REPLICAS   IMAGE                   PORTS\nj77uo3slyg4l   mongodb-charts_charts   replicated   1/1        mongodb-charts:latest   *:80->80/tcp\n\n\n\n\nNote\nThe service\u2019s mode may not be replicated immediately. Docker\ndoes not display the status of certain deployment operations, so\nwait briefly then rerun docker service ls.\nIf the service is stuck at 0/1 replicas and it\u2019s mode is not\nreplicated after an extended period of time, the service may\nnot have deployed properly. For more information, see\nTroubleshooting.\n\n\n11\nCreate Charts users.\u00b6\nOnce the container is running, execute the charts-cli add-user\nscript within the container once for each Charts user account\nyou want to create within MongoDB Charts. At mininum, you must use the script\nto create one user with the UserAdmin role in order to be able to\nlog into Charts. After creating this initial user, you\ncan either use the Charts user interface to\nadd users or continue using the\ncharts-cli add-user script to add users with either the\nUserAdmin or User role.\nTo add users with the script, run the following command. Replace the\nplaceholders in angle brackets with the appropriate values.\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    \n\n\ncopy\n\ndocker exec -it `\n  $(docker container ls --filter name=_charts -q) `\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" `\n  --email \"<user@example.com>\" --password \"<Password>\" `\n  --role \"<UserAdmin|User>\"\n\n\n\n\n\n\n\ncopy\n\ndocker exec -it \\\n  $(docker container ls --filter name=_charts -q) \\\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" \\\n  --email \"<user@example.com>\" --password \"<Password>\" \\\n  --role \"<UserAdmin|User>\"\n\n\n\n\n\n\n\ncopy\n\ndocker exec -it \\\n  $(docker container ls --filter name=_charts -q) \\\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" \\\n  --email \"<user@example.com>\" --password \"<Password>\" \\\n  --role \"<UserAdmin|User>\"\n\n\n\n    \n  \nFor more information on roles and adding users, see\nUser Management.\n\n12\nLaunch the Charts web application.\u00b6\nAccess MongoDB Charts by opening a web browser and connecting to the\nname of the server running the container. Note that Charts\nruns on HTTP port 80 and HTTPS port 443 (if\nconfigured for HTTPS) unless you have\nmodified the Docker Compose file to use different ports.\n\n13\nBack up your Charts installation keys.\u00b6\nMongoDB Charts uses a number of keys and tokens to secure your\ndeployment and encrypt sensitive data stored in the Charts\nmetadata database. When you first deploy Charts, new random\nkeys are automatically generated and saved to a\nDocker volume which\npersists the keys across container deployments.\n\nImportant\nIf you want to redeploy Charts or move Charts to a\nnew server, you will need to use the original keys in new\ndeployments. If you deploy a new instance of Charts and\npoint it to an existing Charts metadata database used by a\nprevious deployment, the encryption keys will not match and the\nnew instance of Charts will not be able to decrypt the\nmetadata.\n\nTo back up the keys, use the following commands to launch a temporary\ncontainer that copies the key files from the Charts volume to a\nnewly created directory on the host system:\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    \n\n\ncopy\n\nmkdir c:\\temp\\charts-keys-backup\ndocker run -it `\n  --volume mongodb-charts_keys:/volume `\n  --volume /c/temp/charts-keys-backup:/backup `\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n\nNote\nThis Docker command uses Unix-style paths on Windows.\n\n\n\n\n\ncopy\n\nmkdir /tmp/charts-keys-backup\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n\n\n\n\ncopy\n\nmkdir /tmp/charts-keys-backup\ndocker run -it \\\n  --volume mongodb-charts_keys:/volume \\\n  --volume /tmp/charts-keys-backup:/backup \\\n  alpine sh -c 'cp /volume/* /backup'\n\n\n\n    \n  \n\nImportant\nOnce the operation above completes, store the key in a secure\nlocation that is not on the Charts server.\n\nFor more information, see\nBack Up and Restore Security Keys.\n\n\n\nStart and Stop MongoDB Charts\u00b6\nMongoDB Charts executes within a single Docker container managed by\nDocker Swarm.\nTo start Charts, deploy the stack using the supplied Docker Compose\nfile:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.12.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.12.0 with the version number of your release.\n\nTo stop Charts, ask Docker to remove the stack:\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\n\n\nTroubleshooting\u00b6\nIf MongoDB Charts does not successfully load in a browser after starting the\nDocker stack, try the following steps:\n1\nVerify the container is running.\u00b6\nCheck that the container is running by executing:\n\n\n\ncopy\n\ndocker service ls\n\n\n\nThe Charts container should appear with mode replicated\nwith 1/1 replicas:\n\n\n\nID             NAME                    MODE         REPLICAS   IMAGE                   PORTS\nj77uo3slyg4l   mongodb-charts_charts   replicated   1/1        mongodb-charts:latest   *:80->80/tcp\n\n\n\nProceed to the next step if any of the following conditions are met:\n\nThe service is stuck at 0/1 replicas and its mode is not\nreplicated after an extended period of time.  This may indicate\nthat the service did not deploy properly.\nIf you recieve errors when running the charts-cli add-user\nscript.\nThe Charts application is not loading in your web browser.\n\n\n2\nRetrieve the logs from the running service.\u00b6\nRetrieve the service logs by running the following command using the\nservice ID from the previous step:\n\n\n\ncopy\n\ndocker service logs <service ID>\n\n\n\nThe following example contains sample output from the command. Note\neach step has a tick or cross which could explain the issue:\n\n\n\ncopy\n\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 encryptionKeyPath\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 stitchConfigTemplate\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 tokens\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 stitchConfig\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2714 stitchConfigWritten (true)\nmongodb-charts_charts.1.nzcj90stcbmz@linuxkit-00155d01851f    |  \u2716\nmongoDBReachable failure: Can't connect to MongoDB at mongodb://mongod. Too many\nfailed attempts. Last error: failed to connect to server [mongod:27017] on first\nconnect [MongoNetworkError: getaddrinfo ENOTFOUND mongod mongod:27017]\n\n\n\n\n3\nDelete and recreate the Docker Secret for the metadata database.\u00b6\nMalformed\nConnection String URIs\ncommonly cause issues when deploying Charts. To modify the\nURI, you must remove the old Docker secret:\n\n\n\ncopy\n\ndocker secret rm charts-mongodb-uri\n\n\n\nThen recreate the secret:\n\n\n\ncopy\n\necho \"mongodb://<username>:<password>@myhost.com/\" | docker secret create charts-mongodb-uri -\n\n\n\n\n4\nRedeploy the Docker stack.\u00b6\nIf there are no obvious problems with the configuration, try deleting\nand redeploying the Docker stack.\n\n\n\ncopy\n\ndocker stack rm mongodb-charts\n\n\n\nBefore redeploying, execute docker ps a few times until it shows no\nrunning Charts containers. It can take a little while for the\ncontainers to shut down. Then, relaunch the stack using:\n\n\n\ncopy\n\ndocker stack deploy -c charts-docker-compose-v0.12.0.yml mongodb-charts\n\n\n\n\nNote\nIf you are using a different version of Charts, replace\nv0.12.0 with the version number of your release.\n\n\n5\nContact MongoDB Support.\u00b6\nIf you still have trouble accessing the Charts application,\nsubmit a post describing your issue to the\nMongoDB Community Support forum.\n\nNote\nYou must have a Google account to submit any posts to the\nCommunity Support forum.\n\nIf you encounter any issues after installing MongoDB Charts, copy the logs\nfrom step 2 and contact MongoDB Support via the chat button within\nthe MongoDB Charts application.\n\nNote\nThe chat feature is not available when the Feedback and Support\nwidget is disabled.\n\n\n\nTroubleshooting Docker Connections\u00b6\nYou may encounter issues connecting MongoDB Charts to a MongoDB deployment\nif the MongoDB deployment uses hostnames which are not routable\ninside the Docker container. In this case, specify the extra_hosts option\nin the Docker Compose file dowloaded in step 2 of the install\nprocedure to manually map the hosts to your Docker container:\n\n\n\ncopy\n\nservices:\n  charts:\n    # Other settings will be set here\n    extra_hosts:\n      - \"somehost:198.51.100.16\"\n      - \"otherhost:198.51.100.17\"\n      - \"anotherhost:203.0.113.0\"\n\n\n\n\nNote\nWhen manually mapping to a replica set, you must specify\nhost entries for each replica set member, not just those\nin the connection string URI.\n\n\n\n",
            "preview": "The following document describes how to install MongoDB Charts within your environment. For the latest information on Charts, please visit the Charts web page.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/administration/configure-https-deployment/",
                "http://docs.mongodb.org/manual/reference/connection-string",
                "https://groups.google.com/forum/",
                "https://www.mongodb.com/download-center/charts",
                "https://docs.mongodb.com/manual/reference/built-in-roles/",
                "https://docs.mongodb.com/manual/reference/connection-string/",
                "https://docs.docker.com/storage/volumes/",
                "http://docs.mongodb.org/manual/tutorial/deploy-replica-set",
                "https://docs.docker.com/compose/compose-file/",
                "https://docs.mongodb.com/charts/v0.12/administration/backup-and-restore-keys/",
                "https://www.docker.com/what-container",
                "http://mongodb.com/charts",
                "https://www.mongodb.com/cloud/atlas",
                "https://www.docker.com/get-docker",
                "http://docs.mongodb.org/manual/tutorial/enable-authentication",
                "https://docs.mongodb.com/charts/v0.12/user-management/"
            ]
        },
        {
            "slug": "v0.12/manage-dashboards/index.html",
            "title": "Manage Existing Dashboards \u2014 Charts Manual 0.12",
            "headings": [
                "Manage Existing Dashboards",
                "Viewer Actions",
                "Duplicate a Dashboard",
                "Author Actions",
                "Add a Chart",
                "Edit a Chart",
                "Remove a Chart",
                "Duplicate a Chart",
                "Move a Chart to a Different Dashboard",
                "Resize a Chart",
                "Reposition Charts",
                "Rename a Dashboard and Edit its Description",
                "Owner Actions",
                "Delete a Dashboard",
                "Modify Dashboard Permissions"
            ],
            "text": "\nManage Existing Dashboards\u00b6\n\nOn this page\n\nViewer Actions\nAuthor Actions\nOwner Actions\n\n\nThis page outlines various methods for modifying existing\ndashboards. The sections on this page outline the\nrequired permissions to perform the\nactions.\nTo begin modifying a dashboard, enter the dashboard view by\nclicking the desired dashboard from the Dashboards tab.\n\nNote\nYou can search for dashboards by title by using the search bar\nin the top-right corner of the page.\n\n\nViewer Actions\u00b6\nThe following action can be performed by any user with at least\nViewer permissions on the target\ndashboard, meaning any level of dashboard access is sufficient.\n\nDuplicate a Dashboard\u00b6\nYou can duplicate any dashboard in your Dashboards tab,\neven if you do not have editing permissions.\nTo duplicate a dashboard from the Dashboards tab:\n\nClick the ellipsis (\u2026) button on the desired dashboard.\nSelect Duplicate Dashboard from the pop-up menu.\nIn the Dashboard Details dialog, update the\nTitle and Description fields.\nClick Create to save the duplicated dashboard.\n\n\nNote\nThe user who duplicates a dashboard becomes the owner and only\nuser of the newly duplicated dashboard. To grant other users access,\nupdate the dashboard\u2019s permissions.\n\n\n\n\nAuthor Actions\u00b6\nThe following actions require either the Author or Owner\npermission on the target dashboard.\n\nAdd a Chart\u00b6\nTo add a chart to your dashboard, click the Add Chart\nbutton at the top-right of your dashboard. For detailed instructions on\ncreating charts, see Build Charts.\n\n\nEdit a Chart\u00b6\nTo edit a chart, hover over the desired chart and click the\nEdit button. For details on the available editing options,\nsee Build Charts.\n\n\nRemove a Chart\u00b6\n\nImportant\nRemoving a chart from a dashboard is a permanent operation. There\nis no way to recover a chart once it has been deleted, although\nthe underlying data in the collection the chart was created\nfrom will continue to exist.\n\nTo remove a chart from your dashboard, hover over the desired chart\nand click the ellipsis (\u2026) button at the top-right of the\nchart. Select Delete Chart, then click the\nDelete Chart button in the dialog to confirm the chart\ndeletion.\n\n\nDuplicate a Chart\u00b6\nTo quickly build multiple related charts without starting from scratch\neach time, you can duplicate any chart on a dashboard.\nTo duplicate a chart:\n\nHover over the desired chart on your dashboard and click the\nellipsis (\u2026) button at the top-right of the\nchart.\nSelect Duplicate Chart.\nMake any desired changes, then click the green\nSave and Close button to save the new chart. This saves\nthe chart on the same dashboard as the original copy.\n\n\n\nMove a Chart to a Different Dashboard\u00b6\n\nNote\nThis action requires the author or\nowner role on both the origin and\ndestination dashboards.\n\nTo move a chart to a different dashboard:\n\nNavigate to the dashboard which contains the chart you wish to move.\nHover over the desired chart and click the ellipsis\n(\u2026) button at the top-right of the chart.\nClick Move to.\nIn the Move to dialog, use the dropdown to select the\ntarget dashboard for the chart.\nClick Move Chart.\n\nCharts reloads the current dashboard and the target chart is no\nlonger present.\n\n\nResize a Chart\u00b6\nTo resize a chart, hover over the chart and drag the bottom-right\ncorner until the appearing blue rectangle reaches the deired size.\n\n\n\n\n\nReposition Charts\u00b6\nTo rearrange charts in your dashboard, hover over the chart and drag\nthe top-left corner until the appearing blue rectangle is in the\ndesired location. You can also see how moving the chart will affect the\nposition of other charts in your dashboard, as illustrated in the\nfollowing example:\n\n\n\n\n\nRename a Dashboard and Edit its Description\u00b6\nYou can rename a dashboard and edit its description either from the\nDashboards tab, which shows an overview of all\nyour dashboards, or from within an individual dashboard.\nFrom the Dashboards tab:\n\nEach dashboard has a button with an ellipsis icon (\u2026)\nin the upper right corner. Click the ellipsis button.\nSelect Edit Title / Description from the pop-up menu.\nIn the Dashboard Details dialog, update the\nTitle and Description of your dashboard.\nClick Update to save your changes.\n\nFrom within an individual dashboard:\n\nIn the upper left corner of the desired dashboard view, hover over\nthe dashboard title or description and click the\npencil icon.\nIn the Dashboard Details dialog, update the\nTitle and Description of your dashboard.\nClick Update to save your changes.\n\n\n\n\nOwner Actions\u00b6\nThe following actions require Owner permission on the target dashboard.\n\nDelete a Dashboard\u00b6\n\nImportant\nDeleting a dashboard is a permanent operation. There is no way to\nrecover a dashboard once it has been deleted, although the\nunderlying data in the collections used in the dashboard will\ncontinue to exist.\n\nTo delete a dashboard:\n\nIn the Dashboards tab, locate the dashboard you wish to\ndelete.\nClick the \u2026 button on the top-right of the dashboard.\nClick Delete Dashboard.\nClick Delete in the Delete Dashboard dialog\nto confirm deletion.\n\n\n\nModify Dashboard Permissions\u00b6\nA dashbaord Owner can modify which users can access the dashboard\nand their respective permission levels. For more information, refer to\nthe Dashboard Permissions page.\n\n\n",
            "preview": "This page outlines various methods for modifying existing dashboards. The sections on this page outline the required permissions to perform the actions.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.12/dashboards/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/"
            ]
        },
        {
            "slug": "v0.12/release-notes/index.html",
            "title": "Release Notes \u2014 Charts Manual 0.12",
            "headings": [
                "Release Notes",
                "MongoDB Charts v0.12.0",
                "New Features",
                "Bug Fixes",
                "MongoDB Charts v0.11.0",
                "New Features",
                "Bug Fixes",
                "MongoDB Charts v0.10.0",
                "New Features",
                "Bug Fixes",
                "MongoDB Charts v0.9.0"
            ],
            "text": "\nRelease Notes\u00b6\n\nOn this page\n\nMongoDB Charts v0.12.0\nMongoDB Charts v0.11.0\nMongoDB Charts v0.10.0\nMongoDB Charts v0.9.0\n\n\n\nMongoDB Charts v0.12.0\u00b6\nReleased February 7, 2019\n\nNew Features\u00b6\n\nNew default sort behavior in charts. By\ndefault, charts now sort by aggregated value, instead of by category\nname.\nNew filter bar in the chart builder, with\nincreased performance and usability.\n\n\n\nBug Fixes\u00b6\n\nFilter parsing now better aligns with MongoDB Shell syntax,\nspecifically with respect to\ndates.\n\nThe Date() function now\ncorrectly returns the date as a string representation. As a\nresult, the following usages of Date in filters are no longer\nvalid:\n\n\n\nDate()\n\n\n\n\n\n\nDate(\"2019-01-01\")\n\n\n\nInstead, you must either use new when using Date:\n\n\n\n// return the current date\nnew Date()\n\n// return a specific date\nnew Date(\"2019-01-01\")\n\n\n\nOr use ISODate():\n\n\n\n// return the current date\nISODate()\n\n// return a specific date\nISODate(\"2019-01-01\")\n\n\n\nFor additional examples, refer to the\nFilter Documents page.\n\n\n\nYou can now successfully access MongoDB Charts when it is running on\nnon-standard ports or with an SSL termination appliance in\nfront of it. This was possible in the v0.10.0 release, but failed in\nthe v0.11.0 release.\n\nFixed rendering issues in certain browser versions relating to the\ncontinuous color picker in the\nChart Customization options.\n\nMiscellaneous performance, reliability, and security improvements.\n\n\n\n\n\nMongoDB Charts v0.11.0\u00b6\nReleased January 15, 2019\n\nNew Features\u00b6\n\nChart Customization\nChange axis labels\nChange number formats\nChange data formats\nConvert time zones\nChange color palettes\nShow/hide data labels\nShow/hide data points\nChange axis range\nSet logarithmic scale on axes\n\n\nNew Chart Types\nData Table\n100% Stacked Bar\n100% Stacked Column\n100% Stacked Area\n\n\nNew Dashboard Features\nZoom into charts\nRich tooltips on charts\nMove charts between dashboards\n\n\n\n\n\nBug Fixes\u00b6\n\nCharts now render correctly when the same field is mapped to\nmultiple encoding channels.\nSessions automatically refresh in Microsoft Edge.\nPrevent dashboard layout corruption when the dashboard is open in\nmultiple browsers.\n$count\naggregations no longer count documents where the field does not\nexist.\nImproved performance when loading dashboards.\nDates now render correctly on Scatter charts.\nProperly parse URIs in Docker Secrets created by Windows Command\nPrompt.\n\n\n\n\nMongoDB Charts v0.10.0\u00b6\nReleased August 20, 2018\n\nNew Features\u00b6\n\nTest Connection\ntool to help set the correct MongoDB URI during installation.\nAbility to supply connection URI via the CHARTS_MONGODB_URI\nenvironment variable as an alternative to the Docker Secret.\nNew Number chart type, which shows a single\nnumeric value.\nAbility to\nconfigure HTTPS\non the Charts web server.\nAbility to edit the MongoDB URI of an\nexisting data source.\nLonger query timeouts for newly created data sources.\nAbility to filter dashboard and data sources\nlists by the current user\u2019s role.\nCustomizable \u201cauto refresh\u201d options\nfor dashboards.\nAbility to edit a dashboard\u2019s title and description\nfrom the Dashboards tab.\nFull-Screen mode for dashboards.\nDuplicate a dashboard.\nDuplicate a chart.\nFilter and\nsort data source dropdown in the\nChart Builder.\nAllow use of the Date() operator in the\nChart Builder filter bar to execute relative date\nqueries.\nImproved color contrast for Coloured Bar and Coloured Column charts.\n\n\n\nBug Fixes\u00b6\n\nAbility to add Data Sources from databases with names containing\nspecial characters.\nPrevent crash when entering a filter prior to choosing a Data Source\nin the Chart Builder.\nAbility to use the multiple fields from an embedded array in the\nsame chart.\nStrip out extra quotes in MongoDB URI added by Windows echo command\nduring install procedure.\nMiscellaneous styling and usability improvements.\n\n\n\n\nMongoDB Charts v0.9.0\u00b6\nReleased June 27, 2018\nInitial public beta release of MongoDB Charts.\n\n",
            "preview": "Filter parsing now better aligns with MongoDB Shell syntax, specifically with respect to dates.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/bson-types/",
                "https://docs.mongodb.com/charts/v0.12/administration/configure-https-deployment/",
                "https://docs.mongodb.com/charts/v0.12/chart-types/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/number-chart/",
                "https://docs.mongodb.com/charts/v0.10/installation/",
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "https://docs.mongodb.com/charts/v0.12/customize-charts/",
                "http://docs.mongodb.org/manual/reference/method/Date/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "https://docs.mongodb.com/charts/v0.12/dashboards/",
                "https://docs.mongodb.com/charts/v0.12/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.12/sample-mode/index.html",
            "title": "Sample Mode \u2014 Charts Manual 0.12",
            "headings": [
                "Sample Mode",
                "Use Cases"
            ],
            "text": "\nSample Mode\u00b6\nEnabling Sample Mode in MongoDB Charts restricts the input\ncollection to 1000 randomly selected documents. To toggle\nSample Mode, use the toggle above the\nData Source dropdown. The sample mode setting for a chart\npersists when the chart is rendered on a dashboard, meaning that if\nyou enable sample mode when building a chart, the data rendered in the\ndashboard will also be sampled.\n\nNote\nWhen sampling mode is enabled and you have specified a\nfilter, the sample of 1000\ndocuments is taken before the filter is applied, meaning there may\nbe fewer than 1000 documents used to plot the chart.\n\n\nUse Cases\u00b6\nConsider using sample mode in the following scenarios:\n\nWhen drafting a chart and heavily modifying chart options. In this\nsituation, sampling mode allows the chart to render quickly during\nthe building process. Once you are satisfied with your chart you can\ndisable sample mode to have all documents included in your\nfinal visualization if desired.\nWhen visualizing a large data source and the chosen data is\nsufficiently aggregated (e.g. showing averages of fields) so\nnot all documents are needed to obtain a useful visualization.\nIn this case, leaving sample mode enabled for the rendered dashboard\nallows you to retain a useful chart.\n\n\nNote\nDue to the random nature of sampling, when Sample Mode is enabled,\nit is possible your visualizations will change each time the\nchart is loaded.\n\n\n",
            "preview": "Enabling Sample Mode in MongoDB Charts restricts the input collection to 1000 randomly selected documents. To toggle Sample Mode, use the toggle above the Data Source dropdown. The sample mode setting for a chart persists when the chart is rendered on a dashboard, meaning that if you enable sample mode when building a chart, the data rendered in the dashboard will also be sampled.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/filter-documents/"
            ]
        },
        {
            "slug": "v0.12/sort-limit-data/index.html",
            "title": "Sort and Limit Categorical Data \u2014 Charts Manual 0.12",
            "headings": [
                "Sort and Limit Categorical Data",
                "Sort Data",
                "Limit Data"
            ],
            "text": "\nSort and Limit Categorical Data\u00b6\n\nOn this page\n\nSort Data\nLimit Data\n\n\nWhen adding a string field to a non-series category\nencoding channel, Charts\nprovides the ability to sort and\nlimit results of your data to achieve\nthe best visualization.\n\nSort Data\u00b6\nBy default, Charts sorts the data based on the\ncategory field in ascending order. This displays the values\nof the category field in alphabetical order.\nAlternatively, you can choose to sort the data by the\naggregated value of the visualization. To toggle between\nascending or descending sort order, click the a-z button to the\nright of the Sort By dropdown.\n\n\nLimit Data\u00b6\nYou can apply a limit to the category encoding channel\nto only include a specified number of categories in your visualization.\nThe categories included are the first matching categories based on\nthe sort order specified. Limiting data can\nbe useful when visualizing data with so many categories it becomes\ndifficult to create a meaningful chart.\n\nExample\nThe following chart shows the average\nIMDb rating of movies from a\nparticular country:\n\n\n\nThe dataset contains movies from many different countries, but it\nwould be most interesting to see which countries produce the\nhighest-rated movies. We can accomplish this by applying a limit to\nonly show countries with the 10 highest average ratings for movies.\nSwitch the Limit Results toggle to On and leave the\nShow input at the default value of 10. The chart is now\nmuch easier to understand, and we have a clear view of the countries\nwith the highest-rated movies:\n\n\n\n\n\n",
            "preview": "When adding a string field to a non-series category encoding channel, Charts provides the ability to sort and limit results of your data to achieve the best visualization.",
            "tags": "",
            "links": [
                "https://www.imdb.com/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/"
            ]
        },
        {
            "slug": "v0.12/third-party-licenses/index.html",
            "title": "Third-Party Licenses \u2014 Charts Manual 0.12",
            "headings": [
                "Third-Party Licenses"
            ],
            "text": "\nThird-Party Licenses\u00b6\nMongoDB Charts uses third-party libraries or other resources that may\nbe distributed under licenses different than the MongoDB software.\nThe following lists the third-party licenses as used in Charts.\nIn the event that we have accidentally failed to list a required notice,\nyou can bring it to our attention by emailing legal.\n\n\n\n\n\n\n\n\nLibrary\nVersion\nLicense Type\nPublisher\n\n\n\n@types/json-stable-stringify\n1.0.32\nMIT\n\u00a0\n\n@types/node\n10.0.3\nMIT\n\u00a0\n\nBase64\n1.0.1\n(Apache-2.0 OR WTFPL)\nDavid Chambers (dc@davidchambers.me)\n\nJSONStream\n1.3.2\n(MIT OR Apache-2.0)\nDominic Tarr (dominic.tarr@gmail.com)\n\nabbrev\n1.1.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\najv\n4.11.8\nMIT\nEvgeny Poberezkin\n\nampersand-class-extend\n2.0.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-collection-lodash-mixin\n4.0.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-collection\n2.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-events\n2.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-state\n5.0.2\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nampersand-version\n1.0.2\nMIT\nPhilip Roberts (phil@latentflip.com)\n\nansi-regex\n2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nansi-regex\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nansi-styles\n3.2.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\naproba\n1.2.0\nISC\nRebecca Turner (me@re-becca.org)\n\nare-we-there-yet\n1.1.4\nISC\nRebecca Turner\n\nargparse\n1.0.10\nMIT\n\u00a0\n\narray-next\n0.0.1\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\narray-uniq\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nasap\n2.0.6\nMIT\n\u00a0\n\nasn1\n0.2.3\nMIT\nMark Cavage (mcavage@gmail.com)\n\nassert-plus\n0.2.0\nMIT\nMark Cavage (mcavage@gmail.com)\n\nassert-plus\n1.0.0\nMIT\nMark Cavage (mcavage@gmail.com)\n\nasync\n1.5.2\nMIT\nCaolan McMahon\n\nasync\n2.6.0\nMIT\nCaolan McMahon\n\nasynckit\n0.4.0\nMIT\nAlex Indigo (iam@alexindigo.com)\n\naws-sign2\n0.6.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\naws4\n1.7.0\nMIT\nMichael Hart (michael.hart.au@gmail.com)\n\nbabel-runtime\n6.26.0\nMIT\nSebastian McKenzie (sebmck@gmail.com)\n\nbackoff\n2.5.0\nMIT\nMathieu Turcotte (turcotte.mat@gmail.com)\n\nbalanced-match\n1.0.0\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nbcrypt-pbkdf\n1.0.1\nBSD-3-Clause\n\u00a0\n\nblock-stream\n0.0.9\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nboolbase\n1.0.0\nISC\nFelix Boehm (me@feedic.com)\n\nboom\n2.10.1\nBSD-3-Clause\n\u00a0\n\nbootstrap\n3.3.5\nMIT\nTwitter, Inc.\n\nbrace-expansion\n1.1.11\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nbson\n1.0.6\nApache-2.0\nChristian Amor Kvalheim (christkv@gmail.com)\n\nbson\n2.0.6\nApache-2.0\nChristian Amor Kvalheim (christkv@gmail.com)\n\nbugsnag-js\n3.3.3\nMIT\n\u00a0\n\nbuiltin-modules\n1.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncaller-id\n0.1.0\nMIT\nPixels & Bytes (pxandbytes@gmail.com)\n\ncamelcase\n2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncamelcase\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncamelcase\n4.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncanvas-prebuilt\n1.6.0\nMIT\nCaleb Hearon (crh0872@gmail.com)\n\ncaseless\n0.12.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nchalk\n2.4.1\nMIT\n\u00a0\n\ncheerio\n1.0.0-rc.2\nMIT\nMatt Mueller (mattmuelle@gmail.com)\n\nclassnames\n2.2.5\nMIT\nJed Watson\n\ncli-color\n0.3.2\nMIT*\nMariusz Nowak (medyk@medikoo.com)\n\ncli-table\n0.3.1\nMIT*\nGuillermo Rauch (guillermo@learnboost.com)\n\ncliui\n3.2.0\nISC\nBen Coe (ben@npmjs.com)\n\ncliui\n4.1.0\nISC\nBen Coe (ben@npmjs.com)\n\nclui\n0.3.6\nMIT\nNathan Peck (nathan@storydesk.com)\n\nco\n4.6.0\nMIT\n\u00a0\n\ncode-point-at\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ncodemirror-mongodb\n0.10.3\nApache-2.0\n\u00a0\n\ncodemirror\n5.37.0\nMIT\n\u00a0\n\ncolor-convert\n1.9.1\nMIT\nHeather Arthur (fayearthur@gmail.com)\n\ncolor-name\n1.1.3\nMIT\nDY (dfcreative@gmail.com)\n\ncolors\n0.5.1\nCustom: http://i.imgur.com/goJdO.png\nMarak Squires\n\ncolors\n1.0.3\nMIT\nMarak Squires\n\ncombined-stream\n1.0.6\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\ncommander\n2.15.1\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\nconcat-map\n0.0.1\nMIT\nJames Halliday (mail@substack.net)\n\nconsole-control-strings\n1.1.0\nISC\nRebecca Turner (me@re-becca.org)\n\ncontext-eval\n0.1.0\nMIT\namasad\n\ncore-js\n1.2.7\nMIT\n\u00a0\n\ncore-js\n2.5.5\nMIT\n\u00a0\n\ncore-util-is\n1.0.2\nMIT\nIsaac Z. Schlueter (i@izs.me)\n\ncreate-react-class\n15.6.3\nMIT\n\u00a0\n\ncross-spawn\n5.1.0\nMIT\nIndigoUnited (hello@indigounited.com)\n\ncryptiles\n2.0.5\nBSD-3-Clause\n\u00a0\n\ncss-select\n1.2.0\nBSD*\nFelix Boehm (me@feedic.com)\n\ncss-what\n2.1.0\nBSD*\nFelix B\u00f6hm (me@feedic.com)\n\nd3-array\n1.2.1\nBSD-3-Clause\nMike Bostock\n\nd3-collection\n1.0.4\nBSD-3-Clause\nMike Bostock\n\nd3-color\n1.1.0\nBSD-3-Clause\nMike Bostock\n\nd3-contour\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-dispatch\n1.0.3\nBSD-3-Clause\nMike Bostock\n\nd3-dsv\n1.0.8\nBSD-3-Clause\nMike Bostock\n\nd3-force\n1.1.0\nBSD-3-Clause\nMike Bostock\n\nd3-format\n1.2.2\nBSD-3-Clause\nMike Bostock\n\nd3-geo\n1.10.0\nBSD-3-Clause\nMike Bostock\n\nd3-hierarchy\n1.1.6\nBSD-3-Clause\nMike Bostock\n\nd3-interpolate\n1.1.6\nBSD-3-Clause\nMike Bostock\n\nd3-path\n1.0.5\nBSD-3-Clause\nMike Bostock\n\nd3-quadtree\n1.0.3\nBSD-3-Clause\nMike Bostock\n\nd3-request\n1.0.6\nBSD-3-Clause\nMike Bostock\n\nd3-scale-chromatic\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-scale\n2.0.0\nBSD-3-Clause\nMike Bostock\n\nd3-shape\n1.2.0\nBSD-3-Clause\nMike Bostock\n\nd3-time-format\n2.1.1\nBSD-3-Clause\nMike Bostock\n\nd3-time\n1.0.8\nBSD-3-Clause\nMike Bostock\n\nd3-timer\n1.0.7\nBSD-3-Clause\nMike Bostock\n\nd3-voronoi\n1.1.2\nBSD-3-Clause\nMike Bostock\n\nd\n0.1.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nd\n1.0.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\ndashdash\n1.14.1\nMIT\nTrent Mick (trentm@gmail.com)\n\ndebug\n2.2.3\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\ndebug\n2.6.9\nMIT\nTJ Holowaychuk (tj@vision-media.ca)\n\ndecamelize\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ndeep-extend\n0.5.1\nMIT\nViacheslav Lotsmanov (lotsmanov89@gmail.com)\n\ndefine-properties\n1.1.2\nMIT\nJordan Harband\n\ndelayed-stream\n1.0.0\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\ndelegates\n1.0.0\nMIT\n\u00a0\n\ndetect-browser\n1.12.0\nMIT\nDamon Oehlman (damon.oehlman@gmail.com)\n\ndetect-libc\n1.0.3\nApache-2.0\nLovell Fuller (npm@lovell.info)\n\ndiscontinuous-range\n1.0.0\nMIT\nDavid Tudury (david.tudury@gmail.com)\n\ndisposables\n1.0.2\nApache-2.0\nCloud Programmability Team\n\ndnd-core\n2.6.0\nBSD-3-Clause\n\u00a0\n\ndom-helpers\n3.3.1\nMIT\nJason Quense (monastic.panic@gmail.com)\n\ndom-serializer\n0.1.0\nMIT\nFelix Boehm (me@feedic.com)\n\ndom-walk\n0.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\ndomelementtype\n1.1.3\nBSD*\nFelix Boehm (me@feedic.com)\n\ndomelementtype\n1.3.0\nBSD*\nFelix Boehm (me@feedic.com)\n\ndomhandler\n2.4.1\nBSD-2-Clause\nFelix Boehm (me@feedic.com)\n\ndomutils\n1.5.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nduplexer\n0.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\necc-jsbn\n0.1.1\nMIT\nJeremie Miller (jeremie@jabber.org)\n\nencoding\n0.1.12\nMIT\nAndris Reinman\n\nentities\n1.1.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nenzyme-adapter-react-15\n1.0.5\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nenzyme-adapter-utils\n1.3.0\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nenzyme\n3.3.0\nMIT\nLeland Richardson (leland.richardson@airbnb.com)\n\nerrno\n0.1.7\nMIT\n\u00a0\n\nerror-ex\n1.3.1\nMIT\n\u00a0\n\nes-abstract\n1.11.0\nMIT\nJordan Harband (ljharb@gmail.com)\n\nes-to-primitive\n1.1.1\nMIT\nJordan Harband\n\nes5-ext\n0.10.42\nISC\nMariusz Nowak (medyk@medikoo.com)\n\nes6-iterator\n0.1.3\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-iterator\n2.0.3\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-symbol\n2.0.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-symbol\n3.1.1\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nes6-weak-map\n0.1.4\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nescape-string-regexp\n1.0.5\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nesprima\n4.0.0\nBSD-2-Clause\nAriya Hidayat (ariya.hidayat@gmail.com)\n\nevent-emitter\n0.3.5\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nevent-stream\n3.3.4\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nexeca\n0.7.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nextend\n3.0.1\nMIT\nStefan Thomas (justmoon@members.fsf.org)\n\nextsprintf\n1.3.0\nMIT\n\u00a0\n\nfbjs\n0.8.16\nMIT\n\u00a0\n\nfetch-everywhere\n1.0.5\nMIT\nLucas Feliciano (mail@lucasfeliciano.com)\n\nfigures\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfind-root\n0.1.2\nMIT\nAgileMD (hello@agilemd.com)\n\nfind-up\n1.1.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfind-up\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nfont-awesome\n4.7.0\n(OFL-1.1 AND MIT)\nDave Gandy (dave@fontawesome.io)\n\nfor-each\n0.3.2\nMIT\nRaynos (raynos2@gmail.com)\n\nforeach\n2.0.5\nMIT\nManuel Stofer (manuel@takimata.ch)\n\nforever-agent\n0.6.1\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nform-data\n2.1.4\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\nfrom\n0.1.7\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nfs-plus\n3.0.2\nMIT\n\u00a0\n\nfs.realpath\n1.0.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfstream-ignore\n1.0.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfstream\n1.0.11\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nfunction-bind\n1.1.1\nMIT\nRaynos (raynos2@gmail.com)\n\nfunction.prototype.name\n1.1.0\nMIT\nJordan Harband\n\nfuzzaldrin-plus\n0.4.1\nMIT\n\u00a0\n\ngauge\n2.7.4\nISC\nRebecca Turner (me@re-becca.org)\n\nget-caller-file\n1.0.2\nISC\nStefan Penner\n\nget-stream\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\ngetpass\n0.1.7\nMIT\nAlex Wilson (alex.wilson@joyent.com)\n\nglob\n7.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nglobal\n4.3.2\nMIT\nRaynos (raynos2@gmail.com)\n\ngraceful-fs\n4.1.11\nISC\n\u00a0\n\nhadron-react-buttons\n1.13.2\nApache-2.0\nDurran Jordan (durran@gmail.com)\n\nhadron-react-components\n1.14.1\nApache-2.0\nDurran Jordan (durran@gmail.com)\n\nhar-schema\n1.0.5\nISC\nAhmad Nassri (ahmad@ahmadnassri.com)\n\nhar-validator\n4.2.1\nISC\nAhmad Nassri (ahmad@ahmadnassri.com)\n\nhas-flag\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nhas-symbols\n1.0.0\nMIT\nJordan Harband (ljharb@gmail.com)\n\nhas-unicode\n2.0.1\nISC\nRebecca Turner (me@re-becca.org)\n\nhas\n1.0.1\nMIT\nThiago de Arruda (tpadilha84@gmail.com)\n\nhawk\n3.1.3\nBSD-3-Clause\nEran Hammer (eran@hammer.io)\n\nhistory\n4.7.2\nMIT\nMichael Jackson\n\nhoek\n2.16.3\nBSD-3-Clause\n\u00a0\n\nhoist-non-react-statics\n2.5.0\nBSD-3-Clause\nMichael Ridgway (mcridgway@gmail.com)\n\nhosted-git-info\n2.6.0\nISC\nRebecca Turner (me@re-becca.org)\n\nhtmlparser2\n3.9.2\nMIT\nFelix Boehm (me@feedic.com)\n\nhttp-signature\n1.1.1\nMIT\nJoyent, Inc\n\niconv-lite\n0.4.21\nMIT\nAlexander Shtuchkin (ashtuchkin@gmail.com)\n\nimage-size\n0.5.5\nMIT\nnetroy (aditya@netroy.in)\n\ninflight\n1.0.6\nISC\nIsaac Z. Schlueter (i@izs.me)\n\ninherits\n2.0.3\nISC\n\u00a0\n\nini\n1.3.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\ninvariant\n2.2.4\nMIT\nAndres Suarez (zertosh@gmail.com)\n\ninvert-kv\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-arrayish\n0.2.1\nMIT\nQix\n\nis-boolean-object\n1.0.0\nMIT\nJordan Harband\n\nis-builtin-module\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-callable\n1.1.3\nMIT\nJordan Harband (ljharb@gmail.com)\n\nis-date-object\n1.0.1\nMIT\nJordan Harband\n\nis-electron-renderer\n2.0.1\nMIT\nJP Richardson\n\nis-fullwidth-code-point\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-fullwidth-code-point\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-function\n1.0.1\nMIT\nStephen Sugden (me@stephensugden.com)\n\nis-json\n2.0.1\nISC\n@joaquimserafim\n\nis-number-object\n1.0.3\nMIT\nJordan Harband\n\nis-regex\n1.0.4\nMIT\nJordan Harband\n\nis-stream\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nis-string\n1.0.4\nMIT\nJordan Harband\n\nis-subset\n0.1.1\nMIT\nTomek Wiszniewski (t.wiszniewski@gmail.com)\n\nis-symbol\n1.0.1\nMIT\nJordan Harband\n\nis-typedarray\n1.0.0\nMIT\nHugh Kennedy (hughskennedy@gmail.com)\n\nis-utf8\n0.2.1\nMIT\nwayfind\n\nisarray\n0.0.1\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nisarray\n1.0.0\nMIT\nJulian Gruber (mail@juliangruber.com)\n\nisexe\n2.0.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nisnumber\n1.0.0\nMIT\nBryce B. Baril\n\nisomorphic-fetch\n2.2.1\nMIT\nMatt Andrews (matt@mattandre.ws)\n\nisstream\n0.1.2\nMIT\nRod Vagg (rod@vagg.org)\n\njavascript-stringify\n1.6.0\nMIT\nBlake Embrey (hello@blakeembrey.com)\n\njs-tokens\n3.0.2\nMIT\nSimon Lydell\n\njs-yaml\n3.11.0\nMIT\nVladimir Zapparov (dervus.grim@gmail.com)\n\njsbn\n0.1.1\nMIT\nTom Wu\n\njson-schema\n0.2.3\nAFLv2.1,BSD\nKris Zyp\n\njson-stable-stringify\n1.0.1\nMIT\nJames Halliday (mail@substack.net)\n\njson-stringify-safe\n5.0.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\njsonify\n0.0.0\nPublic Domain\nDouglas Crockford\n\njsonparse\n1.3.1\nMIT\nTim Caswell (tim@creationix.com)\n\njsprim\n1.4.1\nMIT\n\u00a0\n\njwt-decode\n2.2.0\nMIT\nJose F. Romaniello (jfromaniello@gmail.com)\n\nkey-tree-store\n1.3.0\nMIT\nHenrik Joreteg (henrik@andyet.net)\n\nkeycode\n2.2.0\nMIT\nTim Oxley (secoif@gmail.com)\n\nlcid\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nless-cache\n1.1.0\nMIT\n\u00a0\n\nless\n2.7.3\nApache-2.0\nAlexis Sellier (self@cloudhead.net)\n\nload-json-file\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nlocate-path\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nlodash-compat\n3.10.2\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash-es\n4.17.10\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash-fp\n0.10.4\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.assign\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.chunk\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.debounce\n4.0.8\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.defaults\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.fill\n3.4.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.flattendeep\n4.4.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.get\n4.4.2\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isarray\n4.0.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isequal\n4.5.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isfunction\n3.0.9\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isnumber\n3.0.3\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isplainobject\n4.0.6\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.isstring\n4.0.1\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.keys\n4.2.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.map\n4.6.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.omit\n4.5.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash.transform\n4.6.0\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash\n3.10.1\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nlodash\n4.17.10\nMIT\nJohn-David Dalton (john.david.dalton@gmail.com)\n\nloose-envify\n1.3.1\nMIT\nAndres Suarez (zertosh@gmail.com)\n\nlru-cache\n4.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nlru-queue\n0.1.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nmacos-release\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmap-stream\n0.1.0\nCustom: https://github.com/dominictarr/event-stream\nDominic Tarr (dominic.tarr@gmail.com)\n\nmem\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmemoizee\n0.3.10\nMIT\nMariusz Nowak (medikoo@medikoo.com)\n\nmime-db\n1.33.0\nMIT\n\u00a0\n\nmime-types\n2.1.18\nMIT\n\u00a0\n\nmime\n1.6.0\nMIT\nRobert Kieffer (robert@broofa.com)\n\nmimic-fn\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nmin-document\n2.19.0\nMIT\nRaynos (raynos2@gmail.com)\n\nminimatch\n3.0.4\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nminimist\n0.0.8\nMIT\nJames Halliday (mail@substack.net)\n\nminimist\n1.2.0\nMIT\nJames Halliday (mail@substack.net)\n\nmkdirp\n0.5.1\nMIT\nJames Halliday (mail@substack.net)\n\nmoment\n2.22.1\nMIT\nIskren Ivov Chernev (iskren.chernev@gmail.com)\n\nmongodb-collection-sample\n3.0.0\nApache-2.0\n\u00a0\n\nmongodb-core\n3.0.7\nApache-2.0\nChristian Kvalheim\n\nmongodb-extended-json\n1.10.0\nApache-2.0\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-extjson\n2.1.3\nApache-2.0\nChristian Kvalheim\n\nmongodb-js-metrics\n4.1.0\nApache-2.0\n\u00a0\n\nmongodb-language-model\n1.2.0\nApache-2.0\nThomas Rueckstiess (thomas@mongodb.com)\n\nmongodb-ns\n2.0.0\nMIT\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-query-parser\n1.0.2\nApache-2.0\n\u00a0\n\nmongodb-redact\n0.1.0\nApache-2.0\nLucas Hrabovsky (hrabovsky.lucas@gmail.com)\n\nmongodb-schema\n8.0.1\nApache-2.0\nThomas Rueckstiess (thomas@rueckstiess.net)\n\nmongodb-stitch\n3.1.2\nApache-2.0\n\u00a0\n\nmongodb\n3.0.7\nApache-2.0\nChristian Kvalheim\n\nms\n0.7.1, 2.0.0\nMIT\n\u00a0\n\nnearley\n2.13.0\nMIT\nHardmath123\n\nnext-tick\n0.2.2\nMIT\nMariusz Nowak (medykk@medikoo.com)\n\nnext-tick\n1.0.0\nMIT\nMariusz Nowak (medyk@medikoo.com)\n\nnode-fetch\n1.7.3\nMIT\nDavid Frank\n\nnode-pre-gyp\n0.6.39\nBSD-3-Clause\nDane Springmeyer (dane@mapbox.com)\n\nnomnom\n1.6.2\nMIT*\nHeather Arthur (fayearthur@gmail.com)\n\nnopt\n4.0.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nnormalize-package-data\n2.4.0\nBSD-2-Clause\nMeryn Stol (merynstol@gmail.com)\n\nnormalize.css\n7.0.0\nMIT\n\u00a0\n\nnormalizr\n3.2.4\nMIT\nPaul Armstrong\n\nnpm-run-path\n2.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nnpmlog\n4.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nnth-check\n1.0.1\nBSD*\nFelix Boehm (me@feedic.com)\n\nnumber-is-nan\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nnumeral\n1.5.6\nMIT\nAdam Draper (adamwdraper@gmail.com)\n\nnumeral\n2.0.6\nMIT\nAdam Draper (adamwdraper@gmail.com)\n\noauth-sign\n0.8.2\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nobject-assign\n4.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nobject-inspect\n1.6.0\nMIT\nJames Halliday (mail@substack.net)\n\nobject-is\n1.0.1\nMIT\nJordan Harband\n\nobject-keys\n1.0.11\nMIT\nJordan Harband (ljharb@gmail.com)\n\nobject.assign\n4.1.0\nMIT\nJordan Harband\n\nobject.entries\n1.0.4\nMIT\nJordan Harband\n\nobject.values\n1.0.4\nMIT\nJordan Harband\n\nonce\n1.4.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nos-homedir\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-locale\n1.4.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-locale\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-name\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nos-tmpdir\n1.0.2\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nosenv\n0.1.5\nISC\nIsaac Z. Schlueter (i@izs.me)\n\np-finally\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-limit\n1.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-locate\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\np-try\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nparse-headers\n2.0.1\nMIT\nDavid Bj\u00f6rklund (david.bjorklund@gmail.com)\n\nparse-json\n2.2.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nparse5\n3.0.3\nMIT\nIvan Nikulin (ifaaan@gmail.com)\n\npath-exists\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-exists\n3.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-is-absolute\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-key\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npath-to-regexp\n1.7.0\nMIT\n\u00a0\n\npath-type\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npause-stream\n0.0.11\nMIT,Apache2\nDominic Tarr (dominic.tarr@gmail.com)\n\npegjs\n0.10.0\nMIT\nDavid Majda (david@majda.cz)\n\nperformance-now\n0.2.0, 2.1.0\nMIT\nBraveg1rl (braveg1rl@outlook.com)\n\npify\n2.3.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\npinkie-promise\n2.0.1\nMIT\nVsevolod Strukchinsky (floatdrop@gmail.com)\n\npinkie\n2.0.4\nMIT\nVsevolod Strukchinsky (floatdrop@gmail.com)\n\nplatform\n1.3.5\nMIT\nBenjamin Tan (demoneaux@gmail.com)\n\npluralize\n7.0.0\nMIT\nBlake Embrey (hello@blakeembrey.com)\n\nprecond\n0.2.3\nMIT*\nMathieu Turcotte (turcotte.mat@gmail.com)\n\nprocess-nextick-args\n2.0.0\nMIT\n\u00a0\n\nprocess\n0.5.2\nMIT*\nRoman Shtylman (shtylman@gmail.com)\n\nprogress\n1.1.8\nMIT*\nTJ Holowaychuk (tj@vision-media.ca)\n\npromise\n7.3.1\nMIT\nForbesLindesay\n\nprop-types-extra\n1.1.0\nMIT\nMatthew L Smith (mtscout6@gmail.com)\n\nprop-types\n15.6.1\nMIT\n\u00a0\n\nprr\n1.0.1\nMIT\nRod Vagg (rod@vagg.org)\n\npseudomap\n1.0.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\npunycode\n1.4.1\nMIT\nMathias Bynens\n\nqs\n6.4.0\nBSD-3-Clause\n\u00a0\n\nquery-string\n4.3.4\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nraf\n3.4.0\nMIT\nChris Dickinson (chris@neversaw.us)\n\nrailroad-diagrams\n1.0.0\nCC0-1.0\nTab Atkins Jr.\n\nrandexp\n0.4.6\nMIT\nRoly Fentanes\n\nrandomstring\n1.1.5\nMIT\nElias Klughammer (elias@klughammer.com)\n\nrc\n1.2.7\n(BSD-2-Clause OR MIT OR Apache-2.0)\nDominic Tarr (dominic.tarr@gmail.com)\n\nreact-bootstrap\n0.31.0\nMIT\nStephen J. Collings (stevoland@gmail.com)\n\nreact-bootstrap\n0.31.5\nMIT\nStephen J. Collings (stevoland@gmail.com)\n\nreact-codemirror\n1.0.0\nMIT\nJed Watson\n\nreact-dnd-html5-backend\n2.6.0\nBSD-3-Clause\n\u00a0\n\nreact-dnd\n2.6.0\nBSD-3-Clause\n\u00a0\n\nreact-dom\n15.6.2\nMIT\n\u00a0\n\nreact-draggable\n3.0.5\nMIT\nMatt Zabriskie\n\nreact-fontawesome\n1.6.1\nMIT\nDana Woodman (dana@danawoodman.com)\n\nreact-grid-layout\n0.15.3\nMIT\nSamuel Reed (samuel.trace.reed@gmail.com)\n\nreact-input-autosize\n2.2.1\nMIT\nJed Watson\n\nreact-is\n16.3.2\nMIT\n\u00a0\n\nreact-overlays\n0.7.4\nMIT\nJason Quense (monastic.panic@gmail.com)\n\nreact-prop-types\n0.4.0\nMIT\nMatthew L Smith (mtscout6@gmail.com)\n\nreact-redux\n5.0.7\nMIT\nDan Abramov (dan.abramov@me.com)\n\nreact-resizable\n1.7.5\nMIT\nSamuel Reed (samuel.trace.reed@gmail.com)\n\nreact-router-dom\n4.2.2\nMIT\n\u00a0\n\nreact-router-redux\n5.0.0-alpha.9\nMIT\n\u00a0\n\nreact-router\n4.2.0\nMIT\n\u00a0\n\nreact-select\n1.2.1\nMIT\nJed Watson\n\nreact-test-renderer\n15.6.2\nMIT\n\u00a0\n\nreact-tooltip\n3.5.1\nMIT\nwwayne\n\nreact-vega-lite\n1.1.3\nApache-2.0\nKrist Wongsuphasawat (krist.wongz@gmail.com)\n\nreact-vega\n3.1.2\nApache-2.0\nKrist Wongsuphasawat (krist.wongz@gmail.com)\n\nreact\n15.6.2\nMIT\n\u00a0\n\nread-pkg-up\n1.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nread-pkg\n1.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nreadable-stream\n1.0.34, 2.3.6\nMIT\n\u00a0\n\nreduce-reducers\n0.1.5\nMIT\nAndrew Clark (acdlite@me.com)\n\nredux-actions\n2.3.2\nMIT\nAndrew Clark (acdlite@me.com)\n\nredux-saga-routines\n2.2.3\nMIT\nAlex Fitiskin (alexfitiskin@gmail.com)\n\nredux-saga\n0.16.0\nMIT\nYassine ELOUAFI (yelouafi@gmail.com)\n\nredux\n3.7.2\nMIT\n\u00a0\n\nregenerator-runtime\n0.11.1\nMIT\nBen Newman (bn@cs.stanford.edu)\n\nrequest\n2.81.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\nrequire-directory\n2.1.1\nMIT\nTroy Goode (troygoode@gmail.com)\n\nrequire-main-filename\n1.0.1\nISC\nBen Coe (ben@npmjs.com)\n\nrequire_optional\n1.0.1\nApache-2.0\nChristian Kvalheim Amor\n\nreselect\n3.0.1\nMIT\n\u00a0\n\nreservoir\n0.1.2\nMIT\nJon-Carlos Rivera (jon.carlos.rivera@gmail.com)\n\nresolve-from\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nresolve-pathname\n2.2.0\nMIT\nMichael Jackson\n\nret\n0.1.15\nMIT\nRoly Fentanes\n\nrimraf\n2.6.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nrst-selector-parser\n2.2.3\nBSD-3-Clause\nGajus Kuizinas (gajus@gajus.com)\n\nrw\n1.3.3\nBSD-3-Clause\nMike Bostock\n\nsafe-buffer\n5.1.2\nMIT\nFeross Aboukhadijeh (feross@feross.org)\n\nsafer-buffer\n2.1.2\nMIT\nNikita Skovoroda (chalkerx@gmail.com)\n\nsemver\n5.5.0\nISC\n\u00a0\n\nset-blocking\n2.0.0\nISC\nBen Coe (ben@npmjs.com)\n\nsetimmediate\n1.0.5\nMIT\nYuzuJS\n\nshebang-command\n1.2.0\nMIT\nKevin Martensson (kevinmartensson@gmail.com)\n\nshebang-loader\n0.0.1\nMIT\njavascriptismagic@gmail.com\n\nshebang-regex\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsignal-exit\n3.0.2\nISC\nBen Coe (ben@npmjs.com)\n\nsimple-node-logger\n0.93.37\nApache-2.0\ndarryl.west@raincitysoftware.com\n\nsingleton-js\n1.0.0\nMIT\nRyan Beard\n\nsntp\n1.0.9\nBSD\nEran Hammer (eran@hammer.io)\n\nsource-map\n0.5.7\nBSD-3-Clause\nNick Fitzgerald (nfitzgerald@mozilla.com)\n\nspdx-correct\n3.0.0\nApache-2.0\nKyle E. Mitchell (kyle@kemitchell.com)\n\nspdx-exceptions\n2.1.0\nCC-BY-3.0\nThe Linux Foundation\n\nspdx-expression-parse\n3.0.0\nMIT\nKyle E. Mitchell (kyle@kemitchell.com)\n\nspdx-license-ids\n3.0.0\nCC0-1.0\nShinnosuke Watanabe\n\nsplit\n0.3.3\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\nsprintf-js\n1.0.3\nBSD-3-Clause\nAlexandru Marasteanu (hello@alexei.ro)\n\nsshpk\n1.14.1\nMIT\nJoyent, Inc\n\nstack-trace\n0.0.10\nMIT\nFelix Geisend\u00f6rfer (felix@debuggable.com)\n\nstats-lite\n2.1.1\nMIT\nBryce B. Baril\n\nstream-combiner\n0.0.4\nMIT\n\u2018Dominic Tarr\u2019 (dominic.tarr@gmail.com)\n\nstrict-uri-encode\n1.1.0\nMIT\nKevin M\u00e5rtensson (kevinmartensson@gmail.com)\n\nstring-width\n1.0.2, 2.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstring_decoder\n0.10.31, 1.1.1\nMIT\nRod Vagg (r@va.gg)\n\nstringstream\n0.0.5\nMIT\nMichael Hart (michael.hart.au@gmail.com)\n\nstrip-ansi\n3.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-ansi\n4.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-bom\n2.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-eof\n1.0.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nstrip-json-comments\n2.0.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsupports-color\n5.4.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nsymbol-observable\n1.2.0\nMIT\nBen Lesh (ben@benlesh.com)\n\ntar-pack\n3.4.1\nBSD-2-Clause\n\u00a0\n\ntar\n2.2.1\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nthrough2\n0.6.5\nMIT\nRod Vagg (r@va.gg)\n\nthrough\n2.3.8\nMIT\nDominic Tarr (dominic.tarr@gmail.com)\n\ntimers-ext\n0.1.5\nISC\nMariusz Nowak (medyk@medikoo.com)\n\ntopojson-client\n3.0.0\nBSD-3-Clause\nMike Bostock\n\ntough-cookie\n2.3.4\nBSD-3-Clause\nJeremy Stashewsky (jstashewsky@salesforce.com)\n\ntrim\n0.0.1\nMIT*\nTJ Holowaychuk (tj@vision-media.ca)\n\ntslib\n1.9.0\nApache-2.0\nMicrosoft Corp.\n\ntunnel-agent\n0.6.0\nApache-2.0\nMikeal Rogers (mikeal.rogers@gmail.com)\n\ntweetnacl\n0.14.5\nUnlicense\nTweetNaCl-js contributors\n\nua-parser-js\n0.7.18\n(GPL-2.0 OR MIT)\nFaisal Salman (f@faisalman.com)\n\nuid-number\n0.0.6\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nuncontrollable\n4.1.0\nMIT\nJason Quense (monastic.panic@gmail.com)\n\nunderscore-plus\n1.6.6\nMIT\n\u00a0\n\nunderscore\n1.4.4, 1.6.0\nMIT*\nJeremy Ashkenas (jeremy@documentcloud.org)\n\nuniversal-analytics\n0.4.16\nMIT\nJ\u00f6rg Tillmann (joerg@peaksandpies.com)\n\nutil-deprecate\n1.0.2\nMIT\nNathan Rajlich (nathan@tootallnate.net)\n\nuuid\n3.2.1\nMIT\n\u00a0\n\nvalidate-npm-package-license\n3.0.3\nApache-2.0\nKyle E. Mitchell (kyle@kemitchell.com)\n\nvalue-equal\n0.4.0\nMIT\nMichael Jackson\n\nvega-canvas\n1.0.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-crossfilter\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-dataflow\n3.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-encode\n2.0.8\nBSD-3-Clause\nJeffrey Heer\n\nvega-event-selector\n2.0.0\nBSD-3-Clause\nUW Interactive Data Lab\n\nvega-expression\n2.3.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-force\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-geo\n2.2.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-hierarchy\n2.1.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-lite\n2.4.1\nBSD-3-Clause\nJeffrey Heer, Dominik Moritz, Kanit \u201cHam\u201d Wongsuphasawat\n\nvega-loader\n2.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-parser\n2.7.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-projection\n1.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-runtime\n2.0.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-scale\n2.1.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-scenegraph\n2.5.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-statistics\n1.2.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-transforms\n1.3.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-typings\n0.2.16\nBSD*\nDominik Moritz (domoritz@gmail.com)\n\nvega-util\n1.7.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-view-transforms\n1.2.1\nBSD-3-Clause\nJeffrey Heer\n\nvega-view\n2.3.2\nBSD-3-Clause\nJeffrey Heer\n\nvega-voronoi\n2.0.0\nBSD-3-Clause\nJeffrey Heer\n\nvega-wordcloud\n2.1.0\nBSD-3-Clause\nJeffrey Heer\n\nvega\n3.3.1\nBSD-3-Clause\nUW Interactive Data Lab\n\nverror\n1.10.0\nMIT\n\u00a0\n\nwalkdir\n0.0.11\nMIT\nRyan Day (soldair@gmail.com)\n\nwarning\n3.0.0\nBSD-3-Clause\nBerkeley Martinez (berkeley@r3dm.com)\n\nwhatwg-fetch\n2.0.4\nMIT\n\u00a0\n\nwhich-module\n1.0.0\nISC\nnexdrew\n\nwhich-module\n2.0.0\nISC\nnexdrew\n\nwhich\n1.3.0\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nwide-align\n1.1.2\nISC\nRebecca Turner (me@re-becca.org)\n\nwin-release\n1.1.1\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nwindow-size\n0.1.4\nMIT\nJon Schlinkert\n\nwindow-size\n0.2.0\nMIT\nJon Schlinkert\n\nwrap-ansi\n2.1.0\nMIT\nSindre Sorhus (sindresorhus@gmail.com)\n\nwrappy\n1.0.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nxhr\n2.4.1\nMIT\nRaynos (raynos2@gmail.com)\n\nxmlhttprequest\n1.8.0\nMIT\nDan DeFelippi\n\nxtend\n4.0.1\nMIT\nRaynos (raynos2@gmail.com)\n\ny18n\n3.2.1\nISC\nBen Coe (ben@npmjs.com)\n\nyallist\n2.1.2\nISC\nIsaac Z. Schlueter (i@izs.me)\n\nyargs-parser\n2.4.1\nISC\nBen Coe (ben@npmjs.com)\n\nyargs-parser\n9.0.2\nISC\nBen Coe (ben@npmjs.com)\n\nyargs (yargs)\n4.8.1, 11.0.0, 11.1.0\nMIT\n\u00a0\n\nyargs (bcoe)\n3.32.0\nMIT\nAlex Ford (Alex.Ford@CodeTunnel.com)\n\n\n\n",
            "preview": "MongoDB Charts uses third-party libraries or other resources that may be distributed under licenses different than the MongoDB software.",
            "tags": "",
            "links": [
                "mailto:medyk%40medikoo.com",
                "https://github.com/sindresorhus/has-flag",
                "https://github.com/mikeal/oauth-sign",
                "https://github.com/JedWatson/classnames",
                "https://github.com/sindresorhus/execa",
                "https://github.com/studio-b12/is-subset",
                "https://github.com/FortAwesome/Font-Awesome",
                "https://github.com/fent/ret.js",
                "https://github.com/npm/wrappy",
                "https://github.com/isaacs/json-stringify-safe",
                "https://github.com/joaquimserafim/is-json",
                "mailto:tpadilha84%40gmail.com",
                "https://github.com/salesforce/tough-cookie",
                "https://github.com/facebook/prop-types",
                "https://github.com/mongodb-js/codemirror-mongodb",
                "https://github.com/hardmath123/nearley",
                "https://github.com/YuzuJS/setImmediate",
                "https://github.com/jprichardson/is-electron-renderer",
                "https://github.com/ljharb/is-string",
                "https://github.com/ljharb/has-symbols",
                "https://github.com/vega/vega-parser",
                "https://github.com/mbostock/rw",
                "https://github.com/ahmadnassri/har-validator",
                "https://github.com/mongodb-js/mongodb-redact",
                "https://github.com/d3/d3-contour",
                "https://github.com/sindresorhus/npm-run-path",
                "https://github.com/manuelstofer/foreach",
                "https://github.com/STRML/react-resizable",
                "https://github.com/juliangruber/isarray",
                "https://github.com/jquense/uncontrollable",
                "https://github.com/vega/vega-lite",
                "https://github.com/trentm/node-dashdash",
                "mailto:ljharb%40gmail.com",
                "https://www.github.com/DefinitelyTyped/DefinitelyTyped",
                "mailto:phil%40latentflip.com",
                "https://github.com/sindresorhus/load-json-file",
                "https://github.com/faisalman/ua-parser-js",
                "mailto:ashtuchkin%40gmail.com",
                "https://github.com/sindresorhus/p-limit",
                "https://github.com/d3/d3-voronoi",
                "mailto:justmoon%40members.fsf.org",
                "https://github.com/d3/d3-interpolate",
                "https://github.com/medikoo/es5-ext",
                "mailto:domoritz%40gmail.com",
                "https://github.com/isaacs/node-graceful-fs",
                "mailto:npm%40lovell.info",
                "https://github.com/sindresorhus/invert-kv",
                "https://github.com/qix-/node-is-arrayish",
                "mailto:t.wiszniewski%40gmail.com",
                "https://github.com/ljharb/object-is",
                "https://github.com/quartzjer/ecc-jsbn",
                "https://github.com/sindresorhus/escape-string-regexp",
                "https://github.com/isaacs/inherits",
                "https://github.com/sindresorhus/figures",
                "https://github.com/hughsk/is-typedarray",
                "https://github.com/Raynos/dom-walk",
                "https://github.com/soldair/node-walkdir",
                "https://github.com/npm/normalize-package-data",
                "https://github.com/isaacs/abbrev-js",
                "https://github.com/Raynos/for-each",
                "https://github.com/yargs/yargs",
                "mailto:fayearthur%40gmail.com",
                "https://github.com/sindresorhus/number-is-nan",
                "https://github.com/npm/node-semver",
                "https://github.com/zertosh/invariant",
                "https://github.com/alexindigo/asynckit",
                "mailto:hello%40indigounited.com",
                "https://github.com/bitinn/node-fetch",
                "mailto:medykk%40medikoo.com",
                "https://github.com/npm/npmlog",
                "https://github.com/shtylman/node-process",
                "https://docs.mongodb.com/charts/v0.12/third-party-licenses/undefined",
                "https://github.com/sindresorhus/path-is-absolute",
                "https://github.com/vega/vega-geo",
                "https://github.com/mongodb-js/mongodb-extjson",
                "mailto:ahmad%40ahmadnassri.com",
                "https://github.com/ChALkeR/safer-buffer",
                "https://github.com/iarna/are-we-there-yet",
                "https://github.com/nodeca/js-yaml",
                "https://github.com/d3/d3-array",
                "https://github.com/ampersandjs/ampersand-events",
                "mailto:krist.wongz%40gmail.com",
                "https://github.com/jquense/dom-helpers",
                "https://github.com/vega/vega-loader",
                "https://github.com/klughammer/node-randomstring",
                "https://github.com/redux-saga/redux-saga",
                "mailto:ben%40npmjs.com",
                "https://github.com/vega/vega-dataflow",
                "mailto:bn%40cs.stanford.edu",
                "mailto:matt%40mattandre.ws",
                "https://github.com/meryn/performance-now",
                "https://github.com/vega/vega-wordcloud",
                "https://github.com/vega/vega-crossfilter",
                "https://github.com/juliangruber/balanced-match",
                "https://github.com/request/request",
                "https://github.com/bestiejs/punycode.js",
                "mailto:turcotte.mat%40gmail.com",
                "https://github.com/mapbox/node-pre-gyp",
                "https://github.com/tj/commander.js",
                "https://github.com/mridgway/hoist-non-react-statics",
                "https://github.com/mongodb-js/hadron-react",
                "https://github.com/mikeal/forever-agent",
                "https://github.com/caolan/async",
                "https://github.com/jashkenas/underscore",
                "mailto:sindresorhus%40gmail.com",
                "https://github.com/chearon/node-canvas-prebuilt",
                "https://github.com/redux-utilities/reduce-reducers",
                "https://github.com/Raynos/function-bind",
                "https://github.com/ReactTraining/history",
                "https://github.com/Automattic/cli-table",
                "https://github.com/calvinmetcalf/process-nextick-args",
                "mailto:adamwdraper%40gmail.com",
                "mailto:ifaaan%40gmail.com",
                "https://github.com/kristw/react-vega",
                "https://github.com/dominictarr/through",
                "https://github.com/atom/fs-plus",
                "https://github.com/Microsoft/tslib",
                "https://github.com/ahmadnassri/har-schema",
                "https://github.com/d3/d3-color",
                "https://github.com/vega/vega-canvas",
                "https://github.com/ljharb/is-symbol",
                "mailto:thomas%40mongodb.com",
                "https://github.com/mikeal/aws-sign",
                "https://github.com/vega/vega-statistics",
                "mailto:nathan%40storydesk.com",
                "https://github.com/isaacs/once",
                "mailto:floatdrop%40gmail.com",
                "https://github.com/ljharb/is-number-object",
                "mailto:darryl.west%40raincitysoftware.com",
                "https://github.com/auth0/jwt-decode",
                "https://github.com/d3/d3-scale-chromatic",
                "mailto:alex.wilson%40joyent.com",
                "https://github.com/ljharb/object-keys",
                "mailto:hrabovsky.lucas%40gmail.com",
                "mailto:chris%40neversaw.us",
                "https://github.com/Raynos/xtend",
                "https://github.com/mozilla/source-map",
                "mailto:mail%40lucasfeliciano.com",
                "mailto:dfcreative%40gmail.com",
                "https://github.com/airbnb/enzyme",
                "mailto:legal%40mongodb.com",
                "https://github.com/chalk/supports-color",
                "https://github.com/hueniverse/sntp",
                "https://github.com/react-bootstrap/prop-types-extra",
                "https://github.com/sindresorhus/strip-eof",
                "https://github.com/davepacheco/node-verror",
                "https://github.com/danawoodman/react-fontawesome",
                "https://github.com/jslicense/spdx-expression-parse.js",
                "https://github.com/mhart/aws4",
                "https://github.com/driverdan/node-XMLHttpRequest",
                "https://github.com/unclechu/node-deep-extend",
                "https://github.com/redux-utilities/redux-actions",
                "https://github.com/paularmstrong/normalizr",
                "mailto:mail%40substack.net",
                "https://github.com/facebook/react",
                "https://github.com/vega/vega-scenegraph",
                "https://github.com/yargs/y18n",
                "https://github.com/floatdrop/pinkie-promise",
                "https://github.com/JedWatson/react-input-autosize",
                "https://github.com/vega/vega-encode",
                "https://github.com/twbs/bootstrap",
                "https://github.com/adamwdraper/Numeral-js",
                "mailto:thomas%40rueckstiess.net",
                "https://github.com/fb55/nth-check",
                "https://github.com/necolas/normalize.css",
                "https://github.com/d3/d3-timer",
                "https://github.com/fb55/css-what",
                "https://github.com/isaacs/ini",
                "https://github.com/andris9/encoding",
                "https://github.com/STRML/react-grid-layout",
                "https://github.com/isaacs/block-stream",
                "https://github.com/peaksandpies/universal-analytics",
                "https://github.com/isaacs/node-glob",
                "https://github.com/jeancroy/fuzzaldrin-plus",
                "https://github.com/brycebaril/node-isnumber",
                "https://github.com/mikeal/tunnel-agent",
                "https://github.com/ljharb/object.assign",
                "mailto:f%40faisalman.com",
                "mailto:troygoode%40gmail.com",
                "https://github.com/dchest/tweetnacl-js",
                "https://github.com/mjackson/value-equal",
                "https://github.com/vega/vega-scale",
                "https://github.com/ashtuchkin/iconv-lite",
                "https://github.com/vega/vega-util",
                "https://github.com/d3/d3-dispatch",
                "http://i.imgur.com/goJdO.png",
                "https://github.com/substack/node-mkdirp",
                "https://github.com/vega/vega-voronoi",
                "https://github.com/felixge/node-stack-trace",
                "https://github.com/sindresorhus/resolve-from",
                "https://github.com/mongodb/node-mongodb-native",
                "mailto:berkeley%40r3dm.com",
                "mailto:crh0872%40gmail.com",
                "mailto:samuel.trace.reed%40gmail.com",
                "mailto:feross%40feross.org",
                "https://github.com/sindresorhus/strip-bom",
                "mailto:braveg1rl%40outlook.com",
                "mailto:raynos2%40gmail.com",
                "mailto:aditya%40netroy.in",
                "https://github.com/dfcreative/color-name",
                "mailto:stevoland%40gmail.com",
                "https://github.com/form-data/form-data",
                "https://github.com/nodejs/string_decoder",
                "https://github.com/alexei/sprintf.js",
                "https://github.com/rvagg/node-errno",
                "mailto:david%40majda.cz",
                "mailto:me%40feedic.com",
                "mailto:tim%40creationix.com",
                "https://github.com/dominictarr/map-stream",
                "https://github.com/sindresorhus/p-try",
                "https://github.com/jshttp/mime-types",
                "https://github.com/TooTallNate/util-deprecate",
                "https://github.com/FB55/domelementtype",
                "https://github.com/JedWatson/react-codemirror",
                "https://github.com/sindresorhus/p-locate",
                "https://github.com/pillarjs/path-to-regexp",
                "https://github.com/fb55/DomHandler",
                "https://github.com/isaacs/node-lru-cache",
                "mailto:demoneaux%40gmail.com",
                "https://github.com/cheeriojs/dom-renderer",
                "https://github.com/lodash/lodash",
                "https://github.com/grncdr/js-is-function",
                "mailto:jfromaniello%40gmail.com",
                "mailto:hughskennedy%40gmail.com",
                "mailto:dominic.tarr%40gmail.com",
                "https://github.com/cheeriojs/cheerio",
                "https://github.com/sindresorhus/strip-json-comments",
                "https://github.com/kristw/react-vega-lite",
                "https://github.com/fb55/htmlparser2",
                "https://github.com/floatdrop/pinkie",
                "https://github.com/felixge/node-combined-stream",
                "mailto:dervus.grim%40gmail.com",
                "https://github.com/image-size/image-size",
                "https://github.com/lodash/lodash-compat",
                "https://github.com/iarna/gauge",
                "https://github.com/mongodb-js/mongodb-schema",
                "https://github.com/sindresorhus/mem",
                "mailto:felix%40debuggable.com",
                "https://github.com/ampersandjs/ampersand-version",
                "https://github.com/hapijs/boom",
                "https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime",
                "https://github.com/wwayne/react-tooltip",
                "https://github.com/HenrikJoreteg/array-next",
                "mailto:leland.richardson%40airbnb.com",
                "mailto:tj%40vision-media.ca",
                "https://github.com/mongodb-js/query-parser",
                "mailto:mikeal.rogers%40gmail.com",
                "https://github.com/kevva/shebang-command",
                "mailto:hello%40blakeembrey.com",
                "https://github.com/visionmedia/debug",
                "https://github.com/yargs/cliui",
                "mailto:self%40cloudhead.net",
                "https://github.com/ljharb/define-properties",
                "https://github.com/isaacs/fstream-ignore",
                "https://github.com/afitiskin/redux-saga-routines",
                "https://github.com/tarruda/has",
                "https://github.com/justmoon/node-extend",
                "https://github.com/joyent/node-jsprim",
                "https://github.com/gaearon/disposables",
                "mailto:gajus%40gajus.com",
                "https://github.com/arekinath/node-getpass",
                "https://github.com/jslicense/spdx-correct.js",
                "https://github.com/nexdrew/which-module",
                "mailto:robert%40broofa.com",
                "https://github.com/bugsnag/bugsnag-js",
                "https://github.com/sindresorhus/os-homedir",
                "https://github.com/nodeca/argparse",
                "https://github.com/Marak/colors.js",
                "https://github.com/dominictarr/rc",
                "mailto:henrik%40andyet.net",
                "https://github.com/sindresorhus/parse-json",
                "https://github.com/rvagg/prr",
                "https://github.com/hapijs/cryptiles",
                "mailto:joerg%40peaksandpies.com",
                "mailto:dane%40mapbox.com",
                "mailto:david.bjorklund%40gmail.com",
                "https://github.com/d3/d3-scale",
                "https://github.com/d3/d3-time-format",
                "https://github.com/felixge/node-delayed-stream",
                "https://github.com/medikoo/event-emitter",
                "https://github.com/npm/osenv",
                "mailto:r%40va.gg",
                "mailto:mtscout6%40gmail.com",
                "https://github.com/d3/d3-quadtree",
                "mailto:christkv%40gmail.com",
                "mailto:hello%40agilemd.com",
                "https://github.com/sindresorhus/path-exists",
                "https://github.com/medikoo/cli-color",
                "mailto:david.tudury%40gmail.com",
                "mailto:manuel%40takimata.ch",
                "https://github.com/vega/vega-force",
                "https://github.com/dominictarr/stream-combiner",
                "https://github.com/ljharb/es-abstract",
                "https://github.com/d3/d3-path",
                "mailto:ariya.hidayat%40gmail.com",
                "https://github.com/ljharb/es-to-primitive",
                "https://github.com/d3/d3-format",
                "https://github.com/isaacs/core-util-is",
                "https://github.com/chalk/ansi-regex",
                "mailto:sebmck%40gmail.com",
                "https://github.com/ljharb/is-callable",
                "https://github.com/es-shims/Object.values",
                "mailto:zertosh%40gmail.com",
                "https://github.com/yargs/set-blocking",
                "https://github.com/substack/node-concat-map",
                "https://github.com/sindresorhus/os-tmpdir",
                "https://github.com/lydell/js-tokens",
                "https://github.com/mongodb-js/extended-json",
                "https://github.com/mongodb-js/ns",
                "https://github.com/ForbesLindesay/tar-pack",
                "https://github.com/yargs/yargs-parser",
                "mailto:jeremy%40documentcloud.org",
                "mailto:secoif%40gmail.com",
                "https://github.com/IndigoUnited/node-cross-spawn",
                "https://github.com/mikeal/caseless",
                "https://github.com/chalk/strip-ansi",
                "https://github.com/ampersandjs/ampersand-state",
                "https://github.com/d3/d3-force",
                "https://github.com/sindresorhus/mimic-fn",
                "https://github.com/jquery/esprima",
                "https://github.com/wayfind/is-utf8",
                "mailto:damon.oehlman%40gmail.com",
                "https://github.com/ljharb/is-regex",
                "https://github.com/rvagg/through2",
                "https://github.com/npm/hosted-git-info",
                "https://github.com/npm/inflight",
                "https://github.com/pegjs/pegjs",
                "https://github.com/substack/minimist",
                "https://github.com/inikulin/parse5",
                "https://github.com/moment/moment",
                "https://github.com/chrisdickinson/raf",
                "https://github.com/dominictarr/JSONStream",
                "https://github.com/kriskowal/asap",
                "https://github.com/es-shims/Object.entries",
                "https://github.com/HenrikJoreteg/key-tree-store",
                "mailto:iam%40alexindigo.com",
                "https://github.com/sindresorhus/locate-path",
                "https://github.com/juliangruber/brace-expansion",
                "https://github.com/blakeembrey/javascript-stringify",
                "https://github.com/chalk/wrap-ansi",
                "https://github.com/isaacs/minimatch",
                "mailto:chalkerx%40gmail.com",
                "https://github.com/vega/vega-transforms",
                "https://github.com/lovell/detect-libc",
                "https://github.com/ljharb/qs",
                "https://github.com/medikoo/d",
                "https://github.com/ampersandjs/ampersand-collection",
                "mailto:durran%40gmail.com",
                "https://github.com/mhart/StringStream",
                "mailto:jstashewsky%40salesforce.com",
                "https://github.com/vega/vega-event-selector",
                "https://github.com/harthur/nomnom",
                "https://github.com/react-bootstrap/react-overlays",
                "https://github.com/kemitchell/validate-npm-package-license.js",
                "https://github.com/babel/babel/tree/master/packages/babel-runtime",
                "mailto:jeremie%40jabber.org",
                "https://github.com/sindresorhus/is-stream",
                "https://github.com/substack/json-stable-stringify",
                "https://github.com/shinnn/spdx-license-ids",
                "https://github.com/mongodb/js-bson",
                "https://github.com/blesh/symbol-observable",
                "https://github.com/aweary/rst-selector-parser",
                "https://github.com/jshttp/mime-db",
                "https://github.com/vega/vega-view",
                "https://github.com/d3/d3-geo",
                "https://github.com/zloirock/core-js",
                "https://github.com/sindresorhus/array-uniq",
                "https://github.com/agilemd/find-root",
                "https://github.com/Qix-/color-convert",
                "mailto:me%40stephensugden.com",
                "https://github.com/codemirror/CodeMirror",
                "https://github.com/atom/underscore-plus",
                "mailto:javascriptismagic%40gmail.com",
                "https://github.com/substack/object-inspect",
                "https://github.com/ljharb/function.prototype.name",
                "https://github.com/sindresorhus/path-type",
                "https://github.com/kesla/parse-headers",
                "https://github.com/joyent/node-http-signature",
                "https://github.com/tapjs/signal-exit",
                "https://github.com/sindresorhus/macos-release",
                "https://github.com/creationix/jsonparse",
                "https://github.com/MathieuTurcotte/node-precond",
                "mailto:jon.carlos.rivera%40gmail.com",
                "https://github.com/react-bootstrap/react-prop-types",
                "https://github.com/less/less.js",
                "https://github.com/sindresorhus/get-stream",
                "https://github.com/sindresorhus/p-finally",
                "https://github.com/stefanpenner/get-caller-file",
                "https://github.com/dominictarr/pause-stream",
                "https://github.com/github/fetch",
                "mailto:iskren.chernev%40gmail.com",
                "https://github.com/medikoo/es6-symbol",
                "https://github.com/medikoo/memoizee",
                "mailto:lotsmanov89%40gmail.com",
                "https://github.com/hapijs/hoek",
                "https://github.com/visionmedia/node-progress",
                "https://github.com/FB55/domutils",
                "https://github.com/ampersandjs/ampersand-class-extend",
                "https://github.com/npm/fstream",
                "https://github.com/sindresorhus/find-up",
                "https://github.com/feross/safe-buffer",
                "https://github.com/isaacs/uid-number",
                "mailto:mattmuelle%40gmail.com",
                "https://github.com/reactjs/react-redux",
                "https://github.com/ljharb/is-boolean-object",
                "https://github.com/dominictarr/from",
                "https://github.com/ljharb/is-date-object",
                "mailto:trentm%40gmail.com",
                "mailto:monastic.panic%40gmail.com",
                "https://github.com/react-bootstrap/react-bootstrap",
                "https://github.com/d3/d3-dsv",
                "https://github.com/Raynos/min-document",
                "https://github.com/iarna/aproba",
                "https://github.com/isaacs/node-tar",
                "mailto:mcavage%40gmail.com",
                "https://github.com/fb55/css-select",
                "mailto:nfitzgerald%40mozilla.com",
                "https://github.com/visionmedia/node-delegates",
                "https://github.com/d3/d3-request",
                "https://github.com/andyperlitch/jsbn",
                "https://github.com/davepacheco/node-extsprintf",
                "mailto:dc%40davidchambers.me",
                "https://github.com/sindresorhus/code-point-at",
                "https://github.com/vega/vega",
                "https://github.com/react-dnd/react-dnd",
                "https://github.com/yargs/require-main-filename",
                "https://github.com/mongodb-js/metrics",
                "mailto:john.david.dalton%40gmail.com",
                "https://github.com/sindresorhus/object-assign",
                "https://github.com/sindresorhus/read-pkg-up",
                "mailto:dana%40danawoodman.com",
                "mailto:yelouafi%40gmail.com",
                "https://github.com/broofa/node-mime",
                "https://github.com/sindresorhus/os-locale",
                "https://github.com/MathieuTurcotte/node-backoff",
                "https://github.com/isaacs/rimraf",
                "https://github.com/ampersandjs/ampersand-collection-lodash-mixin",
                "https://github.com/nodejs/readable-stream",
                "https://github.com/medikoo/timers-ext",
                "https://github.com/chalk/ansi-styles",
                "https://github.com/medikoo/es6-weak-map",
                "https://github.com/mongodb-js/mongodb-core",
                "https://github.com/d3/d3-shape",
                "https://github.com/mcavage/node-assert-plus",
                "https://github.com/ryanbeard/singleton-js",
                "https://github.com/dtudury/discontinuous-range",
                "https://github.com/sindresorhus/read-pkg",
                "mailto:kyle%40kemitchell.com",
                "https://github.com/then/promise",
                "https://github.com/hueniverse/hawk",
                "https://github.com/imbcmdth/reservoir",
                "https://github.com/brycebaril/node-stats-lite",
                "mailto:soldair%40gmail.com",
                "https://github.com/dominictarr/split",
                "mailto:shtylman%40gmail.com",
                "https://github.com/troygoode/node-require-directory",
                "mailto:mcridgway%40gmail.com",
                "https://github.com/sindresorhus/win-release",
                "https://github.com/medikoo/next-tick",
                "https://github.com/sindresorhus/decamelize",
                "https://github.com/sindresorhus/lcid",
                "https://github.com/fent/randexp.js",
                "https://github.com/isaacs/yallist",
                "https://github.com/fb55/boolbase",
                "https://github.com/bcoe/yargs",
                "https://github.com/BerkeleyTrue/warning",
                "https://github.com/JedWatson/react-select",
                "https://github.com/sindresorhus/shebang-regex",
                "https://github.com/medikoo/lru-queue",
                "https://github.com/DamonOehlman/detect-browser",
                "https://github.com/arekinath/node-sshpk",
                "https://github.com/reactjs/reselect",
                "https://github.com/mongodb-js/mongodb-language-model",
                "https://github.com/iarna/has-unicode",
                "https://github.com/Raynos/duplexer",
                "https://github.com/isaacs/fs.realpath",
                "https://github.com/sindresorhus/query-string",
                "https://github.com/atom/less-cache",
                "https://github.com/vega/vega-hierarchy",
                "https://github.com/naugtur/xhr",
                "https://github.com/isaacs/pseudomap",
                "https://github.com/jonschlinkert/window-size",
                "https://github.com/zeit/ms",
                "https://github.com/ReactTraining/react-router",
                "https://github.com/timoxley/keycode",
                "mailto:ben%40benlesh.com",
                "https://github.com/fb55/node-entities",
                "https://github.com/isaacs/node-which",
                "mailto:medikoo%40medikoo.com",
                "https://github.com/vega/vega-runtime",
                "https://github.com/javascriptismagic/shebang-loader",
                "https://github.com/d3/d3-collection",
                "https://github.com/kelektiv/node-uuid",
                "mailto:hello%40alexei.ro",
                "mailto:mail%40juliangruber.com",
                "https://github.com/d3/d3-time",
                "https://github.com/sindresorhus/is-fullwidth-code-point",
                "https://github.com/christkv/require_optional",
                "https://github.com/dominictarr/event-stream",
                "mailto:merynstol%40gmail.com",
                "https://github.com/sindresorhus/path-key",
                "https://github.com/mongodb-js/mongodb-collection-sample",
                "https://github.com/sindresorhus/builtin-modules",
                "https://github.com/iarna/wide-align",
                "mailto:Alex.Ford%40CodeTunnel.com",
                "https://github.com/substack/jsonify",
                "https://github.com/kevva/strict-uri-encode",
                "mailto:i%40izs.me",
                "mailto:michael.hart.au%40gmail.com",
                "https://github.com/tabatkins/railroad-diagrams",
                "https://github.com/zertosh/loose-envify",
                "https://github.com/lucasfeliciano/fetch-everywhere",
                "https://github.com/mcavage/node-asn1",
                "mailto:acdlite%40me.com",
                "https://github.com/isaacs/isexe",
                "https://github.com/nathanpeck/clui",
                "https://github.com/tj/co",
                "mailto:me%40re-becca.org",
                "https://github.com/kriszyp/json-schema",
                "https://github.com/pixelsandbytes/caller-id",
                "https://github.com/medikoo/es6-iterator",
                "https://github.com/blakeembrey/pluralize",
                "https://github.com/davidchambers/Base64.js",
                "https://github.com/chalk/chalk",
                "https://github.com/topojson/topojson-client",
                "https://github.com/d3/d3-hierarchy",
                "https://github.com/epoberezkin/ajv",
                "mailto:pxandbytes%40gmail.com",
                "https://github.com/darrylwest/simple-node-logger",
                "https://github.com/iarna/console-control-strings",
                "https://github.com/sindresorhus/camelcase",
                "https://github.com/mzabriskie/react-draggable",
                "https://github.com/sindresorhus/os-name",
                "mailto:dan.abramov%40me.com",
                "https://github.com/facebook/fbjs",
                "https://github.com/vega/vega-projection",
                "https://github.com/qix-/node-error-ex",
                "https://github.com/vega/vega-expression",
                "https://github.com/Raynos/global",
                "https://github.com/sindresorhus/string-width",
                "https://github.com/lodash/lodash-fp",
                "mailto:rod%40vagg.org",
                "https://github.com/matthew-andrews/isomorphic-fetch",
                "https://github.com/vega/vega-view-transforms",
                "mailto:kevinmartensson%40gmail.com",
                "https://github.com/kemitchell/spdx-exceptions.json",
                "https://github.com/sindresorhus/is-builtin-module",
                "mailto:elias%40klughammer.com",
                "mailto:dave%40fontawesome.io",
                "https://github.com/sindresorhus/pify",
                "https://github.com/rvagg/isstream",
                "mailto:eran%40hammer.io",
                "https://github.com/mjackson/resolve-pathname",
                "mailto:guillermo%40learnboost.com",
                "https://github.com/reactjs/redux",
                "mailto:nathan%40tootallnate.net",
                "mailto:alexfitiskin%40gmail.com",
                "https://github.com/vega/vega-typings",
                "https://github.com/bestiejs/platform.js",
                "https://github.com/npm/nopt"
            ]
        },
        {
            "slug": "v0.12/tutorial/movie-details/arrange-charts/index.html",
            "title": "Arrange the Charts on the Dashboard \u2014 Charts Manual 0.12",
            "headings": [
                "Arrange the Charts on the Dashboard",
                "Wrapping Up"
            ],
            "text": "\nArrange the Charts on the Dashboard\u00b6\n\nOn this page\n\nWrapping Up\n\n\nEstimated Time to Complete: 2 minutes\nNow that you have two charts on your dashboard, you can arrange them\nfor maximum legibility. These two charts are horizontally oriented,\nso you may wish to make them wider and stack them one above the other.\nYou can change the shape of each chart by clicking and dragging on the\nlower right corner of the chart, and you can move them around the page\nby clicking and dragging on the upper left corner of the chart.\n\nSee also\nManage Existing Dashboards\n\nYour finished dashboard should look similar to this:\n\n\n\n\nWrapping Up\u00b6\nYou now have a dashboard which provides easily accessible insight into\naward winning directors and award nominated films. Try adding additional\ncharts to the dashboard and see what other interesting insights you can\ndiscover.\n\n",
            "preview": "Estimated Time to Complete: 2 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.12/tutorial/movie-details/column-chart-director-awards/index.html",
            "title": "Column Chart Showing Directors with the Most Awards \u2014 Charts Manual 0.12",
            "headings": [
                "Column Chart Showing Directors with the Most Awards",
                "Construct the Chart",
                "Click Add My First Chart.",
                "In the Data Source dropdown, select test.movieDetails.",
                "Select the Chart Type.",
                "Add the desired fields to the proper encoding channels.",
                "Apply a limit to the X axis.",
                "Group awards by genre.",
                "Title your chart.",
                "Next Steps"
            ],
            "text": "\nColumn Chart Showing Directors with the Most Awards\u00b6\nEstimated Time to Complete: 5 minutes\nTo create each chart, you will populate the chart\u2019s\nencoding channels with fields from your\nschema. Encoding channels represent the information passed to\nMongoDB Charts which allows Charts to create the visualization.\nFor more information on encoding channels and the different types of\nchannels available, refer to the\nencoding channels section of the\ndocumentation.\n\nConstruct the Chart\u00b6\nTo discover which directors of films represented in this dataset have\nwon the most awards, use the directors and awards.wins database\nfields in your chart. Additionally, you can see which genres the\naward-winning films belong to stacking the genres field in the\ncolumns. A column chart makes it easy to\nsort and compare fields with numerical values, so it is a good choice\nfor this use case.\n1\nClick Add My First Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.movieDetails.\u00b6\n\n3\nSelect the Chart Type.\u00b6\n\nIn the Chart Type dropdown menu, select\nColumn.\nSelect the panel labeled Stacked below\nthe Chart Type dropdown menu.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the director property from the Fields\nsection of the Chart Builder view to the X Axis\nencoding channel. This tells MongoDB Charts to create a column\nfor each director value in the dataset.\n\nIn the Fields section click the awards field to\nexpand the awards object and view its properties.\n\nDrag the awards.wins field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nAggregation\nAggregation processes data records\nusing a wide variety of methods and returns computed results\nwhich may not be available in the original dataset. Because we\nare interested in the total number of awards won by each\ndirector, we use the awards.wins field here and will use\nan aggregation operator which will allow us to add up the\ntotal wins for each director.\n\n\nLeave the Aggregate dropdown menu for the\nY Axis encoding channel on its default\nvalue of sum. This value directs the aggregation\noperation to return the total number of award wins for each\ndirector.\n\n\n\n5\nApply a limit to the X axis.\u00b6\nAt this point there are too many columns in our X axis to show any\nmeaningful results. To bring the number down to a manageable level,\nwe\u2019ll sort the directors by their total number of awards won in\ndescending order, then apply a limit to get\nthe top ten:\n\nIn the X Axis channel, expand the\nSort By dropdown and select\nAggregated Value.\nTo order the results in descending order, click the\nAZ order button located to the right of the\nSort By dropdown.\nApply a limit to the number of columns in the X Axis by\ntoggling Limit Results, then setting Show\nto 10.\n\n\n6\nGroup awards by genre.\u00b6\n\nDrag the genres field to the Series encoding\nchannel, then click on the Array Reductions dropdown\nmenu and select unwind array. The X axis columns are now\nbroken down by movie genre.\n\nNote\nSome movies contain more than one genre, so the numbers\nshown in the columns may not be the exact number of awards\nfor each director.\n\n\n\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nDirectors with Most Awards, Split by Genre\n\n\n\n\nClick the green check mark to save your title.\n\nYour chart should now look like this:\n\n\n\n\nClick Save and Close to return to your\ndashboard.\n\n\n\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to build a\nscatter chart of award-nominated movies and\ntheir respective TomatoMeter ratings.\n\n",
            "preview": "Estimated Time to Complete: 5 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/scatter-chart-movies-ratings/",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/sort-limit-data/",
                "http://docs.mongodb.org/manualaggregation"
            ]
        },
        {
            "slug": "v0.12/tutorial/movie-details/create-dashboard/index.html",
            "title": "Create a New Dashboard \u2014 Charts Manual 0.12",
            "headings": [
                "Create a New Dashboard",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nCreate a New Dashboard\u00b6\nEstimated Time to Complete: 2 minutes\n\nInstructions\u00b6\nNow that you have created your data source and linked it to the\norder data collection, create a dashboard\nto hold your visualizations:\n\nClick the Dashboards tab.\n\nClick the New Dashboard button.\n\nCopy the following into the Title input:\n\n\n\ncopy\n\nMovie Details\n\n\n\n\n\n\nCopy the following into the Description input:\n\n\n\ncopy\n\nInsights from the Movie Details dataset.\n\n\n\n\nClick Create.\n\n\nAfter clicking create, Charts navigates you to your newly\ncreated dashboard and prompts you to add your first chart.\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to build a\ncolumn chart showing directors who won the most\nawards.\n\n",
            "preview": "Estimated Time to Complete: 2 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/v0.12/dashboards/"
            ]
        },
        {
            "slug": "v0.12/tutorial/movie-details/movie-details-tutorial-overview/index.html",
            "title": "Visualizing Movie Details \u2014 Charts Manual 0.12",
            "headings": [
                "Visualizing Movie Details",
                "Introduction",
                "Table of Contents"
            ],
            "text": "\nVisualizing Movie Details\u00b6\n\nOn this page\n\nIntroduction\nTable of Contents\n\n\nTotal Estimated Time to Complete: 20-30 minutes\n\nIntroduction\u00b6\nThis tutorial explores features and capabilities of MongoDB Charts with\na data source containing information gleaned\nfrom IMDb and Rotten Tomatoes. The tutorial demonstrates how to\nuse filters to refine a large result set down to an easily\nunderstandable chart, as well as how to use multi-series charts and\nmultiple encoding channels to add further\ninsights to your charts.\nIn this tutorial, you\u2019ll create two charts: a sorted column\nchart and a scatter chart.\n\nThe sorted column chart\ndisplays columns representing the number\nof awards won by directors with at least 50 total awards,\nsorted from highest to lowest and broken down by film genre.\nThe scatter chart shows\na diagram of movies with at least one\naward win along with their TomatoMeter rating\nand their MPAA rating\n(G, PG, PG-13, or R).\n\n\n\n\n\n\nTable of Contents\u00b6\n\nStep 1: Setup and Import the Data\nStep 2: Create a New Dashboard\nStep 3: Column Chart Showing Directors with the Most Awards\nStep 4: Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nStep 5: Arrange the Charts on the Dashboard\n\nTo get started, move ahead to the\nSetup and Import the Data page.\n\n\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n",
            "preview": "Total Estimated Time to Complete: 20-30 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/arrange-charts/",
                "https://www.rottentomatoes.com/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/scatter-chart-movies-ratings/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "https://www.imdb.com/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/prereqs-and-import-data/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/"
            ]
        },
        {
            "slug": "v0.12/tutorial/movie-details/prereqs-and-import-data/index.html",
            "title": "Setup and Import the Data \u2014 Charts Manual 0.12",
            "headings": [
                "Setup and Import the Data",
                "Prerequisites",
                "Download the Data",
                "Import the Data",
                "Add the Data Collection as a Data Source",
                "Next Steps"
            ],
            "text": "\nSetup and Import the Data\u00b6\n\nOn this page\n\nPrerequisites\nDownload the Data\nImport the Data\nAdd the Data Collection as a Data Source\nNext Steps\n\n\nEstimated Time to Complete: 10 minutes\n\nPrerequisites\u00b6\nThe following items are required to complete this tutorial:\n\nA MongoDB Atlas\ncluster. Refer to this page for\ninstructions on creating an Atlas cluster.\nmongoimport.\nmongoimport is included in the Community and Enterprise versions\nof MongoDB available in the download center.\n\n\n\nDownload the Data\u00b6\nDownload the example dataset from\nhttps://raw.githubusercontent.com/steveren/docs-assets/charts-tutorial/movieDetails.json.\nTo download the documents, right-click on the URL and select\nSave Link As. This file contains the data you will import\ninto the test.movieDetails collection of your Atlas cluster in the\nfollowing step.\nThe movieDetails.json file is 1.4 MB and contains records for 2250\nmovies. The following is a sample document from the dataset:\n\n\n\ncopy\n\n{\n     \"_id\" : ObjectId(\"5b107bec1d2952d0da904dd7\"),\n     \"title\" : \"Titan A.E.\",\n     \"year\" : 2000,\n     \"rated\" : \"PG\",\n     \"runtime\" : 94,\n     \"countries\" : [\n             \"USA\"\n     ],\n     \"genres\" : [\n             \"Animation\",\n             \"Action\",\n             \"Adventure\"\n     ],\n     \"director\" : \"Don Bluth, Gary Goldman, Art Vitello\",\n     \"writers\" : [\n             \"Hans Bauer\",\n             \"Randall McCormick\",\n             \"Ben Edlund\",\n             \"John August\",\n             \"Joss Whedon\"\n     ],\n     \"actors\" : [\n             \"Matt Damon\",\n             \"Bill Pullman\",\n             \"John Leguizamo\",\n             \"Nathan Lane\"\n     ],\n     \"plot\" : \"A young man learns that he has to find a hidden Earth ship before an enemy alien species does in order to secure the survival of humanity.\",\n     \"poster\" : \"http://ia.media-imdb.com/images/M/MV5BMjE0NTU0ODg4NV5BMl5BanBnXkFtZTcwNzY3MTQyMQ@@._V1_SX300.jpg\",\n     \"imdb\" : {\n             \"id\" : \"tt0120913\",\n             \"rating\" : 6.6,\n             \"votes\" : 50875\n     },\n     \"tomato\" : {\n             \"meter\" : 52,\n             \"image\" : \"rotten\",\n             \"rating\" : 5.7,\n             \"reviews\" : 99,\n             \"fresh\" : 51,\n             \"consensus\" : \"Great visuals, but the story feels like a cut-and-paste job of other sci-fi movies.\",\n             \"userMeter\" : 60,\n             \"userRating\" : 3.2,\n             \"userReviews\" : 69055\n     },\n     \"metacritic\" : 48,\n     \"awards\" : {\n             \"wins\" : 1,\n             \"nominations\" : 7,\n             \"text\" : \"1 win & 7 nominations.\"\n     },\n     \"type\" : \"movie\"\n}\n\n\n\n\n\nImport the Data\u00b6\nBefore you can use your dataset with Charts, you need to add\nit to a MongoDB collection. Use mongoimport to import the contents of that file\ninto the test.movieDetails collection on your Atlas cluster.\n\n\n\ncopy\n\nmongoimport --host <atlasHostname> --ssl -u <username> -p <password> --authenticationDatabase admin \\\n--db test --collection movieDetails \\\n--drop --file <path/to/movieDetails.json>\n\n\n\n\nNote\nRefer to mongoimport\nfor more information on using the import tool to add data to\na MongoDB collection.\n\n\n\nAdd the Data Collection as a Data Source\u00b6\nNow that the data is in the desired collection, add the collection as a\ndata source in MongoDB Charts. Adding a\ncollection as a data source links the collection to Charts and\nallows us to create visualizations using that data.\n\nNote\nBefore completing this procedure, ensure that you have allowed your\nAtlas cluster to\naccept connections\nfrom MongoDB Charts.\n\n\nClick the Data Sources tab.\n\nClick New Data Source.\n\nIn the New Data Source dialog, enter the\nconnection string\nwhich points to the cluster containing the imported data.\n\nExample\nThe following connection string points to an Atlas cluster called\njefftestcluster and authenticates a user named admin on\nthe admin database.\n\n\n\ncopy\n\nmongodb://admin:<password>@jefftestcluster-shard-00-00-bfkni.mongodb.net:27017,jefftestcluster-shard-00-01-bfkni.mongodb.net:27017,jefftestcluster-shard-00-02-bfkni.mongodb.net:27017/test?ssl=true&replicaSet=JeffTestCluster-shard-0&authSource=admin\n\n\n\nFor further instructions on determining your Atlas connection\nstring, see the\nConnect Your Application\nAtlas documentation.\n\n\nClick Connect.\n\nSelect the test.movieDetails collection.\n\nClick Set Permissions.\nLeave the permissions as the default Private option.\nFor more information on user permissions in Charts, see\npermissions.\n\nClick Publish Data Source.\n\n\nYou\u2019re now ready to create a dashboard and start adding charts to it.\n\n\nNext Steps\u00b6\nNow that you have established the data source in Charts, you\ncan now Create a New Dashboard which will\nhold the visualizations.\n\n",
            "preview": "Estimated Time to Complete: 10 minutes",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/connection-string/index.html",
                "https://www.mongodb.com/download-center/enterprise",
                "https://docs.atlas.mongodb.com/create-new-cluster/",
                "https://docs.atlas.mongodb.com/driver-connection/",
                "https://docs.mongodb.com/charts/v0.12/data-source-permissions/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "https://www.mongodb.com/cloud/atlas",
                "https://raw.githubusercontent.com/steveren/docs-assets/charts-tutorial/movieDetails.json",
                "https://docs.atlas.mongodb.com/security-whitelist/",
                "http://docs.mongodb.org/manual/reference/program/mongoimport/"
            ]
        },
        {
            "slug": "v0.12/tutorial/movie-details/scatter-chart-movies-ratings/index.html",
            "title": "Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating \u2014 Charts Manual 0.12",
            "headings": [
                "Scatter Chart of Award-Nominated Movies with Their TomatoMeter Rating",
                "Construct the Chart",
                "Click Add Chart.",
                "In the Data Source dropdown, select test.movieDetails.",
                "Select the Chart Type.",
                "Add the desired fields to the proper encoding channels.",
                "Add a query filter.",
                "Differentiate the chart by MPAA rating.",
                "Title your chart.",
                "Next Steps"
            ],
            "text": "\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\u00b6\nEstimated Time to Complete: 5 minutes\n\nConstruct the Chart\u00b6\nNext, add a chart to your dashboard showing the TomatoMeter rating\nand MPAA rating\nof movies with the most award nominations. A\nscatter chart is a good choice for\nvisualizing how data points cluster together around certain values and\nallows the representation of several different data dimensions.\n1\nClick Add Chart.\u00b6\nThe Add Chart button is in the top right corner of the\ndashboard.\n\n2\nIn the Data Source dropdown, select test.movieDetails.\u00b6\n\n3\nSelect the Chart Type.\u00b6\n\nIn the Chart Type dropdown, select\nGrid.\nSelect the Scatter panel below the dropdown menu.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section, click the tomato field to\nexpand the tomato object and view its properties.\nDrag the tomato.meter field to the X Axis\nencoding channel.\nIn the Fields section click the awards field to\nexpand the awards object and view its properties.\nDrag the awards.nominations field to the Y Axis\nencoding channel.\n\n\n5\nAdd a query filter.\u00b6\nYou can see now that higher-rated movies have a higher density of\nawards, but the chart is rather noisy. Add a query filter to exclude\nmovies with zero awards and marginal MPAA ratings.\n\nIn the Filters box, add the\nfollowing query filter and click the Apply button:\n\n\n\ncopy\n\n{\"awards.nominations\": {$gte: 1}, rated: {$in: [\"G\", \"PG\", \"PG-13\", \"R\"]}}\n\n\n\n\n\n\n6\nDifferentiate the chart by MPAA rating.\u00b6\n\nIn the Fields section, click the rated field and\ndrag it to the color encoding channel.\n\n\nAdditional Data Options\nThere are three options for adding more data to your chart. You\ncan use any of your data fields to modify the size, color, and\nshape of the markers on the grid. The rated field works well\nhere because it has low cardinality; there are only four possible\nvalues (G, PG, PG-13, and R). Fields with higher\ncardinality may make the chart too noisy to read.\n\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nMovies with Most Awards Nominations, by Rating\n\n\n\n\nClick the green check mark to save your title.\n\nYour chart should now look like this:\n\n\n\n\nClick Save and Close to return to your\ndashboard.\n\n\n\n\n\nNext Steps\u00b6\nFollow along to the next section of the tutorial to see how we can\nrearrange the charts on the dashboard.\n\n",
            "preview": "Estimated Time to Complete: 5 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/arrange-charts/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/scatter-chart/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/"
            ]
        },
        {
            "slug": "v0.12/tutorial/order-data/area-chart-age-distribution/index.html",
            "title": "Area Chart Showing Age Distribution of Customers \u2014 Charts Manual 0.12",
            "headings": [
                "Area Chart Showing Age Distribution of Customers",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Wrapping Up"
            ],
            "text": "\nArea Chart Showing Age Distribution of Customers\u00b6\nTime to Complete: 5 minutes\nIn the final chart of the dashboard, highlight some of\nthe customer analytic information available in the schema using an\narea chart. By visualizing the age range\nand distribution of store customers, you can ensure that any advertising\nthe store performs is directed where it will be seen by the most\npotential buyers.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nArea.\nClick Discrete below the dropdown.\n\n\nArea Chart\nAn area chart is a good choice to easily visualize the ages where\ncustomers are the most concentrated. Since you are not concerned\nwith exact values in this scenario but rather general trends, an\narea chart makes more sense than a line chart because the filled-in\nvisualization allows us to more easily identify the most common age\nranges.\nWe use a discrete area chart, rather than continuous,\nbecause we are ultimately looking for a count of the customers in\neach particular age bracket determined by the chart\u2019s\nbin size. Discrete charts allow us\nto perform aggregation operations on the data, whereas in a\ncontinuous chart each data point must come from a distinct\ndocument.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section click the customer field to\nexpand the customer object and view its properties.\n\nDrag the customer.age field to the X Axis\nencoding channel. The X Axis encoding channel\ndictates which field to display on the horizontal axis.\n\nSet the Bin Size to 5.\n\nData Binning\nBinning data groups continuous data into bins of a\nspecified size. In this case, rather than plotting\npoints for each individual age in the dataset, the data\nis grouped into bins of 5 ages. This\nprovides a clearer look into the overall trend of\nthe age distribution.\nFor more information on data binning, see the\nData Binning section.\n\n\nDrag the _id field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nY Axis Encoding Channel\nBecause we will be performing a $count aggregation on the\ndocuments, it does not matter what field we use for this\nencoding channel because the chosen field does not affect the\nnumber of documents in each bin.\n\n\nIn the Y Axis Aggregate dropdown, select\ncount. This option counts the occurrence of each\ncustomer age from each sale and adds it to the visualization\nafter placing it in the appropriate bin.\n\n\nYour chart should now look something like this:\n\n\n\nIn general, customers appear to most commonly between the\nages 40-45. This is where the largest area region in the\nchart occurs. Additionally, the rest of the ages appear to be\nnormally distributed,\nmeaning the average customer age is at the center of the area chart\nand there are the same number of younger and older customers. You can\nuse this information to direct advertising where the largest\ncustomer age group is most likely to see company advertisements.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the title input:\n\n\n\ncopy\n\nDistribution of Customer Ages\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nAfter adding the last chart to your dashboard and performing\nsome final reorganizing, the finished dashboard should look\nsomething like this:\n\n\n\n\n\n\nWrapping Up\u00b6\nYou now have an effective orders dashboard which provides easily\naccessible insight into revenue data, sales details, and customer\nanalytics. However, with the information you have available in your\ndataset, there are several ways in which you might be able to\nadd additional charts and extend the dashboard even further. You may\nwant to depict:\n\nAverage customer satisfaction by store location\nThe amount of money that customers in various age groups typically\nspend on a purchase\nWhich items are most commonly bought in bulk, utilizing the\nitems.quantity field\n\nTry adding some of these additional charts to the dashboard and see\nwhat other interesting correlations between variables you can discover.\n\n",
            "preview": "In the final chart of the dashboard, highlight some of the customer analytic information available in the schema using an area chart. By visualizing the age range and distribution of store customers, you can ensure that any advertising the store performs is directed where it will be seen by the most potential buyers.",
            "tags": "",
            "links": [
                "https://en.wikipedia.org/wiki/Normal_distribution",
                "http://docs.mongodb.org/manual/aggregation",
                "https://docs.mongodb.com/charts/v0.12/bin-data/",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/line-area-chart/"
            ]
        },
        {
            "slug": "v0.12/tutorial/order-data/column-chart-sales-by-store/index.html",
            "title": "Column Chart Showing Total Sales by Store Location \u2014 Charts Manual 0.12",
            "headings": [
                "Column Chart Showing Total Sales by Store Location",
                "Construct the Chart",
                "Click Add My First Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nColumn Chart Showing Total Sales by Store Location\u00b6\nTime to Complete: 5 minutes\nLooking at the data fields available in the schema, some of the most\nvaluable information you can relay revolves around revenue. You may\nwant to know how various stores are performing, specifically if there\nare any stores significantly under or overperforming compared to\nothers.\nA column chart works well for this type of\nvisualization because you can easily compare individual store revenue\nbased on the size of each column.\n\nConstruct the Chart\u00b6\n1\nClick Add My First Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nColumn.\nClick Stacked below the dropdown.\n\n\nColumn Chart\nThis chart renders a column for each store location\u2019s revenue.\nBecause there are six different store locations, the chart\nwill contain six columns.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the storeLocation property from the Fields\nsection of the Chart Builder view to the X Axis\nencoding channel. This tells MongoDB Charts to create a column\nfor each storeLocation value in the dataset.\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nNote\nMongoDB Charts infers the data type of each field and\nprovides symbols to easily determine these data types when\nbuilding your chart. For example, the calendar icon next to\nthe saleDate field signifies that this field is a\ntimestamp. These symbols can help ensure your chart renders as\nexpected by using proper data types for each\nencoding channel.\n\n\nDrag the items.price field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nAggregation\nAggregation processes data records\nusing a wide variety of methods and returns computed results\nwhich may not be available in the original dataset. Because we\nare interested in the total revenue from each store, we use\nthe items.price field here and will use an aggregation\noperator which will allow us to add the items.price fields\ntogether.\n\n\nIn the Array Reductions dropdown, select\nUnwind array.\n\nUnwind array\nArray reductions dictate how to process an array so\nits elements  can be visualized. The unwind array\noption creates a new document for each element in the array,\nso each item\u2019s price is added to the total for that store.\nFor more information on unwinding arrays, refer to the\nunwind aggregation documentation.\n\n\nIn the Aggregate dropdown, select sum.\n\nSum\nThis option adds the prices of all items per store together to\ndisplay the chart. For more information on the $sum\naggregation command, refer to the\nsum aggregation documentation.\n\n\n\nYour chart should now look something like this:\n\n\n\nNotice that the stores generating the most revenue are the\nDenver and Seattle locations.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title above the center of the chart and\nclick the pencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nTotal Sales ($) by Store Location\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYou will be navigated back to your Super Store Supply\nSales dashboard and it should look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a visualization showing a high-level overview of store\nrevenue, one might wonder which type of item each store is selling the\nmost of. The following section of the tutorial illustrates how to build\na donut chart to analyze the tag names\nof items being sold.\n\n",
            "preview": "Looking at the data fields available in the schema, some of the most valuable information you can relay revolves around revenue. You may want to know how various stores are performing, specifically if there are any stores significantly under or overperforming compared to others.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/operator/aggregation/unwind/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/donut-chart-item-tags/",
                "http://docs.mongodb.org/manual/aggregation",
                "http://docs.mongodb.org/manual/reference/operator/aggregation/sum/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "http://docs.mongodb.org/manualaggregation"
            ]
        },
        {
            "slug": "v0.12/tutorial/order-data/create-new-dashboard/index.html",
            "title": "Create a New Dashboard \u2014 Charts Manual 0.12",
            "headings": [
                "Create a New Dashboard",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nCreate a New Dashboard\u00b6\nTime to Complete: 3 minutes\n\nInstructions\u00b6\nNow that you have created your data source and linked it to the\norder data collection, create a dashboard to hold all of your\nvisualizations:\n\nClick the Dashboards tab.\n\nClick the New Dashboard button.\n\nCopy the following into the Title input:\n\n\n\ncopy\n\nSuper Supply Store Orders\n\n\n\n\n\n\nCopy the following into the Description input:\n\n\n\ncopy\n\nSales, Customer Analytics, and More.\n\n\n\n\nClick Create.\n\n\nAfter clicking create, Charts navigates you to your newly\ncreated dashboard and prompts you to add your first chart.\n\n\nNext Steps\u00b6\nThe following sections of the tutorial walk through\nbuilding each chart for your dashboard. You\nwill be populating the dashboard with the following visualizations:\n\nA column chart for total sales by\nstore location\nA donut chart showing the frequencies\nof tags occurring in each item sold\nA grouped column chart showing the\nmost common items sold in each store location\nAn area chart showing a distribution\nof customer ages\n\nTo create each chart, you will populate the chart\u2019s\nencoding channels with fields from your\nschema. Encoding channels represent the information passed to\nMongoDB Charts which allows Charts to create the visualization.\nFor more information on encoding channels and the different types of\nchannels available, refer to the\nencoding channels section of the\ndocumentation.\nFollow along to the next section of the tutorial to build a\ncolumn chart showing total sales by\nstore location.\n\n",
            "preview": "Now that you have created your data source and linked it to the order data collection, create a dashboard to hold all of your visualizations:",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.12/encoding-channels/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/column-chart-sales-by-store/"
            ]
        },
        {
            "slug": "v0.12/tutorial/order-data/donut-chart-item-tags/index.html",
            "title": "Donut Chart Showing Most Common Tags for Items Sold \u2014 Charts Manual 0.12",
            "headings": [
                "Donut Chart Showing Most Common Tags for Items Sold",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Copy the following filter into the Filters input above the main chart display.",
                "Click Apply to the right of the filter.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nDonut Chart Showing Most Common Tags for Items Sold\u00b6\nTime to Complete: 5 minutes\nNext we will add a chart where you can quickly see which types of items\nthe company is selling the most of. This information will be helpful\nfor the company marketing team to know how effectively direct\nadvertising.\nIn this scenario, your manager has expressed interest specifically\nin items sold from the Denver and New York store locations.\nAdditionally, they have requested to only visualize sales which\ncontain an item costing $1200 or more, in an effort to more closely\nexamine the new line of laptops being sold at these locations and what\ntypes of items are being bought with them. You can accomplish this\nusing a filter in your\ndonut chart, as shown in the following\nprocedure.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nCircular.\nClick Donut below the dropdown.\n\n\nDonut Chart\nA donut chart is a good choice for this chart because donut charts\nshow the relationship of parts to a whole. Using this chart type you\ncan easily get an idea of which tags make up the greatest portion of\ntotal sales.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nDrag the items.tags field to the Label\nencoding channel. The Label encoding channel\ndictates which field to use when dividing the sections of the\nchart.\n\nIn the array reduction dropdown for the\nitems array select Unwind array.\n\nUnwind Array\nUnwinding the array creates a new document for each element of\nthe items array, so each item from each sale is used in\nthe chart.\n\n\nIn the array reduction dropdowns for the\ntags select Array element by index. Using this\noption you can specify which element of the tags array to\nvisualize.\n\nEnter 0 for the Index input to only visualize the\nfirst element of the tags array. The first item tag is the\nmost relevant tag to the item, so it should be the main concern\nin the visualiztion. This is the primary item tag.\n\nNote\nSelecting an array element by index also ensures the chart\ndoes not get overcrowded with less important tags as it would\nhad you chosen to unwind the tags array rather than select\na specific element.\n\n\nDrag the items.tags field to the Arc\nencoding channel.\n\nArc Encoding Channel\nThe Arc encoding channel dictates\nwhich field to aggregate upon in the\nchart. Using the items.tags field here, you can select an\naggregation option which will provide the number of\noccurrences of each item tag.\n\n\nRepeat steps c-e for the Arc encoding channel.\n\nNote\nWhen constructing donut charts, most often you will be using the\nsame field for both the Label and Arc\nencoding channels.\n\n\nIn the Aggregate dropdown, select count.\nThis option counts the occurrences of the first tag of each item\nand adds them to the chart.\n\n\nYour chart should now look something like this:\n\n\n\n\n5\nCopy the following filter into the Filters input above the main chart display.\u00b6\n\n\n\ncopy\n\n{ storeLocation: { $in: [ \"Denver\", \"New York\" ] }, 'items.price': {$gte: 1200} }\n\n\n\nThis filter specifies that\nCharts only visualizes item tags from items sold from either\nthe Denver or New York store location where there was an\nitem in the sale costing $1200 or more.\n\n6\nClick Apply to the right of the filter.\u00b6\nYour chart should now look something like this:\n\n\n\nNotice how the electronics tag now takes a larger slice of the\ndistribution compared to when not using the filter. Based on this\nchart, notice that office and school are the two most common\nprimary item tags from sales matching the filter.\n\n7\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the chart title input:\n\n\n\ncopy\n\nFrequency of Item Tags from Sales in Denver and New York with Price Threshold\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n8\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYour dashboard should now look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a chart showing the tags of the items sold, it would\nbe helpful to know which specific items are most commonly sold at the\nvarious store locations. To do so, refer to the next section to see how\nto implement a grouped column chart\nshowing the most common items sold by store location.\n\n",
            "preview": "Next we will add a chart where you can quickly see which types of items the company is selling the most of. This information will be helpful for the company marketing team to know how effectively direct advertising.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/filter-documents/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/donut-chart/",
                "http://docs.mongodb.org/manual/aggregation"
            ]
        },
        {
            "slug": "v0.12/tutorial/order-data/grouped-column-items-sold/index.html",
            "title": "Grouped Column Chart Showing Most Common Items Sold by Store Location \u2014 Charts Manual 0.12",
            "headings": [
                "Grouped Column Chart Showing Most Common Items Sold by Store Location",
                "Construct the Chart",
                "At the top-right corner of the dashboard, click Add Chart.",
                "In the Data Source dropdown, select test.supplySales.",
                "Select the Chart Type",
                "Add the desired fields to the proper encoding channels.",
                "Title your chart.",
                "Click Save and Close at the top-left of the chart builder view.",
                "Next Steps"
            ],
            "text": "\nGrouped Column Chart Showing Most Common Items Sold by Store Location\u00b6\nTime to Complete: 5 minutes\nBy visualizing which items are sold most commonly at each store, you\ncan help ensure each store is properly stocked with the items they\nare most likely to sell out of. A grouped\ncolumn chart creates a group within the\nchart for each store location and display columns within each group\nreflecting the relative sales of each item.\n\nConstruct the Chart\u00b6\n1\nAt the top-right corner of the dashboard, click Add Chart.\u00b6\n\n2\nIn the Data Source dropdown, select test.supplySales.\u00b6\n\n3\nSelect the Chart Type\u00b6\n\nIn the Chart Type dropdown, select\nColumn.\nClick Grouped below the dropdown.\n\n\n4\nAdd the desired fields to the proper encoding channels.\u00b6\n\nDrag the storeLocation field to the X Axis\nencoding channel. The X Axis encoding channel\ndictates which field to use when creating the column groups.\n\nX Axis Encoding Channel\nUsing storeLocation for this encoding channel allows us\nto visualize a group of items per store location.\n\n\nIn the Fields section click the items field to\nexpand the items object and view its properties.\n\nDrag the items.name field to the Y Axis\nencoding channel. The Y Axis encoding channel\ndetermines which field to use for the chart\u2019s\naggregation.\n\nY Axis Encoding Channel\nUsing items.name for this encoding channel allows us to\naggregate and count the items sold in each location.\n\n\nIn the Array Reductions dropdown, select\nUnwind array.\n\nUnwind Array\nThe unwind array option creates a new document\nfor each element in the items array, so for each item sold\nby a particular store that item\u2019s name is added to the\nvisualization.\n\n\nIn the Aggregate dropdown, select count.\n\nCount\nThe count option counts the occurrences of each\nitem name after unwinding the items array and displays\nthem in the chart grouped by store location.\nFor more information on the $count aggregation command,\nrefer to the\ncount aggregation documentation.\n\n\nDrag the items.name field to the Series encoding\nchannel.\n\nSeries Encoding Channel\nThe Series encoding channel dictates how to\nsplit each group of the chart. Each member of the series\nbecomes a column within the group, so each item name becomes a\ncolumn within the store location group.\n\n\nIn the Series Array Reductions dropdown, select\nUnwind array.\n\nUnwind Array\nThis visualizes each tag from each element of the items\narray, enabling a complete count of the tags from every sale\nin the data set.\n\n\n\nYour chart should now look something like this:\n\n\n\nThe item sales look to be fairly evenly distributed by store\nlocation. Notice based on this chart that notepads are\nthe most common item sold at all store locations, which is\nuseful information when stocking each store with its\ninventory.\n\n5\nTitle your chart.\u00b6\n\nHover over your chart title and click the\npencil icon.\n\nCopy the following into the title input:\n\n\n\ncopy\n\nMost Common Items Sold by Store Location\n\n\n\n\nClick the green check mark to save your title.\n\n\n\n6\nClick Save and Close at the top-left of the chart builder view.\u00b6\nYour dashboard should now look something like this:\n\n\n\n\n\n\nNext Steps\u00b6\nNow that we have a few charts the dashboard is starting to get a bit\ncrowded. Follow along to the next section of the tutorial to see how we\ncan rearrange and resize the\ncharts to make the dashboard easier to digest.\n\n",
            "preview": "By visualizing which items are sold most commonly at each store, you can help ensure each store is properly stocked with the items they are most likely to sell out of. A grouped column chart creates a group within the chart for each store location and display columns within each group reflecting the relative sales of each item.",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/operator/aggregation/count/",
                "https://docs.mongodb.com/charts/v0.12/chart-type-reference/column-bar-chart/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/rearrange-resize/",
                "http://docs.mongodb.org/manual/aggregation"
            ]
        },
        {
            "slug": "v0.12/tutorial/order-data/order-data-tutorial-overview/index.html",
            "title": "Visualizing Order Data \u2014 Charts Manual 0.12",
            "headings": [
                "Visualizing Order Data",
                "Introduction",
                "Table of Contents"
            ],
            "text": "\nVisualizing Order Data\u00b6\n\nOn this page\n\nIntroduction\nTable of Contents\n\n\nTotal Estimated Time to Complete: 20-30 minutes\n\nIntroduction\u00b6\nThis tutorial walks through the features and capabilities of MongoDB Charts.\nYou will examine and visualize a data source\ncontaining order data from a mock office supply company.\nThis tutorial demonstrates how to create a\ndashboard containing charts of various types, and\nshows how to effectively use each chart\u2019s respective properties\nto obtain powerful visualizations.\nAfter completing the tutorial, you will have a dashboard which looks\nsimilar to the following:\n\n\n\n\n\nTable of Contents\u00b6\n\nStep 1: Setup and Import the Data\nStep 2: Create a New Dashboard\nStep 3: Column Chart Showing Total Sales by Store Location\nStep 4: Donut Chart Showing Most Common Tags for Items Sold\nStep 5: Grouped Column Chart Showing Most Common Items Sold by Store Location\nStep 6: Rearrange and Resize Charts\nStep 7: Area Chart Showing Age Distribution of Customers\n\nTo get started, move ahead to the\nSetup and Import the Data page.\n\n\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\n\n",
            "preview": "Total Estimated Time to Complete: 20-30 minutes",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/prerequisites-setup/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/v0.12/dashboards/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/column-chart-sales-by-store/"
            ]
        },
        {
            "slug": "v0.12/tutorial/order-data/prerequisites-setup/index.html",
            "title": "Setup and Import the Data \u2014 Charts Manual 0.12",
            "headings": [
                "Setup and Import the Data",
                "Prerequisites",
                "Download the Data",
                "Import the Data",
                "Add the Data Collection as a Data Source",
                "Next Steps"
            ],
            "text": "\nSetup and Import the Data\u00b6\n\nOn this page\n\nPrerequisites\nDownload the Data\nImport the Data\nAdd the Data Collection as a Data Source\nNext Steps\n\n\nTime to Complete: 8 minutes\n\nPrerequisites\u00b6\nThe following items are required to complete this tutorial:\n\nA MongoDB Atlas\ncluster. Refer to this page for\ninstructions on creating an Atlas cluster.\nmongoimport.\nmongoimport is included in the Community and Enterprise versions\nof MongoDB available in the download center.\n\n\n\nDownload the Data\u00b6\nDownload the example dataset from\nhttps://raw.githubusercontent.com/mongodb/docs-assets/charts-tutorial/mgenerate-order-data.json.\nTo download the documents, right-click on the URL and select\nSave Link As. This file contains the data you will import\ninto the test.supplySales collection of your Atlas cluster in the\nfollowing step.\nTo give an idea of the data you will visualize, here is a sample\ndocument from the dataset:\n\n\n\ncopy\n\n{\n  \"_id\": {\"$oid\":\"5afb2c3dc09c8d2dd5852cf2\"},\n  \"saleDate\":{\"$date\":\"2017-11-08T19:06:53.449Z\"},\n  \"items\":[\n    {\n      \"name\":\"envelopes\",\n      \"tags\":[\"stationary\",\"office\",\"general\"],\n      \"price\":{\"$numberDecimal\":\"9.83\"},\n      \"quantity\":10\n    },\n    {\n      \"name\":\"pens\",\n      \"tags\":[\"office\",\"writing\",\"school\",\"stationary\"],\n      \"price\":{\"$numberDecimal\":\"73.62\"},\n      \"quantity\":2\n    },\n    {\n      \"name\":\"laptop\",\n      \"tags\":[\"office\",\"school\",\"electronics\"],\n      \"price\":{\"$numberDecimal\":\"595.72\"},\n      \"quantity\":4\n    },\n    {\n      \"name\":\"notepad\",\n      \"tags\":[\"office\",\"writing\",\"school\"],\n      \"price\":{\"$numberDecimal\":\"34.65\"},\n      \"quantity\":3\n    }\n  ],\n  \"storeLocation\":\"Seattle\",\n  \"customer\":{\n    \"gender\":\"M\",\n    \"age\":45,\n    \"email\":\"uga@we.so\",\n    \"satisfaction\":4\n  },\n  \"couponUsed\":false,\n  \"purchaseMethod\":\"Online\"\n}\n\n\n\n\n\nImport the Data\u00b6\nNow that you have a file containing the documents you will be\nvisualizing in Charts, use\nmongoimport to import the\ncontents of that file into the test.supplySales collection.\n\n\n\ncopy\n\nmongoimport --host <myAtlasHost> --ssl -u <USER> -p <PASSWORD> --authenticationDatabase admin \\\n--db test --collection supplySales \\\n--drop --file <path/to/mgenerate-order-data.json>\n\n\n\n\nNote\nRefer to the mongoimport\npage to familiarize yourself with the proper command syntax.\nAdditionally, the Atlas documentation for Connecting to a\nCluster using Command Line Tools\nmay prove helpful.\n\n\n\nAdd the Data Collection as a Data Source\u00b6\nNow that the data is in the desired collection, add the collection as a\ndata source in MongoDB Charts. Adding a\ncollection as a data source links the collection to Charts and\nallows us to create visualizations using that data.\n\nNote\nBefore completing this procedure, ensure that you have allowed your\nAtlas cluster to\naccept connections\nfrom MongoDB Charts.\n\n\nClick the Data Sources tab.\n\nClick New Data Source.\n\nIn the New Data Source dialog, enter the\nconnection string\nwhich points to the cluster containing the imported data.\n\nExample\nThe following connection string points to an Atlas cluster called\njefftestcluster and authenticates a user named admin on\nthe admin database.\n\n\n\ncopy\n\nmongodb://admin:<password>@jefftestcluster-shard-00-00-bfkni.mongodb.net:27017,jefftestcluster-shard-00-01-bfkni.mongodb.net:27017,jefftestcluster-shard-00-02-bfkni.mongodb.net:27017/test?ssl=true&replicaSet=JeffTestCluster-shard-0&authSource=admin\n\n\n\nFor further instructions on determining your Atlas connection\nstring, see the\nConnect Your Application\nAtlas documentation.\n\n\nClick Connect.\n\nSelect the test.supplySales collection.\n\nClick Set Permissions.\n\nSelect the Open Access option.\n\nClick Publish Data Source.\n\n\n\n\nNext Steps\u00b6\nNow that you have established the data source in Charts, you\ncan now Create a New Dashboard which will\nhold the visualizations.\n\n",
            "preview": "The following items are required to complete this tutorial:",
            "tags": "",
            "links": [
                "http://docs.mongodb.org/manual/reference/connection-string/index.html",
                "https://www.mongodb.com/download-center/enterprise",
                "https://docs.atlas.mongodb.com/create-new-cluster/",
                "https://docs.atlas.mongodb.com/security-whitelist/",
                "https://docs.atlas.mongodb.com/driver-connection/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/create-new-dashboard/",
                "https://www.mongodb.com/cloud/atlas",
                "https://docs.atlas.mongodb.com/command-line-tools/",
                "http://docs.mongodb.org/manual/reference/program/mongoimport/",
                "https://raw.githubusercontent.com/mongodb/docs-assets/charts-tutorial/mgenerate-order-data.json"
            ]
        },
        {
            "slug": "v0.12/tutorial/order-data/rearrange-resize/index.html",
            "title": "Rearrange and Resize Charts \u2014 Charts Manual 0.12",
            "headings": [
                "Rearrange and Resize Charts",
                "Instructions",
                "Next Steps"
            ],
            "text": "\nRearrange and Resize Charts\u00b6\nTime to Complete: 2 minutes\nThe dashboard is starting to get crowded at the top row with plenty of\nempty space below. You can make the display easier to digest by\nrearranging and resizing some of the charts. Charts makes this\na straight-forward process by providing simple drag and drop\ncapabilities for reorganizing a dashboard.\n\nInstructions\u00b6\nYou can rearrange charts by dragging the top-left corner of the chart,\nand resize charts by dragging the bottom-right corner. For additional\ndetails on rearranging and resizing charts, see the\nManage Existing Dashboards section.\nTry reorganizing your dashboard to get something like this:\n\n\n\n\n\nNext Steps\u00b6\nIn the last chart of the dashboard, we will explore some of the\ncustomer data available in the schema to create an\narea chart showing the age distribution\nof customers.\n\n",
            "preview": "The dashboard is starting to get crowded at the top row with plenty of empty space below. You can make the display easier to digest by rearranging and resizing some of the charts. Charts makes this a straight-forward process by providing simple drag and drop capabilities for reorganizing a dashboard.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.12/manage-dashboards/"
            ]
        },
        {
            "slug": "v0.12/tutorials/index.html",
            "title": "Tutorials \u2014 Charts Manual 0.12",
            "headings": [
                "Tutorials"
            ],
            "text": "\nTutorials\u00b6\n\nVisualizing Order Data\nCreate a dashboard to visualize order data from a mock office\nsupply company. Build charts to gain insight on sales by location,\nthe types of items sold, and customer demographics.\nVisualizing Movie Details\nFollow this tutorial to create a dashboard to visualize movie\nmetadata and viewer rating data. Build charts to gain insight on\nwhich directors won the most awards and how award-nominated movies\ncorrespond to their viewer rating.\n\n\n\nVisualizing Order Data\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Total Sales by Store Location\nDonut Chart Showing Most Common Tags for Items Sold\nGrouped Column Chart Showing Most Common Items Sold by Store Location\nRearrange and Resize Charts\nArea Chart Showing Age Distribution of Customers\n\n\nVisualizing Movie Details\nSetup and Import the Data\nCreate a New Dashboard\nColumn Chart Showing Directors with the Most Awards\nScatter Chart of Award-Nominated Movies with Their TomatoMeter Rating\nArrange the Charts on the Dashboard\n\n\n\n\n",
            "preview": "",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/prerequisites-setup/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/arrange-charts/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/scatter-chart-movies-ratings/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/grouped-column-items-sold/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/donut-chart-item-tags/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/area-chart-age-distribution/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/create-dashboard/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/column-chart-director-awards/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/prereqs-and-import-data/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/create-new-dashboard/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/rearrange-resize/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/movie-details/movie-details-tutorial-overview/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/order-data-tutorial-overview/",
                "https://docs.mongodb.com/charts/v0.12/tutorial/order-data/column-chart-sales-by-store/"
            ]
        },
        {
            "slug": "v0.12/user-management/index.html",
            "title": "User Management \u2014 Charts Manual 0.12",
            "headings": [
                "User Management",
                "Roles",
                "Add a User",
                "User Management Interface",
                "Add User Script",
                "Delete a User",
                "Edit a Profile",
                "Change Passwords"
            ],
            "text": "\nUser Management\u00b6\n\nOn this page\n\nRoles\nAdd a User\nDelete a User\nEdit a Profile\nChange Passwords\n\n\nMongoDB Charts user administrators are authorized to add users, delete\nusers, edit other user\u2019s profiles and change their passwords. User\nadministrators can access the user management view by clicking the\nUser Management tab on the top navigation bar.\n\n\n\n\nRoles\u00b6\nCharts users are assigned one of the following roles upon\ncreation depending on whether they are a standard user or a user\nadministrator:\n\n\n\n\n\n\nRole\nDescription\n\n\n\nUser\nAuthorized to add data sources, create\ndashboards, build\ncharts, and change their own passwords.\nWhen sharing a data source or dashboard with a user, the roles\ngranted to that user may authorize them to view, modify, or\ndelete the shared resources. For more information, see\nData Source Permissions and\nDashboard Permissions.\n\n\nUserAdmin\nIncludes all privileges from the User role and is authorized\nto add users, delete users, edit the profile of other users,\nand change the password of other users.\nUser administrators are unable to view, modify, or delete\nthe data sources and dashboards of other users unless they are\nshared with the appropriate permissions.\n\n\n\n\n\n\nAdd a User\u00b6\nYou can add a user either through the Charts User Management\ninterface or by executing the charts-cli add-user script on the\nCharts host.\n\nUser Management Interface\u00b6\nTo add a user, log in to Charts as a user administrator with the\nUserAdmin role:\n\nFrom the User Management view, click the\nNew User button.\nFill in all form fields, then click Add User.\n\n\nNote\nFor more information on the actions each role authorizes, see\nRoles.\n\n\n\nAdd User Script\u00b6\nSystem administrators with access to the Charts host can add\nusers via the charts-cli add-user script.\nTo add users with the script, run the following command. Replace the\nplaceholders in angle brackets with the appropriate values.\n\n  \n    Windows PowerShell\n    macOS\n    Linux\n  \n  \n    \n\n\ncopy\n\ndocker exec -it `\n  $(docker container ls --filter name=_charts -q) `\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" `\n  --email \"<user@example.com>\" --password \"<Password>\" `\n  --role \"<UserAdmin|User>\"\n\n\n\n\n\n\n\ncopy\n\ndocker exec -it \\\n  $(docker container ls --filter name=_charts -q) \\\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" \\\n  --email \"<user@example.com>\" --password \"<Password>\" \\\n  --role \"<UserAdmin|User>\"\n\n\n\n\n\n\n\ncopy\n\ndocker exec -it \\\n  $(docker container ls --filter name=_charts -q) \\\n  charts-cli add-user --first-name \"<First>\" --last-name \"<Last>\" \\\n  --email \"<user@example.com>\" --password \"<Password>\" \\\n  --role \"<UserAdmin|User>\"\n\n\n\n    \n  \n\nNote\nThe first Charts user must be created using this script.\nSubsequent users can be added by either rerunning the script or using\nthe user management interface.\n\n\n\n\nDelete a User\u00b6\n\nImportant\nBefore deleting a user, update the permissions for any data sources\nor dashboards for which they are the sole owner. Any items owned\nsolely by the user being deleted will not be transferred and may\nbecome orphaned.\n\nTo delete a user:\n\nFrom the User Management view, click the red trash can\nicon on the right-hand side of the user you wish to delete.\nClick Delete User to confirm deletion.\n\n\n\nEdit a Profile\u00b6\nUser administrators can edit the profile of other users, including\nother user administrators:\n\nFrom the User Management view, click the ellipses,\n\u2026, of the user whose profile you wish to edit.\nClick Edit Profile.\nFill in the form and click Save.\n\n\nNote\nUser administrators can not edit the email address of another\nuser.\n\n\n\nChange Passwords\u00b6\nIn MongoDB Charts, users can change their own passwords and user\nadministrators can change the password of any user.\nTo change your own password:\n\nClick the down arrow next to your name on the upper-right hand side\nof the application.\nClick Change Password.\nFill in the form and click Save.\n\nTo change another user\u2019s password as a user administrator:\n\nFrom the User Management view, click the ellipses,\n\u2026, of the user whose password you wish to change.\nClick Change Password.\nFill in the form and click Save.\n\n\n",
            "preview": "MongoDB Charts user administrators are authorized to add users, delete users, edit other user\u2019s profiles and change their passwords. User administrators can access the user management view by clicking the User Management tab on the top navigation bar.",
            "tags": "",
            "links": [
                "https://docs.mongodb.com/charts/v0.12/data-source-permissions/",
                "https://docs.mongodb.com/charts/v0.12/data-sources/",
                "https://docs.mongodb.com/charts/v0.12/dashboard-permissions/",
                "https://docs.mongodb.com/charts/v0.12/build-charts/",
                "https://docs.mongodb.com/charts/v0.12/dashboards/"
            ]
        }
    ]
}