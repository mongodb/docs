.. _qe-tutorial-automatic-azure:
.. _qe-tutorial-automatic-dek-azure:

===========================================================
Use Automatic {+qe+} with Azure
===========================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This guide shows you how to build an application that implements the MongoDB
{+qe+} feature to automatically encrypt and decrypt document fields and use
{+azure-kv+} {+kms-abbr+} for key management.

After you complete the steps in this guide, you should have:

- A {+cmk-long+} managed by {+azure-kv+}
- A working client application that inserts {+in-use-docs+}
  using your {+cmk-long+}

.. tip:: Customer Master Keys

   To learn more about the {+cmk-long+}, read the
   :ref:`qe-reference-keys-key-vaults`
   documentation.

Before You Get Started
----------------------

.. include:: /includes/queryable-encryption/set-up-section.rst

.. see:: Full Application

   To see the complete code for this sample application,
   select the tab corresponding to your programming language and follow
   the provided link. Each sample application repository includes a
   ``README.md`` file that you can use to learn how to set up your environment
   and run the application.

   .. tabs::

      .. tab:: mongosh
         :tabid: shell

         `Complete mongosh Application <{+sample-app-url-qe+}/mongosh/>`__

      .. tab:: Node.js
         :tabid: nodejs

         `Complete Node.js Application <{+sample-app-url-qe+}/node/>`__

      .. tab:: Python
         :tabid: python

         `Complete Python Application <{+sample-app-url-qe+}/python/>`__

      .. tab:: Java
         :tabid: java-sync

         `Complete Java Application <{+sample-app-url-qe+}/java/>`__

      .. tab:: Go
         :tabid: go

         `Complete Go Application <{+sample-app-url-qe+}/go/>`__

      .. tab:: C#
         :tabid: csharp

         `Complete C# Application <{+sample-app-url-qe+}/csharp/>`__

.. tabs-selector:: drivers

Set Up the KMS
--------------

.. procedure::
   :style: normal

   .. step:: Register your Application with Azure

      .. include:: /includes/queryable-encryption/tutorials/automatic/azure/register.rst

   .. step:: Create the {+cmk-long+}

      .. include:: /includes/queryable-encryption/tutorials/automatic/azure/cmk.rst

Create the Application
----------------------

.. procedure::
   :style: normal

   .. step:: Assign Your Application Variables

      The code samples in this tutorial use the following variables to perform
      the {+qe+} workflow:

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            - **kmsProviderName** - The KMS you're using to store your {+cmk-long+}.
              Set this variable to ``"azure"`` for this tutorial.
            - **uri** - Your MongoDB deployment connection URI. Set your connection
              URI in the ``MONGODB_URI`` environment variable or replace the value
              directly.
            - **keyVaultDatabaseName** - The database in MongoDB where your data
              encryption keys (DEKs) will be stored. Set this variable
              to ``"encryption"``.
            - **keyVaultCollectionName** - The collection in MongoDB where your DEKs
              will be stored. Set this variable to ``"__keyVault"``.
            - **keyVaultNamespace** - The namespace in MongoDB where your DEKs will
              be stored. Set this variable to the values of the ``keyVaultDatabaseName``
              and ``keyVaultCollectionName`` variables, separated by a period.
            - **encryptedDatabaseName** - The database in MongoDB where your encrypted
              data will be stored. Set this variable to ``"medicalRecords"``.
            - **encryptedCollectionName** - The collection in MongoDB where your encrypted
              data will be stored. Set this variable to ``"patients"``.

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            - **kmsProviderName** - The KMS you're using to store your {+cmk-long+}.
              Set this variable to ``"azure"`` for this tutorial.
            - **uri** - Your MongoDB deployment connection URI. Set your connection
              URI in the ``MONGODB_URI`` environment variable or replace the value
              directly.
            - **keyVaultDatabaseName** - The database in MongoDB where your data
              encryption keys (DEKs) will be stored. Set this variable
              to ``"encryption"``.
            - **keyVaultCollectionName** - The collection in MongoDB where your DEKs
              will be stored. Set this variable to ``"__keyVault"``.
            - **keyVaultNamespace** - The namespace in MongoDB where your DEKs will
              be stored. Set this variable to the values of the ``keyVaultDatabaseName``
              and ``keyVaultCollectionName`` variables, separated by a period.
            - **encryptedDatabaseName** - The database in MongoDB where your encrypted
              data will be stored. Set this variable to ``"medicalRecords"``.
            - **encryptedCollectionName** - The collection in MongoDB where your encrypted
              data will be stored. Set this variable to ``"patients"``.

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            - **kms_provider_name** - The KMS you're using to store your {+cmk-long+}.
              Set this variable to ``"azure"`` for this tutorial.
            - **uri** - Your MongoDB deployment connection URI. Set your connection
              URI in the ``MONGODB_URI`` environment variable or replace the value
              directly.
            - **key_vault_database_name** - The database in MongoDB where your data
              encryption keys (DEKs) will be stored. Set this variable
              to ``"encryption"``.
            - **key_vault_collection_name** - The collection in MongoDB where your DEKs
              will be stored. Set this variable to ``"__keyVault"``.
            - **key_vault_namespace** - The namespace in MongoDB where your DEKs will
              be stored. Set this variable to the values of the ``key_vault_database_name``
              and ``key_vault_collection_name`` variables, separated by a period.
            - **encrypted_database_name** - The database in MongoDB where your encrypted
              data will be stored. Set this variable to ``"medicalRecords"``.
            - **encrypted_collection_name** - The collection in MongoDB where your encrypted
              data will be stored. Set this variable to ``"patients"``.

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            - **kmsProviderName** - The KMS you're using to store your {+cmk-long+}.
              Set this variable to ``"azure"`` for this tutorial.
            - **uri** - Your MongoDB deployment connection URI. Set your connection
              URI in the ``MONGODB_URI`` environment variable or replace the value
              directly.
            - **keyVaultDatabaseName** - The database in MongoDB where your data
              encryption keys (DEKs) will be stored. Set this variable
              to ``"encryption"``.
            - **keyVaultCollectionName** - The collection in MongoDB where your DEKs
              will be stored. Set this variable to ``"__keyVault"``.
            - **keyVaultNamespace** - The namespace in MongoDB where your DEKs will
              be stored. Set this variable to the values of the ``keyVaultDatabaseName``
              and ``keyVaultCollectionName`` variables, separated by a period.
            - **encryptedDatabaseName** - The database in MongoDB where your encrypted
              data will be stored. Set this variable to ``"medicalRecords"``.
            - **encryptedCollectionName** - The collection in MongoDB where your encrypted
              data will be stored. Set this variable to ``"patients"``.

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: java
               :dedent:

         .. tab::
            :tabid: go

            - **kmsProviderName** - The KMS you're using to store your {+cmk-long+}.
              Set this variable to ``"azure"`` for this tutorial.
            - **uri** - Your MongoDB deployment connection URI. Set your connection
              URI in the ``MONGODB_URI`` environment variable or replace the value
              directly.
            - **keyVaultDatabaseName** - The database in MongoDB where your data
              encryption keys (DEKs) will be stored. Set this variable
              to ``"encryption"``.
            - **keyVaultCollectionName** - The collection in MongoDB where your DEKs
              will be stored. Set this variable to ``"__keyVault"``.
            - **keyVaultNamespace** - The namespace in MongoDB where your DEKs will
              be stored. Set this variable to the values of the ``keyVaultDatabaseName``
              and ``keyVaultCollectionName`` variables, separated by a period.
            - **encryptedDatabaseName** - The database in MongoDB where your encrypted
              data will be stored. Set this variable to ``"medicalRecords"``.
            - **encryptedCollectionName** - The collection in MongoDB where your encrypted
              data will be stored. Set this variable to ``"patients"``.

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            - **kmsProviderName** - The KMS you're using to store your {+cmk-long+}.
              Set this value to ``"azure"`` for this tutorial.
            - **keyVaultDatabaseName** - The database in MongoDB where your data
              encryption keys (DEKs) will be stored. Set the value of ``keyVaultDatabaseName``
              to ``"encryption"``.
            - **keyVaultCollectionName** - The collection in MongoDB where your DEKs
              will be stored. Set the value of ``keyVaultCollectionName`` to ``"__keyVault"``.
            - **keyVaultNamespace** - The namespace in MongoDB where your DEKs will
              be stored. Set ``keyVaultNamespace`` to a new ``CollectionNamespace`` object whose name
              is the values of the ``keyVaultDatabaseName`` and ``keyVaultCollectionName`` variables,
              separated by a period.
            - **encryptedDatabaseName** - The database in MongoDB where your encrypted
              data will be stored. Set the value of ``encryptedDatabaseName`` to ``"medicalRecords"``.
            - **encryptedCollectionName** - The collection in MongoDB where your encrypted
              data will be stored. Set the value of ``encryptedCollectionName`` to ``"patients"``.
            - **uri** - Your MongoDB deployment connection URI. Set your connection
              URI in the ``appsettings.json`` file or replace the value
              directly.

            You can declare these variables by using the following code:

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-setup-application-variables
               :end-before: end-setup-application-variables
               :language: csharp
               :dedent:

      .. important:: {+key-vault-long-title+} Namespace Permissions

         The {+key-vault-long+} is in the ``encryption.__keyVault``
         namespace. Ensure that the database user your application uses to connect
         to MongoDB has :ref:`ReadWrite <manual-reference-role-read-write>`
         permissions on this namespace.

      .. include:: /includes/queryable-encryption/env-variables.rst

   .. step:: Create your Encrypted Collection

      .. procedure::
         :style: connected

         .. step:: Add Your Azure KMS Credentials
      
            .. _qe-tutorials-automatic-encryption-azure-kms-providers:

            Create a variable containing your Azure {+kms-abbr+} credentials with the
            following structure. Use the {+azure-kv+} credentials you recorded in the
            :ref:`Register your Application with Azure <qe-tutorial-automatic-azure-register>`
            step of this tutorial.
            
            .. tabs-drivers::

               .. tab::
                  :tabid: shell

                  .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-helpers.js
                     :start-after: start-azure-kms-credentials
                     :end-before: end-azure-kms-credentials
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: nodejs

                  .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                     :start-after: start-azure-kms-credentials
                     :end-before: end-azure-kms-credentials
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: python

                  .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                     :start-after: start-azure-kms-credentials
                     :end-before: end-azure-kms-credentials
                     :language: python
                     :dedent:

               .. tab::
                  :tabid: java-sync

                  .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/util/QueryableEncryptionHelpers.java
                     :start-after: start-azure-kms-credentials
                     :end-before: end-azure-kms-credentials
                     :language: python
                     :dedent:

               .. tab::
                  :tabid: go

                  .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                     :start-after: start-azure-kms-credentials
                     :end-before: end-azure-kms-credentials
                     :language: go
                     :dedent:

               .. tab::
                  :tabid: csharp

                  .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                     :start-after: start-azure-kms-credentials
                     :end-before: end-azure-kms-credentials
                     :language: csharp
                     :dedent:

         .. step:: Add your {+cmk-long+} Credentials

            Create a variable containing your {+cmk-long+} credentials with the
            following structure. Use the {+cmk-long+} details you recorded in the
            :ref:`Create a {+cmk-long+} <azure-create-master-key>` step of this tutorial.

            .. tabs-drivers::

               .. tab::
                  :tabid: shell

                  .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-helpers.js
                     :start-after: start-azure-cmk-credentials
                     :end-before: end-azure-cmk-credentials
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: nodejs

                  .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                     :start-after: start-azure-cmk-credentials
                     :end-before: end-azure-cmk-credentials
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: python

                  .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                     :start-after: start-azure-cmk-credentials
                     :end-before: end-azure-cmk-credentials
                     :language: python
                     :dedent:

               .. tab::
                  :tabid: java-sync

                  .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/util/QueryableEncryptionHelpers.java
                     :start-after: start-azure-cmk-credentials
                     :end-before: end-azure-cmk-credentials
                     :language: java
                     :dedent:

               .. tab::
                  :tabid: go

                  .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                     :start-after: start-azure-cmk-credentials
                     :end-before: end-azure-cmk-credentials
                     :language: go
                     :dedent:

               .. tab::
                  :tabid: csharp

                  .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                     :start-after: start-azure-cmk-credentials
                     :end-before: end-azure-cmk-credentials
                     :language: csharp
                     :dedent:

         .. step:: Set Your Automatic Encryption Options

            .. tabs-drivers::

               .. tab::
                  :tabid: shell

                  Create an ``autoEncryptionOptions`` object that contains the following
                  options:

                  - The namespace of your {+key-vault-long+}
                  - The ``kmsProviderCredentials`` object, which contains your Azure KMS
                    credentials

                  .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-helpers.js
                     :start-after: start-auto-encryption-options
                     :end-before: end-auto-encryption-options
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: nodejs

                  Create an ``autoEncryptionOptions`` object that contains the following
                  options:

                  - The namespace of your {+key-vault-long+}
                  - The ``kmsProviders`` object, which contains your
                    Azure KMS credentials
                  - The ``sharedLibraryPathOptions`` object, which contains the path to
                    your {+shared-library+}

                  .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                     :start-after: start-auto-encryption-options
                     :end-before: end-auto-encryption-options
                     :emphasize-lines: 5-9
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: python

                  Create an ``AutoEncryptionOpts`` object that contains the following
                  options:

                  - The ``kms_provider_credentials`` object, which contains your
                    Azure KMS credentials
                  - The namespace of your {+key-vault-long+}
                  - The path to your {+shared-library+}

                  .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                     :start-after: start-auto-encryption-options
                     :end-before: end-auto-encryption-options
                     :language: python
                     :dedent:

               .. tab::
                  :tabid: java-sync

                  Create an ``AutoEncryptionSettings`` object that contains the following
                  options:

                  - The namespace of your {+key-vault-long+}
                  - The ``kmsProviderCredentials`` object, which contains your
                    Azure KMS credentials
                  - The ``extraOptions`` object, which contains the path to
                    your {+shared-library+}

                  .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/util/QueryableEncryptionHelpers.java
                     :start-after: start-auto-encryption-options
                     :end-before: end-auto-encryption-options
                     :emphasize-lines: 4-8
                     :language: java
                     :dedent:

               .. tab::
                  :tabid: go

                  Create an ``AutoEncryption`` object that contains the following
                  options:

                  - The namespace of your {+key-vault-long+}
                  - The ``kmsProviderCredentials`` object, which contains your
                    Azure KMS credentials
                  - The ``cryptSharedLibraryPath`` object, which contains the path to
                    your {+shared-library+}

                  .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                     :start-after: start-auto-encryption-options
                     :end-before: end-auto-encryption-options
                     :emphasize-lines: 5-8
                     :language: go
                     :dedent:

               .. tab::
                  :tabid: csharp

                  Create an ``AutoEncryptionOptions`` object that contains the following
                  options:

                  - The namespace of your {+key-vault-long+}
                  - The ``kmsProviderCredentials`` object, which contains your
                    Azure KMS credentials
                  - The ``extraOptions`` object, which contains the path to
                    your {+shared-library+}

                  .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                     :start-after: start-auto-encryption-options
                     :end-before: end-auto-encryption-options
                     :emphasize-lines: 7-10
                     :language: csharp
                     :dedent:

            .. include:: /includes/queryable-encryption/shared-lib-learn-more.rst

         .. step:: Create a Client to Set Up an Encrypted Collection

            To create a client used to encrypt and decrypt data in
            your collection, instantiate a new ``MongoClient`` by using your
            connection URI and your automatic encryption options.

            .. tabs-drivers::

               .. tab::
                  :tabid: shell

                  .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                     :start-after: start-create-client
                     :end-before: end-create-client
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: nodejs

                  .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
                     :start-after: start-create-client
                     :end-before: end-create-client
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: python

                  .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
                     :start-after: start-create-client
                     :end-before: end-create-client
                     :language: python
                     :dedent:

               .. tab::
                  :tabid: java-sync

                  .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                     :start-after: start-create-client
                     :end-before: end-create-client
                     :language: java
                     :dedent:

               .. tab::
                  :tabid: go

                  .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
                     :start-after: start-create-client
                     :end-before: end-create-client
                     :language: go
                     :dedent:

               .. tab::
                  :tabid: csharp

                  .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
                     :start-after: start-create-client
                     :end-before: end-create-client
                     :language: csharp
                     :dedent:

         .. step:: Specify Fields to Encrypt

            To encrypt a field, add it to the {+enc-schema+}.
            To enable queries on a field, add the "queries"
            property. Create the {+enc-schema+} as follows:

            .. tabs-drivers::

               .. tab::
                  :tabid: shell

                  .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                     :start-after: start-encrypted-fields-map
                     :end-before: end-encrypted-fields-map
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: nodejs

                  .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
                     :start-after: start-encrypted-fields-map
                     :end-before: end-encrypted-fields-map
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: python

                  .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
                     :start-after: start-encrypted-fields-map
                     :end-before: end-encrypted-fields-map
                     :language: python
                     :dedent:

               .. tab::
                  :tabid: java-sync

                  .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                     :start-after: start-encrypted-fields-map
                     :end-before: end-encrypted-fields-map
                     :language: java
                     :dedent:

               .. tab::
                  :tabid: go

                  .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
                     :start-after: start-encrypted-fields-map
                     :end-before: end-encrypted-fields-map
                     :language: go
                     :dedent:

               .. tab::
                  :tabid: csharp

                  .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
                     :start-after: start-encrypted-fields-map
                     :end-before: end-encrypted-fields-map
                     :language: csharp
                     :dedent:

            .. note::

               In the previous code sample, both the "ssn" and
               "billing" fields are encrypted, but only the "ssn"
               field can be queried.

         .. step:: Create the Collection

            Instantiate ``ClientEncryption`` to access the API for the
            encryption helper methods.

            .. tabs-drivers::

               .. tab::
                  :tabid: shell

                  .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                     :start-after: start-client-encryption
                     :end-before: end-client-encryption
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: nodejs

                  .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                     :start-after: start-client-encryption
                     :end-before: end-client-encryption
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: python

                  .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
                     :start-after: start-client-encryption
                     :end-before: end-client-encryption
                     :language: python
                     :dedent:

               .. tab::
                  :tabid: java-sync

                  .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                     :start-after: start-client-encryption
                     :end-before: end-client-encryption
                     :language: java
                     :dedent:

               .. tab::
                  :tabid: go

                  .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
                     :start-after: start-client-encryption
                     :end-before: end-client-encryption
                     :language: go
                     :dedent:

               .. tab::
                  :tabid: csharp

                  .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
                     :start-after: start-client-encryption
                     :end-before: end-client-encryption
                     :language: csharp
                     :dedent:

            .. tabs-drivers::

               .. tab::
                  :tabid: shell

                  Create your encrypted collection by using the encryption
                  helper method accessed through the ``ClientEncryption`` class.
                  This method automatically generates data encryption keys for your
                  encrypted fields and creates the encrypted collection:

                  .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                     :start-after: start-create-encrypted-collection
                     :end-before: end-create-encrypted-collection
                     :language: javascript
                     :dedent:

               .. tab::
                  :tabid: nodejs

                  .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst

                  Create your encrypted collection by using the encryption
                  helper method accessed through the ``ClientEncryption`` class.
                  This method automatically generates data encryption keys for your
                  encrypted fields and creates the encrypted collection:

                  .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
                     :start-after: start-create-encrypted-collection
                     :end-before: end-create-encrypted-collection
                     :language: javascript
                     :dedent:

                  .. tip:: Database vs. Database Name

                     The method that creates the encrypted collection requires a reference
                     to a database *object* rather than the database *name*. You can
                     obtain this reference by using a method on your client object.

               .. tab::
                  :tabid: python

                  Create your encrypted collection by using the encryption
                  helper method accessed through the ``ClientEncryption`` class.
                  This method automatically generates data encryption keys for your
                  encrypted fields and creates the encrypted collection:

                  .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
                     :start-after: start-create-encrypted-collection
                     :end-before: end-create-encrypted-collection
                     :language: python
                     :dedent:

                  .. tip:: Database vs. Database Name

                     The method that creates the encrypted collection requires a reference
                     to a database *object* rather than the database *name*. You can
                     obtain this reference by using a method on your client object.

               .. tab::
                  :tabid: java-sync

                  Create your encrypted collection by using the encryption
                  helper method accessed through the ``ClientEncryption`` class.
                  This method automatically generates data encryption keys for your
                  encrypted fields and creates the encrypted collection:

                  .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                     :start-after: start-create-encrypted-collection
                     :end-before: end-create-encrypted-collection
                     :language: java
                     :dedent:

                  .. tip:: Database vs. Database Name

                     The method that creates the encrypted collection requires a reference
                     to a database *object* rather than the database *name*. You can
                     obtain this reference by using a method on your client object.

               .. tab::
                  :tabid: go

                  The Golang version of this tutorial uses data models to
                  represent the document structure. Add the following
                  structs to your project to represent the data in your
                  collection:

                  .. literalinclude:: /includes/qe-tutorials/go/models.go
                     :start-after: start-patient-document
                     :end-before: end-patient-document
                     :language: go
                     :dedent:

                  .. literalinclude:: /includes/qe-tutorials/go/models.go
                     :start-after: start-patient-record
                     :end-before: end-patient-record
                     :language: go
                     :dedent:

                  .. literalinclude:: /includes/qe-tutorials/go/models.go
                     :start-after: start-payment-info
                     :end-before: end-payment-info
                     :language: go
                     :dedent:

                  After you've added these classes, create your encrypted
                  collection by using the encryption helper method accessed
                  through the ``ClientEncryption`` class.
                  This method automatically generates data encryption keys for your
                  encrypted fields and creates the encrypted collection:

                  .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
                     :start-after: start-create-encrypted-collection
                     :end-before: end-create-encrypted-collection
                     :language: go
                     :dedent:

                  .. tip:: Database vs. Database Name

                     The method that creates the encrypted collection requires a reference
                     to a database *object* rather than the database *name*. You can
                     obtain this reference by using a method on your client object.

               .. tab::
                  :tabid: csharp

                  The C# version of this tutorial uses separate classes as data models
                  to represent the document structure.
                  Add the following ``Patient``, ``PatientRecord``, and ``PatientBilling``
                  classes to your project:

                  .. literalinclude:: /includes/qe-tutorials/csharp/Patient.cs
                     :start-after: start-patient
                     :end-before: end-patient
                     :language: csharp
                     :dedent:

                  .. literalinclude:: /includes/qe-tutorials/csharp/PatientRecord.cs
                     :start-after: start-patient-record
                     :end-before: end-patient-record
                     :language: csharp
                     :dedent:

                  .. literalinclude:: /includes/qe-tutorials/csharp/PatientBilling.cs
                     :start-after: start-patient-billing
                     :end-before: end-patient-billing
                     :language: csharp
                     :dedent:

                  After you've added these classes, create your encrypted collection by
                  using the encryption helper method accessed through the
                  ``ClientEncryption`` class.
                  This method automatically generates data encryption keys for your
                  encrypted fields and creates the encrypted collection:

                  .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
                     :start-after: start-create-encrypted-collection
                     :end-before: end-create-encrypted-collection
                     :language: csharp
                     :dedent:

                  .. tip:: Database vs. Database Name

                     The method that creates the encrypted collection requires a reference
                     to a database *object* rather than the database *name*. You can
                     obtain this reference by using a method on your client object.

   .. _qe-azure-insert:

   .. step:: Insert a Document with Encrypted Fields

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 15
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 17
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 15
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            This tutorial uses POJOs as data models
            to represent the document structure. To set up your application to
            use POJOs, add the following code:
            
            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-setup-application-pojo
               :end-before: end-setup-application-pojo
               :language: java
               :dedent:

            To learn more about Java POJOs, see the `Plain Old Java Object
            wikipedia article <https://en.wikipedia.org/wiki/Plain_old_Java_object>`__.
            
            This tutorial uses the following POJOs:
            
            - ``Patient``
            - ``PatientRecord``
            - ``PatientBilling``
            
            You can view these classes in the `models package of the complete Java application
            <{+sample-app-url-qe+}/java/src/main/java/com/mongodb/tutorials/qe/models>`__.

            Add these POJO classes to your application. Then, create an instance
            of a ``Patient`` that describes a patient's personal information. Use
            the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 8
               :language: java
               :dedent:

         .. tab::
            :tabid: go

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 15
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 19
               :language: csharp
               :dedent:

   .. step:: Query on an Encrypted Field

      The following code sample executes a find query on an encrypted field and
      prints the decrypted data:

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-find-document
               :end-before: end-find-document
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
               :start-after: start-find-document
               :end-before: end-find-document
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-find-document
               :end-before: end-find-document
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-find-document
               :end-before: end-find-document
               :language: java
               :dedent:

         .. tab::
            :tabid: go

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-find-document
               :end-before: end-find-document
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-find-document
               :end-before: end-find-document
               :language: csharp
               :dedent:

      The output of the preceding code sample should look similar to the
      following:

      .. literalinclude:: /includes/qe-tutorials/encrypted-document.json
         :language: json
         :copyable: false
         :dedent:

      .. include:: /includes/queryable-encryption/safe-content-warning.rst

Learn More
----------

To learn how {+qe+} works, see
:ref:`<qe-fundamentals>`.

To learn more about the topics mentioned in this guide, see the
following links:

- Learn more about {+qe+} components on the :ref:`Reference <qe-reference>` page.
- Learn how {+cmk-long+}s and {+dek-long+}s work on the :ref:`<qe-reference-keys-key-vaults>` page.
- See how KMS Providers manage your {+qe+} keys on the :ref:`<qe-fundamentals-kms-providers>` page.
