# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/fundamentals.txt:3
msgid "FAQ: MongoDB Fundamentals"
msgstr ""

#: ../source/faq/fundamentals.txt:13
msgid "This document answers some common questions about MongoDB."
msgstr ""

#: ../source/faq/fundamentals.txt:16
msgid "What platforms does MongoDB support?"
msgstr ""

#: ../source/faq/fundamentals.txt:18
msgid "For the list of supported platforms, see :ref:`prod-notes-supported-platforms`."
msgstr ""

#: ../source/faq/fundamentals.txt:22
msgid "Is MongoDB offered as a hosted service?"
msgstr ""

#: ../source/faq/fundamentals.txt:24
msgid "Yes. `MongoDB Atlas <https://www.mongodb.com/cloud/atlas?jmp=docs>`_ is a cloud-hosted database-as-a-service. For more information, please visit the `MongoDB Atlas docs <https://www.mongodb.com/cloud/atlas?jmp=docs>`_."
msgstr ""

#: ../source/faq/fundamentals.txt:30
msgid "How does a collection differ from a table?"
msgstr ""

#: ../source/faq/fundamentals.txt:32
msgid "Instead of tables, a MongoDB database stores its data in :term:`collections <collection>`. A collection holds one or more :ref:`BSON documents <bson-document-format>`. Documents are analogous to records or rows in a relational database table. Each document has :ref:`one or more fields <document-structure>`; fields are similar to the columns in a relational database table."
msgstr ""

#: ../source/faq/fundamentals.txt:39
msgid ":doc:`/reference/sql-comparison`, :doc:`/introduction`"
msgstr ""

#: ../source/faq/fundamentals.txt:42
msgid "How do I create a database and a collection?"
msgstr ""

#: ../source/faq/fundamentals.txt:44
msgid "If a database does not exist, MongoDB creates the database when you first store data for that database."
msgstr ""

#: ../source/faq/fundamentals.txt:47
msgid "If a collection does not exist, MongoDB creates the collection when you first store data for that collection. [#explicit-creation]_"
msgstr ""

#: ../source/faq/fundamentals.txt:50
msgid "As such, you can switch to a non-existent database (``use <dbname>``) and perform the following operation:"
msgstr ""

#: ../source/faq/fundamentals.txt:60
msgid "The ``insert`` operation creates both the database ``myNewDB`` and the collection ``myNewCollection1`` if they do not already exist."
msgstr ""

#: ../source/faq/fundamentals.txt:63
msgid "The ``createIndex`` operation, which occurs after the ``myNewDB`` has been created, creates the index and the collection ``myNewCollection2`` if the collection does not exist. If ``myNewDb`` did not exist, the ``createIndex`` operation would have also created the ``myNewDB``."
msgstr ""

#: ../source/faq/fundamentals.txt:70
msgid "You can also create a collection explicitly using :method:`db.createCollection` if you want to specify specific options, such as maximum size or document validation rules."
msgstr ""

#: ../source/faq/fundamentals.txt:77
msgid "How do I define or alter the collection schema?"
msgstr ""

#: ../source/faq/fundamentals.txt:79
msgid "You do not need to specify a schema for a collection in MongoDB. Although it is common for the documents in a collection to have a largely homogeneous structure, it is not a requirement; i.e. documents in a single collection do not need to have the same set of fields. The data type for a field can differ across documents in a collection as well."
msgstr ""

#: ../source/faq/fundamentals.txt:86
msgid "To change the structure of the documents in a collection, update the documents to the new structure. For instance, add new fields, remove existing ones, or update the value of a field to a new type."
msgstr ""

#: ../source/faq/fundamentals.txt:92
msgid "Starting in MongoDB 3.2, however, you can enforce :doc:`document validation rules </core/schema-validation>` for a collection during update and insert operations."
msgstr ""

#: ../source/faq/fundamentals.txt:96
msgid "Some collection properties, such as specifying a maximum size, can be specified during the explicit creation of a collection and be modified. See :method:`db.createCollection` and :dbcommand:`collMod`. If you are not specifying these properties, you do not need to explicitly create the collection since MongoDB creates new collections when you first store data for the collections."
msgstr ""

#: ../source/faq/fundamentals.txt:104
msgid "Does MongoDB support SQL?"
msgstr ""

#: ../source/faq/fundamentals.txt:106
msgid "Not directly, no. However, MongoDB does support a rich query language of its own. For examples on using MongoDB's query language, see :doc:`/crud`"
msgstr ""

#: ../source/faq/fundamentals.txt:110
msgid "You can also use the `MongoDB Connector for BI <https://www.mongodb.com/products/bi-connector>`_ to query MongoDB collections with SQL."
msgstr ""

#: ../source/faq/fundamentals.txt:114
msgid ":doc:`/reference/sql-comparison`"
msgstr ""

#: ../source/faq/fundamentals.txt:117
msgid "Does MongoDB support transactions?"
msgstr ""

#: ../source/includes/extracts/transactions-faq.rst:1
msgid "Because a single document can contain related data that would otherwise be modeled across separate parent-child tables in a relational schema, MongoDB's atomic single-document operations already provide transaction semantics that meet the data integrity needs of the majority of applications. One or more fields may be written in a single operation, including updates to multiple sub-documents and elements of an array. The guarantees provided by MongoDB ensure complete isolation as a document is updated; any errors cause the operation to roll back so that clients receive a consistent view of the document."
msgstr ""

#: ../source/includes/extracts/transactions-faq.rst:11
msgid "Starting in version 4.0, for situations that require atomicity for updates to multiple documents or consistency between reads to multiple documents, MongoDB provides :manual:`multi-document transactions </core/transactions>` for replica sets, and transactions for sharded clusters are scheduled for MongoDB 4.2."
msgstr ""

#: ../source/includes/extracts/transactions-usage.rst:2
msgid "In most cases, multi-document transaction incurs a greater performance cost over single document writes, and the availability of multi-document transaction should not be a replacement for effective schema design. For many scenarios, the :ref:`denormalized data model (embedded documents and arrays) <data-modeling-embedding>` will continue to be optimal for your data and use cases. That is, for many scenarios, modeling your data appropriately will minimize the need for multi-document transactions."
msgstr ""

#: ../source/includes/fact-upcoming.rst:1
msgid "The development, release, and timing of any features or functionality described for our products remains at our sole discretion. This information is merely intended to outline our general product direction and it should not be relied on in making a purchasing decision nor is this a commitment, promise or legal obligation to deliver any material, code, or functionality."
msgstr ""

#: ../source/faq/fundamentals.txt:131
msgid "Does MongoDB handle caching?"
msgstr ""

#: ../source/faq/fundamentals.txt:133
msgid "Yes. MongoDB keeps most recently used data in RAM. If you have created indexes for your queries and your working data set fits in RAM, MongoDB serves all queries from memory."
msgstr ""

#: ../source/faq/fundamentals.txt:137
msgid "MongoDB does not cache the query results in order to return the cached results for identical queries."
msgstr ""

#: ../source/faq/fundamentals.txt:140
msgid "For more information on MongoDB and memory use, see :ref:`WiredTiger and Memory Use <wiredtiger-RAM>` and :ref:`MMAPv1 and Memory Use <mmapv1-RAM>`."
msgstr ""

#: ../source/faq/fundamentals.txt:145
msgid "How does MongoDB address SQL or Query injection?"
msgstr ""

#: ../source/faq/fundamentals.txt:148
msgid "BSON"
msgstr ""

#: ../source/faq/fundamentals.txt:150
msgid "As a client program assembles a query in MongoDB, it builds a BSON object, not a string. Thus traditional SQL injection attacks are not a problem. More details and some nuances are covered below."
msgstr ""

#: ../source/faq/fundamentals.txt:154
msgid "MongoDB represents queries as :term:`BSON` objects. Typically :ecosystem:`client libraries </drivers>` provide a convenient, injection free, process to build these objects. Consider the following C++ example:"
msgstr ""

#: ../source/faq/fundamentals.txt:164
msgid "Here, ``my_query`` then will have a value such as ``{ name : \"Joe\" }``. If ``my_query`` contained special characters, for example ``,``, ``:``, and ``{``, the query simply wouldn't match any documents. For example, users cannot hijack a query and convert it to a delete."
msgstr ""

#: ../source/faq/fundamentals.txt:171
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-disable-javascript-with-noscript.rst:1
msgid "You can disable all server-side execution of JavaScript, by passing the :option:`--noscripting <mongod --noscripting>` option on the command line or setting :setting:`security.javascriptEnabled` in a configuration file."
msgstr ""

#: ../source/faq/fundamentals.txt:177
msgid "All of the following MongoDB operations permit you to run arbitrary JavaScript expressions directly on the server:"
msgstr ""

#: ../source/faq/fundamentals.txt:180
msgid ":query:`$where`"
msgstr ""

#: ../source/faq/fundamentals.txt:181
msgid ":dbcommand:`mapReduce`"
msgstr ""

#: ../source/faq/fundamentals.txt:182
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/faq/fundamentals.txt:184
msgid "You must exercise care in these cases to prevent users from submitting malicious JavaScript."
msgstr ""

#: ../source/faq/fundamentals.txt:187
msgid "Fortunately, you can express most queries in MongoDB without JavaScript and for queries that require JavaScript, you can mix JavaScript and non-JavaScript in a single query. Place all the user-supplied fields directly in a :term:`BSON` field and pass JavaScript code to the :query:`$where` field."
msgstr ""

#: ../source/faq/fundamentals.txt:193
msgid "If you need to pass user-supplied values in a :query:`$where` clause, you may escape these values with the ``CodeWScope`` mechanism. When you set user-submitted values as variables in the scope document, you can avoid evaluating them on the database server."
msgstr ""

