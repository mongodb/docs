.. _c2c-sharded-clusters:

=====================
Sync Sharded Clusters
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

There are two ways to synchronize :ref:`sharded clusters
<sharded-cluster>`. You can use either one ``mongosync`` or several
``mongosync`` instances. For best performance with large or heavily
loaded clusters, use one ``mongosync`` instance for each shard on the
source cluster.

.. include:: /includes/fact-mongosync-balancer.rst

.. _c2c-sharded-config-single:

Configure a Single ``mongosync`` Instance
-----------------------------------------

To configure a single ``mongosync``, follow the :ref:`connection
instructions <c2c-conn-top-level>` for your cluster architecture to
connect to the :binary:`mongos` instance in your cluster.

When you connect a single ``mongosync`` to a sharded cluster do not use
the :urioption:`replicaSet` option or the :option:`id <mongosync --id>`
option.

The rest of this page addresses cluster to cluster synchronization
using multiple ``mongosync`` instances.

.. _c2c-sharded-config:

Configure Multiple ``mongosync`` Instances
------------------------------------------

The number of ``mongosync`` instances must match the number of shards on
the source cluster. You must use the same version of ``mongosync``
between all instances. For a replica set source, you can only use one
``mongosync`` instance.

.. include:: /includes/api/facts/multiple-mongosync-endpoints

To configure multiple ``mongosync`` instances:

#. :ref:`Verify cluster configuration <c2c-shard-config-verify>`
#. :ref:`Determine the shard IDs <c2c-shard-config-determine>`
#. :ref:`Connect the instances <c2c-shard-config-connect>`

.. procedure::
   :style: normal

   .. step:: Verify cluster configuration

      .. _c2c-shard-config-verify:

      Starting in ``mongosync`` 1.1, you can sync between clusters with
      different numbers of shards. However, if you want to reverse the
      sync, the source cluster and destination cluster must have the
      same number of shards.

   .. step:: Determine the shard IDs

      .. _c2c-shard-config-determine:

      To get the shard IDs, connect to the source cluster
      :binary:`mongos` and run the :dbcommand:`listShards` command.

      .. literalinclude:: /code-examples/topologies/multiple-mongosyncs/1.js
         :language: javascript

      The information is in the ``shards`` array.

      .. literalinclude:: /code-examples/topologies/multiple-mongosyncs/2.js
         :language: javascript
         :copyable: false
         :emphasize-lines: 3,9

   .. step:: Connect the ``mongosync`` instances

      .. _c2c-shard-config-connect:

      These instructions use a generic connection string. To modify the
      connection string for your cluster architecture, refer to the
      architecture specific :ref:`connection details <c2c-connecting>`.

      .. tip::

         A single host server can run multiple ``mongosync`` instances. To
         improve performance, run ``mongosync`` on multiple host servers.

      Run the first ``mongosync`` instance:

      .. literalinclude:: /code-examples/topologies/multiple-mongosyncs/3.js
         :language: javascript

      When running multiple ``mongosync`` instances, the number of instances
      must equal the number of shards.  Each ``mongosync`` instance must be
      started with the :option:`--id` option or :setting:`id` setting to
      specify the shard it replicates.

      Run a new ``mongosync`` instance for each shard in the source cluster.
      Edit the ``--id`` and ``--port`` fields for each additional
      ``mongosync`` instance.

      .. literalinclude:: /code-examples/topologies/multiple-mongosyncs/4.js
         :language: javascript
         :emphasize-lines: 4

      The connection strings for the :option:`--cluster0` and
      :option:`--cluster1` options should point to ``mongos`` instances.
      In the example, they use the same ``mongos`` instance.

      Each ``mongosync`` instance:

      - Connects to ``mongos`` instances in the source cluster.
      - Connects to ``mongos`` instances in the destination cluster.
      - Replicates a single shard from the source cluster,
        identified by the :option:`--id` option.
      - Specifies a unique port to use during synchronization.
        Consider designating a range of ports to simplify scripting
        {+c2c-product-name+} operations.

.. _c2c-sharded-start:

Start Multiple ``mongosync`` Instances
--------------------------------------

Use ``curl`` or another HTTP client to issue the :ref:`start
<c2c-api-start>` command to each of the ``mongosync`` instances.

.. literalinclude:: /code-examples/topologies/multiple-mongosyncs/5.sh
   :language: shell

The ``start`` command options must be the same for all of the ``mongosync``
instances.

.. _c2c-sharded-progress:

Check Progress
--------------

To review synchronization progress for a particular
shard, use ``curl`` or another HTTP client to issue the
:ref:`progress <c2c-api-progress>` command to the ``mongosync``
instance syncing that shard.

.. literalinclude:: /code-examples/topologies/multiple-mongosyncs/6.sh
   :language: shell

This command checks the progress of the ``mongosync`` instance that is
running on ``mongosync02Host`` and using ``port 27602`` for
synchronization. To check progress on other shards, update the host and
port number then repeat the API call to each ``mongosync`` instance.

.. _c2c-sharded-pause:

Pause a ``mongosync`` Instance
------------------------------

The :ref:`pause <c2c-api-pause>` command will temporarily halt the
synchronization process on a single shard. It does not pause any other
``mongosync`` instances that may be running. Use ``curl`` or another
HTTP client to issue the ``pause`` command to a ``mongosync`` instance.

.. literalinclude:: /code-examples/topologies/multiple-mongosyncs/7.sh
   :language: shell

This command pauses the ``mongosync`` instance that is running on
``mongosync01Host`` and using ``port 27601`` for synchronization. To
pause synchronization on other shards, update the host and port number
then repeat the API call to each ``mongosync`` instance.

.. _c2c-sharded-resume:

Resume Synchronization
----------------------

If one or more ``mongosync`` instances are paused, you can use the
:ref:`resume <c2c-api-resume>` command to resume syncing. Run a
separate ``resume`` command against each paused ``mongosync`` instance
to continue syncing.

Use ``curl`` or another HTTP client to issue the :ref:`resume
<c2c-api-resume>` command to each ``mongosync`` instance.

.. literalinclude:: /code-examples/topologies/multiple-mongosyncs/8.sh
   :language: shell

This command resumes synchronization on the ``mongosync`` instance that
is running on ``mongosync01Host`` and using ``port 27601``.  To
resume synchronization on other shards, update the host and port number
then repeat the API call to each ``mongosync`` instance.

.. _c2c-sharded-commit:

Commit Synchronization From  Multiple ``mongosync`` Instances
-------------------------------------------------------------

When you want to complete synchronization, issue the :ref:`progress
<c2c-api-progress>` command and check the values for ``canCommit``
and ``lagTimeSeconds``.

To minimize write blocking on the source cluster, you should only run
the ``commit`` command when the :ref:`lagTimeSeconds
<c2c-api-progress>` value is small enough for your application.

If the ``lagTimeSeconds`` value is small enough, and ``canCommit`` is
``true``, issue the :ref:`commit <c2c-api-commit>` command to commit
synchronization. Repeat the process on all of the ``mongosync``
instances.

The ``commit`` operation is blocking. The ``commit`` command will not
return until ``commit`` has been called on every ``mongosync``
instance.

.. literalinclude:: /code-examples/topologies/multiple-mongosyncs/9.sh
   :language: shell

These commands only check progress and commit synchronization for the
``mongosync`` instance that is running on ``mongosync01Host`` and using
``port 27601``. To synchronize all of the shards, make additional calls
to ``progress`` and  ``commit`` on any other ``mongosync`` instances
that may be running.

Data Verification
-----------------

.. include:: /includes/fact-verification

.. _c2c-sharded-reverse:

Reverse the Synchronization Direction
-------------------------------------

.. note::

   For an in-depth tutorial on reversing your synchronization direction,
   see :ref:`c2c-reverse-process`.

To reverse synchronization so that the original destination cluster
acts as the source cluster:

- If you have not already done so, issue the :ref:`commit
  <c2c-api-commit>` command to each ``mongosync`` instance and wait
  until all of the commits to finish. To check if the sync process has been
  committed, issue the :ref:`progress <c2c-api-progress>` command to all
  ``mongosync`` instances and see if each response's ``state`` field contains
  the value ``COMMITTED``.
- Issue the :ref:`reverse <c2c-api-reverse>` command to each
  ``mongosync`` instance.

The ``reverse`` operation is blocking. The ``reverse`` command will not
return until ``reverse`` has been called on every ``mongosync``
instance.

.. literalinclude:: /code-examples/topologies/multiple-mongosyncs/10.sh
   :language: shell

This command reverses synchronization on the ``mongosync``
instance that is running on ``mongosync01Host`` and using ``port
27601``. Make additional calls to ``reverse`` on any other
``mongosync`` instances that may be running.

.. note::

   Reverse synchronization is only possible if ``reversible`` and
   ``enableUserWriteBlocking`` are both set to ``"sourceAndDestination"`` when the
   :ref:`start API <c2c-api-start>` initiates ``mongosync``.
