
.. _scoring-behavior:
.. _scoring-options:

================
Modify the Score 
================

.. default-domain:: mongodb

.. meta::
   :keywords: atlas search, documents score, score based on relevance, documents metadata, boost option, multiply base score, boost fields, boost example, constant option, replace with specified score, constant fields, constant example, embedded option, embedded documents, embedded fields, embedded example, function option, alter final document score, function expressions, function example, modify score examples
   :description: Modify the score assigned to a returned document with the boost, constant, embedded, or function options.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

The following score modifying options are available to all operators.
For details and examples, click any of the following options: 

- :ref:`scoring-boost`
- :ref:`scoring-constant`
- :ref:`scoring-embedded`
- :ref:`scoring-function`

.. _scoring-boost:

``boost`` 
---------

The ``boost`` option multiplies a result's base score by a given number 
or the value of a numeric field in the documents. For example, you can 
use ``boost`` to increase the importance of certain matching documents 
in the result.

.. note::

   - You can't use the ``boost`` and ``constant`` options together.
   - The ``boost`` option with ``path`` is the same as multiplying 
     using the :ref:`scoring-function` option with a :ref:`path 
     expression <function-score-expression>`.

Fields 
~~~~~~

The ``boost`` option takes the following fields: 

.. list-table:: 
   :header-rows: 1
   :widths: 15 10 15 60

   * - Field 
     - Type 
     - Necessity 
     - Description 

   * - ``value`` 
     - float 
     - Conditional 
     - Number to multiply the default base score by. Value must be a 
       positive number. Either ``value`` or ``path`` is required, but 
       you can't specify both.

   * - ``path`` 
     - string 
     - Conditional 
     - Name of the numeric field whose value to multiply the default 
       base score by. Either ``path`` or ``value`` is required, but you 
       can't specify both.

   * - ``undefined`` 
     - float 
     - Optional 
     - Numeric value to substitute for ``path`` if the numeric field 
       specified through ``path`` is not found in the documents. If 
       omitted, defaults to ``0``. You can specify this only if you 
       specify ``path``.

Examples 
~~~~~~~~

The following examples use the ``movies`` collection in the
``sample_mflix`` database. If you have the :ref:`sample dataset
<available-sample-datasets>` on your {+cluster+}, you can create the |fts|
``default`` index and run the example queries on your {+cluster+}.  
 
The  sample :ref:`compound-ref` queries demonstrate how to increase the 
importance of one search criteria over another. The queries include a 
``$project`` stage to exclude all fields except ``title`` and 
``score``. 

.. tabs:: 

   .. tab:: ``value`` Field Example
      :tabid: number

      In the following example, the :ref:`compound-ref` operator uses 
      :ref:`text-ref` operator to search for the term ``Helsinki`` 
      in the ``plot`` and ``title`` fields. The query for the ``title`` 
      field uses ``score`` with the ``boost`` option to multiply the 
      score results by 3, as specified in the ``value`` field.

      .. code-block:: json
         :linenos:

         db.movies.aggregate([
           {
             "$search": {
               "compound": {
                 "should": [{
                   "text": {
                     "query": "Helsinki",
                     "path": "plot"
                   }
                 },
                 {
                   "text": {
                     "query": "Helsinki",
                     "path": "title",
                     "score": { "boost": { "value": 3 } }
                   }
                 }]
               }
             }
           },
           {
             "$limit": 5
           },
           {
             "$project": {
               "_id": 0,
               "title": 1,
               "plot": 1,
               "score": { "$meta": "searchScore" }
             }
           }
         ])

      This query returns the following results, in which the score 
      for documents where the ``title`` matches the query term is 
      multiplied by ``3`` from its base value:

      .. code-block:: json
         :copyable: false

         [
           {
             plot: 'Epic tale about two generations of men in a wealthy Finnish family, spanning from the 1960s all the way through the early 1990s. The father has achieved his position as director of the ...',
             title: 'Kites Over Helsinki',
             score: 12.2470121383667
           },
           {
             plot: 'Alex is Finlander married to an Italian who works as a taxi driver in Berlin. One night in his taxi come two men with a briefcase full of money. Unluckily for Alex, they are being chased by...',
             title: 'Helsinki-Naples All Night Long',
             score: 9.56808090209961
           },
           {
             plot: 'The recession hits a couple in Helsinki.',
             title: 'Drifting Clouds',
             score: 4.5660295486450195
           },
           {
             plot: 'Two teenagers from Helsinki are sent on a mission by their drug dealer.',
             title: 'Sairaan kaunis maailma',
             score: 4.041563034057617
           },
           {
             plot: 'A murderer tries to leave his criminal past in East Helsinki and make a new life for his family',
             title: 'Bad Luck Love',
             score: 3.6251673698425293
           }
         ]

   .. tab:: ``path`` Field Example
      :tabid: patheg

      In the following example, the :ref:`compound-ref` operator 
      uses :ref:`text-ref` operator to search for the term 
      ``Helsinki`` in the ``plot`` and ``title`` fields. The query 
      against the ``title`` field uses ``score`` with the ``boost`` 
      option to multiply the score results by the numeric field 
      ``imdb.rating`` in ``path``. If the numeric field isn't found in 
      the specified ``path``, the operator multiplies the score of the 
      documents by ``3``.

      .. code-block:: json 
         :linenos:

         db.movies.aggregate([
           {
             "$search": {
               "compound": {
                 "should": [{
                   "text": {
                     "query": "Helsinki",
                     "path": "plot"
                   }
                 },
                 {
                   "text": {
                     "query": "Helsinki",
                     "path": "title",
                     "score": {
                       "boost": {
                         "path": "imdb.rating",
                         "undefined": 3
                       }
                     }
                   }
                 }]
               }
             }
           },
           {
             "$limit": 5
           },
           {
             "$project": {
               "_id": 0,
               "title": 1,
               "plot": 1,
               "score": { "$meta": "searchScore" }
             }
           }
         ])

      This query returns the following results, in which the score 
      for documents where the ``title`` field matches the query term is 
      multiplied from its base value by the value of the numeric field 
      ``imdb.rating`` or ``3``, if the field isn't found in the 
      documents:

      .. code-block:: json 
         :copyable: false 

         [
           {
             plot: 'Epic tale about two generations of men in a wealthy Finnish family, spanning from the 1960s all the way through the early 1990s. The father has achieved his position as director of the ...',
             title: 'Kites Over Helsinki',
             score: 24.902257919311523
           },
           {
             plot: 'Alex is Finlander married to an Italian who works as a taxi driver in Berlin. One night in his taxi come two men with a briefcase full of money. Unluckily for Alex, they are being chased by...',
             title: 'Helsinki-Naples All Night Long',
             score: 20.411907196044922
           },
           {
             plot: 'The recession hits a couple in Helsinki.',
             title: 'Drifting Clouds',
             score: 4.5660295486450195
           },
           {
             plot: 'Two teenagers from Helsinki are sent on a mission by their drug dealer.',
             title: 'Sairaan kaunis maailma',
             score: 4.041563034057617
           },
           {
             plot: 'A murderer tries to leave his criminal past in East Helsinki and make a new life for his family',
             title: 'Bad Luck Love',
             score: 3.6251673698425293
           }
         ]

.. _scoring-constant:

``constant``
------------

The ``constant`` option replaces the base score with a specified number. 

.. note::

   You must not use the ``constant`` and ``boost`` options together.

Examples
~~~~~~~~

The following example uses the default index on the 
``sample_mflix.movies`` collection to query the ``plot`` and ``title`` 
fields using the :ref:`compound-ref` operator. In the query, the 
:ref:`text-ref` operator uses ``score`` with the ``constant`` option to 
replace all score results with ``5`` for results that match the query 
against the ``title`` field only.

.. code-block:: javascript
   :linenos:

   db.movies.aggregate([
     {
       "$search": {
         "compound": {
           "should": [{
             "text": {
               "query": "tower",
               "path": "plot"
             }
           },
           {
             "text": {
               "query": "tower",
               "path": "title",
               "score": { "constant": { "value": 5 } }
             }
           }]
         }
       }
     },
     {
       "$limit": 5
     },
     {
       "$project": {
         "_id": 0,
         "title": 1,
         "plot": 1,
         "score": { "$meta": "searchScore" }
       }
     }
   ])

The above query returns the following results, in which the score for 
documents that match the query against the ``title`` field only is 
replaced with the specified ``constant`` value:

.. code-block:: json
   :copyable: false
   :linenos:

   [
     {
       plot: 'Several months after witnessing a murder, residents of Tower Block 31 find themselves being picked off by a sniper, pitting those lucky enough to be alive into a battle for survival.',
       title: 'Tower Block',
       score: 8.15460205078125
     },
     {
       plot: "When a group of hard-working guys find out they've fallen victim to their wealthy employer's Ponzi scheme, they conspire to rob his high-rise residence.",
       title: 'Tower Heist',
       score: 5
     },
     {
       plot: 'Toru Kojima and his friend Koji are young student boys with one thing in common - they both love to date older women. Koji is a playboy with several women, young and older, whereas Toru is a romantic with his heart set on on certain lady.',
       title: 'Tokyo Tower',
       score: 5
     },
     {
       plot: 'A middle-aged mental patient suffering from a split personality travels to Italy where his two personalities set off all kinds of confusing developments.',
       title: 'The Leaning Tower',
       score: 5
     },
     {
       plot: 'A documentary that questions the cost -- and value -- of higher education in the United States.',
       title: 'Ivory Tower',
       score: 5
     }
   ]

.. _scoring-embedded:

``embedded``
------------

.. note:: 

   You can use this option with the :ref:`embedded-document-ref` operator 
   only.

The ``embedded`` option allows you to configure how to: 

- Aggregate the scores of multiple matching embedded documents.
- Modify the score of an :ref:`embedded-document-ref` operator after 
  aggregating the scores from matching embedded documents.

.. note:: 

   .. include:: /includes/fact-embedded-document-preview.rst

Fields 
~~~~~~

The ``embedded`` option takes the following fields: 

.. list-table:: 
   :header-rows: 1
   :widths: 15 10 15 60

   * - Field 
     - Type 
     - Necessity 
     - Description 

   * - ``aggregate`` 
     - string
     - Optional
     - Configures how to combine scores of matching embedded documents. 
       Value must be one of the following aggregation strategies: 

       - ``sum`` - (Default) Sum the score of all matching embedded 
         documents. 
       - ``maximum`` - Choose the greatest score of all matching 
         embedded documents.
       - ``minimum`` - Choose the least high score of all matching 
         embedded documents.
       - ``mean`` - Choose the average (arithmetic mean) score of all 
         matching embedded documents. |fts| includes scores of matching 
         embedded documents only when computing the average. |fts| 
         doesn't count embedded documents that don't satisfy query 
         predicates as documents with scores of zero.

       If omitted, this field defaults to ``sum``.

   * - ``outerScore``
     - :ref:`Scoring Option <scoring-options>`
     - Optional 
     - Specifies the score modification to apply after applying the 
       aggregation strategy. 

Examples 
~~~~~~~~

The following sample query uses an index named ``default`` on the 
``sample_analytics.transactions`` collection. The index configures an 
``embeddedDocuments`` type on documents in the ``transactions`` array 
and ``string`` type for ``transactions.symbol`` and 
``transactions.transaction_code`` fields.

.. example:: 

   .. code-block:: 
      :copyable: true 
      :caption: Sample Index

      {
        "mappings": {
          "dynamic": true,
          "fields": {
           "transactions": {
              "dynamic": true,
              "fields": {
                "symbol": {
                  "type": "string"
                },
                "transaction_code": {
                  "type": "string"
                }
              },
              "type": "embeddedDocuments"
            }
          }
        }
      }

The sample query on the ``transactions`` field, which contains an array 
of documents, includes a ``$limit`` stage to limit the output to ``10`` 
results and a ``$project`` stage to: 

- Exclude all fields except ``account_id`` and ``transaction_count``.
- Add a field named ``score`` that applies an aggregation strategy and 
  further score modification.

  .. note:: 

     You can use :ref:`scoring-function` inside the ``score`` option of 
     the :ref:`embedded-document-ref` operator's ``operator``. However, 
     for function score :ref:`expressions <function-score-expression>` 
     that require the ``path`` option, the numeric field that you 
     specify as the ``path`` for the expression must be inside the 
     :ref:`embedded-document-ref` operator's ``path``. For example, in 
     the following example query, the field ``transactions.amount`` that
     is specified inside the ``score`` option of the ``compound``
     operator on line 24 is inside in the ``embeddedDocument``
     operator's path ``transactions`` on line 4.

The query searches for accounts that have bought ``AMD`` and multiplies 
the largest single ``AMD`` purchase (by number of shares) by the 
``log1p`` value of the number of transactions that the account has made 
in this period. It ranks the accounts based on the following: 

- Number of ``AMD`` bought in a single transaction
- Number of transactions in the last period

.. code-block:: json
   :copyable: true 
   :linenos: 

   db.transactions.aggregate({
     "$search": {
       "embeddedDocument": {
         "path": "transactions",
         "operator": {
           "compound": {
             "must": [
               {
                 "text": {
                   "path": "transactions.symbol",
                   "query": "amd"
                 }
               },
               {
                 "text": {
                   "path": "transactions.transaction_code",
                   "query": "buy"
                 }
               }
             ],
             "score": {
               "function": {
                 "path": {
                   "value": "transactions.amount",
                   "undefined": 1.0
                 }
               }
             }
           }
         },
         "score": {
           "embedded": {
             "aggregate": "maximum",
             "outerScore": {
               "function": {
                 "multiply": [
                   {
                     "log1p": {
                       "path": {
                         "value": "transaction_count"
                       }
                     }
                   },
                   {
                     "score": "relevance"
                   }
                 ]
               }
             }
           }
         }
       }
     }
   },
   { "$limit": 10 },
   {
     "$project": {
       "_id": 0,
       "account_id": 1,
       "transaction_count": 1,
       "score": { $meta: "searchScore" }
     }
   })

|fts| ranks accounts that have made many transactions in the last 
period and bought many ``AMD`` in a single transaction highly.

.. code-block:: json
   :copyable: false 
   :linenos:

   [
     { account_id: 467651, transaction_count: 99, score: 19982 },
     { account_id: 271554, transaction_count: 96, score: 19851.822265625 },
     { account_id: 71148, transaction_count: 99, score: 19840 },
     { account_id: 408143, transaction_count: 100, score: 19836.76953125 },
     { account_id: 977774, transaction_count: 98, score: 19822.64453125 },
     { account_id: 187107, transaction_count: 96, score: 19754.470703125 },
     { account_id: 492843, transaction_count: 97, score: 19744.998046875 },
     { account_id: 373169, transaction_count: 93, score: 19553.697265625 },
     { account_id: 249078, transaction_count: 89, score: 19436.896484375 },
     { account_id: 77690, transaction_count: 90, score: 19418.017578125 }
   ]

.. _scoring-function:

``function``
------------

The ``function`` option allows you to alter the final score of the 
document using a numeric field . You can specify the numeric field for 
computing the final score through an :ref:`expression 
<function-score-expression>`. If the final result of the function score 
is less than ``0``, |fts| replaces the score with ``0``.

.. note:: 

   You can use ``function`` inside the ``score`` option of the 
   :ref:`embedded-document-ref` operator's ``operator``. However, for 
   function score expressions that require the ``path`` option, the 
   numeric field that you specify as the ``path`` for the expression 
   must be inside the :ref:`embedded-document-ref` operator's ``path``. 

.. _function-score-expression:

Expressions
~~~~~~~~~~~

Use the following expressions with the ``function`` option 
to alter the final score of the document:

- Arithmetic expressions, which add or multiply a series of numbers. 

- Constant expressions, which allow a :ref:`constant 
  <scoring-constant>` number in the function score.

- Gaussian decay expressions, which decay, or reduces, the scores by 
  multiplying at a specified rate.

- Path expressions, which incorporate an indexed numeric field value 
  into a function score. 

- Score expressions, which return the relevance score assigned by |fts|.

- Unary expressions, which are expressions that take a single argument. 
  In |fts|, you can calculate the log10(x) or log10(x+1) of a specified 
  number. 

.. tabs:: 

   .. tab:: Arithmetic
      :tabid: arithmetic

      An arithmetic expression adds or multiplies a series of numbers. 
      For example, you can use arithmetic expression to modify 
      relevance ranking through a numeric field from a data enrichment 
      pipeline. It must include one of the following options: 

      .. list-table::
         :header-rows: 1
         :widths: 10 15 75 

         * - Option
           - Type
           - Description

         * - ``add`` 
           - array of :ref:`expressions <function-score-expression>`
           - Adds a series of numbers. Takes an array of 
             :ref:`expressions <function-score-expression>`, which can 
             have negative values. Array length must be greater than or 
             equal to ``2``. 

             .. example:: 

                .. code-block:: json 
                   :copyable: false 
                   :caption: Arithmetic Expression Syntax

                   "function": {
                     "add": [
                       {"path": "rating"},
                       {"score": "relevance"}
                     ]
                   }

                |fts| uses the ``path`` and ``score`` expressions to 
                add the following: 
                
                - Numeric value of the ``rating`` field or ``0``, if 
                  the ``rating`` field is not present in the document
                - Relevance score, which is the score |fts| assigns 
                  based on relevance

         * - ``multiply``
           - array of :ref:`expressions <function-score-expression>`
           - Multiplies a series of numbers. Takes an array of   
             :ref:`expressions <function-score-expression>`, which can 
             have negative values. Array length must be greater than or 
             equal to ``2``. 

             .. example:: 

                .. code-block:: json 
                   :copyable: false 
                   :caption: Arithmetic Expression Syntax

                   "function": {
                     "multiply": [
                       {
                         "path": {
                           "value": "popularity",
                           "undefined": 2.5
                         }
                       },
                       {"score": "relevance"},
                       {"constant": 0.75}
                     ]
                   }

                |fts| uses the ``path``, ``score``, and ``constant`` 
                expressions to alter the final score of the document. 
                It multiplies the following: 
              
                - Numeric value of the path expression, which is the 
                  numeric value of the ``popularity`` field or 
                  ``2.5``, if the ``popularity`` field is not present 
                  in the document
                - Relevance score, which is the score |fts| assigns 
                  based on relevance
                - Constant value of ``0.75``

      .. note:: 
       
         You can't replace an arithmetic expression that evaluates to 
         ``undefined`` with a constant value.

   .. tab:: Constant
      :tabid: constant 

      A constant expression allows a :ref:`constant <scoring-constant>` 
      number in the function score. For example, you can use 
      ``constant`` to modify relevance ranking through a numeric value 
      from a data enrichment pipeline. It must include the following 
      option: 

      .. list-table::
         :header-rows: 1
         :widths: 10 15 60  

         * - Option
           - Type
           - Description

         * - ``constant``
           - float
           - Number that indicates a fixed value. |fts| supports 
             negative values. 

      .. example:: 

         .. code-block:: sh 
            :copyable: false 
            :caption: Constant Expression Syntax

            {
              "function": {
                "constant": -23.78
              }
            } 

   .. tab:: Gaussian
      :tabid: gauss

      A gaussian decay expression allows you to decay, or reduce by 
      multiplying, the final scores of the documents based on the 
      distance of a numeric field value from a specified origin point. 
      ``decay`` is computed as: 

      .. figure:: /images/fts-decay-computation.png
         :alt: Screenshot of decay computation
         :figwidth: 60%

      where sigma is computed to assure that the score takes the value 
      ``decay`` at distance ``scale`` from ``origin±offset``:

      .. figure:: /images/fts-sigma-computation.png
         :alt: Screenshot of sigma computation
         :figwidth: 40%

      For example, you can use ``gauss`` to adjust the relevant score 
      of documents based on document freshness, or date influencing  
      higher ranking. ``gauss`` takes the following options:

      .. list-table:: 
         :header-rows: 1
         :widths: 15 10 15 60

         * - Field 
           - Type 
           - Necessity 
           - Description 

         * - ``decay`` 
           - double 
           - Optional 
           - Rate at which you want to multiply the scores. Value must 
             be a positive number between ``0`` and ``1`` exclusive. If 
             omitted, defaults to ``0.5``.

             For documents whose numeric field value (specified using 
             ``path``) is at a distance (specified using ``scale``) 
             away from ``origin`` plus or minus (``±``) ``offset``, 
             |fts| multiplies the current score using ``decay``. 

         * - ``offset`` 
           - double 
           - Optional 
           - Number to use to determine the distance from origin. The 
             decay operation is performed only for documents whose 
             distances are greater than ``origin`` plus or minus 
             (``±``) ``offset``. If ommitted, defaults to ``0``.

         * - ``origin`` 
           - double 
           - Required 
           - Point of origin from which to calculate the distance. 

         * - ``path`` 
           - :ref:`expression <function-score-expression>` 
           - Required 
           - Name of the numeric field whose value you want to use to 
             multiply the base score. 

         * - ``scale`` 
           - double 
           - Required 
           - Distance from ``origin`` plus or minus (``±``) ``offset`` 
             at which scores must be multiplied. 

      .. example:: 

         .. code-block:: sh 
            :copyable: false 
            :caption: Gaussian Expression Syntax

            {
              "function": {
                "gauss": {
                  "path": {
                    "value": "rating",
                    "undefined": 50
                  },
                  "origin": 95,
                  "scale": 5,
                  "offset": 5,
                  "decay": 0.5
                }
              }
            } 

         Suppose the max rating is ``100``. |fts| uses the ``rating`` 
         field in the documents to decay the score:
         
         - Retains the current score for documents with rating between 
           ``90`` to ``100``.
         - Multiplies the current score by ``0.5`` for documents with a 
           rating lower than ``90``. 
         - Multiplies the current score by ``0.25`` for documents with 
           a rating lower than ``85``, and so on.

   .. tab:: Path
      :tabid: path 

      A path expression incorporates an indexed numeric field value 
      into a function score. It can either be a ``string`` or an 
      ``object``. 
       
      If ``string``, the value is the name of the numeric field to 
      search over for the path expression. 

      .. example:: 

         .. code-block:: sh 
            :copyable: false 
            :caption: Path Expression Syntax

            {
              "function": {
                "path": "rating"
              }
            }

         |fts| incorporates the numeric value of the ``rating`` 
         field in the final score of the document.
       
      If ``object``, the path expression takes the following options: 

      .. list-table::
         :header-rows: 1
         :widths: 15 10 15 70 

         * - Option
           - Type
           - Necessity
           - Description

         * - ``value``
           - string
           - Required
           - Name of numeric field. Field can contain negative numeric 
             values.

         * - ``undefined``
           - float
           - Optional
           - Value to use if the numeric field specified using 
             ``value`` is missing in the document. If omitted, defaults 
             to ``0``.

      .. example:: 

         .. code-block:: sh 
            :copyable: false 
            :caption: Path Expression Syntax

            {
              "function": {
                "path": {"value": "quantity", "undefined": 2}
              }
            }

         |fts| incorporates numeric value of the ``quantity`` field 
         or ``2``, if the ``quantity`` field is not present in the 
         document, in the final score of the document.
       
      A path expression can't be an ``array`` and can't contain 
      :ref:`regex-ref` or :ref:`wildcard-ref` in the ``path``. 

   .. tab:: Score
      :tabid: score 

      A score expression represents the relevance score, which is the 
      score |fts| assigns documents based on relevance, of the query. 
      It is the same as the current score of the document. It must 
      include the following option: 

      .. list-table::
         :header-rows: 1
         :widths: 10 15 60

         * - Option
           - Type
           - Description

         * - ``score``
           - string
           - Value of relevance score of the query. Value must be 
             ``relevance``. 

      .. example:: 

         .. code-block:: sh 
            :copyable: false 
            :caption: Score Expression Syntax

            {
              "function": {
                "score": "relevance"
              }
            }

   .. tab:: Unary
      :tabid: unary 

      A unary expression is an expression that takes a single argument. 
      In |fts|, you can use unary expressions to calculate the log10(x) 
      or log10(x+1) of a specified number. For example, you can use 
      ``log1p`` to influence the relevance score by document popularity 
      score. It must include one of the following options:

      .. list-table::
         :header-rows: 1
         :widths: 10 15 60

         * - Option
           - Type
           - Description

         * - ``log``
           - :ref:`expression <function-score-expression>`
           - Calculates the log10 of a number. 

             .. example::  
                
                The following example uses the arithmetic expression 
                ``multiply`` option. |fts| calculates the log10 of the 
                arithmetic expression.

                .. code-block:: json 
                   :copyable: false 
                   :caption: Unary Expression Syntax

                   {
                     "function": {
                       "log": {
                         "multiply": [
                           {"path": "popularity"},
                           {"constant": 0.5},
                           {"score": "relevance"}
                         ]
                       }
                     }
                   }
              
             If the specified expression evaluates to less than or 
             equal to ``0``, then the ``log`` evaluates to undefined. 
            
             .. example:: 

                In the following example, log10 of ``-5.1``, specified 
                using a constant expression, evaluates to undefined. 
                Therefore, the final score of the document is ``0``.
                
                .. code-block:: json 
                   :copyable: false 
                   :caption: Unary Expression Syntax

                   {
                     "function": {
                       "log": {
                         "constant": -5.1
                       }
                     }
                   }  

         * - ``log1p``
           - :ref:`expression <function-score-expression>`
           - Adds ``1`` to the number and then calculates its log10. 
             For example: 

             .. example:: 

                The following example uses the path expression. |fts| 
                adds ``1`` to the numeric value of the path expression 
                and then calculates the log10.
                
                .. code-block:: json 
                   :copyable: false 
                   :caption: Unary Expression Syntax

                   {
                     "function": {
                       "log1p": {
                         "path": {
                           "value": "rating",
                           "undefined": 4
                         }
                       }
                     }
                   }

.. _function-score-egs:

Examples
~~~~~~~~

The following examples use the default index on the 
``sample_mflix.movies`` collection to query the ``title`` field. The 
sample queries include a ``$limit`` stage to limit the output to ``5`` 
results and a ``$project`` stage to exclude all fields except ``title`` 
and ``score``.

.. tabs:: 

   .. tab:: Arithmetic
      :tabid: arithmetic

      .. example:: 

         In this example, the :ref:`text-ref` operator uses ``score`` 
         with the ``function`` option to multiply the following: 

         - Numeric value of the path expression, which is the value of 
           the ``imdb.rating`` field in the documents or ``2``, if the 
           ``imdb.rating`` field is not in the document
         - Relevance score, or the current score of the document

         .. code-block:: json 

            db.movies.aggregate([{
              "$search": {
                "text": {
                  "path": "title",
                  "query": "men",
                  "score": {
                    "function":{
                      "multiply":[
                        {
                          "path": { 
                            "value": "imdb.rating",   
                            "undefined": 2 
                          }
                        },
                        {
                          "score": "relevance"
                        }
                      ]
                    }
                  } 
                }   
              }
            },
            {
              $limit: 5
            },
            {
              $project: {
                "_id": 0,
                "title": 1,
                "score": { "$meta": "searchScore" }
              }
            }])

         This query returns the following results, in which 
         the score is replaced with the specified ``function`` value:

         .. code-block:: json 
            :copyable: false 

            { "title" : "Men...", "score" : 23.431293487548828 }
            { "title" : "12 Angry Men", "score" : 22.080968856811523 }
            { "title" : "X-Men", "score" : 21.34803581237793 }
            { "title" : "X-Men", "score" : 21.34803581237793 }
            { "title" : "Matchstick Men", "score" : 21.05954933166504 }

   .. tab:: Constant
      :tabid: constant 

      .. example:: 

         In the following example, the :ref:`text-ref` operator uses ``score`` 
         with the ``function`` option to replace the current score of 
         the document with the constant numeric value of ``3``.

         .. code-block:: json 

            db.movies.aggregate([
              {
                "$search": {
                  "text": {
                    "path": "title",
                    "query": "men",
                    "score": {
                      "function":{
                        "constant": 3 
                      }
                    } 
                  }   
                }
              },
              {
                $limit: 5
              },
              {
                $project: {
                  "_id": 0,
                  "title": 1,
                  "score": { "$meta": "searchScore" }
                }
              }
            ])

         This query returns the following results, in which 
         the score is replaced with the specified ``function`` value:

         .. code-block:: json 
            :copyable: false 

            { "title" : "Men Without Women", "score" : 3 }
            { "title" : "One Hundred Men and a Girl", "score" : 3 }
            { "title" : "Of Mice and Men", "score" : 3 }
            { "title" : "All the King's Men", "score" : 3 }
            { "title" : "The Men", "score" : 3 }

   .. tab:: Gaussian
      :tabid: gauss 

      .. example:: 

         In the following example, the :ref:`text-ref` operator uses ``score`` 
         with the ``function`` option to decay the relevance score 
         of the documents in the result. 
         
         The query specifies that for documents whose ``imdb.rating`` 
         field value or ``4.6``, if the ``imdb.rating`` field is not 
         present in the documents, is ``scale`` distance, which is 
         ``5``, away from ``origin``, which is ``9.5``, plus or minus 
         ``offset``, which is ``0``, |fts| must multiply the score 
         using ``decay``, which starts at ``0.5``. This query includes 
         a :pipeline:`$limit` stage to limit the output to up to ``10`` 
         results and a :pipeline:`$project` stage to add the 
         ``imbdb.rating`` field in the results.

         .. code-block:: json

            db.movies.aggregate([
              {
                "$search": {
                  "text": {
                    "path": "title",
                    "query": "shop",
                    "score": {
                      "function":{
                        "gauss": {
                          "path": {
                            "value": "imdb.rating",
                            "undefined": 4.6
                          },
                          "origin": 9.5,
                          "scale": 5,
                          "offset": 0,
                          "decay": 0.5
                        }
                      }
                    }
                  }
                }
              },
              {
                "$limit": 10
              },
              {
                "$project": {
                  "_id": 0,
                  "title": 1,
                  "imdb.rating": 1,
                  "score": { "$meta": "searchScore" }
                }
              }
            ])

         This query returns the following results:

         .. code-block:: json 
            :copyable: false 

            [
              { title: 'The Shop Around the Corner', imdb: { rating: 8.1 }, score: 0.9471074342727661 },
              { title: 'Exit Through the Gift Shop', imdb: { rating: 8.1 }, score: 0.9471074342727661 },
              { title: 'The Shop on Main Street', imdb: { rating: 8 }, score: 0.9395227432250977 },
              { imdb: { rating: 7.4 }, title: 'Chop Shop', score: 0.8849083781242371 },
              { title: 'Little Shop of Horrors', imdb: { rating: 6.9 }, score: 0.8290896415710449 },
              { title: 'The Suicide Shop', imdb: { rating: 6.1 }, score: 0.7257778644561768 },
              { imdb: { rating: 5.6 }, title: 'A Woman, a Gun and a Noodle Shop', score: 0.6559237241744995 },
              { title: 'Beauty Shop', imdb: { rating: 5.4 }, score: 0.6274620294570923 }
            ]

         To compare the results of the Gaussian expressions used in the 
         previous query with the relevance score that is returned in the 
         results by |fts|, run the following query: 

         .. code-block:: json 

            db.movies.aggregate([
              {
                "$search": {
                  "text": {
                    "path": "title",
                    "query": "shop"
                  }
                }
              },
              {
                "$limit": 10
              },
              {
                "$project": {
                  "_id": 0,
                  "title": 1,
                  "imdb.rating": 1,
                  "score": { "$meta": "searchScore" }
                }
              }
            ])

         This query returns the following results:

         .. code-block:: json 
            :copyable: false 

            [
              { title: 'Beauty Shop', imdb: { rating: 5.4 }, score: 4.111973762512207 },
              { imdb: { rating: 7.4 }, title: 'Chop Shop', score: 4.111973762512207 },
              { title: 'The Suicide Shop', imdb: { rating: 6.1 }, score: 3.5363259315490723 },
              { title: 'Little Shop of Horrors', imdb: { rating: 6.9 }, score: 3.1020588874816895 },
              { title: 'The Shop Around the Corner', imdb: { rating: 8.1 }, score: 2.762784481048584 },
              { title: 'The Shop on Main Street', imdb: { rating: 8 }, score: 2.762784481048584 },
              { title: 'Exit Through the Gift Shop', imdb: { rating: 8.1 }, score: 2.762784481048584 },
              { imdb: { rating: 5.6 }, title: 'A Woman, a Gun and a Noodle Shop', score: 2.0802340507507324 }
            ]

   .. tab:: Path
      :tabid: path 

      .. example:: 

         In the following example, the :ref:`text-ref` operator uses ``score`` 
         with the ``function`` option to replace the relevance score 
         of the query with the value of the numeric field 
         ``imdb.rating`` or ``4.6``, if the ``imdb.rating`` field isn't 
         present in the documents.

         .. code-block:: json

            db.movies.aggregate([{
              "$search": {
                "text": {
                  "path": "title",
                  "query": "men",
                  "score": {
                    "function":{
                      "path": { 
                        "value": "imdb.rating", 
                        "undefined": 4.6 
                      }
                    }
                  } 
                }   
              }
            },
            {
              $limit: 5
            },
            {  
              $project: {
                "_id": 0,
                "title": 1,
                "score": { "$meta": "searchScore" }
              }
            }])

         This query returns the following results, in which 
         the score is replaced with the specified ``function`` value:

         .. code-block:: json 
            :copyable: false 

            { "title" : "12 Angry Men", "score" : 8.899999618530273 }
            { "title" : "The Men Who Built America", "score" : 8.600000381469727 }
            { "title" : "No Country for Old Men", "score" : 8.100000381469727 }
            { "title" : "X-Men: Days of Future Past", "score" : 8.100000381469727 }
            { "title" : "The Best of Men", "score" : 8.100000381469727 }

   .. tab:: Score
      :tabid: score 

      .. example:: 

         In the following example, the :ref:`text-ref` operator uses ``score`` 
         with the ``function`` option to return the relevance score, 
         which is the same as the current score, of the documents.

         .. code-block:: json 
           
            db.movies.aggregate([{
              "$search": {
                "text": {
                  "path": "title",
                  "query": "men",
                  "score": {
                    "function":{
                      "score": "relevance" 
                    }
                  } 
                }   
              }
            },
            {
              "$limit": 5
            },
            {
              "$project": {
                "_id": 0,
                "title": 1,
                "score": { "$meta": "searchScore" }
              }
            }])

         This query returns the following results, in which 
         the score is replaced with the specified ``function`` value:

         .. code-block:: json 
            :copyable: false

            { "title" : "Men...", "score" : 3.4457783699035645 }
            { "title" : "The Men", "score" : 2.8848698139190674 }
            { "title" : "Simple Men", "score" : 2.8848698139190674 }
            { "title" : "X-Men", "score" : 2.8848698139190674 }
            { "title" : "Mystery Men", "score" : 2.8848698139190674 }

   .. tab:: Unary
      :tabid: unary 

      .. example:: 

         In the following example, the :ref:`text-ref` operator uses ``score`` 
         with the ``function`` option to calculate the log10 of the 
         ``imdb.rating`` field or ``10``, if the ``imdb.rating`` field 
         is not present in the document.

         .. code-block:: json 

            db.movies.aggregate([{
              "$search": {
                "text": {
                  "path": "title",
                  "query": "men",
                  "score": {
                    "function": {
                      "log": { 
                        "path": { 
                          "value": "imdb.rating", 
                          "undefined": 10 
                        }
                      }
                    }
                  } 
                }   
              }
            },
            {
              "$limit": 5
            },
            {
              "$project": {
                "_id": 0,
                "title": 1,
                "score": { "$meta": "searchScore" }
              }
            }])

         This query returns the following results, in which 
         the score is replaced with the specified ``function`` value:

         .. code-block:: json 
            :copyable: false 

            { "title" : "12 Angry Men", "score" : 0.9493899941444397 }
            { "title" : "The Men Who Built America", "score" : 0.9344984292984009 }
            { "title" : "No Country for Old Men", "score" : 0.9084849953651428 }
            { "title" : "X-Men: Days of Future Past", "score" : 0.9084849953651428 }
            { "title" : "The Best of Men", "score" : 0.9084849953651428
            }
