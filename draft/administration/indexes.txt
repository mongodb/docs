===================
Indexing Operations
===================

.. default-domain:: mongodb

Synopsis
--------

Indexes allow MongoDB to process and fulfill queries quickly, by
creating an small and efficient representation of the documents in the
collection. Fundamentally, indexes in MongoDB are operationally
similar to indexes in other database systems. Read the
":doc:`/core/indexes`" documentation for more information on the
fundamentals of indexing in MongoDB, and the
":doc:`/applications/indexes`" documentation for practical strategies
and examples for using indexes in your application.

This document provides operational guidelines and procedures related
to indexing data in MongoDB collections.

Operations
----------

Creation
~~~~~~~~

Use the :func:`db.collection.ensureIndex()`, or similar :api:`method
for your driver <>`, to create an index. Consider the following
prototype operation:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 } )

The following example creates [#ensure]_ an index on the ``phone-number`` field
of the ``people`` collection:

.. code-block:: javascript

   db.people.ensureIndex( { phone-number: 1 } )

TODO: you need ""s around phone-number, otherwise it's invalid JS (phone minus number).

To create a :ref:`compound index <index-type-compound>`, use an
operation that resembles the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1, b: 1, c: 1 } )

For example, the following operation will create an index on the
``item``, ``category``, and ``price`` fields of the ``products``
collection:

.. code-block:: javascript

   db.products.ensureIndex( { item: 1, category: 1, price: 1 } )

.. note::

   To build indexes for a :term:`replica set`, before version 2.2,
   see :ref:`index-building-replica-sets`.

TODO: I don't think anything changed about replica set index builds for 2.2...

.. [#ensure] As the name suggests, :func:`ensureIndex() <db.collection.ensureIndex()>`
   only creates an index if an index of the same specification does
   not already exist.

Sparse
``````

TODO: Sparse?  Maybe "Types of Indexes->Sparse"?

To create a :ref:`sparse index <index-type-sparse>` on a field, use an
operation that resembles the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { sparse: true } )

The following example creates a sparse index on the ``users``
table that *only* indexes the ``twitter_name`` *if* a document has
this field. This index will not include documents in this collection
without the ``twitter_name`` field.

.. code-block:: javascript

   db.users.ensureIndex( { twitter_name: 1 }, { sparse: true } )

.. note::

   MongoDB cannot create sparse compound indexes.

TODO: is this true? I thought that it could.

TODO: Is there more doc on spare indexes somewhere?  Seems like this is missing
some info like getting different results back when the index is used, null
counts as existing, etc.

Unique
``````

To create a :ref:`unique indexes <index-type-unique>`, consider the
following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { unique: true } )

For example, you may want to create a unique index on the ``tax-id:``
of the ``accounts`` collection to prevent storing multiple account
records for the same legal entity:

.. code-block:: javascript

   db.accounts.ensureIndex( { tax-id: 1 }, { unique: true } )

TODO: tax-id should be in ""s.

The :ref:`_id index <index-type-primary>` is a unique index. In some
situations you may want to use the ``_id`` field for these primary
data rather than using a unique index on another field.

TODO: "for these primary data"?

In many situations you will want to combine the ``unique`` constraint
with the ``sparse`` option. When MongoDB indexes a field, if a
document does not have a value for a field, the index entry for that
item will be ``null``. Since unique indexes cannot have duplicate
values for a field, without the ``sparse`` option, MongoDB will reject
the second document and all subsequent documents without the indexed
field. Consider the following prototype.

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { unique: true, sparse: true } )

You can also enforce a unique constraint on :ref:`compound indexes
<index-type-compound-index>`, as in the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1, b: 1 }, { unique: true } )

These indexes enforce uniqueness for the *combination* of index keys
and *not* for either key individually.

Removal
~~~~~~~

To remove an index, use the :func:`db.collection.dropIndex()` method,
as in the following example:

.. code-block:: javascript

   db.accounts.dropIndex( { tax-id: 1 } )

TODO: ""s!

This will remove the index on the ``tax-id`` field in the ``accounts``
collection. The shell provides the following document after completing
the operation:

.. code-block:: javascript

   { "nIndexesWas" : 3, "ok" : 1 }

Where the value of ``nIndexesWas`` reflects the number of indexes
*before* removing this index. You can also use the
:func:`db.collection.dropIndexes()` to remove *all* indexes, except
for the :ref:`_id index <index-type-primary>` from a collection.

These shell helpers provide wrappers around the
:dbcommand:`deleteIndexes` :term:`database command`. Your :ref:`client
library </applications/drivers>` may have a different or additional
interface for these operations.

Rebuilding
~~~~~~~~~~

If you need to rebuild indexes for a collection you can use the
:func:`db.collection.reIndex()` method. This will drop all indexes,
including the :ref:`_id index <index-type-primary>`, and then rebuild
all indexes. The operation takes the following form:

.. code-block:: javascript

   db.accounts.reIndex()

MongoDB will return the following document when the operation
completes:

.. code-block:: javascript

   {
           "nIndexesWas" : 2,
           "msg" : "indexes dropped for collection",
           "nIndexes" : 2,
           "indexes" : [
                   {
                           "key" : {
                                   "_id" : 1,
                                   "tax-id" : 1
                           },
                           "ns" : "records.accounts",
                           "name" : "_id_"
                   }
           ],
           "ok" : 1
   }

This shell helper provides a wrapper around the :dbcommand:`reIndex`
:term:`database command`. Your :ref:`client library
</applications/drivers>` may have a different or additional interface
for this operation.

.. note::

   To rebuild indexes for a :term:`replica set`, before version 2.2,
   see :ref:`index-rebuilding-replica-sets`.

TODO: again, this probably isn't different in 2.2

TODO: one thing that I would appreciate you mentioning is that some drivers may
create indexes like {a : NumberLong(1)} _which is fine_ and doesn't break
anything so stop complaining about it.

Special Creation Options
~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   TTL collections use a special ``expire`` index option. See
   :doc:`/tutorial/expire-data` for more information.

TODO: Are 2d indexes getting a mention?

Background
``````````

To create an index in the background you can specify :ref:`background
construction <index-creation-background>`. Consider the following
prototype invocation of :func:`db.collection.ensureIndex()`:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { background: true } )

TODO: what does it mean to build an index in the background? You might want to
mention:
* performance implications
* that this type of index build can be killed
* that this blocks the connection you sent the ensureindex on, but ops from
  other connections can proceed in
* that indexes are created on the foreground on secondaries in 2.0,
  which blocks replication & slave reads.  In 2.2, it does not block reads (but
  still blocks repl).

Drop Duplicates
```````````````

To force the creation of a :ref:`unique index <index-type-unique>`
index

TODO: " on a collection with duplicate values in the field to be indexed "

you can use the ``dropDups`` option. This will force MongoDB to
create a *unique* index by deleting documents with duplicate values
when building the index. Consider the following prototype invocation
of :func:`db.collection.ensureIndex()`:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { dropDups: true } )

See the full documentation of :ref:`duplicate dropping
<index-creation-duplicate-dropping>` for more information.

.. warning::

   Specifying ``{ dropDups: true }`` will delete data from your
   database. Use with extreme caution.

TODO: I'd say it "may" delete data from your DB, not like it's going to go all
Shermanesque on your data.

.. _index-building-replica-sets:

Building Indexes on Replica Sets
--------------------------------

.. versionchanged:: 2.2
   Index rebuilding operations on :term:`secondary` members of
   :term:`replica sets <replica set>` now run as normal background
   index operations. Run :func:`ensureIndex()
   <db.collection.ensureIndex()>` normally with the ``{ background:
   true }`` option for replica sets. Alternatively, you may always use
   the following operation to isolate and control the impact of
   indexing building operations on a set as a whole.

TODO: I think there needs to be a huge mention that this still blocks
replication, so the procedure below is recommended.

.. admonition:: For Version 1.8 and 2.0

   :ref:`Background index creation operations
   <index-creation-background>` became *foreground* indexing
   operations on :term:`secondary` members of replica sets. These
   foreground operations will block all replication on the
   secondaries,

TODO: and don't allow any reads to go through.

   and can impact performance of the entire set. To build
   indexes with minimal impact on a replica set, use the following
   procedure for all non-trivial index builds:

   #. Stop the :program:`mongod` process on one secondary. Restart the
      :program:`mongod` process *without* the :option:`--replSet <mongod --replSet>`
      option. This instance is now in "standalone" mode.

TODO: generally we recommend running it on a different port, too, so that apps
& other servers in the set don't try to contact it.

   #. Create the new index or rebuild the index on this :program:`mongod`
      instance.

   #. Restart the :program:`mongod` instance with the
      :option:`--replSet <mongod --replSet>` option. Allow replication
      to catch up on this member.

   #. Replete this operation on all of the remaining secondaries.

   #. Run :func:`rs.stepDown()` on the :term:`primary` member of the
      set, and then run this procedure on the former primary.

   .. warning::

      Ensure that your :ref:`oplog` is large enough to permit the
      indexing or re-indexing operation to complete without falling
      too far behind to catch up. See the ":ref:`replica-set-oplog-sizing`"
      documentation for additional information.

   .. note::

      This procedure *does* block indexing on one member of the
      replica set at a time. However, the foreground indexing
      operation is more efficient than the background index operation,
      and will only affect one secondary at a time rather than *all*
      secondaries at the same time.

For the best results, always create indexes *before* you begin
inserting data into a collection.

TODO: well, sort of.  That'll build the indexes fast, but make the inserts
slower.  Overall, it's faster to insert data, then build indexes.

Measuring Index Use
-------------------

Query performance is a good general indicator of index use;
however, for more precise insight into index use, MongoDB provides the
following tools:

- :func:`explain() <cursor.explain()>`

  Append the :func:`explain() <cursor.explain()>` method to any cursor
  (e.g. query) to return a document with statistics about the query
  process, including the index used, and the number of documents
  scanned.

- :func:`cursor.hint()`

  Append the :func:`hint() <cursor.hint()>` to any cursor (e.g.
  query) with the name

TODO: this isn't "the name of an index."  I'd say just "with the index."  The
name of an index is a string like "zipcode_1".

  of an index as the argument to *force* MongoDB
  to use a specific index to fulfill the query. Consider the following
  example:

  .. code-block:: javascript

     db.people.find( { name: "John Doe", zipcode: { $gt: 63000 } } } ).hint( { zipcode: 1 } )


  You can use :func:`hint() <cursor.hint()>` and :func:`explain()
  <cursor.explain()>` in conjunction with each other to compare the
  effectiveness of a specific index.

TODO: mention $natural to force no index usage?

- :status:`indexCounters`

  Use the :status:`indexCounters` data in the output of
  :dbcommand:`serverStatus` for insight into database-wise index
  utilization.

TODO: I'd like to see this also cover how to track how far an index build has
gotten and how to kill an index build.
