# This file borrows content from /includes/options-shared.yaml, which uses
# {{program}} to refer to the tool.
#
program: mongoimport
name: help
inherit:
  name: help
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: verbose
inherit:
  name: verbose
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: quiet
inherit:
  name: quiet
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: version
inherit:
  name: version
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: uri
inherit:
  name: uri
  program: _shared
  file: options-shared.yaml
replacement:
  program: ":binary:`~bin.mongoimport`"
---
program: mongoimport
name: host
inherit:
  name: host
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: port
inherit:
  name: port
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: ipv6
inherit:
  name: ipv6
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: ssl
inherit:
  name: ssl
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: sslCAFile
inherit:
  name: sslCAFile
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: sslPEMKeyFile
inherit:
  name: sslPEMKeyFile
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: sslPEMKeyPassword
inherit:
  name: sslPEMKeyPassword
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: sslCRLFile
inherit:
  name: sslCRLFile
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: sslAllowInvalidCertificates
inherit:
  name: sslAllowInvalidCertificates
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: sslAllowInvalidHostnames
inherit:
  name: sslAllowInvalidHostnames
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: username
inherit:
  name: username
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: password
inherit:
  name: password
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: authenticationDatabase
inherit:
  name: authenticationDatabase
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: authenticationMechanism
inherit:
  name: authenticationMechanism
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: gssapiServiceName
inherit:
  name: gssapiServiceName
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: gssapiHostName
inherit:
  name: gssapiHostName
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: directoryperdb
inherit:
  name: directoryperdb
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: writeConcern
inherit:
  name: writeConcern
  program: _shared
  file: options-shared.yaml
post: |

   If the write concern is also included in the :option:`--uri
   connection string <--uri>`, the command-line
   {{role}} overrides the write concern specified in
   the URI string.
---
program: mongoimport
name: maintainInsertionOrder
args: null
directive: option
description : |
  
  If specified,
   
  - Starting in version 4.2, {{program}} inserts the
    documents in the order of their appearance in the input source. That
    is, both the bulk write batch order and document order within the
    batches are maintained. 

  - In earlier versions, only the batch order is maintained; document
    order within batches are not maintained.
  
  Starting in MongoDB 4.2, specifying
  {{role}} also enables :option:`--stopOnError <mongoimport
  --stopOnError>` and sets :option:`numInsertionWorkers <mongoimport
  --numInsertionWorkers>` to 1.

  If unspecified, {{program}} may perform the insertions in an
  arbitrary order.

default: false
optional: true
---
program: mongoimport
name: journal
inherit:
  name: journal
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: db
inherit:
  name: db
  program: _shared
  file: options-shared.yaml
---
program: mongoimport
name: collection
aliases: -c
directive: option
args: <collection>
description: |
  Specifies the collection to import.

  .. versionadded:: 2.6
     If you do not specify {{role}},
     :binary:`~bin.mongoimport` takes the collection name from the input
     filename. MongoDB omits the extension of the file from the
     collection name, if the input file has an extension.
optional: true
---
program: mongoimport
name: fields
aliases: -f
directive: option
args: <field1[,field2]>
inherit:
  file: options-shared.yaml
  program: _mongoimport
  name: csv_only
description: |
  Specify a comma separated list of field names when importing :term:`csv`
  or :term:`tsv` files that do not have field names in the first (i.e.
  header) line of the file. Use with :option:`--columnsHaveTypes` to
  specify how values are interpreted.
optional: true
---
program: mongoimport
name: fieldFile
directive: option
args: <filename>
inherit:
  file: options-shared.yaml
  program: _mongoimport
  name: csv_only
description: |
  As an alternative to :option:`--fields`, the {{role}}
  option allows you to specify a file that holds a list of field names if
  your :term:`csv` or :term:`tsv` file does not include field names in the
  first line of the file (i.e. header). Place one field per line. Use
  with :option:`--columnsHaveTypes` to specify how values are
  interpreted.
optional: true
---
program: mongoimport
name: ignoreBlanks
directive: option
args: null
description: |
  Ignores empty fields in :term:`csv` and :term:`tsv` exports. If not
  specified, :binary:`~bin.mongoimport` creates fields without values in
  imported documents.
optional: true
inherit:
  file: options-shared.yaml
  program: _mongoimport
  name: csv_only
---
program: mongoimport
name: type
directive: option
args: <json|csv|tsv>
description: |
  Specifies the file type to import. The default format is :term:`JSON`,
  but it's possible to import :term:`csv` and :term:`tsv` files.

  The ``csv`` parser accepts that data that complies with RFC
  :rfc:`4180`. As a result, backslashes are *not* a valid escape
  character. If you use double-quotes to enclose fields in the CSV
  data, you must escape internal double-quote marks by prepending
  another double-quote.

optional: true
---
program: mongoimport
name: file
directive: option
args: <filename>
description: |
  Specifies the location and name of a file containing the data to import.
  If you do not specify a file, :binary:`~bin.mongoimport` reads data from
  standard input (e.g. "stdin").
optional: true
---
program: mongoimport
name: drop
directive: option
args: null
description: |
  Modifies the import process so that the target instance drops
  the collection before importing the data from the input.
optional: true
---
program: mongoimport
name: headerline
directive: option
args: null
description: |
  If using :option:`--type csv <mongoimport --type>` or :option:`--type
  tsv <mongoimport --type>`, uses the first line as field names.
  Otherwise, :binary:`~bin.mongoimport` will import the first line as a
  distinct document.
inherit:
  file: options-shared.yaml
  program: _mongoimport
  name: csv_only
optional: true
---
program: mongoimport
name: mode
directive: option
args: insert|upsert|merge
description: |
  .. versionadded:: 3.4

  Specifies how the import process should handle existing documents
  in the database that match documents in the import file.

  By default, {{program}} uses the ``_id`` field to match documents in
  the collection with documents in the import file.
  To specify the fields against which to match existing
  documents for the ``upsert`` and ``merge`` modes,
  use :option:`--upsertFields`.

  .. list-table::
     :header-rows: 1
     :widths: 20 40

     * - Value
       - Description

     * - ``insert``

       - Insert the documents in the import file. {{program}} will log
         an error if you attempt to import a document that contains a
         duplicate value for a field with a :ref:`unique index
         <index-type-unique>`, such as ``_id``.

     * - ``upsert``

       - Replace existing documents in the database with matching
         documents from the
         import file. {{program}} will insert all other
         documents. :ref:`ex-mongoimport-upsert` describes how to
         use {{role}} ``upsert``.

     * - ``merge``

       - Merge existing documents that match a document in the import file with
         the new document. {{program}} will insert all other documents.
         :ref:`ex-mongoimport-merge` describes how to use {{role}}
         ``merge``.

default: insert
optional: true
---
program: mongoimport
name: upsert
directive: option
args: null
description: |
  .. deprecated:: 3.4 :option:`--mode` replaces {{role}}.

  Modifies the import process to update existing objects in the
  database if they match an imported object, while inserting all
  other objects.

  If you do not specify a field or fields using the
  :option:`--upsertFields` :binary:`~bin.mongoimport` will upsert on the
  basis of the ``_id`` field.

  Depending on your MongoDB configuration, {{role}} may impact your
  :binary:`~bin.mongod`'s performance.

  .. versionchanged:: 3.0.0
    :option:`--upsertFields` now implies {{role}}. As such, you may
    prefer to use :option:`--upsertFields` instead of {{role}}.
optional: true
---
program: mongoimport
name: upsertFields
directive: option
args: <field1[,field2]>
description: |
  Specifies a list of fields for the query portion of the
  :term:`upsert`.
  Use this option if the ``_id`` fields in the
  existing documents don't match the field in the document, but
  another field or field combination can uniquely identify
  documents as a basis for performing upsert operations.

  .. versionchanged:: 3.4
     Modifies the import process to update existing objects in the
     database if they match based on the specified fields, while
     inserting all other objects. You do not need to use :option:`--mode
     upsert <--mode>` with {{role}}.

     If you do not specify a field, {{role}} will upsert on the basis of
     the ``_id`` field.

  To ensure adequate performance, indexes should exist for this
  field or fields.
optional: true
---
program: mongoimport
name: stopOnError
directive: option
args: null
description: |
  Forces {{program}} to halt the insert operation at the
  first error rather than continuing the operation despite errors.

  Starting in version 4.2, :binary:`~bin.mongoimport`, by default,
  continues when it encounters duplicate key and document
  validation errors.  To ensure that the program stops on these errors, specify :option:`--stopOnError <mongoimport --stopOnError>`.
optional: true
---
program: mongoimport
name: jsonArray
directive: option
args: null
description: |
  Accepts the import of data expressed with multiple MongoDB documents
  within a single :term:`JSON` array. Limited to
  imports of 16 MB or smaller.

  Use {{role}} in conjunction with :option:`mongoexport --jsonArray`.
optional: true
---
program: mongoimport
name: numInsertionWorkers
directive: option
args: int
default: 1
description: |
  .. versionadded:: 3.0.0

  Specifies the number of insertion workers to run concurrently.
post: |
  For large imports, increasing the number of insertion workers
  may increase the speed of the import.
optional: true
---
program: mongoimport
name: bypassDocumentValidation
inherit:
  name: bypassDocumentValidation
  program: _shared
  file: options-shared.yaml
replacement:
  verb: "insert"
---
program: mongoimport
name: columnsHaveTypes
directive: option
args: null
optional: true
inherit:
  file: options-shared.yaml
  program: _mongoimport
  name: csv_only
pre: |
  .. versionadded:: 3.4

description: |
  Instructs {{program}} that the
  field list specified in :option:`--fields`, :option:`--fieldFile`,
  or :option:`--headerline` specifies the types of each field.

  Field names must be in the form of ``<colName>.<type>(<arg>)``. You
  must backslash-escape the following characters if you wish to include
  them in an argument: ``(``, ``)``, and ``\``.

  .. list-table::
     :header-rows: 1
     :widths: 20 33 47

     * - ``type``
       - Supported Arguments
       - Example Header Field

     * - ``auto()``
       - None.
       - ``misc.auto()``

     * - ``binary(<arg>)``
       - - ``base32`` (`RFC4648`_ encoding schema)
         - ``base64`` (`RFC4648`_ encoding schema)
         - ``hex``
       - ``user thumbnail.binary(base64)``

     * - ``boolean()``
       - None.
       - ``verified.boolean()``

     * - ``date(<arg>)``
       - Alias for ``date_go(<arg>)``. `Go Language time.Parse format`_.
       - ``created.date(2006-01-02 15:04:05)``

     * - ``date_go(<arg>)``
       - `Go Language time.Parse format`_
       - ``created.date_go(2006-01-02 15:04:05)``

     * - ``date_ms(<arg>)``
       - `Microsoft SQL Server FORMAT format
         <https://msdn.microsoft.com/en-us/library/hh213505.aspx>`_
       - ``created.date_ms(yyyy-MM-dd H:mm:ss)``

     * - ``date_oracle(<arg>)``
       - `Oracle Database TO_DATE format
         <https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions183.htm>`_.
       - ``created.date_oracle(YYYY-MM-DD HH24:MI:SS)``

     * - ``decimal()``
       - None
       - ``price.decimal()``

     * - ``double()``
       - None.
       - ``revenue.double()``

     * - ``int32()``
       - None.
       - ``followerCount.int32()``

     * - ``int64()``
       - None.
       - ``bigNumber.int64()``

     * - ``string()``
       - None.
       - ``zipcode.string()``

  .. _Go Language time.Parse format: https://golang.org/src/time/format.go
  .. _RFC4648: https://tools.ietf.org/html/rfc4648

  See :ref:`example-csv-import-types` for sample usage.

---
program: mongoimport
name: parseGrace
directive: option
args: <grace>
pre: |
  .. versionadded:: 3.4

description: |
  Specifies how {{program}} handles type coercion failures when importing
  CSV or TSV files with :option:`--columnsHaveTypes`.

  {{role}} has no effect when importing JSON documents.

  .. list-table::
     :widths: 20 80
     :header-rows: 1

     * - Value
       - Description

     * - ``autoCast``
       - Assigns a type based on the value of the field.
         For example, if a field is defined as a ``double`` and the
         value for that field was ``"foo"``, {{program}} would make
         that field value a string type.

     * - ``skipField``
       - For the row being imported, {{program}} does not include the
         field whose type does not match the expected type.

     * - ``skipRow``
       - {{program}} does not import rows containing a value whose
         type does not match the expected type.

     * - ``stop``
       - {{program}} returns an error that ends the import.
optional: true
default: stop
...
