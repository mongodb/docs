# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/2dsphere.txt:3
msgid "``2dsphere`` Indexes"
msgstr ""

#: ../source/core/2dsphere.txt:14
msgid "Overview"
msgstr ""

#: ../source/core/2dsphere.txt:16
msgid "A ``2dsphere`` index supports queries that calculate geometries on an earth-like sphere. ``2dsphere`` index supports all MongoDB geospatial queries: queries for inclusion, intersection and proximity. For more information on geospatial queries, see :doc:`/geospatial-queries`."
msgstr ""

#: ../source/core/2dsphere.txt:22
msgid "The ``2dsphere`` index supports data stored as :ref:`GeoJSON objects <geospatial-geojson>` *and* :ref:`legacy coordinate pairs <geospatial-legacy>` (See also :ref:`2dsphere-data-restrictions`). For legacy coordinate pairs, the index converts the data to GeoJSON :ref:`geojson-point`."
msgstr ""

#: ../source/core/2dsphere.txt:31
msgid "Versions"
msgstr ""

#: ../source/core/2dsphere.txt:37
msgid "``2dsphere`` Index Version"
msgstr ""

#: ../source/core/2dsphere.txt:38
msgid "Description"
msgstr ""

#: ../source/core/2dsphere.txt:40
msgid "Version 3"
msgstr ""

#: ../source/core/2dsphere.txt:42
msgid "MongoDB 3.2 introduces a version 3 of ``2dsphere`` indexes. Version 3 is the default version of ``2dsphere`` indexes created in MongoDB 3.2 and later."
msgstr ""

#: ../source/core/2dsphere.txt:46
msgid "Version 2"
msgstr ""

#: ../source/core/2dsphere.txt:48
msgid "MongoDB 2.6 introduces a version 2 of ``2dsphere`` indexes. Version 2 is the default version of ``2dsphere`` indexes created in MongoDB 2.6 and 3.0 series."
msgstr ""

#: ../source/core/2dsphere.txt:52
msgid "To override the default version and specify a different version, include the option ``{ \"2dsphereIndexVersion\": <version> }`` when creating the index."
msgstr ""

#: ../source/core/2dsphere.txt:57
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/2dsphere.txt:59
msgid "Version 2 and later ``2dsphere`` indexes are always :doc:`sparse </core/index-sparse>` and ignore the :doc:`sparse </core/index-sparse>` option. If a document lacks a ``2dsphere`` index field (or the field is ``null`` or an empty array), MongoDB does not add an entry for the document to the index. For inserts, MongoDB inserts the document but does not add to the ``2dsphere`` index."
msgstr ""

#: ../source/core/2dsphere.txt:66
msgid "For a compound index that includes a ``2dsphere`` index key along with keys of other types, only the ``2dsphere`` index field determines whether the index references a document."
msgstr ""

#: ../source/core/2dsphere.txt:70
msgid "Earlier versions of MongoDB only support ``2dsphere (Version 1)`` indexes. ``2dsphere (Version 1)`` indexes are *not* sparse by default and will reject documents with ``null`` location fields."
msgstr ""

#: ../source/core/2dsphere.txt:75
msgid "Additional GeoJSON Objects"
msgstr ""

#: ../source/core/2dsphere.txt:77
msgid "Version 2 and later ``2dsphere`` indexes includes support for additional GeoJSON object: :ref:`geojson-multipoint`, :ref:`geojson-multilinestring`, :ref:`geojson-multipolygon`, and :ref:`geojson-geometrycollection`. For details on all supported GeoJSON objects, see :doc:`/reference/geojson`."
msgstr ""

#: ../source/core/2dsphere.txt:83
msgid "Considerations"
msgstr ""

#: ../source/core/2dsphere.txt:86
msgid "``geoNear`` and ``$geoNear`` Restrictions"
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage require that a collection have *at most* only one |first-geo-index| and/or only one |second-geo-index| whereas :ref:`geospatial query operators <geospatial-query-selectors>` (e.g. :query:`$near` and :query:`$geoWithin`) permit collections to have multiple geospatial indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
msgid "The geospatial index restriction for the :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage exists because neither the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage syntax includes the location field. As such, index selection among multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
msgid "No such restriction applies for :ref:`geospatial query operators <geospatial-query-selectors>` since these operators take a location field, eliminating the ambiguity."
msgstr ""

#: ../source/core/2dsphere.txt:93
msgid "Shard Key Restrictions"
msgstr ""

#: ../source/includes/extracts/geospatial-index-shard-key-restriction-2dsphere.rst:1
msgid "You cannot use a ``2dsphere`` index as a :term:`shard key` when sharding a collection. However, you can create a geospatial index on a sharded collection by using a different field as the shard key."
msgstr ""

#: ../source/core/2dsphere.txt:100
msgid "``2dsphere`` Indexed Field Restrictions"
msgstr ""

#: ../source/includes/geo-data-limit-for-2dsphere.rst:1
msgid "Fields with :doc:`2dsphere </core/2dsphere>` indexes must hold geometry data in the form of :term:`coordinate pairs <legacy coordinate pairs>` or :term:`GeoJSON` data. If you attempt to insert a document with non-geometry data in a ``2dsphere`` indexed field, or build a ``2dsphere`` index on a collection where the indexed field has non-geometry data, the operation will fail."
msgstr ""

#: ../source/core/2dsphere.txt:105
#: ../source/core/2dsphere.txt:137
msgid "Create a ``2dsphere`` Index"
msgstr ""

#: ../source/includes/create-2dsphere-index.rst:1
msgid "To create a ``2dsphere`` index, use the :method:`db.collection.createIndex()` method and specify the string literal ``\"2dsphere\"`` as the index type:"
msgstr ""

#: ../source/includes/create-2dsphere-index.rst:9
msgid "where the ``<location field>`` is a field whose value is either a :ref:`GeoJSON object <geospatial-geojson>` or a :ref:`legacy coordinates pair <geospatial-legacy>`."
msgstr ""

#: ../source/core/2dsphere.txt:109
msgid "Unlike a compound :doc:`2d </core/2d>` index which can reference one location field and one other field, a :ref:`compound <index-type-compound>` ``2dsphere`` index can reference multiple location and non-location fields."
msgstr ""

#: ../source/core/2dsphere.txt:114
msgid "For the following examples, consider a collection ``places`` with documents that store location data as :ref:`GeoJSON Point <geojson-point>` in a field named ``loc``:"
msgstr ""

#: ../source/core/2dsphere.txt:139
msgid "The following operation creates a :doc:`2dsphere </core/2dsphere>` index on the location field ``loc``:"
msgstr ""

#: ../source/core/2dsphere.txt:147
msgid "Create a Compound Index with ``2dsphere`` Index Key"
msgstr ""

#: ../source/core/2dsphere.txt:149
msgid "A :ref:`compound index <index-type-compound>` can include a ``2dsphere`` index key in combination with non-geospatial index keys. For example, the following operation creates a compound index where the first key ``loc`` is a ``2dsphere`` index key, and the remaining keys ``category`` and ``names`` are non-geospatial index keys, specifically descending (``-1``) and ascending (``1``) keys respectively."
msgstr ""

#: ../source/core/2dsphere.txt:161
msgid "Unlike the :doc:`2d </core/2d>` index, a compound ``2dsphere`` index does not require the location field to be the first field indexed. For example:"
msgstr ""

