=======================
Open Finance Data Store
=======================

.. meta:: 
   :keywords: Open Finance, Financial Services, Atlas, Data Integration, Real-Time Analytics, Aggregation Pipeline, Secure Data Management, PSD2 Compliance, Personalized Financial Insights
   :description: MongoDB powers open finance with flexible data integration, built-in security, and scalabilityâ€”enabling seamless, compliant, and personalized financial services.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

MongoDB powers open finance with flexible data integration, built-in
security, and scalable financial services.

- **Use cases:** `App Driven-Analytics <https://www.mongodb.com/collateral/application-driven-analytics>`__

- **Industries:** `Financial Services <https://www.mongodb.com/industries/financial-services>`__

- **Products and tools:** `Aggregation Pipeline <https://www.mongodb.com/docs/manual/core/aggregation-pipeline/>`__, 
  `MongoDB Atlas <https://www.mongodb.com/atlas/database>`__

Solution Overview
-----------------

Open finance is transforming the financial industry, enabling seamless
data sharing across banks, fintech companies, and third-party providers.
However, integrating diverse financial data while ensuring security,
compliance, and scalability is a major challenge.

MongoDB provides the ideal foundation for open finance with its flexible
document model, native `JSON
<https://www.mongodb.com/resources/languages/what-is-json>`__ support,
and powerful aggregation framework. These features allow institutions to
unify data from multiple sources and ensure secure and compliant data
management.

By leveraging MongoDB, financial institutions can accelerate innovation,
offer personalized financial insights, and adapt to evolving regulations
without the complexity of traditional relational databases.

.. figure:: /includes/images/industry-solutions/open-finance.gif
  :alt: Open Finance demo in gif format

  Figure 1. Open finance application with MongoDB

Reference Architectures
-----------------------

This example focuses on a fictional demo bank, Leafy Bank, which allows
users to connect external bank accounts securely.

First, the user initiates a request to connect their external bank
accounts. This requires explicit user consent, ensuring security and
compliance with regulations like PSD2. To authenticate, Leafy Bank
emulates {+oauth2+}, generating Bearer tokens for secure communication
between institutions.

Once authorized, Leafy Bank communicates with external banks through
APIs. These banks expose financial data such as accounts, transactions,
and balances through their microservices. The response is returned in
|json| format, ensuring compatibility and seamless data exchange.

The financial data is then pushed into |service-fullname|, where it is
centrally stored. MongoDB's flexible document model lets you handle
diverse data structures from different banks. From here, Leafy Bank can
use aggregation pipelines to analyze and enrich the data, giving users a
holistic financial view while enabling the bank to offer personalized
financial insights.

.. figure:: /includes/images/industry-solutions/open-finance-architecture.svg
   :width: 750px
   :alt: Open Finance architecture diagram

   Figure 2. Open finance architecture diagram
  

Data Model Approach
-------------------

In the demo solution, the data model is a simplified design that
emulates real-world financial data integration. The approach leverages
MongoDB's flexible document model to handle diverse data structures from
different financial entities.

Components
~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 8 10 20

   * - Collection
     - Description
     - Sample Document

   * - ``tokens``
     - Stores Bearer tokens used for authenticating and authorizing API
       requests between Leafy Bank and external banks.
     - .. code-block:: javascript

          {
             "_id": { "$oid": "unique_id" }, 
             "UserName": "string", 
             "BearerToken": "string",
             "TokenDates": {
                "CreationDate": { "$date": "ISODate" }, 
                "LastUseDate": { "$date": "ISODate" }
              },
           }

   * - ``external_accounts``
     - Stores information about external bank accounts linked by users.
     - .. code-block:: javascript
          
          {
             "_id": { "$oid": "unique_id" }, 
             "AccountId": "string", 
             "AccountBank": "string",
             "AccountStatus": "string", 
             "AccountType": "string", 
             "AccountBalance": "number",
             "AccountCurrency": "string", 
             "AccountDate": {
                 "OpeningDate": { "$date": "ISODate" }
             }, 
             "AccountUser": {
                 "UserName": "string", 
                 "UserId": { "$oid": "unique_id" }
             },
             "GreenAccountNarrative": "string"
          }

   * - ``external_products``
     - Stores information about financial products (such as loans and
       mortgages) associated with users.
     - .. code-block:: javascript

          {
             "_id": { "$oid": "unique_id" }, 
             "ProductId": "string", 
             "ProductBank": "string",
             "ProductStatus": "string", 
             "ProductType": "string", 
             "ProductAmount": "number",
             "ProductCurrency": "string", 
             "ProductInterestRate": "number", 
             "ProductDate": {
                 "OpeningDate": { "$date": "ISODate" }
             }, 
             "ProductCustomer": {
                 "UserName": "string", 
                 "UserId": { "$oid": "unique_id" }
             }, 
             "GreenProductNarrative": "string", 
             "RepaymentPeriod": "number", 
             "LoanCollateral": "string"
          }


In a real-world scenario, these collections would involve more complex
security mechanisms and detailed information. Additionally, each
financial entity would have its own data model definitions, which could
vary significantly. You would need to consider the following factors:

Data mapping and relationships
  Implementing a robust data mapping and relationship layer to translate
  diverse data models from different financial entities into a unified
  format.

Security and compliance
  Ensuring data security and compliance with regulations such as GDPR,
  PSD2, and other local financial regulations. This includes encryption,
  access controls, and audit trails.

Scalability and performance 
  Designing the data model to handle large volumes of data efficiently,
  with considerations for indexing, sharding, and performance
  optimization.

Integration and interoperability
  Building APIs and microservices that can integrate with various
  external systems, ensuring interoperability and real-time data
  exchange.

By using MongoDB's flexible document model, the demo solution showcases
how financial institutions can unify and manage diverse data sources.
However, a production-grade implementation would require addressing the
complexities and nuances of real-world financial data integration.

Build the Solution
------------------

For detailed setup instructions, follow the steps outlined in the
Industry Solutions `public GitHub repository
<https://github.com/mongodb-industry-solutions/leafy-bank-backend-openfinance>`__.
This repository hosts the backend for Leafy Bank's open finance demo
service. It demonstrates integration with third-party banks and
showcases secure data exchange. MongoDB serves as the central data
store. The code may include simplified or emulated components for
demonstration purposes.

To build the solution step-by-step, follow these instructions:

.. procedure::
   :style: normal

   .. step:: Set up MongoDB database and collections

      Create a new database in |service-fullname| named
      ``open_finance``. Then add three collections:

      - ``tokens``
      - ``external_accounts``
      - ``external_products``

   .. step:: Import the provided sample data
 
   .. step:: Create a MongoDB user

      Create a new user with ``readWrite`` access to the
      ``open_finance`` database to manage data securely.

   .. step:: Configure environment variables

      Add the necessary database credentials and API origins to a ``.env`` file.

   .. step:: Run the solution locally

      Set up a virtual environment using Poetry, install dependencies,
      and start the backend with Uvicorn. Ensure the service runs on the
      correct port for API communication.

Solution Frontend
~~~~~~~~~~~~~~~~~

The frontend for this solution is available in the `Leafy Bank UI
repository
<https://github.com/mongodb-industry-solutions/leafy-bank-ui>`__. The
different components of Leafy Bank are designed as microservices. The UI
repository serves as the main hub and provides an overview of all
integrated services.

Key Learnings
-------------

- **Central data store**: MongoDB acts as a flexible
  and efficient central `data store
  <https://www.mongodb.com/resources/basics/data-stores>`__ that
  supports open finance ecosystems.

- **Secure data management**: MongoDB provides secure data management
  with built-in encryption, granular access controls, and high
  availability, helping organizations protect sensitive information and
  comply with evolving regulatory requirements.

Authors
-------

- Luis Pazmino Diaz, MongoDB
- Ainhoa Mugica, MongoDB
- Julian Boronat, MongoDB
- Andrea Alaman Calderon, MongoDB

Learn More
----------

- :ref:`arch-center-is-card-fraud-solution`

- :ref:`arch-center-is-payments-solution`

- :ref:`arch-center-hasura-fintech-services`
