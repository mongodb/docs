.. index:: changeStreams notification

.. _changeStreams:

.. _collection_watch:

==============
Change Streams
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. versionadded:: 3.6

Change streams allow applications to access real-time data changes
without the complexity and risk of tailing the :term:`oplog`.
Applications can use change streams to subscribe to all data changes on
a single collection, a database, or an entire deployment, and
immediately react to them. Because change streams use the aggregation
framework, applications can also filter for specific changes or
transform the notifications at will.

Change stream is available for :doc:`replica sets <replication>` and
:doc:`sharded clusters </sharding>` that use :ref:`WiredTiger
<storage-wiredtiger>` storage engine and replica set protocol version 1
(:rsconf:`pv1 <protocolVersion>`). Change streams can also be used on
deployments which employ MongoDB's
:ref:`encryption-at-rest<encrypted-storage-engine>` feature.

Watch Collection/Database/Deployment
------------------------------------

You can open change streams against:

.. list-table::
   :header-rows: 1
   :widths: 15 85

   * - Target
     - Description

   * - A collection

     - You can open a change stream cursor for a single collection
       (except ``system`` collections, or any collections in the
       ``admin``, ``local``, and ``config`` databases).

       The examples on this page use the MongoDB drivers to open and
       work with a change stream cursor for a single collection. See
       also the :binary:`~bin.mongo` shell method
       :method:`db.collection.watch()`.

   * - A database

     - Starting in MongoDB 4.0, you can open a change stream cursor for
       a single database (excluding ``admin``, ``local``, and
       ``config`` database) to watch for changes to all its non-system
       collections.

       For the MongoDB driver method, refer to your driver
       documentation. See also the :binary:`~bin.mongo` shell method
       :method:`db.watch()`.


   * - A deployment

     - Starting in MongoDB 4.0, you can open a change stream cursor for
       a deployment (either a replica set or a sharded cluster) to
       watch for changes to all non-system collections across all
       databases except for ``admin``, ``local``, and ``config``.

       For the MongoDB driver method, refer to your driver
       documentation. See also the :binary:`~bin.mongo` shell method
       :method:`Mongo.watch()`.

.. admonition:: Change Stream Examples
   :class: note

   The examples on this page use the MongoDB drivers to illustrate how
   to open a change stream cursor for a collection and work with the
   change stream cursor.

.. _open-change-stream:

Open A Change Stream
--------------------

For a replica set, you can open change stream for any of the
data-bearing members.

For a sharded cluster, you must issue the open change stream operation
against the :binary:`~bin.mongos`.

The following example opens a change stream for a collection and
iterates over the cursor to retrieve the change stream documents.
[#start-time]_ While the connection to the MongoDB deployment remains
open, the cursor remains open until one of the following occurs:

- The cursor is explicitly closed.

- An :ref:`invalidate event <change-event-invalidate>` occurs.

- .. include:: /includes/extracts/changestream-remove-shard.rst

.. tabs-drivers::

   tabs:
     - id: python
       content: |
         The Python examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <http://api.mongodb.com/python/current/tutorial.html#making-a-connection-with-mongoclient/>`__
         that contains an ``inventory`` collection.

         .. literalinclude:: /driver-examples/test_examples.py
            :language: python
            :dedent: 12
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1


     - id: motor
       content: |
         The examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <https://motor.readthedocs.io/en/stable/tutorial-asyncio.html#creating-a-client>`__
         that contains an ``inventory`` collection.

         .. literalinclude:: /driver-examples/test_examples_motor.py
            :language: python
            :dedent: 12
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

     - id: java-sync
       content: |
         The Java examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <http://mongodb.github.io/mongo-java-driver/3.6/driver/tutorials/databases-collections/>`__
         that contains an ``inventory`` collection.

         .. literalinclude:: /driver-examples/DocumentationSamples.java
            :language: java
            :dedent: 8
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

     - id: csharp
       content: |
         The C# examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <http://mongodb.github.io/mongo-csharp-driver/2.4/getting_started/quick_tour/#make-a-connection/>`__
         that contains an ``inventory`` collection.

         .. literalinclude:: /driver-examples/ChangeStreamExamples.cs
            :language: c#
            :dedent: 12
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

     - id: c
       content: |
         The C examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <http://mongoc.org/libmongoc/current/tutorial.html#making-a-connection/>`__
         that contains an ``inventory`` collection.

         .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
            :language: c
            :dedent: 3
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

     - id: nodejs
       content: |
         The Node.js examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <https://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html#connect>`__
         that contains an ``inventory`` collection.

         .. literalinclude:: /driver-examples/ChangeStreamNodeExamples.js
            :language: javascript
            :dedent: 10
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

     - id: php
       content: |
          The examples below assume that you have `connected to a MongoDB replica  set and have accessed a database
          <https://docs.mongodb.com/php-library/current/reference/method/MongoDBClient__construct/>`__
          that contains an ``inventory`` collection.

          .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
             :language: php
             :dedent: 8
             :start-after: Start Changestream Example 1
             :end-before: End Changestream Example 1

     - id: ruby
       content: |
          The examples below assume that you have `connected to a MongoDB replica set and have accessed a database
          <https://docs.mongodb.com/ruby-driver/master/tutorials/ruby-driver-create-client/>`__
          that contains an ``inventory`` collection.


          .. literalinclude:: /driver-examples/change_stream_examples_spec.rb
             :language: ruby
             :dedent: 8
             :start-after: Start Changestream Example 1
             :end-before: End Changestream Example 1


To retrieve the data change event notifications, iterate the change
stream ``cursor``.

.. note::
   The lifecycle of an unclosed cursor is language-dependent.

See :ref:`change-stream-output` for more information on the change stream
response document format.

.. [#start-time]

   Starting in MongoDB 4.0, you can specify a ``startAtOperationTime``
   to open the cursor at a particular point in time. If the specified
   starting point is in the past, it must be in the time range of the
   oplog.

Modify Change Stream Output
---------------------------

.. tabs-drivers::

   tabs:
     - id: python
       content: |

          .. include:: /includes/fact-change-streams-modify-output.rst

     - id: motor
       content: |

          .. include:: /includes/fact-change-streams-modify-output.rst

     - id: java-sync
       content: |

          .. include:: /includes/fact-change-streams-modify-output.rst

          .. code-block:: java

             MongoClient mongoClient = new MongoClient( new MongoClientURI("mongodb://host1:port1,host2:port2..."));

             // Select the MongoDB database and collection to open the change stream against

             MongoDatabase db = mongoClient.getDatabase("myTargetDatabase");

             MongoCollection<Document> collection = db.getCollection("myTargetCollection");

             // Create $match pipeline stage.
             List<Bson> pipeline = singletonList(Aggregates.match(Filters.or(
                 Document.parse("{'fullDocument.username': 'alice'}"),
                 Filters.in("operationType", asList("delete")))));

             // Create the change stream cursor, passing the pipeline to the
             // collection.watch() method

             MongoCursor<Document> cursor = collection.watch(pipeline).iterator();

          The ``pipeline`` list includes a single :pipeline:`$match` stage that
          filters any operations where the ``username`` is ``alice``, or
          operations where the ``operationType`` is ``delete``.

          Passing the ``pipeline`` to the :method:`~db.collection.watch()` method directs the
          change stream to return notifications after passing them through the
          specified ``pipeline``.

     - id: csharp
       content: |
          .. include:: /includes/fact-change-streams-modify-output.rst

     - id: c
       content: |
          .. include:: /includes/fact-change-streams-modify-output.rst

     - id: nodejs
       content: |

         .. include:: /includes/fact-change-streams-modify-output.rst

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/ChangeStreamNodeExamples.js
            :language: javascript
            :dedent: 8
            :start-after: Start Changestream Example 4
            :end-before: End Changestream Example 4

     - id: php
       content: |
          .. include:: /includes/fact-change-streams-modify-output.rst

     - id: ruby
       content: |
          .. include:: /includes/fact-change-streams-modify-output.rst


See :ref:`change-stream-output` for more information on the change stream
response document format.


Lookup Full Document for Update Operations
------------------------------------------

By default, change streams only return the delta of fields during the
update operation. However, you can configure the change stream to
return the most current majority-committed version of the updated
document.

.. tabs-drivers::

   tabs:
     - id: python
       content: |

         To return the most current majority-committed version of the updated
         document, pass ``full_document='updateLookup'`` to the
         :method:`db.collection.watch()` method.

         In the example below, all update operations notifications
         include a ``full_document`` field that represents the *current*
         version of the document affected by the update operation.

         .. literalinclude:: /driver-examples/test_examples.py
            :language: python
            :dedent: 12
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2


     - id: motor
       content: |

         To return the most current majority-committed version of the updated
         document, pass ``full_document='updateLookup'`` to the
         :method:`db.collection.watch()` method.

         In the example below, all update operations notifications
         include a ```full_document`` field that represents the *current*
         version of the document affected by the update operation.

         .. literalinclude:: /driver-examples/test_examples_motor.py
            :language: python
            :dedent: 12
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2

     - id: java-sync
       content: |

         To return the most current majority-committed version of the updated
         document, pass ``FullDocument.UPDATE_LOOKUP``  to the
         :method:`db.collection.watch.fullDocument()` method.

         In the example below, all update operations notifications
         include a ``FullDocument`` field that represents the *current*
         version of the document affected by the update operation.

         .. literalinclude:: /driver-examples/DocumentationSamples.java
            :language: java
            :dedent: 8
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2

     - id: c
       content: |

         To return the most current majority-committed version of the updated
         document, pass the ``"fullDocument"`` option with the ``"updateLookup"`` value to the
         :method:`mongoc_collection_watch` method.

         In the example below, all update operations notifications
         include a ``fullDocument`` field that represents the *current*
         version of the document affected by the update operation.

         .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
            :language: c
            :dedent: 3
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2

     - id: csharp
       content: |

         To return the most current majority-committed version of the updated
         document, pass ``"FullDocument = ChangeStreamFullDocumentOption.UpdateLookup"`` to the
         :method:`collection.Watch()` method.

         In the example below, all update operations notifications
         include a ``FullDocument`` field that represents the *current*
         version of the document affected by the update operation.

         .. literalinclude:: /driver-examples/ChangeStreamExamples.cs
            :language: C#
            :dedent: 12
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2


     - id: nodejs
       content: |

         To return the most current majority-committed version of the updated
         document, pass ``{ fullDocument: 'updateLookup' }`` to the
         :method:`collection.watch()` method.

         In the example below, all update operations notifications
         include a ``fullDocument`` field that represents the *current*
         version of the document affected by the update operation.

         .. literalinclude:: /driver-examples/ChangeStreamNodeExamples.js
            :language: javascript
            :dedent: 8
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Eample 2

     - id: php
       content: |

         To return the most current
         majority-committed version of the updated document, pass
         ``"fullDocument' => \MongoDB\Operation\ChangeStreamCommand::FULL_DOCUMENT_UPDATE_LOOKUP"``
         to the :method:`watch()` method.

         In the example below, all update operations notifications
         include a ``fullDocument`` field that represents the *current*
         version of the document affected by the update operation.

         .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
            :language: php
            :dedent: 8
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2

     - id: ruby
       content: |
         To return the most current majority-committed version of the updated
         document, pass ``full_document: 'updateLookup'`` to the
         :method:`watch()` method.

         In the example below, all update operations notifications
         include a ``full_document`` field that represents the *current*
         version of the document affected by the update operation.

         .. literalinclude:: /driver-examples/change_stream_examples_spec.rb
            :language: ruby
            :dedent: 8
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2


.. note::

   If there are one or more majority-committed operations that modified
   the updated document *after* the update operation but *before* the
   lookup, the full document returned may differ significantly from the
   document at the time of the update operation.

   However, the deltas included in the change stream document always
   correctly describe the watched collection changes that applied to
   that change stream event.

   See :ref:`change-stream-output` for more information on the change
   stream response document format.

.. _change-stream-resume:

Resume a Change Stream
----------------------

Change streams are resumable by specifying a ``resumeAfter`` token when
opening the cursor. For the ``resumeAfter`` token, use the ``_id``
value of the :ref:`change stream event document
<change-stream-output>`. Passing the ``_id`` value to the change stream
attempts to resume notifications starting after the  specified operation.

.. important::

   - The oplog must have enough history to locate the operation
     associated with the token or the timestamp, if the timestamp is in
     the past.

   - .. include:: /includes/extracts/changestream-invalid-events.rst

.. tabs-drivers::

   tabs:
     - id: python
       content: |

         In the example below, ``resume_token`` contains the change
         stream notification id. The ``resume_after`` modifier takes a
         parameter that must resolve to a resume token. Passing the
         ``resume_token`` to the ``resume_after`` modifier directs the
         change stream to attempt to resume notifications starting after
         the operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test_examples.py
            :language: python
            :dedent: 12
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: motor
       content: |

         In the example below, ``resume_token`` contains the change
         stream notification id. The ``resume_after`` modifier takes a parameter that must resolve to a resume
         token. Passing the ``resume_token`` to the ``resume_after`` modifier directs
         the change stream to attempt to resume notifications starting after the
         operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test_examples_motor.py
            :language: python
            :dedent: 12
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: java-sync
       content: |
         In the example below, the ``resumeToken`` contains the change
         stream notification id. The ``resumeAfter()`` method takes a parameter that must resolve to a resume
         token. Passing the ``resumeToken`` to the ``resumeAfter()`` method directs
         the change stream to attempt to resume notifications starting after the
         operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/DocumentationSamples.java
            :language: java
            :dedent: 8
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: csharp
       content: |

         In the example below, the ``resumeToken`` is retrieved from the last change stream document
         and passed to the ``Watch()`` method as an option. Passing the ``resumeToken``
         to the ``Watch()`` method directs
         the change stream to attempt to resume notifications starting after the
         operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/ChangeStreamExamples.cs
            :language: C#
            :dedent: 14
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: c
       content: |

         In the example below, the ``resumeAfter`` option is appended to the stream options
         to recreate the stream after it has been destroyed. Passing the ``_id`` to
         the change stream attempts to resume notifications starting after the
         operation specified.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
            :language: C
            :dedent: 3
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3


     - id: nodejs
       content: |

         In the example below, ``resumeToken`` contains the change
         stream notification id. The ``resumeAfter`` takes a parameter
         that must resolve to a resume token. Passing the
         ``resumeToken`` to the ``resumeAfter`` modifier directs the
         change stream to attempt to resume notifications starting after
         the operation specified.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/ChangeStreamNodeExamples.js
            :language: javascript
            :dedent: 8
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: php
       content: |

         In the example below, ``$resumeToken`` contains the change
         stream notification id. The ``resumeAfter`` option takes a
         value that must resolve to a resume token. Passing the
         ``$resumeToken`` to the ``resumeAfter`` option directs the
         change stream to attempt to resume notifications starting after
         the operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
            :language: php
            :dedent: 8
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: ruby
       content: |

         In the example below, ``resume_token`` contains the change
         stream notification id. The ``resume_after`` modifier takes a
         parameter that must resolve to a resume token. Passing the
         ``resume_token`` to the ``resume_after`` modifier directs the
         change stream to attempt to resume notifications starting after
         the operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/change_stream_examples_spec.rb
            :language: ruby
            :dedent: 6
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3


Use Cases
---------

Change streams can benefit architectures with reliant business systems,
informing downstream systems once data changes are durable. For example,
change streams can save time for developers when implementing Extract,
Transform, and Load (ETL) services, cross-platform synchronization,
collaboration functionality, and notification services.

Access Control
--------------

For deployments enforcing :ref:`authentication` and :ref:`authorization
<authorization>`:

- To open a change stream against specific collection, applications
  must have privileges that grant :authaction:`changeStream` and
  :authaction:`find` actions on the corresponding collection.

  .. code-block:: javascript

     { resource: { db: <dbname>, collection: <collection> }, actions: [ "find", "changeStream" ] }

- To open a change stream on a single databases, applications must have
  privileges that grant :authaction:`changeStream` and
  :authaction:`find` actions on all non-``system`` collections in a
  database.

  .. code-block:: javascript

     { resource: { db: <dbname>, collection: "" }, actions: [ "find", "changeStream" ] }

- To open a change stream on an entire deployment, applications must
  have privileges that grant :authaction:`changeStream` and
  :authaction:`find` actions on all non-``system`` collections for all
  databases in the deployment.

  .. code-block:: javascript

     { resource: { db: "", collection: "" }, actions: [ "find", "changeStream" ] }

Event Notification
------------------

Change streams only notify on data changes that have persisted to a majority
of data-bearing members in the replica set. This ensures that notifications are
triggered only by majority-committed changes that are durable in failure
scenarios.

For example, consider a 3-member :term:`replica set` with a change stream
cursor opened against the :term:`primary`. If a client issues an insert
operation, the change stream only notifies the application of the data change
once that insert has persisted to a majority of data-bearing members.

If an operation is associated with a :doc:`multi-document transactions
</core/transactions>`, the change event document includes the
``txnNumber`` and the ``lsid``.

.. toctree::
   :titlesonly:
   :hidden:

   /administration/change-streams-production-recommendations
   /reference/change-events
