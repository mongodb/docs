==================
updateZoneKeyRange
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: updateZoneKeyRange

   The :dbcommand:`updateZoneKeyRange` administrative command can either
   create or remove the association between a range of shard key values and a
   :term:`zone`.

   .. include:: /includes/extracts/zoned-sharding-updateZoneKeyRange-change.rst

   .. |method| replace:: :method:`sh.updateZoneKeyRange` 
      helper method
   .. include:: /includes/fact-dbcommand-tip


   .. |command| replace:: ``updateZoneKeyRange``

   .. include:: /includes/fact-dbcommand.rst

   You must run :dbcommand:`addShardToZone` on the admin database.

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-serverless.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

The command has the following syntax:

.. code-block:: javascript

   db.adminCommand(
      {
        updateZoneKeyRange: <string>,
        min: <document>,
        max: <document>,
        zone: <string> | <null>
      }
   )

Command Fields
--------------

The command takes the following fields:

.. list-table::
   :header-rows: 1
   :widths: 20 20 80
 
   * - Parameter
     - Type
     - Description
 
   * - ``updateZoneKeyRange``
     - string
     - The namespace of the collection to associate with the range.
 
       The collection must be sharded for the command to succeed.
 
   * - ``min``
     - document
     - The inclusive lower bound of the range of :term:`shard key` values. 
 
       Specify each field of the shard key in the form of ``<fieldname> : <value>``.
       The value must be of the same BSON type or types as the shard key.

       To use hashed sharding, the field value of ``min`` needs
       to be of type :bsontype:`NumberLong <data_numberlong>`.

   * - ``max``
     - document
     - The exclusive upper bound of the range of :term:`shard key` values. 

       Specify each field of the shard key in the form of ``<fieldname> : <value>``.
       The value must be of the same BSON type or types as the shard key.

       To use hashed sharding, the field value of ``max`` needs
       to be of type :bsontype:`NumberLong <data_numberlong>`.

   * - ``zone``
     - string
     - The name of the zone to associate with the range bounded by the 
       ``min`` and ``max``.
 
       If the value does not match an existing zone, the command fails.
 
       Specify ``null`` to remove the association between the range with lower
       bounds of ``min`` and upper bound of ``max`` and the ``updateZoneKeyRange``
       collection. The values of ``min`` and ``max`` must match exactly the target
       range.


Behavior
--------

If no zone range matches the minimum and maximum bounds passed to
:dbcommand:`updateZoneKeyRange`, nothing is removed.

Only issue :dbcommand:`updateZoneKeyRange` when connected to a
:binary:`~bin.mongos` instance.

:binary:`~bin.mongosh` provides two helper methods:

- :method:`sh.updateZoneKeyRange()` for adding a range of shard key values to a
  zone.

- :method:`sh.removeRangeFromZone()` for removing a range of shard key values
  from a zone.

You cannot create a range of shard key values whose lower and upper boundaries
overlap with an existing range for the sharded collection. For example, given
an existing range of ``1`` to ``10``, you cannot create a new range of ``5``
to ``20``, as the new range would overlap with the existing range.

A zone can have multiple ranges of data associated with it, but a range
can at most be associated with a single zone.

When removing the association between a range and a zone,
:dbcommand:`updateZoneKeyRange` does not remove the zone. Use the
:dbcommand:`removeShardFromZone` command to remove the association between a 
zone and a shard.

See the :ref:`zone <zone-sharding>` manual page for more information on zones
in sharded clusters.

.. _updateZoneKeyRange-cmd-init-chunk-distribution:

Initial Chunk Distribution for Empty or Non-Existing Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are considering performing :ref:`zone sharding <zone-sharding>`
on an empty or non-existent collection, use
:dbcommand:`updateZoneKeyRange` to create the zones and zone ranges
*before* sharding the collection (*since 4.0.2*). Starting in version
4.0.3, creating zones and zone ranges on empty or non-existing
collections allows MongoDB to optimize the initial chunk creation and
distribution process when sharding the collection. This optimized
process supports faster setup of zoned sharding with less balancer
overhead than creating zones after sharding. The :ref:`balancer
<sharding-balancing>` performs all chunk management after the optimized
initial chunk creation and distribution.

For an example of defining zones and zone ranges for initial chunk
distribution, see :ref:`pre-define-zone-range-example`.

Initial Chunk Distribution with Compound Hashed Shard Keys
``````````````````````````````````````````````````````````

MongoDB supports sharding collections on
:ref:`compound hashed indexes <index-type-compound-hashed>`. MongoDB can
perform optimized initial chunk creation and distribution when sharding
the empty or non-existing collection on a compound hashed shard key.

.. tabs::

   .. tab:: Hashed Field Is Prefix
      :tabid: hash-prefix

      .. include:: /includes/extracts/zoned-sharding-chunk-distribution-compound-hashed-prefix.rst

   .. tab:: Hashed Field is Not Prefix
      :tabid: hash-not-prefix

      .. include:: /includes/extracts/zoned-sharding-chunk-distribution-compound-hashed-not-prefix.rst

For a more complete example of defining zones and zone ranges for
initial chunk distribution on a compound hashed shard key, see
:ref:`pre-define-zone-range-hashed-example`.

Balancer
~~~~~~~~

After successfully running :dbcommand:`updateZoneKeyRange`, there may be chunk
migrations during the next balancer round.

After adding a range to a zone, the :ref:`balancer
<sharding-balancing-internals>` must first run in order to migrate any
chunks whose ranges are covered by the zone to shards inside
of that zone. Until balancing completes, some chunks may reside on the
wrong shard given the configured zones for the sharded cluster.

Removing the association between a range and a zone removes the constraints
keeping chunks covered by the range on the shards inside that zone. During the
next balancer round, the balancer may migrate chunks that were previously
covered by the zone.

See the documentation for the :ref:`sharded cluster balancer
<sharding-balancing>` for more information on how migrations work in a sharded
cluster.

Bounds
~~~~~~

.. include:: /includes/fact-shard-ranges-inclusive-exclusive.rst

Dropped Collections
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/zoned-sharding-drop-collection-change.rst

In earlier versions, MongoDB does not remove the tag associations for a
dropped collection, and if you later create a new collection with the
same name, the old tag associations will apply to the new collection.

Security
--------

For sharded clusters running with :ref:`authentication <authentication>`, you
must authenticate as either:

- a user whose privileges include the specified actions on various
  collections in the ``config`` database:

  - :authaction:`find` on the ``config.shards`` collection

  - :authaction:`find`, :authaction:`update`, and :authaction:`remove`
    on the ``config.tags`` collection;

  or, alternatively,

- a user whose privileges include :authaction:`enableSharding` on the
  :ref:`cluster <resource-specific-collection>` resource.
    
The :authrole:`clusterAdmin` or :authrole:`clusterManager` built-in roles have
the appropriate permissions for issuing :dbcommand:`updateZoneKeyRange`. See
the documentation page for :ref:`Role-Based Access Control <authorization>`
for more information.

Example
-------

Given a sharded collection ``exampledb.collection`` with a shard key of ``{ a
: 1 }``, the following operation creates a range with a lower bound of ``1``
and an upper bound of ``10`` on the ``alpha`` zone:

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand(
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 1 },
         max : { a : 10 },
         zone : "alpha"
      }
   )

The following operation removes the previously created range by passing
``null`` to the ``zone`` field.

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand(
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 1 },
         max : { a : 10 },
         zone : null
      }
   )

The ``min`` and ``max`` must match exactly the bounds of the target range.
The following operation attempts to remove the previously created range, but
specifies ``{ a : 0 }`` as the ``min`` bound:

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand(
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 0 },
         max : { a : 10 },
         zone : null
      }
   )

While the range of ``{ a : 0 }`` and ``{ a : 10 }`` encompasses the existing
range, it is not an exact match and therefore :dbcommand:`updateZoneKeyRange`
does not remove anything.

Compound Shard Key
~~~~~~~~~~~~~~~~~~

Given a sharded collection ``exampledb.collection`` with a shard key of ``{ a
: 1, b : 1 }``, the following operation creates a range covering the lower
bound of ``{ a: 1, b : 1 }`` and an upper bound of ``{ a : 10, b : 10}`` and
associates it with the ``alpha`` zone:

.. code-block:: javascript

   admin = db.getSiblingDB("admin")
   admin.runCommand( 
      {
         updateZoneKeyRange : "exampledb.collection",
         min : { a : 1, b : 1 },
         max : { a : 10, b : 10 },
         zone : "alpha"
         
      }
   )
