# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/storage.txt:3
# 2345a4e069b54cb49651a9f027d73707
msgid "Storage"
msgstr ""

#: ../source/core/storage.txt:7
# 91aeb1312fd442979ba78f87c4f89643
msgid "MongoDB adds support for additional storage engines. MongoDB's original storage engine, known as ``mmapv1`` remains the default in 3.0, but the new ``wiredTiger`` engine is available and can offer additional flexibility and improved throughput for many workloads."
msgstr ""

#: ../source/core/storage.txt:14
# 704bb89a17b144fcae2eef9283ee3adb
msgid "Data Model"
msgstr ""

#: ../source/core/storage.txt:16
# d7e8896d39714b6fa244a6c9fe49278f
msgid "MongoDB stores data in the form of :term:`BSON` documents, which are rich mappings of keys, or field names, to values. BSON supports a rich collection of types, and fields in BSON documents may hold arrays of values or embedded documents. All documents in MongoDB must be less than 16MB, which is the :limit:`BSON document size <BSON Document Size>`."
msgstr ""

#: ../source/core/storage.txt:22
# a026979a430a454289bced560c03e411
msgid "All documents are part of a :term:`collection`, which are a logical groupings of documents in a MongoDB database. The documents in a collection share a set of indexes, and typically these documents share common fields and structure."
msgstr ""

#: ../source/core/storage.txt:27
# ab177339dc624298bc1533b019dd93dd
msgid "In MongoDB the :term:`database` construct is a group of related collections. Each database has a distinct set of data files and can contain a large number of collections. A single MongoDB deployment may have many databases."
msgstr ""

#: ../source/core/storage.txt:35
# 78ba6f91f97e442bbbd6c157283f7ae6
msgid "WiredTiger Storage Engine"
msgstr ""

#: ../source/core/storage.txt:39
# 34a95586fa90450fb12fa62ad668ae8e
msgid "WiredTiger is a storage engine that is optionally available in the 64-bit build of MongoDB 3.0. It excels at read and insert workloads as well as more complex update workloads."
msgstr ""

#: ../source/core/storage.txt:44
# 6a260bfe3b48438f8eddad9242bf70c5
msgid "Document Level Locking"
msgstr ""

#: ../source/core/storage.txt:46
# 74dc3fb973c1442a94d3b1f35dabf769
msgid "With WiredTiger, all write operations happen within the context of a *document* level lock. As a result, multiple clients can modify more than one document in a single collection at the same time. With this very granular concurrency control, MongoDB can more effectively support workloads with read, write and updates as well as high-throughput concurrent workloads."
msgstr ""

#: ../source/core/storage.txt:54
#: ../source/core/storage.txt:112
# 09f094790fbe4ee684c4fd5a53a58dd5
# e257ebb4c186405a9e10463bd981f102
msgid "Journal"
msgstr ""

#: ../source/core/storage.txt:56
# a0a4f48df6be4cad87c5617bbc62999f
msgid "WiredTiger uses a write-ahead transaction log in combination with checkpoints to ensure data persistence. With WiredTiger, by default MongoDB will commit a checkpoint to disk every 60 seconds, or when there are 2 gigabytes of data to write. The checkpoint thresholds are configurable. Between and during checkpoints the data files are *always* valid."
msgstr ""

#: ../source/core/storage.txt:63
# f2a010dde4014b4d96628df636ac9017
msgid "The WiredTiger journal persists all data modifications between checkpoints. If MongoDB exits between checkpoints, it uses the journal to replay all data modified since the last checkpoint. By default the WiredTiger journal is compressed using the :term:`snappy` algorithm."
msgstr ""

#: ../source/core/storage.txt:68
# 94ddc995f57d4e6c952b6b47f65ba67e
msgid "You can disable journaling by setting :setting:`storage.journal.enabled` to ``false``, which can reduce the overhead of maintaining the journal. For :term:`standalone` instances, not using the journal means that you will lose some data modifications when MongoDB exits unexpectedly between checkpoints. For members of :term:`replica sets <replica set>`, the replication process may provide sufficient durability guarantees."
msgstr ""

#: ../source/core/storage.txt:79
# d1fdb65089214bc79d7e6e7aed8f4731
msgid "Compression"
msgstr ""

#: ../source/core/storage.txt:81
# 4a15df2786df40c8bf8ee52915da8993
msgid "MongoDB supports compression for all collections and indexes using both block and :term:`prefix compression`. Compression minimizes storage use at the expense of additional CPU."
msgstr ""

#: ../source/core/storage.txt:85
# c74dff283a6d4126afd6767462014822
msgid "By default, all indexes with the WiredTiger engine use :term:`prefix compression`. Also, by default all collections with WiredTiger use block compression with the :term:`snappy` algorithm. Compression with :term:`zlib` is also available."
msgstr ""

#: ../source/core/storage.txt:90
# 4be3879208fe4fcd8a926edddb8adcc8
msgid "You can modify the default compression settings for all collections and indexes. Compression is also configurable on a per-collection and per-index basis during collection and index creation."
msgstr ""

#: ../source/core/storage.txt:94
# 4292c992a3d44fde97656fa70dc26396
msgid "For most workloads, the default compression settings balance storage efficiency and processing requirements."
msgstr ""

#: ../source/core/storage.txt:97
# 121299517f7b43548eb86acf706a9685
msgid "`<http://wiredtiger.com>`_"
msgstr ""

#: ../source/core/storage.txt:104
# 45331764b88e49339ecf9fd30c0a1bf9
msgid "MMAPv1 Storage Engine"
msgstr ""

#: ../source/core/storage.txt:106
# ec55dd6645654f2f9ed296a1a083c5d2
msgid "MMAPv1 is MongoDB's original storage engine based on memory mapped files. It excels at workloads with high volume inserts, reads, and in-place updates. MMAPv1 is the default storage engine in MongoDB 3.0 and all previous versions."
msgstr ""

#: ../source/core/storage.txt:114
# 9394e30ca3bb4fd794cb2b8a914f373c
msgid "In order to ensure that all modifications to a MongoDB data set are durably written to disk, MongoDB records all modifications to a journal that it writes to disk more frequently than it writes the data files. The journal allows MongoDB to successfully recover data from data files after a :program:`mongod` instance exits without flushing all changes."
msgstr ""

#: ../source/core/storage.txt:121
# 4e70d079c328418c8026d5f3919838e8
msgid "See :doc:`/core/journaling` for more information about the journal in MongoDB."
msgstr ""

#: ../source/core/storage.txt:125
# 2a621d483cd949e5855e72791303c68e
msgid "Record Storage Characteristics"
msgstr ""

#: ../source/core/storage.txt:127
# a7cc2c695b1646a88cd7b75d85823383
msgid "All records are contiguously located on disk, and when a document becomes larger than the allocated record, MongoDB must allocate a new record. New allocations require MongoDB to move a document and update all indexes that refer to the document, which takes more time than in-place updates and leads to storage fragmentation."
msgstr ""

#: ../source/core/storage.txt:136
# 78bc0007ab9d43de95f79c47d8050d4e
msgid "By default, MongoDB uses :ref:`power-of-2-allocation` so that every document in MongoDB is stored in a *record* which contains the document itself and extra space, or :term:`padding`. Padding allows the document to grow as the result of updates while minimizing the likelihood of reallocations."
msgstr ""

#: ../source/core/storage.txt:145
# 5576b2913be44832bfa00e1e203208cb
msgid "Record Allocation Strategies"
msgstr ""

#: ../source/core/storage.txt:147
# b4e22d4508bf45bab57e65fde3009e15
msgid "MongoDB supports multiple record allocation strategies that determine how :program:`mongod` adds padding to a document when creating a record. Because documents in MongoDB may grow after insertion and all records are contiguous on disk, the padding can reduce the need to relocate documents on disk following updates. Relocations are less efficient than in-place updates and can lead to storage fragmentation. As a result, all padding strategies trade additional space for increased efficiency and decreased fragmentation."
msgstr ""

#: ../source/core/storage.txt:156
# b6bdac8dc5fb43af9685fa7ac889ee1e
msgid "Different allocation strategies support different kinds of workloads: the :ref:`power of 2 allocations <power-of-2-allocation>` are more efficient for insert/update/delete workloads; while :ref:`exact fit allocations <exact-fit-allocation>` is ideal for collections *without* update and delete workloads."
msgstr ""

#: ../source/core/storage.txt:165
# 46b60547fe634fd7a61a9767ccfb3a70
msgid "Power of 2 Sized Allocations"
msgstr ""

#: ../source/core/storage.txt:169
# 0725c843edf941d79e760498e1c5fd28
msgid "MongoDB 3.0 uses the power of 2 sizes allocation as the default record allocation strategy for MMAPv1. With the power of 2 sizes allocation strategy, each record has a size in bytes that is a power of 2 (e.g. 32, 64, 128, 256, 512 ... 2MB). For documents larger than 2MB, the allocation is rounded up to the nearest multiple of 2MB."
msgstr ""

#: ../source/core/storage.txt:175
# 00654cd8eb2c45a2a4799d1407ad088e
msgid "The power of 2 sizes allocation strategy has the following key properties:"
msgstr ""

#: ../source/core/storage.txt:178
# 31c1fa61e23144b89c26390e59533af2
msgid "Can efficiently reuse freed records to reduce fragmentation. Quantizing record allocation sizes into a fixed set of sizes increases the probability that an insert will fit into the free space created by an earlier document deletion or relocation."
msgstr ""

#: ../source/core/storage.txt:183
# b5fa4b36ad184decbd929eef2d41ddc5
msgid "Can reduce moves. The added padding space gives a document room to grow without requiring a move. In addition to saving the cost of moving, this results in less updates to indexes. Although the power of 2 sizes strategy can minimize moves, it does not eliminate them entirely."
msgstr ""

#: ../source/core/storage.txt:192
# cda1da0b70af4152ba4563fd6c1a0501
msgid "No Padding Allocation Strategy"
msgstr ""

#: ../source/core/storage.txt:196
# daf1119ad0294a0690667af4d31d5920
msgid "For collections whose workloads do not change the document sizes, such as workloads that consist of insert-only operations or update operations that do not increase document size (such as incrementing a counter), you can disable the :ref:`power of 2 allocation <power-of-2-allocation>` using the :dbcommand:`collMod` command with the :collflag:`noPadding` flag or the :method:`db.createCollection()` method with the ``noPadding`` option."
msgstr ""

#: ../source/core/storage.txt:204
# 2814f068d5124ca29a8acc51b1aee04c
msgid "Prior to version 3.0.0, MongoDB used an allocation strategy that included a dynamically calculated :data:`padding <collStats.paddingFactor>` as a factor of the document size."
msgstr ""

#: ../source/core/storage.txt:209
# 887624a0ad704112b5f8f59c6e0bc0ff
msgid "Capped Collections"
msgstr ""

#: ../source/core/storage.txt:211
# 24c5b0e7cc6a455183f7a730ed81ec4e
msgid ":term:`Capped collections <capped collection>` are fixed-size collections that support high-throughput operations that store records in insertion order. Capped collections work like circular buffers: once a collection fills its allocated space, it makes room for new documents by overwriting the oldest documents in the collection."
msgstr ""

#: ../source/core/storage.txt:217
# cb813a9ae41341b18c82b6fe10d42551
msgid "See :doc:`/core/capped-collections` for more information."
msgstr ""

