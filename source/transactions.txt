.. _laravel-transactions:

============
Transactions
============

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: php framework, odm, code example

MongoDB transactions require the following software and topology:

- MongoDB version 4.0 or later
- A replica set deployment or sharded cluster

You can find more information :manual:`in the MongoDB docs </core/transactions/>`

.. code-block:: php

   DB::transaction(function () {
       User::create(['name' => 'john', 'age' => 19, 'title' => 'admin', 'email' => 'john@example.com']);
       DB::collection('users')->where('name', 'john')->update(['age' => 20]);
       DB::collection('users')->where('name', 'john')->delete();
   });

.. code-block:: php

   // begin a transaction
   DB::beginTransaction();
   User::create(['name' => 'john', 'age' => 19, 'title' => 'admin', 'email' => 'john@example.com']);
   DB::collection('users')->where('name', 'john')->update(['age' => 20]);
   DB::collection('users')->where('name', 'john')->delete();

   // commit changes
   DB::commit();

To abort a transaction, call the ``rollBack`` method at any point during the transaction:

.. code-block:: php

   DB::beginTransaction();
   User::create(['name' => 'john', 'age' => 19, 'title' => 'admin', 'email' => 'john@example.com']);

   // Abort the transaction, discarding any data created as part of it
   DB::rollBack();


.. note::

   Transactions in MongoDB cannot be nested. DB::beginTransaction() function 
   will start new transactions in a new created or existing session and will
   raise the RuntimeException when transactions already exist. See more in 
   MongoDB official docs :manual:`Transactions and Sessions </core/transactions/#transactions-and-sessions>`.

.. code-block:: php

   DB::beginTransaction();
   User::create(['name' => 'john', 'age' => 20, 'title' => 'admin']);

   // This call to start a nested transaction will raise a RuntimeException
   DB::beginTransaction();
   DB::collection('users')->where('name', 'john')->update(['age' => 20]);
   DB::commit();
   DB::rollBack();

Database Testing
----------------

For testing, the traits ``Illuminate\Foundation\Testing\DatabaseTransactions``
and ``Illuminate\Foundation\Testing\RefreshDatabase`` are not yet supported.
Instead, create migrations and use the ``DatabaseMigrations`` trait to reset 
the database after each test:

.. code-block:: php

   use Illuminate\Foundation\Testing\DatabaseMigrations;
