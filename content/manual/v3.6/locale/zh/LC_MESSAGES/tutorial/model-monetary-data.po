#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/model-monetary-data.txt:3
msgid "Model Monetary Data"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:14
msgid "Overview"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:16
msgid ""
"Applications that handle monetary data often require the ability to "
"capture fractional units of currency and need to emulate decimal rounding"
" with exact precision when performing arithmetic. The binary-based "
"floating-point arithmetic used by many modern systems (i.e., float, "
"double) is unable to represent exact decimal fractions and requires some "
"degree of approximation making it unsuitable for monetary arithmetic. "
"This constraint is an important consideration when modeling monetary "
"data."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:25
msgid ""
"There are several approaches to modeling monetary data in MongoDB using "
"the numeric and non-numeric models."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:31
#: ../source/tutorial/model-monetary-data.txt:73
msgid "Numeric Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:33
msgid ""
"The numeric model may be appropriate if you need to query the database "
"for exact, mathematically valid matches or need to perform server-side "
"arithmetic, e.g., :update:`$inc`, :update:`$mul`, and :ref:`aggregation "
"framework arithmetic <agg-quick-ref-operator-arithmetic>`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:38
msgid "**The following approaches follow the numeric model:**"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:40
msgid ""
":ref:`numeric-decimal` which is a decimal-based floating-point format "
"capable of providing exact precision. Available in MongoDB version 3.4 "
"and later."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:44
msgid ""
":ref:`numeric-scale-factor` to convert the monetary value to a 64-bit "
"integer (``long`` BSON type) by multiplying by a power of 10 scale "
"factor."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:51
#: ../source/tutorial/model-monetary-data.txt:306
msgid "Non-Numeric Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:53
msgid ""
"If there is no need to perform server-side arithmetic on monetary data or"
" if server-side approximations are sufficient, modeling monetary data "
"using the non-numeric model may be suitable."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:57
msgid "**The following approach follows the non-numeric model:**"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:59
msgid ""
":ref:`Using two fields for the monetary value <monetary-value-non-"
"numeric>`: One field stores the exact monetary value as a non-numeric "
"``string`` and another field stores a binary-based floating-point "
"(``double`` BSON type) approximation of the value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:66
msgid ""
"Arithmetic mentioned on this page refers to server-side arithmetic "
"performed by :binary:`~bin.mongod` or :binary:`~bin.mongos`, and not to "
"client-side arithmetic."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:78
msgid "Using the Decimal BSON Type"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:82
msgid ""
"The ``decimal`` :doc:`BSON type </reference/bson-types>` uses the IEEE "
"754 decimal128 decimal-based floating-point numbering format. Unlike "
"binary-based floating-point formats (i.e., the ``double`` BSON type), "
"decimal128 does not approximate decimal values and is able to provide the"
" exact precision required for working with monetary data."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:88
msgid ""
"From the :binary:`~bin.mongo` shell ``decimal`` values are assigned and "
"queried using the ``NumberDecimal()`` constructor.  The following example"
" adds a document containing gas prices to a ``gasprices`` collection:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:97
msgid "The following query matches the document above:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:103
msgid ""
"For more information on the ``decimal`` type, see :ref:`shell-type-"
"decimal`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:107
msgid "Converting Values to Decimal"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:109
msgid ""
"A collection's values can be transformed to the ``decimal`` type by "
"performing a one-time transformation or by modifying application logic to"
" perform the transformation as it accesses records."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:114
msgid "One-Time Collection Transformation"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:116
msgid ""
"A collection can be transformed by iterating over all documents in the "
"collection, converting the monetary value to the ``decimal`` type, and "
"writing the document back to the collection."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:120
msgid ""
"It is strongly advised to add the ``decimal`` value to the document as a "
"new field and remove the old field later once the new field's values have"
" been verified."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:124
msgid ""
"Be sure to  test ``decimal`` conversions in an isolated test environment."
" Once datafiles are created or modified with MongoDB version 3.4 they "
"will no longer be compatible with previous versions and there is no "
"support for downgrading datafiles containing decimals."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:130
msgid "**Scale Factor Transformation:**"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:132
msgid ""
"Consider the following collection which used the :ref:`Scale Factor "
"<numeric-scale-factor>` approach and saved the monetary value as a 64-bit"
" integer representing the number of cents:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:144
msgid ""
"The ``long`` value can be converted to an appropriately formatted "
"``decimal`` value by multiplying ``price`` and "
"``NumberDecimal(\"0.01\")`` using the :expression:`$multiply` operator. "
"The following aggregation pipeline assigns the converted value to the new"
" ``priceDec`` field in the :pipeline:`$addFields` stage:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:167
msgid ""
"The results of the aggregation pipeline can be verified using the "
"``db.clothes.find()`` query:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:178
msgid ""
"If you do not want to add a new field with the ``decimal`` value, the "
"original field can be overwritten. The following "
":method:`~db.collection.update()` method first checks that ``price`` "
"exists and that it is a ``long``, then transforms the ``long`` value to "
"``decimal`` and stores it in the ``price`` field:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:192
msgid "The results can be verified using the ``db.clothes.find()`` query:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:202
msgid "**Non-Numeric Transformation:**"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:204
msgid ""
"Consider the following collection which used the :ref:`non-numeric "
"<monetary-value-non-numeric>` model and saved the monetary value as a "
"``string`` with the exact representation of the value:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:217
msgid ""
"The following function first checks that ``price`` exists and that it is "
"a ``string``, then transforms the ``string`` value to a ``decimal`` value"
" and stores it in the ``priceDec`` field:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:228
msgid ""
"The function does not output anything to the command line. The results "
"can be verified using the ``db.clothes.find()`` query:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:240
msgid "Application Logic Transformation"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:242
msgid ""
"It is possible to perform the transformation to the ``decimal`` type from"
" within the application logic. In this scenario the application modified "
"to perform the transformation as it accesses records."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:247
msgid "The typical application logic is as follows:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:249
msgid "Test that the new field exists and that it is of ``decimal`` type"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:251
msgid "If the new ``decimal`` field does not exist:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:253
msgid "Create it by properly converting old field values"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:255
msgid "Remove the old field"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:257
msgid "Persist the transformed record"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:262
msgid "Using a Scale Factor"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:264
msgid ""
"If you are using MongoDB version 3.4 or higher, using the :ref:`decimal "
"<numeric-decimal>` type for modeling monetary data is preferable to the "
":ref:`Scale Factor <numeric-scale-factor>` method."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:269
msgid "To model monetary data using the scale factor approach:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:271
msgid ""
"Determine the maximum precision needed for the monetary value. For "
"example, your application may require precision down to the tenth of one "
"cent for monetary values in ``USD`` currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:275
msgid ""
"Convert the monetary value into an integer by multiplying the value by a "
"power of 10 that ensures the maximum precision needed becomes the least "
"significant digit of the integer. For example, if the required maximum "
"precision is the tenth of one cent, multiply the monetary value by 1000."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:281
msgid "Store the converted monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:283
msgid ""
"For example, the following scales ``9.99 USD`` by 1000 to preserve "
"precision up to one tenth of a cent."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:290
msgid "The model assumes that for a given currency value:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:292
msgid ""
"The scale factor is consistent for a currency; i.e. same scaling factor "
"for a given currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:295
msgid ""
"The scale factor is a constant and known property of the currency; i.e "
"applications can determine the scale factor from the currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:298
msgid ""
"When using this model, applications must be consistent in performing the "
"appropriate scaling of the values."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:301
msgid "For use cases of this model, see :ref:`numeric-model-use-case`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:308
msgid ""
"To model monetary data using the non-numeric model, store the value in "
"two fields:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:311
msgid ""
"In one field, encode the exact monetary value as a non-numeric data type;"
" e.g., ``BinData`` or a ``string``."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:314
msgid ""
"In the second field, store a double-precision floating point "
"approximation of the exact value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:317
msgid ""
"The following example uses the non-numeric model to store ``9.99 USD`` "
"for the price and ``0.25 USD`` for the fee:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:327
msgid ""
"With some care, applications can perform range and sort queries on the "
"field with the numeric approximation. However, the use of the "
"approximation field for the query and sort operations requires that "
"applications perform client-side post-processing to decode the non-"
"numeric representation of the exact value and then filter out the "
"returned documents based on the exact monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:334
msgid "For use cases of this model, see :ref:`non-numeric-model-use-case`."
msgstr ""

#~ msgid ""
#~ "MongoDB stores numeric data as either"
#~ " IEEE 754 standard 64-bit floating "
#~ "point numbers or as 32-bit or "
#~ "64-bit signed integers. Applications that "
#~ "handle monetary data often require "
#~ "capturing fractional units of currency. "
#~ "However, arithmetic on floating point "
#~ "numbers, as implemented in modern "
#~ "hardware, often does not conform to "
#~ "requirements for monetary arithmetic. In "
#~ "addition, some fractional numeric quantities,"
#~ " such as one third and one "
#~ "tenth, have no exact representation in"
#~ " binary floating point numbers."
#~ msgstr ""

#~ msgid "This document describes two ways to model monetary data in MongoDB:"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`monetary-value-exact-precision` which"
#~ " multiplies the monetary value by a"
#~ " power of 10."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`monetary-value-arbitrary-precision` "
#~ "which uses two fields for the "
#~ "value: one field to store the "
#~ "exact monetary value as a non-"
#~ "numeric and another field to store "
#~ "a floating point approximation of the"
#~ " value."
#~ msgstr ""

#~ msgid "Use Cases for Exact Precision Model"
#~ msgstr ""

#~ msgid ""
#~ "If you regularly need to perform "
#~ "server-side arithmetic on monetary data,"
#~ " the exact precision model may be "
#~ "appropriate. For instance:"
#~ msgstr ""

#~ msgid ""
#~ "If you need to query the database"
#~ " for exact, mathematically valid matches,"
#~ " use :ref:`monetary-value-exact-precision`."
#~ msgstr ""

#~ msgid ""
#~ "If you need to be able to do"
#~ " server-side arithmetic, e.g., "
#~ ":update:`$inc`, :update:`$mul`, and "
#~ ":doc:`aggregation framework arithmetic "
#~ "</reference/operator/aggregation-arithmetic>`, use "
#~ ":ref:`monetary-value-exact-precision`."
#~ msgstr ""

#~ msgid "Use Cases for Arbitrary Precision Model"
#~ msgstr ""

#~ msgid ""
#~ "If there is no need to perform "
#~ "server-side arithmetic on monetary data,"
#~ " modeling monetary data using the "
#~ "arbitrary precision model may be "
#~ "suitable. For instance:"
#~ msgstr ""

#~ msgid ""
#~ "If you need to handle arbitrary or"
#~ " unforeseen number of precision, see "
#~ ":ref:`monetary-value-arbitrary-precision`."
#~ msgstr ""

#~ msgid ""
#~ "If server-side approximations are "
#~ "sufficient, possibly with client-side "
#~ "post-processing, see :ref:`monetary-value-"
#~ "arbitrary-precision`."
#~ msgstr ""

#~ msgid "Exact Precision"
#~ msgstr ""

#~ msgid "To model monetary data using the exact precision model:"
#~ msgstr ""

#~ msgid "For use cases of this model, see :ref:`exact-precision-model-use-case`."
#~ msgstr ""

#~ msgid "Arbitrary Precision"
#~ msgstr ""

#~ msgid ""
#~ "To model monetary data using the "
#~ "arbitrary precision model, store the "
#~ "value in two fields:"
#~ msgstr ""

#~ msgid ""
#~ "The following example uses the arbitrary"
#~ " precision model to store ``9.99 "
#~ "USD`` for the price and ``0.25 "
#~ "USD`` for the fee:"
#~ msgstr ""

#~ msgid ""
#~ "For use cases of this model, see"
#~ " :ref:`arbitrary-precision-model-use-case`."
#~ msgstr ""

# 783770d9937140d591acf34b51b3d173
#~ msgid "On this page"
#~ msgstr ""

# 5d6690caea5240f49a208bd08ccfcb9f
#~ msgid ""
#~ "The numeric model may be appropriate "
#~ "if you need to query the database"
#~ " for exact, mathematically valid matches"
#~ " or need to perform server-side "
#~ "arithmetic, e.g., :update:`$inc`, :update:`$mul`,"
#~ " and :doc:`aggregation framework arithmetic "
#~ "</reference/operator/aggregation-arithmetic>`."
#~ msgstr ""

# 70d6df7750594c3aaa50a4d6c06a75cc
#~ msgid ""
#~ "Arithmetic mentioned on this page refers"
#~ " to server-side arithmetic performed "
#~ "by :program:`mongod` or :program:`mongos`, and"
#~ " not to client-side arithmetic."
#~ msgstr ""

# c20319c3a3194cb08bb7034fc93a3747
#~ msgid ""
#~ "From the :program:`mongo` shell ``decimal``"
#~ " values are assigned and queried "
#~ "using the ``NumberDecimal()`` constructor.  "
#~ "The following example adds a document"
#~ " containing gas prices to a "
#~ "``gasprices`` collection:"
#~ msgstr ""

# 498cc73d4b9a45a38167f84fbf4531a9
#~ msgid ""
#~ "If you do not want to add a"
#~ " new field with the ``decimal`` "
#~ "value, the original field can be "
#~ "overwritten. The following "
#~ ":method:`~db.collection.update()` method first "
#~ "checks that ``price`` exists and that"
#~ " it is a ``long``, then transforms"
#~ " the ``long`` value to ``decimal`` "
#~ "and stores it in the ``priceDec`` "
#~ "field:"
#~ msgstr ""

