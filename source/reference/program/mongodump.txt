.. _mongodump:

=============
``mongodump``
=============

.. default-domain:: mongodb

.. contents::
   :backlinks: none
   :local:

.. |tool-binary| replace:: mongodump

Synopsis
--------

:program:`mongodump` is a utility for creating a binary export of the
contents of a database. Consider using this utility as part an
effective :doc:`backup strategy </core/backups>`. Use
:program:`mongodump` in conjunction with :program:`mongorestore` to
restore databases.

:program:`mongodump` can read data from either :program:`mongod` or :program:`mongos`
instances, in addition to reading directly from MongoDB data files
without an active :program:`mongod`.

.. seealso:: :program:`mongorestore`,
   :doc:`/tutorial/backup-sharded-cluster-with-database-dumps`
   and :doc:`/core/backups`.

Behavior
--------

.. include:: /includes/fact-mongodump-local-database.rst

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

Required Access to Backup User Data
-----------------------------------

.. include:: /includes/access-mongodump.rst

Options
-------

.. binary:: mongodump

.. program:: mongodump

.. option:: --help

   Returns a basic help and usage text.

.. option:: --verbose, -v

   Increases the amount of internal reporting returned on the command
   line. Increase the verbosity with the ``-v`` form by including the
   option multiple times, (e.g. ``-vvvvv``.)

.. option:: --version

   Returns the version of the :program:`mongodump` utility and exits.

.. option:: --host <hostname><:port>

   Specifies a resolvable hostname for the :program:`mongod` that you wish to
   use to create the database dump. By default :program:`mongodump` will
   attempt to connect to a MongoDB process running on the localhost
   port number ``27017``.

   Optionally, specify a port number to connect a MongoDB instance
   running on a port other than ``27017``.

   To connect to a replica set, use the :option:`--host <mongodump --host>`
   argument with a setname, followed by a slash and a comma-separated
   list of host names and port numbers. The :program:`mongodump`
   utility will, given the seed of at least one connected set member,
   connect to the primary member of that set. This option would resemble:

   .. code-block:: javascript

      mongodump --host repl0/mongo0.example.net,mongo0.example.net:27018,mongo1.example.net,mongo2.example.net

   You can always connect directly to a single MongoDB instance by
   specifying the host and port number directly.

.. option:: --port <port>

   Specifies the port number, if the MongoDB instance is not running
   on the standard port. (i.e. ``27017``) You may also specify a port
   number using the :option:`--host <mongodump --host>` option.

.. option:: --ipv6

   Enables IPv6 support that allows :program:`mongodump` to connect to
   the MongoDB instance using an IPv6 network. All MongoDB programs
   and processes, including :program:`mongodump`, disable IPv6 support
   by default.

.. include:: /includes/manpage-options-ssl-tools.rst

.. option:: --username <username>, -u <username>

   Specifies a username to authenticate to the MongoDB instance, if
   your database requires authentication. Use in conjunction with the
   :option:`--password <mongodump --password>` option to supply a
   password.

.. option:: --password <password>, -p <password>

   Specifies a password to authenticate to the MongoDB instance. Use
   in conjunction with the :option:`--username <mongodump --username>`
   option to supply a username.

   If you specify a :option:`--username <mongodump --username>` and do
   not pass an argument to :option:`--password`, :program:`mongodump`
   will prompt for a password interactively. If you do not specify a
   password on the command line, :option:`--password` must be the last
   argument specified.

.. |binary-name| replace:: :program:`mongodump`
.. include:: /includes/manpage-options-auth.rst

.. option:: --dbpath <path>

   Specifies the directory of the MongoDB data files. If used, the
   :option:`--dbpath` option enables :program:`mongodump` to attach
   directly to local data files and copy the data without the
   :program:`mongod`. To run with :option:`--dbpath`,
   :program:`mongodump` needs to restrict access to the data
   directory: as a result, no :program:`mongod` can access the same
   path while the process runs.

.. option:: --directoryperdb

   Use the :option:`--directoryperdb` in conjunction with the
   corresponding option to :program:`mongod`. This option allows
   :program:`mongodump` to read data files organized with each
   database located in a distinct directory. This option is only
   relevant when specifying the :option:`--dbpath` option.

.. option:: --journal

   Allows :program:`mongodump` operations to use the durability
   :term:`journal` to ensure that the export is in a
   valid state. This option is only relevant when specifying the
   :option:`--dbpath` option.

.. option:: --db <db>, -d <db>

   Use the :option:`--db` option to specify a database for
   :program:`mongodump` to backup. If you do not specify a DB,
   :program:`mongodump` copies all databases in this instance into the
   dump files. Use this option to backup or copy a smaller subset of
   your data.

.. option:: --collection <collection>, -c <collection>

   Use the :option:`--collection` option to specify a collection for
   :program:`mongodump` to backup. If you do not specify a collection,
   this option copies all collections in the specified database or
   instance to the dump files. Use this option to backup or copy a
   smaller subset of your data.

.. option:: --out <path>, -o <path>

   Specifies a directory where :program:`mongodump` saves the output of
   the database dump. By default, :program:`mongodump` saves output
   files in a directory named ``dump`` in the current working directory.

   To send the database dump to standard output, specify "``-``"
   instead of a path. Write to standard output if you want process the
   output before saving it, such as to use ``gzip`` to compress the
   dump. When writing standard output, :program:`mongodump` does not
   write the metadata that writes in a ``<dbname>.metadata.json`` file
   when writing to files directly.

.. option:: --query <json>, -q <json>

   Provides a query to limit (optionally) the documents included in
   the output of :program:`mongodump`.

.. option:: --oplog

   Use this option to ensure that :program:`mongodump` creates a dump
   of the database that includes a partial :term:`oplog` containing
   operations from the duration of the :program:`mongodump` operation.
   This oplog produces an effective
   point-in-time snapshot of the state of a :program:`mongod` instance. To
   restore to a specific point-in-time backup, use the output created
   with this option in conjunction with :option:`mongorestore --oplogReplay`.

   Without :option:`--oplog`, if there are write operations during the
   dump operation, the dump will not reflect a single moment in
   time. Changes made to the database during the update process can
   affect the output of the backup.

   :option:`--oplog` has no effect when running :program:`mongodump`
   against a :program:`mongos` instance to dump the entire contents of
   a sharded cluster. However, you can use :option:`--oplog` to dump
   individual shards.

   .. note::

      :option:`--oplog` only works against nodes that maintain an
      :term:`oplog`. This includes all members of a replica set, as
      well as :term:`master` nodes in master/slave replication
      deployments.

      :option:`--oplog` does not dump the oplog collection.

.. option:: --repair

   Use this option to run a repair option in addition to dumping the
   database. The repair option attempts to repair a database that may
   be in an invalid state as a result of an improper shutdown or
   :program:`mongod` crash.

   .. note:: The :option:`--repair` option uses aggressive
      data-recovery algorithms that may produce a large amount of
      duplication.

.. option:: --forceTableScan

   Forces :program:`mongodump` to scan the data store directly:
   typically, :program:`mongodump` saves entries as they appear in the
   index of the ``_id`` field. Use :option:`--forceTableScan` to skip
   the index and scan the data directly. Typically there are two cases
   where this behavior is preferable to the default:

   1. If you have key sizes over 800 bytes that would not be present
      in the ``_id`` index.
   2. Your database uses a custom ``_id`` field.

   When you run with :option:`--forceTableScan`, :program:`mongodump`
   does not use :operator:`$snapshot`. As a result, the dump produced
   by :program:`mongodump` can reflect the state of the database at
   many different points in time.

   .. important:: Use :option:`--forceTableScan` with extreme caution
      and consideration.

Behavior
--------

When running :program:`mongodump` against a :program:`mongos` instance
where the :term:`sharded cluster` consists of :term:`replica sets <replica
set>`, the :term:`read preference` of the operation will prefer reads
from :term:`secondary` members of the set.

.. include:: /includes/warning-fsync-lock-mongodump.rst

Required User Privileges
------------------------

.. note:: User privileges changed in MongoDB 2.4.

The user must have appropriate privileges to read data from database
holding collections in order to use :program:`mongodump`. Consider the
following :doc:`required privileges </reference/system-defined-roles>` for
the following :program:`mongodump` operations:

.. list-table::
   :header-rows: 1

   * - Task
     - Required Privileges

   * - All collections in a database except ``system.users``.
     - :authrole:`read`. [#read-or-read-write]_

   * - All collections in a database, including ``system.users``.
     - :authrole:`read` [#read-or-read-write]_ and :authrole:`userAdmin`.

   * - All databases. [#profiling-exception]_
     - :authrole:`readAnyDatabase`, :authrole:`userAdminAnyDatabase`,
       and :authrole:`clusterAdmin`. [#cluster-admin]_

See :doc:`/reference/system-defined-roles` and
:doc:`/reference/privilege-documents` for more information on user
roles.

.. [#read-or-read-write] You may provision :authrole:`readWrite`
   instead of :authrole:`read`.

.. [#cluster-admin] :authrole:`clusterAdmin` provides the ability to
   run the :dbcommand:`listDatabases` command, to list all existing
   databases.

.. [#profiling-exception] If any database runs with profiling enabled,
   :program:`mongodump` may need the
   :authrole:`dbAdminAnyDatabase` privilege to dump the
   ``system.profile`` collection.

Usage
-----

See the :doc:`/tutorial/backup-and-restore-with-binary-database-dumps`
for a larger overview of :program:`mongodump` usage. Also see the
:doc:`mongorestore` document for an overview of the
:program:`mongorestore`, which provides the related inverse
functionality.

The following command creates a dump file that contains only the
collection named ``collection`` in the database named ``test``. In
this case the database is running on the local interface on port
``27017``:

.. code-block:: sh

   mongodump --collection collection --db test

In the next example, :program:`mongodump` creates a backup of the
database instance stored in the ``/srv/mongodb`` directory on the
local machine. This requires that no :program:`mongod` instance is
using the ``/srv/mongodb`` directory.

.. code-block:: sh

   mongodump --dbpath /srv/mongodb

In the final example, :program:`mongodump` creates a database dump
located at ``/opt/backup/mongodump-2011-10-24``, from a database
running on port ``37017`` on the host ``mongodb1.example.net`` and
authenticating using the username ``user`` and the password
``pass``, as follows:

.. code-block:: sh

   mongodump --host mongodb1.example.net --port 37017 --username user --password pass --out /opt/backup/mongodump-2011-10-24

.. _mongodump-behavior:
