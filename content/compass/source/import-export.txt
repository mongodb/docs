.. _compass-import-export:

======================
Import and Export Data
======================

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: json

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. meta::
   :description: Import and export data with MongoDB Compass.
   :keywords: atlas

You can use |compass| to import and export data to and from
:ref:`collections <compass-collection-tab>`. |compass-short| supports import and
export for both **JSON** and **CSV** files. To import or export data to
or from a collection, navigate to the detailed collection view by either
selecting the collection from the :ref:`Databases <compass-database-tab>` tab or
clicking the collection in the left-side navigation.

.. note::

   Compass is not a tool for backing up data. For information on backup
   solutions, see :ref:`backup-methods`. 

.. _import-data:

Import Data into a Collection
-----------------------------

|compass| can import data into a collection from either a **JSON** or
**CSV** file.

Limitations
~~~~~~~~~~~

- .. include:: /includes/extracts/readonly-not-permitted-import.rst

- Importing data is not available if you are connected to a
  :atlas:`Data Lake </data-lake>`.

Format Your Data
~~~~~~~~~~~~~~~~

Before you can import your data into |compass| you must first ensure
that it is formatted correctly.

.. tabs::

   tabs:
     - id: json
       name: JSON
       content: |

         When importing data from a **JSON** file, you can format your 
         data as:

         - Newline-delimited documents, or

         - Comma-separated documents in an array

         .. example::

            The following newline-delimited ``.json`` file is formatted 
            correctly:

            .. code-block:: javascript

               { "type": "home", "number": "212-555-1234" }
               { "type": "cell", "number": "646-555-4567" }
               { "type": "office", "number": "202-555-0182"}

            The following comma-separated ``.json`` array file is also 
            formatted correctly:

            .. code-block:: javascript

               [{ "type": "home", "number": "212-555-1234" }, { "type": "cell", "number": "646-555-4567" }, { "type": "office", "number": "202-555-0182"}]

            |compass-short| ignores line breaks in JSON arrays.

            |compass-short| automatically generates :manual:`ObjectIDs
            </reference/method/ObjectId/>` for these objects on import
            since no ObjectIDs were specified in the initial JSON.

     - id: csv
       name: CSV
       content: |

         When importing data from a **CSV** file, the first line of the 
         file must be a comma-separated list of your document field 
         names. Subsequent lines in the file must be comma-separated 
         field values in the order corresponding with the field order 
         in the first line.

         .. example::

            The following ``.csv`` file imports three documents:

            .. code-block:: none

               name,age,fav_color,pet
               Jeff,25,green,Bongo
               Alice,20,purple,Hazel
               Tim,32,red,Lassie

            |compass| automatically generates :manual:`ObjectIDs
            </reference/method/ObjectId/>` for these objects on import
            since no ObjectIDs were specified in the initial CSV file.

Procedure
~~~~~~~~~

To import your formatted data into a collection:

.. include:: /includes/steps/import.rst

A progress bar displays the status of the import. If an error occurs
during import, the progress bar turns red and an error message
appears in the dialog. To see all errors, click :guilabel:`View Log`. 

After successful import, the dialog closes and
Compass displays the collection page containing the newly imported
documents.

.. _export-data-collection:

Export Data from a Collection
-----------------------------

|compass| can export data from a collection as either a
**JSON** or **CSV** file. If you specify a
:ref:`filter <compass-query-bar-filter>` or :ref:`aggregation pipeline 
<compass-agg-builder>` for your collection, |compass-short| only exports 
documents which match the specified query or 
pipeline results.

Behavior
~~~~~~~~

- Avoid exporting to :guilabel:`CSV` files when possible. :guilabel:`CSV` files 
  may lose type information and are not suitable for backing up your data.

- You can use a query filter to export only the documents that match the filter.

- You can use the :ref:`Project <compass-query-bar-project>` field in the query bar to 
  specify the fields to return or export. 

Procedure
~~~~~~~~~

.. tabs::

   .. tab:: Export Entire Collection
      :tabid: export-entire-collection

      To export an entire collection to a file:

      .. include:: /includes/steps/export.rst

      .. include:: /includes/fact-export-progress-bar.rst

   .. tab:: Export Filtered Subset of a Collection
      :tabid: export-filter

      To export a subset of documents from a collection:

      .. include:: /includes/steps/export-filter.rst

      .. include:: /includes/fact-export-progress-bar.rst
   
   .. tab:: Export Aggregation Results
      :tabid: export-Aggregation

      To export results from your aggregation pipeline:

      .. procedure::
         :style: normal

         .. step:: Connect to the deployment containing the collection you wish to export data from.

            To learn how to connect to a deployment, see
            :ref:`connect-run-compass`.

         .. step:: Navigate to your target collection.

            You can either select the collection from the
            :guilabel:`Collections` tab or click the collection 
            in the left-hand pane. 

         .. step:: Create an aggregation pipeline and run for results. 

            To learn how to create an aggregation pipeline, see :ref:`Create an 
            Aggregation Pipeline <compass-create-agg-pipeline>`. 

         .. step:: Click :guilabel:`Export`.

         .. step:: Select the appropriate file type.

            Under :guilabel:`Export File Type`, select either :guilabel:`JSON` 
            or :guilabel:`CSV`. If you select :guilabel:`JSON`, you can expand 
            the :guilabel:`Advanced JSON Format` dropdown and select from the 
            following extended JSON formats:

            .. include:: /includes/extended-json-table.rst

         .. step:: Click :guilabel:`Export`. 

Import and Export Data from the Command Line
--------------------------------------------

To import and export data from the command line, you can use MongoDB's
:dbtools:`Database Tools </>`. See
:dbtools:`mongoimport </mongoimport>` and
:dbtools:`mongoexport </mongoexport>`.
