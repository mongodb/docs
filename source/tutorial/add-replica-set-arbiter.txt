=============================
Add an Arbiter to Replica Set
=============================

.. default-domain:: mongodb

Arbiters are :program:`mongod` instances that are part of
:term:`replica set` but do not hold data. Arbiters participate in
:ref:`elections <replica-set-elections>` in order to break ties.
If a replica set has an even number of members, add an arbiter.

Arbiters have minimal resource requirements and do not require
dedicated hardware. You can deploy an arbiter on an application
server, monitoring host.

.. important::

   Do not run an arbiter on the same system as a member of the replica
   set.

Add an Arbiter
--------------

#. Create a data directory (e.g. :setting:`dbpath`) for the
   arbiter. The :program:`mongod` instance uses the directory for
   configuration data. The directory *will not* hold the data set. For
   example, create the ``/data/arb`` directory:

   .. code-block:: sh

      mkdir /data/arb

#. Start the arbiter. Specify the data directory and the replica set
   name. The following, starts an arbiter using the ``/data/arb``
   :setting:`dbpath` for the ``rs`` replica set:

   .. code-block:: sh

      mongod --port 30000 --dbpath /data/arb --replSet rs

#. Connect to the primary and add the arbiter to the replica set. Use
   the :method:`rs.addArb()` method, as in the following example:

   .. code-block:: javascript

      rs.addArb("m1.example.net:30000")

   This operation adds the arbiter running on port ``30000`` on the
   ``m1.example.net`` host.
