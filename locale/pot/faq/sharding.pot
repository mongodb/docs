# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/sharding.txt:3
# 3780c446b3004dc1bd1b98ab520751e7
msgid "FAQ: Sharding with MongoDB"
msgstr ""

#: ../source/faq/sharding.txt:7
# ae4e4f63a4cf453aadd622fc8b57c7c1
msgid "This document answers common questions about horizontal scaling using MongoDB's :term:`sharding`."
msgstr ""

#: ../source/faq/sharding.txt:10
# 3afb4edaff7545f3a75ee77b4a6a665f
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/sharding.txt:15
# cbf6df6870ac457ead3a4ca9c33b914a
msgid "Is sharding appropriate for a new deployment?"
msgstr ""

#: ../source/faq/sharding.txt:17
# 3906a68b04f44c39a69638dbb106e082
msgid "Sometimes."
msgstr ""

#: ../source/faq/sharding.txt:19
# d63b5ac091094a26ad2732eae2e8da1b
msgid "If your data set fits on a single server, you should begin with an unsharded deployment."
msgstr ""

#: ../source/faq/sharding.txt:22
# ff3d083d03b549b181b2bc0d04f3069f
msgid "Converting an unsharded database to a :term:`sharded cluster` is easy and seamless, so there is *little advantage* in configuring sharding while your data set is small."
msgstr ""

#: ../source/faq/sharding.txt:26
# 3ecec5389c3e429293aa4c7b26cddcd6
msgid "Still, all production deployments should use :term:`replica sets <replication>` to provide high availability and disaster recovery."
msgstr ""

#: ../source/faq/sharding.txt:30
# 16b0cb527d514d90b43207f9416c5ceb
msgid "How does sharding work with replication?"
msgstr ""

#: ../source/faq/sharding.txt:32
# 76ab771d6e8447b49650ad99bd652ea3
msgid "To use replication with sharding, deploy each :term:`shard` as a :term:`replica set`."
msgstr ""

#: ../source/faq/sharding.txt:38
# f036b484f7664238bb475fb2aacc3b7c
msgid "Can I change the shard key after sharding a collection?"
msgstr ""

#: ../source/faq/sharding.txt:40
# c89bf05e83bc49b5a0f7a532e357514c
msgid "No."
msgstr ""

#: ../source/faq/sharding.txt:42
# 00f516bc3358400084873562abb42a41
msgid "There is no automatic support in MongoDB for changing a shard key after sharding a collection. This reality underscores the importance of choosing a good :ref:`shard key <shard-key>`. If you *must* change a shard key after sharding a collection, the best option is to:"
msgstr ""

#: ../source/faq/sharding.txt:47
# bed1662ee8dc4ff69916219ba19a13e0
msgid "dump all data from MongoDB into an external format."
msgstr ""

#: ../source/faq/sharding.txt:49
# 6fefaf2f7b4441de98fa3da01cd34735
msgid "drop the original sharded collection."
msgstr ""

#: ../source/faq/sharding.txt:51
# 425eac59ec75471da9ee7fb607b8e59a
msgid "configure sharding using a more ideal shard key."
msgstr ""

#: ../source/faq/sharding.txt:53
# b422acccbcf64eaa9f55ebb0c0a82517
msgid ":doc:`pre-split </tutorial/create-chunks-in-sharded-cluster>` the shard key range to ensure initial even distribution."
msgstr ""

#: ../source/faq/sharding.txt:56
# 74e71ccddcc949379a3d9ab29c800289
msgid "restore the dumped data into MongoDB."
msgstr ""

#: ../source/faq/sharding.txt:58
# 982468699e1b4aefb0d753af15124288
msgid "See :dbcommand:`shardCollection`, :method:`sh.shardCollection()`, the :ref:`Shard Key <sharding-internals-shard-keys>`, :doc:`/tutorial/deploy-shard-cluster`, and :issue:`SERVER-4000` for more information."
msgstr ""

#: ../source/faq/sharding.txt:64
# e6415d1b99e74f1da37aa160fa4e9b52
msgid "What happens to unsharded collections in sharded databases?"
msgstr ""

#: ../source/faq/sharding.txt:66
# 03ca7025d581448da5d4935dd0f35826
msgid "In the current implementation, all databases in a :term:`sharded cluster` have a \"primary :term:`shard`.\" All unsharded collection within that database will reside on the same shard."
msgstr ""

#: ../source/faq/sharding.txt:71
# e6012e0b5e2742778ae3edbb3e9f8a17
msgid "How does MongoDB distribute data across shards?"
msgstr ""

#: ../source/faq/sharding.txt:73
# 57fb09c2f48641188492b3a9511c0f8e
msgid "Sharding must be specifically enabled on a collection. After enabling sharding on the collection, MongoDB will assign various ranges of collection data to the different shards in the cluster. The cluster automatically corrects imbalances between shards by migrating ranges of data from one shard to another."
msgstr ""

#: ../source/faq/sharding.txt:80
# 3dab7350d81848b79c33d68727498e4d
msgid "What happens if a client updates a document in a chunk during a migration?"
msgstr ""

#: ../source/faq/sharding.txt:82
# fcddf54e89434bd28a2a49e8b6b85f0f
msgid "The :program:`mongos` routes the operation to the \"old\" shard, where it will succeed immediately. Then the :term:`shard` :program:`mongod` instances will replicate the modification to the \"new\" shard before the :term:`sharded cluster` updates that chunk's \"ownership,\" which effectively finalizes the migration process."
msgstr ""

#: ../source/faq/sharding.txt:89
# 4ff04a2d8de745f398cc175ca57c70a2
msgid "What happens to queries if a shard is inaccessible or slow?"
msgstr ""

#: ../source/faq/sharding.txt:91
# 0f7fcd56eb0c41f480957a8a10abb493
msgid "If a :term:`shard` is inaccessible or unavailable, queries will return with an error."
msgstr ""

#: ../source/faq/sharding.txt:94
# 563f8703cfff47dfbe8b54caea01cc12
msgid "However, a client may set the ``partial`` query bit, which will then return results from all available shards, regardless of whether a given shard is unavailable."
msgstr ""

#: ../source/faq/sharding.txt:98
# 559e608009654b4c9e97b6aff157605a
msgid "If a shard is responding slowly, :program:`mongos` will merely wait for the shard to return results."
msgstr ""

#: ../source/faq/sharding.txt:102
# 304c8f4721db4334acc8e83e818df3cf
msgid "How does MongoDB distribute queries among shards?"
msgstr ""

#: ../source/faq/sharding.txt:106
# be610b80e4bb4e5180ea059b74bec2c1
msgid "The exact method for distributing queries to :term:`shards <shard>` in a :term:`cluster <sharded cluster>` depends on the nature of the query and the configuration of the sharded cluster. Consider a sharded collection, using the :term:`shard key` ``user_id``, that has ``last_login`` and ``email`` attributes:"
msgstr ""

#: ../source/faq/sharding.txt:112
# 266cf03e045e40f681b4e17dc297f6b4
msgid "For a query that selects one or more values for the ``user_id`` key:"
msgstr ""

#: ../source/faq/sharding.txt:115
# 197e170dff5547d99476b0613ef64ce6
msgid ":program:`mongos` determines which shard or shards contains the relevant data, based on the cluster metadata, and directs a query to the required shard or shards, and returns those results to the client."
msgstr ""

#: ../source/faq/sharding.txt:120
# 17143591cd774f0a9dede2f9fe84dd7a
msgid "For a query that selects ``user_id`` and also performs a sort:"
msgstr ""

#: ../source/faq/sharding.txt:122
# 9127337f022048778aeadc031e38b880
msgid ":program:`mongos` can make a straightforward translation of this operation into a number of queries against the relevant shards, ordered by ``user_id``. When the sorted queries return from all shards, the :program:`mongos` merges the sorted results and returns the complete result to the client."
msgstr ""

#: ../source/faq/sharding.txt:128
# 78b94410b5b740cf84ff4839dfec4620
msgid "For queries that select on ``last_login``:"
msgstr ""

#: ../source/faq/sharding.txt:130
# 105063c628394218be5617474091f3f2
msgid "These queries must run on all shards: :program:`mongos` must parallelize the query over the shards and perform a merge-sort on the ``email`` of the documents found."
msgstr ""

#: ../source/faq/sharding.txt:135
# 91c86f4960804b2981cab3a43323c754
msgid "How does MongoDB sort queries in sharded environments?"
msgstr ""

#: ../source/faq/sharding.txt:137
# 7de72fe5a51c4bd9b6026f18f6daad81
msgid "If you call the :method:`cursor.sort()` method on a query in a sharded environment, the :program:`mongod` for each shard will sort its results, and the :program:`mongos` merges each shard's results before returning them to the client."
msgstr ""

#: ../source/faq/sharding.txt:143
# d19475fb536349759b42f53028cb5b74
msgid "How does MongoDB ensure unique ``_id`` field values when using a shard key *other* than ``_id``?"
msgstr ""

#: ../source/faq/sharding.txt:145
# 26e013cf33e448a8b89254e3f6560a6e
msgid "If you do not use ``_id`` as the shard key, then your application/client layer must be responsible for keeping the ``_id`` field unique. It is problematic for collections to have duplicate ``_id`` values."
msgstr ""

#: ../source/faq/sharding.txt:150
# d4df45e79c1740b9957a771112d9b068
msgid "If you're not sharding your collection by the ``_id`` field, then you should be sure to store a globally unique identifier in that field. The default :doc:`BSON ObjectId </reference/object-id>` works well in this case."
msgstr ""

#: ../source/faq/sharding.txt:156
# a00f3c750cad47099795bcab72798e4b
msgid "I've enabled sharding and added a second shard, but all the data is still on one server. Why?"
msgstr ""

#: ../source/faq/sharding.txt:158
# 1e0cfa7ecbaa494d8997abab8e837eac
msgid "First, ensure that you've declared a :term:`shard key` for your collection. Until you have configured the shard key, MongoDB will not create :term:`chunks <chunk>`, and :term:`sharding` will not occur."
msgstr ""

#: ../source/faq/sharding.txt:162
# 0e5c4628133e4c58b3d972337a5e50e2
msgid "Next, keep in mind that the default chunk size is 64 MB. As a result, in most situations, the collection needs to have at least 64 MB of data before a migration will occur."
msgstr ""

#: ../source/faq/sharding.txt:166
# d2b7c712aaf1428a9c9a7a4c5e6d25eb
msgid "Additionally, the system which balances chunks among the servers attempts to avoid superfluous migrations. Depending on the number of shards, your shard key, and the amount of data, systems often require at least 10 chunks of data to trigger migrations."
msgstr ""

#: ../source/faq/sharding.txt:171
# 9154bcaebf7a4518bcd8907e80f1a8fd
msgid "You can run :method:`db.printShardingStatus()` to see all the chunks present in your cluster."
msgstr ""

#: ../source/faq/sharding.txt:175
# 7d38e5a2c15d4ae2b9ee7f4290e8e558
msgid "Is it safe to remove old files in the ``moveChunk`` directory?"
msgstr ""

#: ../source/faq/sharding.txt:177
# 3010629231c24d49be63313aff1dbe6b
msgid "Yes. :program:`mongod` creates these files as backups during normal :term:`shard` balancing operations. If some error occurs during a :doc:`migration </core/sharding-chunk-migration>`, these files may be helpful in recovering documents affected during the migration."
msgstr ""

#: ../source/faq/sharding.txt:182
# f243ebf1297a4496a816edaf4aa8cb2b
msgid "Once the migration has completed successfully and there is no need to recover documents from these files, you may safely delete these files. Or, if you have an existing backup of the database that you can use for recovery, you may also delete these files after migration."
msgstr ""

#: ../source/faq/sharding.txt:187
# 9f8ca4c353c84810a4690ee7409ccb7a
msgid "To determine if all migrations are complete, run :method:`sh.isBalancerRunning()` while connected to a :program:`mongos` instance."
msgstr ""

#: ../source/faq/sharding.txt:192
# 292ea5682f8946e98815e507cad86de0
msgid "How does ``mongos`` use connections?"
msgstr ""

#: ../source/faq/sharding.txt:194
# 679b11c03c8b4d59a7480865400c329f
msgid "Each client maintains a connection to a :program:`mongos` instance. Each :program:`mongos` instance maintains a pool of connections to the members of a replica set supporting the sharded cluster.  Clients use connections between :program:`mongos` and :program:`mongod` instances one at a time. Requests are not multiplexed or pipelined. When client requests complete, the :program:`mongos` returns the connection to the pool."
msgstr ""

#: ../source/faq/sharding.txt:202
# f19e4d7ea66e40f499339373c1183fc8
msgid "See the :ref:`System Resource Utilization <system-resource-utilization>` section of the :doc:`/reference/ulimit` document."
msgstr ""

#: ../source/faq/sharding.txt:207
# d8328e38492f4dc892b01c01e95a1a2e
msgid "Why does ``mongos`` hold connections open?"
msgstr ""

#: ../source/faq/sharding.txt:209
# 74adc8636b2f4f018af1121857f56a44
msgid ":program:`mongos` uses a set of connection pools to communicate with each :term:`shard`.  These pools do not shrink when the number of clients decreases."
msgstr ""

#: ../source/faq/sharding.txt:213
# 2307eded6204467084c1c54f65edc580
msgid "This can lead to an unused :program:`mongos` with a large number of open connections. If the :program:`mongos` is no longer in use, it is safe to restart the process to close existing connections."
msgstr ""

#: ../source/faq/sharding.txt:218
# 9b5907bcd09a4213b721ac98310bcd50
msgid "Where does MongoDB report on connections used by ``mongos``?"
msgstr ""

#: ../source/faq/sharding.txt:220
# 45b5fa4e782345c0b7c664b3d4fc9788
msgid "Connect to the :program:`mongos` with the :program:`mongo` shell, and run the following command:"
msgstr ""

#: ../source/faq/sharding.txt:230
# 489894ad65534b05a14109b90cc50834
msgid "What does ``writebacklisten`` in the log mean?"
msgstr ""

#: ../source/faq/sharding.txt:232
# b6a121707edb469e9f3a3a9e952cc465
msgid "The writeback listener is a process that opens a long poll to relay writes back from a :program:`mongod` or :program:`mongos` after migrations to make sure they have not gone to the wrong server.  The writeback listener sends writes back to the correct server if necessary."
msgstr ""

#: ../source/faq/sharding.txt:238
# 2f762c3b963144c4ab2cf61acbfdf0b0
msgid "These messages are a key part of the sharding infrastructure and should not cause concern."
msgstr ""

#: ../source/faq/sharding.txt:242
# aeb8c593fb2742e5aaf3eafba34ab913
msgid "How should administrators deal with failed migrations?"
msgstr ""

#: ../source/faq/sharding.txt:244
# 8e845168060f4fcb822ac7c558ed111f
msgid "Failed migrations require no administrative intervention. Chunk migrations always preserve a consistent state. If a migration fails to complete for some reason, the :term:`cluster` retries the operation. When the migration completes successfully, the data resides only on the new shard."
msgstr ""

#: ../source/faq/sharding.txt:251
# 6a9f21d017f14853acec72a11cc480c5
msgid "What is the process for moving, renaming, or changing the number of config servers?"
msgstr ""

#: ../source/faq/sharding.txt:253
# 581396bc7d4d41c2a34cabc5a878ec90
msgid "See :doc:`/administration/sharded-clusters` for information on migrating and replacing config servers."
msgstr ""

#: ../source/faq/sharding.txt:257
# 2ec9b98a595d49ada3df96d898cb958c
msgid "When do the ``mongos`` servers detect config server changes?"
msgstr ""

#: ../source/faq/sharding.txt:259
# a09e90bec9294f74a9b1120f941f5997
msgid ":program:`mongos` instances maintain a cache of the :term:`config database` that holds the metadata for the :term:`sharded cluster`. This metadata includes the mapping of :term:`chunks <chunk>` to :term:`shards <shard>`."
msgstr ""

#: ../source/faq/sharding.txt:264
# b7b9092ceff54d08a5fb0cd31d79f13c
msgid ":program:`mongos` updates its cache lazily by issuing a request to a shard and discovering that its metadata is out of date.  There is no way to control this behavior from the client, but you can run the :dbcommand:`flushRouterConfig` command against any :program:`mongos` to force it to refresh its cache."
msgstr ""

#: ../source/faq/sharding.txt:271
# 971174d21a2e4832bed2a11ac4e8db8c
msgid "Is it possible to quickly update ``mongos`` servers after updating a replica set configuration?"
msgstr ""

#: ../source/faq/sharding.txt:273
# 3d00ef06119c46bc9d0061b62a4cc831
msgid "The :program:`mongos` instances will detect these changes without intervention over time. However, if you want to force the :program:`mongos` to reload its configuration, run the :dbcommand:`flushRouterConfig` command against to each :program:`mongos` directly."
msgstr ""

#: ../source/faq/sharding.txt:280
# c16e5d0c752e4a319f96de7c795ed382
msgid "What does the ``maxConns`` setting on ``mongos`` do?"
msgstr ""

#: ../source/faq/sharding.txt:282
# 744022814b4444649ca81e87b0ac7417
msgid "The :setting:`~net.maxIncomingConnections` option limits the number of connections accepted by :program:`mongos`."
msgstr ""

#: ../source/faq/sharding.txt:285
# f54c1d187f36493ca8d8be8a9debc89f
msgid "If your client driver or application creates a large number of connections but allows them to time out rather than closing them explicitly, then it might make sense to limit the number of connections at the :program:`mongos` layer."
msgstr ""

#: ../source/faq/sharding.txt:290
# d2656ff1f4f9458784548ddb78c52c7d
msgid "Set :setting:`~net.maxIncomingConnections` to a value slightly higher than the maximum number of connections that the client creates, or the maximum size of the connection pool. This setting prevents the :program:`mongos` from causing connection spikes on the individual :term:`shards <shard>`. Spikes like these may disrupt the operation and memory allocation of the :term:`sharded cluster`."
msgstr ""

#: ../source/faq/sharding.txt:298
# 2ec30b7c56934553b89ee1f59150546c
msgid "How do indexes impact queries in sharded systems?"
msgstr ""

#: ../source/faq/sharding.txt:300
# e2e3deee8a8f4e3792ac6f4c1789a1bb
msgid "If the query does not include the :term:`shard key`, the :program:`mongos` must send the query to all shards as a \"scatter/gather\" operation. Each shard will, in turn, use *either* the shard key index or another more efficient index to fulfill the query."
msgstr ""

#: ../source/faq/sharding.txt:305
# 49d9d4df665b4ec8be8c6ecd47c1a697
msgid "If the query includes multiple sub-expressions that reference the fields indexed by the shard key *and* the secondary index, the :program:`mongos` can route the queries to a specific shard and the shard will use the index that will allow it to fulfill most efficiently. See `this presentation <http://www.slideshare.net/mongodb/how-queries-work-with-sharding>`_ for more information."
msgstr ""

#: ../source/faq/sharding.txt:313
# 55ec69ddec8a4a849d1ce70e900f4f8b
msgid "Can shard keys be randomly generated?"
msgstr ""

#: ../source/faq/sharding.txt:315
# 007287ebe498439096ff347045a98ab3
msgid ":term:`Shard keys <shard key>` can be random. Random keys ensure optimal distribution of data across the cluster."
msgstr ""

#: ../source/faq/sharding.txt:318
# 1e6f8eeeb9254fd4b8d55b68e0bfe1d7
msgid ":term:`Sharded clusters <sharded cluster>`, attempt to route queries to *specific* shards when queries include the shard key as a parameter, because these directed queries are more efficient. In many cases, random keys can make it difficult to direct queries to specific shards."
msgstr ""

#: ../source/faq/sharding.txt:327
# 44f474429afd4aeab9c858833662baee
msgid "Can shard keys have a non-uniform distribution of values?"
msgstr ""

#: ../source/faq/sharding.txt:329
# 5f6a5f587b67461dad823131b1aa3a0c
msgid "Yes. There is no requirement that documents be evenly distributed by the shard key."
msgstr ""

#: ../source/faq/sharding.txt:332
# 743e8d295c27410199c39dba9d95d77e
msgid "However, documents that have the same shard key *must* reside in the same *chunk* and therefore on the same server. If your sharded data set has too many documents with the exact same shard key you will not be able to distribute *those* documents across your sharded cluster."
msgstr ""

#: ../source/faq/sharding.txt:340
# 3f16ad0d47714614838078600e46fb71
msgid "Can you shard on the ``_id`` field?"
msgstr ""

#: ../source/faq/sharding.txt:342
# a3812f0e651644689442ce4a36bb4e1f
msgid "You can use any field for the shard key. The ``_id`` field is a common shard key."
msgstr ""

#: ../source/faq/sharding.txt:345
# 94c3d565476e441b82f45ba43a6fd921
msgid "Be aware that ``ObjectId()`` values, which are the default value of the ``_id`` field, increment as a timestamp. As a result, when used as a shard key, all new documents inserted into the collection will initially belong to the same chunk on a single shard. Although the system will eventually divide this chunk and migrate its contents to distribute data more evenly, at any moment the cluster can only direct insert operations at a single shard. This can limit the throughput of inserts. If most of your write operations are updates, this limitation should not impact your performance. However, if you have a high insert volume, this may be a limitation."
msgstr ""

#: ../source/faq/sharding.txt:356
# 078202af883b4d749bf57c8427e6e39c
msgid "To address this issue, MongoDB 2.4 provides :ref:`hashed shard keys <sharding-hashed-sharding>`."
msgstr ""

#: ../source/faq/sharding.txt:360
# 96081867682346f28b70774a4bba226b
msgid "What do ``moveChunk commit failed`` errors mean?"
msgstr ""

#: ../source/faq/sharding.txt:362
# ac65e4b270fa4c6787a4821cb50cfb4b
msgid "At the end of a :ref:`chunk migration <sharding-chunk-migration>`, the :term:`shard` must connect to the :term:`config database` to update the chunk's record in the cluster metadata. If the :term:`shard` fails to connect to the :term:`config database`, MongoDB reports the following error:"
msgstr ""

#: ../source/faq/sharding.txt:373
# 3c4b92f2b3f949b581a2b267ce291ad8
msgid "When this happens, the :term:`primary` member of the shard's replica set then terminates to protect data consistency. If a :term:`secondary` member can access the config database, data on the shard becomes accessible again after an election."
msgstr ""

#: ../source/faq/sharding.txt:378
# ce2c0f34825940d59f6260b1b017c6e7
msgid "The user will need to resolve the chunk migration failure independently. If you encounter this issue, contact the `MongoDB User Group <http://groups.google.com/group/mongodb-user>`_ or :about:`MongoDB Support </support>` to address this issue."
msgstr ""

#: ../source/faq/sharding.txt:384
# eb6e36aff27641f686ea35d746a06929
msgid "How does draining a shard affect the balancing of uneven chunk distribution?"
msgstr ""

#: ../source/faq/sharding.txt:386
# 6f2ee90e2fd24869b2b185bc3752969c
msgid "The sharded cluster balancing process controls both migrating chunks from decommissioned shards (i.e. draining) and normal cluster balancing activities. Consider the following behaviors for different versions of MongoDB in situations where you remove a shard in a cluster with an uneven chunk distribution:"
msgstr ""

#: ../source/faq/sharding.txt:392
# 79c4672de2d6444ebc172444ae39adff
msgid "After MongoDB 2.2, the balancer first removes the chunks from the draining shard and then balances the remaining uneven chunk distribution."
msgstr ""

#: ../source/faq/sharding.txt:396
# 4d6439260f084b45827f133da37eb0c0
msgid "Before MongoDB 2.2, the balancer handles the uneven chunk distribution and *then* removes the chunks from the draining shard."
msgstr ""

