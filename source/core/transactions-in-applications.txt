
.. _transactions-drivers:

===========
Drivers API
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Callback API vs Core API
------------------------

The :ref:`txn-callback-api`:

- Starts a transaction, executes the specified operations, and commits
  (or aborts on error).

- Automatically incorporates error handling logic for
  :ref:`transient-transaction-error` and
  :ref:`unknown-transaction-commit-result`.

The :ref:`txn-core-api`:

- Requires explicit call to start the transaction and commit the
  transacdtion.

- Does not incorporate error handling logic for
  :ref:`transient-transaction-error` and
  :ref:`unknown-transaction-commit-result`, and instead provides the
  flexibility to incorporate custom error handling for these errors.

.. _txn-callback-api:

Callback API
-------------

The new callback API incorporates logic:

- To retry the transaction as a whole if the transaction encounters a
  :ref:`transient-transaction-error`.

- To retry the commit operation if the commit encounters an
  :ref:`unknown-transaction-commit-result`.

.. tabs::

   tabs:

     - id: python
       name: Python

       content: |
                 
          .. important::
          
             - For transactions on MongoDB 4.2 deployments (replica
               sets and sharded clusters), clients :red:`must` use
               MongoDB drivers updated for MongoDB 4.2.
          
             - When using the drivers, each operation in the
               transaction must be associated with the session (i.e.
               pass in the session to each operation).

          The example uses the new callback API for working with
          transactions, which starts a transaction, executes the
          specified operations, and commits (or aborts on error). The
          new callback API incorporates retry logic for
          :ref:`transient-transaction-error` or
          :ref:`unknown-transaction-commit-result` commit errors.

          .. code-block:: python

             # For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
             # uriString = 'mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl'
             # For a sharded cluster, connect to the mongos instances; e.g.
             # uriString = 'mongodb://mongos0.example.com:27017,mongos1.example.com:27017/admin'

             client = MongoClient(uriString)

             my_write_concern_majority = WriteConcern('majority', wtimeout=1000)

             # Prereq: Create collections. CRUD operations in transactions must be on existing collections.
             
             client.get_database(
                 'mydb1',
                 write_concern=my_write_concern_majority).foo.insert_one({'abc': 0})
             client.get_database(
                 'mydb2',
                 write_concern=my_write_concern_majority).bar.insert_one({'xyz': 0})

             # Step 1: Define the callback that specifies the sequence of operations to perform inside the transactions.

             def callback(my_session):
                 collection_one = my_session.client.mydb1.foo
                 collection_two = my_session.client.mydb2.bar
                 
                 # Important:: You must pass the session to the operations.
                 
                 collection_one.insert_one({'abc': 1}, session=my_session)
                 collection_two.insert_one({'xyz': 999}, session=my_session)

             #. Step 2: Start a client session.

             with client.start_session() as session:

                 # Step 3: Use with_transaction to start a transaction, execute the callback, and commit (or abort on error).

                 session.with_transaction(callback,
                                          read_concern=ReadConcern('local'),
                                          write_concern=my_write_concern_majority,
                                          read_preference=ReadPreference.PRIMARY)

     - id: java-sync
       name: Java (Sync)

       content: |

          .. important::
          
             - For transactions on MongoDB 4.2 deployments (replica
               sets and sharded clusters), clients :red:`must` use
               MongoDB drivers updated for MongoDB 4.2.
          
             - When using the drivers, each operation in the
               transaction must be associated with the session (i.e.
               pass in the session to each operation).

          The example uses the new callback API for working with
          transactions, which starts a transaction, executes the
          specified operations, and commits (or aborts on error). The
          new callback API incorporates retry logic for
          :ref:`transient-transaction-error` or
          :ref:`unknown-transaction-commit-result` commit errors.

          .. code-block:: java

             /*
               For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
               String uri = "mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl";
               For a sharded cluster, connect to the mongos instances; e.g.
               String uri = "mongodb://mongos0.example.com:27017,mongos1.example.com:27017:27017/admin";
              */

             final MongoClient client = MongoClients.create(uri);

             /*
                 Prereq: Create collections. CRUD operations in transactions must be on existing collections.
              */

             client.getDatabase("mydb1").getCollection("foo")
                     .withWriteConcern(WriteConcern.MAJORITY).insertOne( new Document("abc", 0));
             client.getDatabase("mydb2").getCollection("bar")
                     .withWriteConcern(WriteConcern.MAJORITY).insertOne( new Document("xyz", 0));

             /* Step 1: Start a client session. */

             final ClientSession clientSession = client.startSession();

             /* Step 2: Optional. Define options to use for the transaction. */

             TransactionOptions txnOptions = TransactionOptions.builder()
                     .readPreference(ReadPreference.primary())
                     .readConcern(ReadConcern.LOCAL)
                     .writeConcern(WriteConcern.MAJORITY)
                     .build();

             /* Step 3: Define the sequence of operations to perform inside the transactions. */

             TransactionBody txnBody = new TransactionBody<String>() {
                 public String execute() {
                     MongoCollection<Document> coll1 = client.getDatabase("mydb1").getCollection("foo");
                     MongoCollection<Document> coll2 = client.getDatabase("mydb2").getCollection("bar");

                     /*
                        Important:: You must pass the session to the operations..
                      */

                     coll1.insertOne(clientSession, new Document("abc", 1));
                     coll2.insertOne(clientSession, new Document("xyz", 999));

                     return "Inserted into collections in different databases";
                 }
             };
             try {
                 /* 
                     Step 4: Use .withTransaction() to start a transaction, 
                     execute the callback, and commit (or abort on error).
                  */
                                  
                 clientSession.withTransaction(txnBody, txnOptions);
             } catch (RuntimeException e) {
                 // some error handling
             } finally {
                 clientSession.close();
             }

     - id: nodejs
       name: Node.js
       content: |

          .. important::

             - For transactions on MongoDB 4.2 deployments (replica
               sets and sharded clusters), clients :red:`must` use
               MongoDB drivers updated for MongoDB 4.2.
          
             - When using the drivers, each operation in the
               transaction must be associated with the session (i.e.
               pass in the session to each operation).

          The example uses the new callback API for working with
          transactions, which starts a transaction, executes the
          specified operations, and commits (or aborts on error). The
          new callback API incorporates retry logic for
          :ref:`transient-transaction-error` or
          :ref:`unknown-transaction-commit-result` commit errors.

          .. code-block:: javascript

             /*
               For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
               uri = 'mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl';
               For a sharded cluster, connect to the mongos instances; e.g.
               uri = 'mongodb://mongos0.example.com:27017,mongos1.example.com:27017:27017/admin';
              */
            
             const client = new MongoClient(uri);
             await client.connect();

             const session = client.startSession({defaultTransactionOptions: {
                readConcern: { level: 'local' },
                writeConcern: { w: 'majority' },
                readPreference: 'primary'
             }});

             // Note: the `withTransaction` method only supports functions that return a `Promise`
             // Prerequisites: Assumes collections already exist. CRUD operations in transactions must be on existing collections
   
             try {
               await session.withTransaction(async function() {
               

                  const coll1 = client.db('mydb1').collection('foo');
                  const coll2 = client.db('mydb2').collection('bar');              
                  // Important:: You must pass the session to the operations.

                  await coll1.insertOne({ abc: 1 }, { session });
                  await coll2.insertOne({ xyz: 999 }, { session });
               });
             } catch (err) {
               // transaction failed after attempted retry
               // some error handling
             }

.. _txn-core-api:

Core API
--------

The core transaction API does not incorporate retry logic for errors
labeled:

- :ref:`transient-transaction-error`. If an operation in a transaction
  returns an error labeled :ref:`transient-transaction-error`, the
  transaction as a whole can be retried.
   
  To handle :ref:`transient-transaction-error`, applications should
  explicitly incorporate retry logic for the error.

- :ref:`unknown-transaction-commit-result`. If the commit returns an
  error labeled :ref:`unknown-transaction-commit-result`, the commit
  can be retried. 

  To handle :ref:`unknown-transaction-commit-result`,
  applications should explicitly incorporate retry logic for the error.

The following example incorporates logic to retry the transaction for
transient errors and retry the commit for unknown commit error:

.. include:: /includes/driver-examples/driver-example-transactions-retry-3.rst

Driver Versions
---------------

*For transactions on MongoDB 4.2 deployments (replica sets and sharded
clusters)*, clients :red:`must` use MongoDB drivers updated for MongoDB
4.2:

.. include:: /includes/list-4.2-drivers.rst

*For transactions on MongoDB 4.0 replica sets*, clients require MongoDB
drivers updated for MongoDB 4.0 or later.

.. include:: /includes/list-4.0-drivers.rst


.. _transactions-retry:

Transaction Error Handling
---------------------------

Regardless of the database system, whether MongoDB or relational
databases, applications should take measures to handle errors during
transaction commits and incorporate retry logic for transactions.

.. _transient-transaction-error:

``"TransientTransactionError"``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The *individual* write operations inside the transaction are not
retryable, regardless of the value of :urioption:`retryWrites`. If an
operation encounters an error `associated with the label
<https://github.com/mongodb/specifications/blob/master/source/transactions/transactions.rst#error-labels>`_ 
``"TransientTransactionError"``, such as when the primary steps down,
the transaction as a whole can be retried.

- The callback API incorporates retry logic for
  ``"TransientTransactionError"``.

- The core transaction API does not incorporate retry logic
  for ``"TransientTransactionError"``. To handle
  ``"TransientTransactionError"``, applications should explicitly
  incorporate retry logic for the error.

.. _unknown-transaction-commit-result:

``"UnknownTransactionCommitResult"``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The commit operations are :doc:`retryable write operations
</core/retryable-writes>`. If the commit operation encounters an error,
MongoDB drivers retry the commit regardless of the value of
:urioption:`retryWrites`.

If the commit operation encounters an error labeled
``"UnknownTransactionCommitResult"``, the commit can be retried.

- The callback API incorporates retry logic for
  ``"UnknownTransactionCommitResult"``.

- The core transaction API does not incorporate retry logic for
  ``"UnknownTransactionCommitResult"``. To handle
  ``"UnknownTransactionCommitResult"``, applications should explicitly
  incorporate retry logic for the error.


Driver Version Errors
~~~~~~~~~~~~~~~~~~~~~

On sharded clusters with multiple :binary:`~bin.mongos` instances,
performing transactions with drivers updated for MongoDB 4.0 (instead
of MongoDB 4.2) will fail and can result in errors, including:

.. note::

   Your driver may return a different error. Refer to your driver's
   documentation for details.

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Error Code
     - Error Message

   * - 251
     - ``cannot continue txnId -1 for session ... with txnId 1``

   * - 50940
     - ``cannot commit with no participants``


*For transactions on MongoDB 4.2 deployments (replica sets and sharded
clusters)*, use the MongoDB drivers updated for MongoDB 4.2

Additional Information
----------------------

The following :binary:`~bin.mongo` shell methods are available for
transactions:

- :method:`Session.startTransaction()`

- :method:`Session.commitTransaction()`

- :method:`Session.abortTransaction()`
