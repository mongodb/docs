# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-chunk-migration.txt:5
# 1579af4762224466a50d30d37b245327
msgid "Chunk Migration Across Shards"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:9
# b19951389f234330888fcabe2056514c
msgid "Chunk migration moves the chunks of a sharded collection from one shard to another and is part of the :doc:`balancer </core/sharding-balancing>` process."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:18
# 5f1d9f1d8628489ab47d2ea75141f61d
msgid "Chunk Migration"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:20
# d316a4c11ce142c781abaac750004820
msgid "MongoDB migrates chunks in a :term:`sharded cluster` to distribute the chunks of a sharded collection evenly among shards. Migrations may be either:"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:24
# 294f1abd50fc455eaa94e20932378787
msgid "Manual. Only use manual migration in limited cases, such as to distribute data during bulk inserts. See :doc:`Migrating Chunks Manually </tutorial/migrate-chunks-in-sharded-cluster>` for more details."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:28
# 81dfce1418ec45279024c3a0629d7cb7
msgid "Automatic. The :doc:`balancer </core/sharding-balancing>` process automatically migrates chunks when there is an uneven distribution of a sharded collection's chunks across the shards. See :ref:`Migration Thresholds <sharding-migration-thresholds>` for more details."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:33
# c53a5167520d4876af3411de3d1c5134
msgid "All chunk migrations use the following procedure:"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:35
# 5d6ba215f6f54e31b505c295e967580a
msgid "The balancer process sends the :dbcommand:`moveChunk` command to the source shard."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:38
# 0be579df6cc2424a8f534c52b1183d07
msgid "The source starts the move with an internal :dbcommand:`moveChunk` command. During the migration process, operations to the chunk route to the source shard. The source shard is responsible for incoming write operations for the chunk."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:43
# ef93b7cb13a0440c945964ba902f4b79
msgid "The destination shard builds any indexes required by the source that do not exist on the destination."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:46
# 9f514c40aa2744088e13cabe8a581bd0
msgid "The destination shard begins requesting documents in the chunk and starts receiving copies of the data."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:49
# b64a2b1fdbc44d41b9e64e09eab4ad91
msgid "After receiving the final document in the chunk, the destination shard starts a synchronization process to ensure that it has the changes to the migrated documents that occurred during the migration."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:53
# 9d58f4be74c14970b6dc2ca9913a5623
msgid "When fully synchronized, the destination shard connects to the :term:`config database` and updates the cluster metadata with the new location for the chunk."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:57
# 649f2bc73dcf4bee9570b4b80448275a
msgid "After the destination shard completes the update of the metadata, and once there are no open cursors on the chunk, the source shard deletes its copy of the documents."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:63
# fd27fdcfdf1548299335065d4a961cd0
msgid "If the balancer needs to perform additional chunk migrations from the source shard, the balancer can start the next chunk migration without waiting for the current migration process to finish this deletion step. See :ref:`chunk-migration-queuing`."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:68
# 7e56417da54a4147b0fd106dcce224b8
msgid "The migration process ensures consistency and maximizes the availability of chunks during balancing."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:74
# 3276aa277e4349bb9d344ebde9de27b3
msgid "Chunk Migration Queuing"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:78
# 7c4492d4e6e24b3e9983a392f080058a
msgid "To migrate multiple chunks from a shard, the balancer migrates the chunks one at a time. However, the balancer does not wait for the current migration's delete phase to complete before starting the next chunk migration. See :ref:`sharding-chunk-migration` for the chunk migration process and the delete phase."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:84
# ae0870b32da840fd9966fac8eaeb1223
msgid "This queuing behavior allows shards to unload chunks more quickly in cases of heavily imbalanced cluster, such as when performing initial data loads without pre-splitting and when adding new shards."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:88
# 78d240087d12406bacb23d19fa955860
msgid "This behavior also affect the :dbcommand:`moveChunk` command, and migration scripts that use the :dbcommand:`moveChunk` command may proceed more quickly."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:92
# da70f7e19f6f40d895d30193b194842a
msgid "In some cases, the delete phases may persist longer. If multiple delete phases are queued but not yet complete, a crash of the replica set's primary can orphan data from multiple migrations."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:99
# db2e1befd28a41a99f5e8e1eb2e8626b
msgid "Chunk Migration and Replication"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:101
# af608ecbb50f465fbdc8787edf7e930d
msgid "The default value ``secondaryThrottle`` became ``true`` for all chunk migrations."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:105
# 7c83797e2f504c918209abc0d8ad9756
msgid "The new ``writeConcern`` field in the balancer configuration  document allows you to specify a :doc:`write concern </core/write-concern>` semantics the ``_secondaryThrottle`` option."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:110
# 95957cee9ce142cba970cdc65fc4aeba
msgid "By default, each document operation during chunk migration propagates to at least one secondary before the balancer proceeds with the next document, which is equivalent to a write concern of ``{ w: 1 }``. You can set the ``writeConcern`` option on the balancer configuration to set different write concern semantics."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:116
# 0d325a5d168b4d8ead5345227080a160
msgid "To override this behavior and allow the balancer to continue without waiting for replication to a secondary, set the ``_secondaryThrottle`` parameter to ``false``. See :ref:`sharded-cluster-config-secondary-throttle` to update the ``_secondaryThrottle`` parameter for the balancer."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:121
# 32b445a2f64f4a15b61ee29d180bcb5b
msgid "For the :dbcommand:`moveChunk` command, the ``secondaryThrottle`` parameter is independent of the ``_secondaryThrottle`` parameter for the balancer."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:125
# f0ad1ab0a2bf47bdb6a61d70a1aca96a
msgid "Independent of the ``secondaryThrottle`` setting, certain phases of the chunk migration have the following replication policy:"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:128
# 87686b162bf940258aea94397977d2a2
msgid "MongoDB briefly pauses all application writes to the source shard before updating the config servers with the new location for the chunk, and resumes the application writes after the update. The chunk move requires all writes to be acknowledged by majority of the members of the replica set both before and after committing the chunk move to config servers."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:135
# 8edef5f885b041a188c62b60e34da534
msgid "When an outgoing chunk migration finishes and cleanup occurs, all writes must be replicated to a majority of servers before further cleanup (from other outgoing migrations) or new incoming migrations can proceed."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:142
# 4a7ab532bf024eaba94c60b1805fa4ff
msgid "In previous versions, the balancer did not wait for the document move to replicate to a secondary. For details, see :v2.2:`Secondary Throttle in the v2.2 Manual </tutorial/configure-sharded-cluster-balancer/#sharded-cluster-config-secondary-throttle>`."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:150
# 40b01f76f1654e819fb8b4782dbe09ee
msgid "Jumbo Chunks"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:152
# 18e1c46284b54f70af9cc19a7d8cef87
msgid "During chunk migration, if the chunk exceeds the :ref:`specified chunk size <sharding-chunk-size>` or if the number of documents in the chunk exceeds :limit:`Maximum Number of Documents Per Chunk to Migrate`, MongoDB does not migrate the chunk. Instead, MongoDB attempts to :doc:`split </core/sharding-chunk-splitting>` the chunk. If the split is unsuccessful, MongoDB labels the chunk as *jumbo* to avoid repeated attempts to migrate the chunk."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:1
# 918e2f2dc44249f0a97121d58e2fca29
msgid "balancing"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:1
# 918e2f2dc44249f0a97121d58e2fca29
msgid "migration"
msgstr ""

