# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2013-12-16 22:40+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# c95ae89eadaf42a0af8e741f3e2a4fb7
#: ../source/tutorial/model-tree-structures.txt:7
msgid "Model Tree Structures in MongoDB"
msgstr ""

# 97e78925fb33414bae5a9d76cc730ee1
#: ../source/tutorial/model-tree-structures.txt:9
msgid ""
"To model hierarchical or nested data relationships, you can use "
"references to implement tree-like structures. The following *Tree* "
"pattern examples model book categories that have hierarchical "
"relationships."
msgstr ""

# 3c2ef00eb7a64aa08bdf0c3be81d7d2c
#: ../source/tutorial/model-tree-structures.txt:15
msgid "Model Tree Structures with Child References"
msgstr ""

# 6d90231e81654296a1a8fce3076ada20
#: ../source/tutorial/model-tree-structures.txt:17
msgid "(:doc:`link </tutorial/model-tree-structures-with-child-references>`)"
msgstr ""

# ad0892ea2a4a4dd195a48c94ed76e867
#: ../source/tutorial/model-tree-structures-with-child-references.txt:3
msgid ""
"The *Child References* pattern stores each tree node in a document; in "
"addition to the tree node, document stores in an array the id(s) of the "
"node's children."
msgstr ""

# b86bbedc04294d7893295b37fae82335
# b920036372af4adaa6e718ce96a90720
# 5e2fbf1a2eb94ddd8416d359225c72b9
# c8918290278f4e55a720d1834b0460a1
# 46ebae04e2754130a4c900fbc5ff250a
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:7
#: ../source/tutorial/model-tree-structures-with-child-references.txt:7
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:11
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:11
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:7
msgid "Consider the following hierarchy of categories:"
msgstr ""

# f484469e87514546892d663aa28e63d8
#: ../source/tutorial/model-tree-structures-with-child-references.txt:11
msgid ""
"The following example models the tree using *Child References*, storing "
"the reference to the node's children in the field ``children``:"
msgstr ""

# e28ee16f1d4141b4860785f8eb91b191
#: ../source/tutorial/model-tree-structures-with-child-references.txt:23
msgid ""
"The query to retrieve the immediate children of a node is fast and "
"straightforward:"
msgstr ""

# 97ce10e5c62443e1b5b619987deabd48
#: ../source/tutorial/model-tree-structures-with-child-references.txt:30
msgid ""
"You can create an index on the field ``children`` to enable fast search "
"by the child nodes:"
msgstr ""

# cab1719a16df4d25aa6f6c26e70627b1
#: ../source/tutorial/model-tree-structures-with-child-references.txt:37
msgid ""
"You can query for a node in the ``children`` field to find its parent "
"node as well as its siblings:"
msgstr ""

# 02fdcd91ec7c4a9aa1268368ba7f345f
#: ../source/tutorial/model-tree-structures-with-child-references.txt:44
msgid ""
"The *Child References* pattern provides a suitable solution to tree "
"storage as long as no operations on subtrees are necessary. This pattern "
"may also provide a suitable solution for storing graphs where a node may "
"have multiple parents."
msgstr ""

# 0dbbd81bfecf4a3f86478cdb6e46ccc7
#: ../source/tutorial/model-tree-structures.txt:23
msgid "Model Tree Structures with Parent References"
msgstr ""

# 60c01b6ff3db45058eed1297db86dd38
#: ../source/tutorial/model-tree-structures.txt:25
msgid "(:doc:`link </tutorial/model-tree-structures-with-parent-references>`)"
msgstr ""

# 3f094c754ff44d258b118c4fa5ea0d06
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:3
msgid ""
"The *Parent References* pattern stores each tree node in a document; in "
"addition to the tree node, the document stores the id of the node's "
"parent."
msgstr ""

# 327de927b70e47dc84d69fcc378d8887
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:12
msgid ""
"The following example models the tree using *Parent References*, storing "
"the reference to the parent category in the field ``parent``:"
msgstr ""

# e23e35aab66a42a9b77333e36342bcb9
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:24
msgid "The query to retrieve the parent of a node is fast and straightforward:"
msgstr ""

# e5ce565b0dc84abc8375c00b71d5fea4
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:31
msgid ""
"You can create an index on the field ``parent`` to enable fast search by "
"the parent node:"
msgstr ""

# dc5f1d5e0c7b4cce9f57dc6085016e93
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:38
msgid ""
"You can query by the ``parent`` field to find its immediate children "
"nodes:"
msgstr ""

# 856326f95c11480dadf637a666fecc9b
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:45
msgid ""
"The *Parent Links* pattern provides a simple solution to tree storage but"
" requires multiple queries to retrieve subtrees."
msgstr ""

# 251b947f8e15437faa43520b59c6e460
#: ../source/tutorial/model-tree-structures.txt:31
msgid "Model Tree Structures with an Array of Ancestors"
msgstr ""

# ee81a71d87f042c2ace6eb2f231d5a03
#: ../source/tutorial/model-tree-structures.txt:33
msgid "(:doc:`link </tutorial/model-tree-structures-with-ancestors-array>`)"
msgstr ""

# 8d2fb559317a4f26a3faf1791ce6b64e
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:3
msgid ""
"The *Array of Ancestors* pattern stores each tree node in a document; in "
"addition to the tree node, document stores in an array the id(s) of the "
"node's ancestors or path."
msgstr ""

# d945dc01b9cf4f35b2b4b48eb64738b9
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:11
msgid ""
"The following example models the tree using *Array of Ancestors*. In "
"addition to the ``ancestors`` field, these documents also store the "
"reference to the immediate parent category in the ``parent`` field:"
msgstr ""

# 1f8d22e3381f483e999c887c955bcb63
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:24
msgid ""
"The query to retrieve the ancestors or path of a node is fast and "
"straightforward:"
msgstr ""

# 6e4f838caea34be183718c95f8f55201
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:31
msgid ""
"You can create an index on the field ``ancestors`` to enable fast search "
"by the ancestors nodes:"
msgstr ""

# 63ace163d1e0400983f59b655077bd5e
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:38
msgid "You can query by the field ``ancestors`` to find all its descendants:"
msgstr ""

# 730fada6efa34825aa29ccc891d670bf
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:44
msgid ""
"The *Array of Ancestors* pattern provides a fast and efficient solution "
"to find the descendants and the ancestors of a node by creating an index "
"on the elements of the ancestors field. This makes *Array of Ancestors* a"
" good choice for working with subtrees."
msgstr ""

# b3c0d9d7549f4d44ba58954fc0debfbf
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:49
msgid ""
"The *Array of Ancestors* pattern is slightly slower than the "
":doc:`Materialized Paths </tutorial/model-tree-structures-with-"
"materialized-paths>` pattern but is more straightforward to use."
msgstr ""

# 60eb9e6fb39d475dba053aad430f8817
#: ../source/tutorial/model-tree-structures.txt:39
msgid "Model Tree Structures with Materialized Paths"
msgstr ""

# 3f73ce9dd57a41e084b1ca5db7aba948
#: ../source/tutorial/model-tree-structures.txt:41
msgid "(:doc:`link </tutorial/model-tree-structures-with-materialized-paths>`)"
msgstr ""

# e1eeed19bc1a4db985132487655ec013
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:3
msgid ""
"The *Materialized Paths* pattern stores each tree node in a document; in "
"addition to the tree node, document stores as a string the id(s) of the "
"node's ancestors or path. Although the *Materialized Paths* pattern "
"requires additional steps of working with strings and regular "
"expressions, the pattern also provides more flexibility in working with "
"the path, such as finding nodes by partial paths."
msgstr ""

# 49d4b1afcbd344adb911c1f087c58938
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:15
msgid ""
"The following example models the tree using *Materialized Paths*, storing"
" the path in the field ``path``; the path string uses the comma ``,`` as "
"a delimiter:"
msgstr ""

# ae2badc5d2e64671bc46efd9259e98f1
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:28
msgid "You can query to retrieve the whole tree, sorting by the field ``path``:"
msgstr ""

# 6f9ca037a8d646f68bf312602013164d
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:35
msgid ""
"You can use regular expressions on the ``path`` field to find the "
"descendants of ``Programming``:"
msgstr ""

# 78eaec0e8ec8464babaaf09f7a44b82d
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:42
msgid ""
"You can also retrieve the descendants of ``Books`` where the ``Books`` is"
" also at the topmost level of the hierarchy:"
msgstr ""

# 12d852b8b4f54b6ea3a17e124b901ec0
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:49
msgid "To create an index on the field ``path`` use the following invocation:"
msgstr ""

# 5dfdcdaf44774e438ba7648441608bd6
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:56
msgid "This index may improve performance depending on the query:"
msgstr ""

# 9066dbbc29b24547ae935983a7cd2dda
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:58
msgid ""
"For queries from the root ``Books`` sub-tree (e.g. ``/^,Books,/`` or "
"``/^,Books,Programming,/``), an index on the ``path`` field improves the "
"query performance significantly."
msgstr ""

# 18d4f85674f64c2fa83b49c269dcd279
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:62
msgid ""
"For queries of sub-trees where the path from the root is not provided in "
"the query (e.g. ``/,Databases,/``), or similar queries of sub-trees, "
"where the node might be in the middle of the indexed string, the query "
"must inspect the entire index."
msgstr ""

# abd7ffff79274e3fa8ee57b24b5cbd73
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:67
msgid ""
"For these queries an index *may* provide some performance improvement "
"*if* the index is significantly smaller than the entire collection."
msgstr ""

# 9cb4a65adff1431498b06bc64c6a5917
#: ../source/tutorial/model-tree-structures.txt:47
msgid "Model Tree Structures with Nested Sets"
msgstr ""

# 1cae960b25ff41dab77ced5799a3e615
#: ../source/tutorial/model-tree-structures.txt:49
msgid "(:doc:`link </tutorial/model-tree-structures-with-nested-sets>`)"
msgstr ""

# 03f97ec484e34bbdb7aed44fd95c5226
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:3
msgid ""
"The *Nested Sets* pattern identifies each node in the tree as stops in a "
"round-trip traversal of the tree. The application visits each node in the"
" tree twice; first during the initial trip, and second during the return "
"trip. The *Nested Sets* pattern stores each tree node in a document; in "
"addition to the tree node, document stores the id of node's parent, the "
"node's initial stop in the ``left`` field, and its return stop in the "
"``right`` field."
msgstr ""

# c597fcaf04a74dcf87f57c0be7fa0653
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:15
msgid "The following example models the tree using *Nested Sets*:"
msgstr ""

# d49bfb526193428bbfa3b14bb9cca9e8
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:26
msgid "You can query to retrieve the descendants of a node:"
msgstr ""

# 4284a85ca8bb4fe48275884f20e7d48e
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:33
msgid ""
"The *Nested Sets* pattern provides a fast and efficient solution for "
"finding subtrees but is inefficient for modifying the tree structure. As "
"such, this pattern is best for static trees that do not change."
msgstr ""

# 8244942442ae4c64ba7c0710b5685e3d
#~ msgid ""
#~ "For queries of the ``Books`` sub-"
#~ "tree (e.g. ``/^,Books,/``) an index on"
#~ " the ``path`` field improves the "
#~ "query performance significantly."
#~ msgstr ""

# afbff193e7544b8c8b53770e1534f290
#~ msgid ""
#~ "For queries of the ``Programming`` "
#~ "sub-tree (e.g. ``/,Programming,/``), or "
#~ "similar queries of sub-tress, where "
#~ "the node might be in the middle"
#~ " of the indexed string, the query "
#~ "must inspect the entire index."
#~ msgstr ""

