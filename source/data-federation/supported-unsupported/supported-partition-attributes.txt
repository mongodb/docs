.. _adf-path-attribute-types:

=============================
Use Partition Attribute Types
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol 

.. note::

   .. include:: /includes/data-federation/fact-path-delimiter.rst

Supported Partition Attribute Types
-----------------------------------

The following table lists the supported data types for partition
attributes, filename, and
``~databases.[n].collections.[n].dataSources.[n].path`` example for
each data type:

.. list-table::
   :header-rows: 1
   :widths: 10 30 60

   * - Key
     - Data Type
     - Example

   * - ``string``
     - Parses the filename as a string. 
     - filename: ``/employees/949-555-0195.json``

       path: ``/employees/{phone string}``

       In the preceding example, {+df+} interprets ``phone``  as a string.

       To learn more, see :ref:`parse-null-values`.

   * - ``int``
     - Parses the filename as an integer.
     - filename: ``/zipcodes/90210.json``

       path: ``/zipcodes/{zipcode int}``

       In the preceding example, {+df+} interprets ``zipcode`` as an integer.

       To learn more, see :ref:`parse-padded-numeric-values`.

   * - ``isodate``
     - Parses the filename in `RFC 3339 <https://tools.ietf.org/html/rfc3339>`_ 
       format as an ISO-8601 format date. 

     - filename: ``/metrics/20060102.json``

       - path: ``/metrics/{startTimestamp isodate}``
       - path: ``/metrics/{startTimestamp isodate('20060102')}``

       In the preceding example, for the first path, {+df+} interprets 
       ``startTimestamp`` as an :manual:`ISODate 
       </reference/glossary/#term-isodate>`. For the second path, 
       {+df+} interprets ``startTimestamp`` as an :manual:`ISODate 
       </reference/glossary/#term-isodate>` in the specified format and 
       matches only filenames in the specified format. 
       
       If you don't specify a specific format as shown in the first 
       :manual:`ISODate </reference/glossary/#term-isodate>` attribute 
       path example above, {+adf+} defaults to partitions with the 
       following date formats: 

       .. code-block:: none 
          :copyable: false
          :linenos:
          
          "2006-01-02T15:04:05Z07:00"
          "2006-01-02T15:04:05.000000Z07:00"
          "2006-01-02"
          "2006-01-02T15:04:05.000000-0700"
          "2006-01-02T15:04:05-0700"
          "2006-01-02T15:04Z07:00"
          "2006-01-02T15:04-0700"
          "2006-01-02Z07:00"
          "2006-01-02-0700"
          "2006102T15:04:05.000000Z07:00"
          "20060102T15:04:05.000000-0700"
          "20060102T15:04:05Z07:00"
          "20060102T15:04:05-0700"
          "20060102T15:04Z07:00"
          "20060102T15:04-0700"
          "20060102Z07:00"
          "20060102-0700"
          "20060102"

       If you wish to specify a format, which improves performance, you 
       must use special values to indicate the exact position of the 
       attributes in the date such as day (``02``), month (``01``), 
       year (``2006``), etc. To learn more about the format and the 
       values used to specify date, see `Format a time or date <https://yourbasic.org/golang/format-parse-string-time-date-example/>`__. 
       If you specify a format that isn't in a `RFC 3339 
       <https://tools.ietf.org/html/rfc3339>`_ format, you must use 
       regex with the special values to indicate the position of the 
       date attributes. For an example, see 
       :ref:`adf-advanced-path-isodate`.

   * - ``epoch_secs``
     - Parses the filename as a Unix timestamp in seconds.
     - filename: ``/metrics/1549046112.json``

       path: ``/metrics/{startTimestamp epoch_secs}``

       In the preceding example, {+df+} interprets ``startTimestamp`` as a Unix 
       timestamp in seconds.

       To learn more, see :ref:`parse-padded-numeric-values`.

   * - ``epoch_millis``
     - Parses the filename as a Unix timestamp in milliseconds.
     - filename: ``/metrics/1549046112000.json``

       path: ``/metrics/{startTimestamp epoch_millis}``

       In the preceding example, {+df+} interprets ``startTimestamp`` as a Unix 
       timestamp in milliseconds.

       To learn more, see  :ref:`parse-padded-numeric-values`.

   * - ``objectid``
     - Parses the filename as an 
       :manual:`ObjectId </reference/method/ObjectId/>`. 
     - filename: ``/metrics/507f1f77bcf86cd799439011.json``

       path: ``/metrics/{objid objectid}``

       In the preceding example, {+df+} interprets ``objid`` as an 
       :manual:`ObjectId </reference/method/ObjectId/>`.

   * - ``uuid`` 
     - Parses the filename as a `UUID of binary subtype 
       4 <http://bsonspec.org/spec.html>`__.
     - filename: ``/metrics/3b241101-e2bb-4255-8caf-4136c566a962.json``

       path: ``/metrics/{myUuid uuid}``

       In the preceding example, {+df+} interprets ``myUuid`` as a `UUID 
       <http://bsonspec.org/spec.html>`__ of binary subtype 4.

.. note:: 

   {+adf+} supports the `Package Syntax 
   <https://golang.org/pkg/regexp/syntax/>`__ for regular expressions 
   in the path to the filename.

Supported Conversions
---------------------

{+adf+} converts the partition attributes to `BSON types 
<http://bsonspec.org/spec.html>`_ when parsing the 
:datalakeconf-aws:`path <databases.[n].collections.[n].dataSources.[n].path>` 
to the filename. Later writes of data to cloud storage must use the |bson| types 
after converting them to string. The following table shows:

- The partition attribute types and the |bson| types to which {+df+} converts 
  them.
- The |bson| data type to convert to a string for later writes to cloud storage.

.. list-table:: 
   :header-rows: 1
   :widths: 20 40 40

   * - Partition Attribute Type
     - Parsed |bson| Type
     - Source |bson| Type

   * - ``string``
     - - UTF-8 string
       - null*
     - - UTF-8 string
       - null

   * - ``int``
     - - 64-bit integer
       - null
     - - 32-bit integer
       - 64-bit integer
       - null (as strings with no padding)

   * - ``isodate``
     - - UTC datetime
       - null
     - - UTC datetime (as an `ISO-8601 <https://tools.ietf.org/html/rfc3339>`_ 
         format string)
       - null

   * - ``objectid``
     - - :manual:`ObjectId </reference/method/ObjectId/>`
       - null
     - - :manual:`ObjectId </reference/method/ObjectId/>` (as a string 
         with hex encoding)
       - null

   * - ``uuid``
     - - |bson| `Binary data subtype 4 (UUID) <http://bsonspec.org/spec.html>`_ 
       - null
     - - |bson| `Binary data subtype 4 (UUID) <http://bsonspec.org/spec.html>`_
       - null
