.. meta::
   :robots: noindex, nosnippet 

.. _ak8so-secret-storage:

========================
Configure Secret Storage
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can choose where you store sensitive information for the 
components that |ak8so| manages, but |ak8so| must find the |k8s|
|k8s-secrets| it expects. You can store secrets for |ak8so| in
many ways, including the following methods:

- Put sensitive information directly into |k8s| |k8s-secrets|. All
  tutorials in the |ak8so| documentation use |k8s| |k8s-secrets| by
  default. To use |k8s| |k8s-secrets|, follow the steps in the
  tutorials.
- Put sensitive information in a Github repository following a GitOps
  flow. To store sensitive data in git securely you can use tools, such
  as `Sealed Secrets 
  <https://github.com/bitnami-labs/sealed-secrets>`__, which encrypts
  secrets for the intended target cluster.
- Put sensitive information in an external secret storage tool, such as
  {+vault+} or Hyperscalers native secret management solutions. 
  An intermediary secret provisioning tool fetches sensitive info from
  the external secret storage tool and creates |k8s| |k8s-secrets| from
  the sensitive information. To learn more about the secret
  provisioning tool, see :ref:`ak8so-secret-considerations`.
  
This tutorial sets up an external secret storage tool for use with 
|ak8so|. This tutorial focuses on "secret-less" setups that don't
require |ak8so| to create and store a secret to provision secrets
to their |k8s| cluster.

.. _ak8so-secret-considerations:

Considerations
--------------

The following tutorial installs or configures the following tools and
options:

- **A secret provisioning tool**. The secret provisioning tool
  uses one or more authentication mechanisms to retrieve the
  credentials from the secret management service and create 
  |k8s-secrets| that |ak8so| can use. This tutorial installs one
  of the following open-source secret provisioning tools:
  
  - `External Secrets Operator <https://external-secrets.io/latest/>`__
  - `Secrets Store CSI Driver <https://secrets-store-csi-driver.sigs.k8s.io/>`__

- **Authentication to access secrets**. You can use different
  methods to authenticate the service accounts and namespaces that can
  access secrets in {+vault+}:
  
  - For `External Secrets Operator 
    <https://external-secrets.io/latest/>`__, this tutorial uses 
    {+oidc+} {+jwt+} authentication. To learn more, see 
    `JWT/OIDC authentication 
    <https://external-secrets.io/latest/provider/hashicorp-vault/#jwtoidc-authentication>`__.
  - For `Secrets Store CSI Driver 
    <https://secrets-store-csi-driver.sigs.k8s.io/>`__, this tutorial
    uses |k8s| authentication.

  Alternatively, your cloud provider's |kms| can use native |iam|
  systems to provide this authentication, which isn't covered in
  this tutorial. To learn how to configure your cloud provider's |kms|
  for authentication, see the following resources in the External
  Secrets Operator documentation:

  - `AWS Secrets Manager 
    <https://external-secrets.io/latest/provider/aws-secrets-manager/>`__
  - `Azure Key Vault 
    <https://external-secrets.io/latest/provider/azure-key-vault/#workload-identity>`__
  - `Google Cloud Secret Manager 
    <https://external-secrets.io/latest/provider/google-secrets-manager/>`__

Prerequisites
-------------

Before you complete this tutorial, you need the following tools and
configurations:

- **Running service accounts for Kubernetes, Atlas Kubernetes Operator,
  and Atlas** and sufficient privileges to configure them.

  You need a running |k8s| cluster with nodes running processors with
  the x86-64, AMD64, or ARM64 architecture. For
  this tutorial, the |k8s| cluster is ``https://kube01.internal.io``
  listening on the default port (443).

  .. include:: /includes/fact-access-ak8so-project.rst

  .. include:: /includes/extracts/atlas-kubernetes-operator-install.rst

  To deploy the |ak8so|, run the following command. Replace
  ``<version>`` with the latest :ref:`release number <ak8so-changelog>`.

  .. code-block:: sh

     kubectl apply -f https://raw.githubusercontent.com/mongodb/mongodb-atlas-kubernetes/<version>/deploy/all-in-one.yaml
  
  To register for an |service| account, see :ref:`create-atlas-account`.
- **API keys**. You must :ref:`create an API key <create-org-api-key>`
  and configure the :guilabel:`API Access List`.

  .. include:: /includes/fact-ak8so-api-key-permission.rst
- **A secret storage vault**. This tutorial uses {+vault+}, which
  is a third-party service for secret storage, running at 
  ``https://vault.internal.io``.

  You can use other secret storage vaults with |ak8so| as needed,
  including Cloud KMS from AWS, Azure, and Google.
- **Internal access only**. To prevent exposing sensitive information
  over the public internet, the following components of the secret
  storage solution allow internal access only:
  
  - The {+vault+} or KMS service.
  - The |k8s| Cluster APIs service.
  - The internal network. This tutorial uses ``internal.io``.
  
  While the previous components allow internal access only,
  they allow access to each other and allow access to anyone within your
  team or organization. This is a best practice for security.
- **Public Certificate Authorities (CAs)**. You can use public CAs to
  avoid managing and distributing custom CA root certificates.

  You can automate CA cert management and renewal by using any of the following tools:
  
  - `ACME 
    <https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment>`__
  - `Lets Encrypt <https://letsencrypt.org/>`__
  - `ZeroSSL <https://zerossl.com/>`__
  - `DNS Challenges 
    <https://letsencrypt.org/docs/challenge-types/#dns-01-challenge>`__
  - `cert-manager <https://cert-manager.io/>`__

  In this tutorial: 
  
  - All ``internal.io`` HTTPs services are internal addresses, but
    their HTTPS sites hold automatically renewed certificates signed by
    a public CA.
  - No mutual TLS (mTLS) is required for this integration because it
    performs only server-side HTTPS validation.
  - Clients can trust these service certificates without extra
    certificate provisioning.

Procedure
---------

Follow these steps to configure secret storage for |ak8so|.

.. procedure::
   :style: normal

   .. step:: Install the secret provisioning tool in the target cluster.

      Select a secret provisioning tool to install it.

      .. tabs::

         .. tab:: External Secrets Operator
            :tabid: external-secrets-setup

            .. include:: /includes/steps-ak8so-external-secrets.rst

         .. tab:: Secrets Store CSI Driver
            :tabid: secrets-store-setup

            .. include:: /includes/steps-ak8so-secrets-store-csi.rst

   .. step:: Set up authentication to access secrets.

      .. tabs::
         :hidden:

         .. tab:: External Secrets Operator
            :tabid: external-secrets-setup

            .. include:: /includes/steps-ak8so-oidc-jwt-auth.rst

         .. tab:: Secrets Store CSI Driver
            :tabid: secrets-store-setup

            .. include:: /includes/steps-ak8so-kubernetes-auth.rst

   .. step:: Set up automatic secret provisioning.

      .. tabs::
         :hidden:

         .. tab:: External Secrets Operator
            :tabid: external-secrets-setup

            .. include:: /includes/steps-ak8so-provision-external-secrets.rst

         .. tab:: Secrets Store CSI Driver
            :tabid: secrets-store-setup

            .. include:: /includes/steps-ak8so-provision-secrets-store.rst

   .. step:: Deploy Atlas Kubernetes Operator custom resources.


      You can now deploy |ak8so| custom resources. |ak8so|
      authenticates with the |k8s| |k8s-secrets| that reference your
      {+vault+}. Adjust the ``timeout`` values as needed for your
      deployments.

      .. code-block::

         kubectl apply -f ako/project.yaml
         kubectl apply -f ako/deployment.yaml
         kubectl apply -f ako/user.yaml
         kubectl wait --for=condition=ready atlasdeployment/serverless-deployment --timeout=10m
         kubectl wait --for=condition=ready atlasdatabaseuser/user --timeout=10m

      To learn more about these custom resources, see
      :ref:`custom-resources`.

   .. step:: Test your Atlas Kubernetes Operator deployment.

      To test your |ak8so| deployment, run the following command:

      .. code-block::

         export ATLAS_DEPLOYMENT_CONN_STR=$(kubectl get secrets/test-atlas-operator-project-test-serverless-deployment-dbuser -o jsonpath='{.data.connectionStringStandardSrv}' |base64 -d)
         mongosh $(ATLAS_DEPLOYMENT_CONN_STR) --apiVersion 1 --eval "show dbs"

      |ak8so| returns a list of your database deployments.


