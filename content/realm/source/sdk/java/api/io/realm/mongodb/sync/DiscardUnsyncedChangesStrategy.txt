.. meta::
   :robots: noindex, nosnippet


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Interface DiscardUnsyncedChangesStrategy
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy:



io.realm.mongodb.sync
=====================

**Implemented interfaces:**



- :ref:`io.realm.mongodb.sync.SyncClientResetStrategy <io_realm_mongodb_sync_SyncClientResetStrategy>` 


Strategy that automatically resolves a Client Reset by discarding any unsynced data, but otherwise keep the Realm open. Any changes will be reported through the normal collection and object notifications.A synced Realm may need to be reset because the MongoDB Realm Server encountered an error and had to be restored from a backup or because it has been too long since the client connected to the server so the server has rotated the logs.

The Client Reset thus occurs because the server does not have the full information required to bring the Client fully up to date.

The discard unsynced changes reset process is as follows: when a client reset is triggered the :ref:`onBeforeReset(Realm) <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onBeforeReset_Realm_>`  callback is invoked, providing an instance of the Realm before the reset and another after the reset, both read-only. Once the reset has concluded the callback :ref:`onAfterReset(Realm, Realm) <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_Realm__Realm_>`  would be invoked with an instance of the final Realm.



In the event that discarding the unsynced data is not enough to resolve the reset the :ref:`onError(SyncSession, ClientResetRequiredError) <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_SyncSession__ClientResetRequiredError_>`  would be invoked, it allows to manually resolve the reset as it would be done in :ref:`ManuallyRecoverUnsyncedChangesStrategy.onClientReset(SyncSession, ClientResetRequiredError) <io_realm_mongodb_sync_ManuallyRecoverUnsyncedChangesStrategy_onClientReset_SyncSession__ClientResetRequiredError_>` .






Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public **void**
     - | :ref:`onAfterReset <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset>` (
       |  :ref:`Realm <io_realm_Realm>`  before, 
       |  :ref:`Realm <io_realm_Realm>`  after
       | )
       
       
       Callback invoked once the Client Reset happens.
       
       
       
   
   * - public **void**
     - | :ref:`onBeforeReset <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onBeforeReset>` (
       |  :ref:`Realm <io_realm_Realm>`  realm
       | )
       
       
       Callback that indicates a Client Reset is about to happen.
       
       
       
   
   * - public **void**
     - | :ref:`onError <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError>` (
       |  :ref:`SyncSession <io_realm_mongodb_sync_SyncSession>`  session, 
       |  :ref:`ClientResetRequiredError <io_realm_mongodb_sync_ClientResetRequiredError>`  error
       | )
       
       
       Callback that indicates the seamless Client reset couldn't complete.
       
       
       
   
   


Inherited Methods
=================



Method Detail
=============

.. _onAfterReset:

.. _onAfterReset__:

.. _DiscardUnsyncedChangesStrategy_onAfterReset:

.. _DiscardUnsyncedChangesStrategy_onAfterReset__:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset__:



onAfterReset
------------

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_io_realm_Realm_io_realm_Realm_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_io_realm_Realm__io_realm_Realm_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_io_realm_Realm_Realm_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_io_realm_Realm__Realm_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_Realm_io_realm_Realm_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_Realm__io_realm_Realm_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_Realm_Realm_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset_Realm__Realm_:

.. _onAfterReset_io_realm_Realm_io_realm_Realm_:

.. _onAfterReset_io_realm_Realm__io_realm_Realm_:

.. _onAfterReset_io_realm_Realm_Realm_:

.. _onAfterReset_io_realm_Realm__Realm_:

.. _onAfterReset_Realm_io_realm_Realm_:

.. _onAfterReset_Realm__io_realm_Realm_:

.. _onAfterReset_Realm_Realm_:

.. _onAfterReset_Realm__Realm_:

.. _DiscardUnsyncedChangesStrategy_onAfterReset_io_realm_Realm_io_realm_Realm_:

.. _DiscardUnsyncedChangesStrategy_onAfterReset_io_realm_Realm__io_realm_Realm_:

.. _DiscardUnsyncedChangesStrategy_onAfterReset_io_realm_Realm_Realm_:

.. _DiscardUnsyncedChangesStrategy_onAfterReset_io_realm_Realm__Realm_:

.. _DiscardUnsyncedChangesStrategy_onAfterReset_Realm_io_realm_Realm_:

.. _DiscardUnsyncedChangesStrategy_onAfterReset_Realm__io_realm_Realm_:

.. _DiscardUnsyncedChangesStrategy_onAfterReset_Realm_Realm_:

.. _DiscardUnsyncedChangesStrategy_onAfterReset_Realm__Realm_:

.. list-table::
   :header-rows: 1
   
   * - | public **void** :ref:`onAfterReset <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onAfterReset>` (
       |  :ref:`Realm <io_realm_Realm>`  before, 
       |  :ref:`Realm <io_realm_Realm>`  after
       | )
       
       
       
   
   * - Callback invoked once the Client Reset happens. It provides of two Realm instances, a frozen one displaying the state before the reset and a regular Realm with the current state, that can be used to recover objects from the reset.
       
       
       
       
       **Parameters**
       
       - ``before`` - :ref:`Realm <io_realm_Realm>`  frozen Realm in the before after the reset.
          
          
          
          
          
       - ``after`` - :ref:`Realm <io_realm_Realm>`  Realm after the reset.
          
          
          
          
          
       
       
       
       
       
       
       
       
       
   
   


.. _onBeforeReset:

.. _onBeforeReset__:

.. _DiscardUnsyncedChangesStrategy_onBeforeReset:

.. _DiscardUnsyncedChangesStrategy_onBeforeReset__:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onBeforeReset:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onBeforeReset__:



onBeforeReset
-------------

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onBeforeReset_io_realm_Realm_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onBeforeReset_Realm_:

.. _onBeforeReset_io_realm_Realm_:

.. _onBeforeReset_Realm_:

.. _DiscardUnsyncedChangesStrategy_onBeforeReset_io_realm_Realm_:

.. _DiscardUnsyncedChangesStrategy_onBeforeReset_Realm_:

.. list-table::
   :header-rows: 1
   
   * - | public **void** :ref:`onBeforeReset <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onBeforeReset>` (
       |  :ref:`Realm <io_realm_Realm>`  realm
       | )
       
       
       
   
   * - Callback that indicates a Client Reset is about to happen. It provides with a frozen instance of the Realm that is will be reset.
       
       
       
       
       **Parameters**
       
       - ``realm`` - frozen :ref:`Realm <io_realm_Realm>`  in its state before the reset.
          
          
          
          
          
       
       
       
       
       
       
       
       
       
   
   


.. _onError:

.. _onError__:

.. _DiscardUnsyncedChangesStrategy_onError:

.. _DiscardUnsyncedChangesStrategy_onError__:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError__:



onError
-------

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_io_realm_mongodb_sync_SyncSession_io_realm_mongodb_sync_ClientResetRequiredError_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_io_realm_mongodb_sync_SyncSession__io_realm_mongodb_sync_ClientResetRequiredError_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_io_realm_mongodb_sync_SyncSession_ClientResetRequiredError_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_io_realm_mongodb_sync_SyncSession__ClientResetRequiredError_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_SyncSession_io_realm_mongodb_sync_ClientResetRequiredError_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_SyncSession__io_realm_mongodb_sync_ClientResetRequiredError_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_SyncSession_ClientResetRequiredError_:

.. _io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError_SyncSession__ClientResetRequiredError_:

.. _onError_io_realm_mongodb_sync_SyncSession_io_realm_mongodb_sync_ClientResetRequiredError_:

.. _onError_io_realm_mongodb_sync_SyncSession__io_realm_mongodb_sync_ClientResetRequiredError_:

.. _onError_io_realm_mongodb_sync_SyncSession_ClientResetRequiredError_:

.. _onError_io_realm_mongodb_sync_SyncSession__ClientResetRequiredError_:

.. _onError_SyncSession_io_realm_mongodb_sync_ClientResetRequiredError_:

.. _onError_SyncSession__io_realm_mongodb_sync_ClientResetRequiredError_:

.. _onError_SyncSession_ClientResetRequiredError_:

.. _onError_SyncSession__ClientResetRequiredError_:

.. _DiscardUnsyncedChangesStrategy_onError_io_realm_mongodb_sync_SyncSession_io_realm_mongodb_sync_ClientResetRequiredError_:

.. _DiscardUnsyncedChangesStrategy_onError_io_realm_mongodb_sync_SyncSession__io_realm_mongodb_sync_ClientResetRequiredError_:

.. _DiscardUnsyncedChangesStrategy_onError_io_realm_mongodb_sync_SyncSession_ClientResetRequiredError_:

.. _DiscardUnsyncedChangesStrategy_onError_io_realm_mongodb_sync_SyncSession__ClientResetRequiredError_:

.. _DiscardUnsyncedChangesStrategy_onError_SyncSession_io_realm_mongodb_sync_ClientResetRequiredError_:

.. _DiscardUnsyncedChangesStrategy_onError_SyncSession__io_realm_mongodb_sync_ClientResetRequiredError_:

.. _DiscardUnsyncedChangesStrategy_onError_SyncSession_ClientResetRequiredError_:

.. _DiscardUnsyncedChangesStrategy_onError_SyncSession__ClientResetRequiredError_:

.. list-table::
   :header-rows: 1
   
   * - | public **void** :ref:`onError <io_realm_mongodb_sync_DiscardUnsyncedChangesStrategy_onError>` (
       |  :ref:`SyncSession <io_realm_mongodb_sync_SyncSession>`  session, 
       |  :ref:`ClientResetRequiredError <io_realm_mongodb_sync_ClientResetRequiredError>`  error
       | )
       
       
       
   
   * - Callback that indicates the seamless Client reset couldn't complete. It should be handled as :ref:`ManuallyRecoverUnsyncedChangesStrategy.onClientReset(SyncSession, ClientResetRequiredError) <io_realm_mongodb_sync_ManuallyRecoverUnsyncedChangesStrategy_onClientReset_SyncSession__ClientResetRequiredError_>` .
       
       
       
       
       
       
       **Parameters**
       
       - ``session`` - :ref:`SyncSession <io_realm_mongodb_sync_SyncSession>`  this error happened on.
          
          
          
          
          
       - ``error`` - :ref:`ClientResetRequiredError <io_realm_mongodb_sync_ClientResetRequiredError>`  the specific Client Reset error.
          
          
          
          
          
       
       
       
       
       
       
       
       
       
   
   



