ref: transactions-read-pref
content: |

   :doc:`Multi-document transactions </core/transactions>` that contain
   read operations must use read preference :readmode:`primary`.

   All operations in a given transaction must route to the same member.
---
ref: transactions-usage
content: |
   .. important::

      In most cases, multi-document transaction incurs a greater
      performance cost over single document writes, and the
      availability of multi-document transaction should not be a
      replacement for effective schema design. For many scenarios, the
      :ref:`denormalized data model (embedded documents and arrays)
      <data-modeling-embedding>` will continue to be optimal for your
      data and use cases. That is, for many scenarios, modeling your data
      appropriately will minimize the need for multi-document
      transactions.

---
ref: transactions-intro
content: |
   .. include:: /includes/extracts/transactions-intro-blurb.rst

   .. include:: /includes/extracts/transactions-usage.rst
---
ref: transactions-intro-blurb
content: |
   Starting in version 4.0, for situations that require atomicity for
   updates to multiple documents or consistency between reads to multiple
   documents, MongoDB provides :doc:`multi-document transactions
   </core/transactions>` for replica sets.
---
ref: transactions-faq
content: |
   Because a single document can contain related data that would otherwise
   be modeled across separate parent-child tables in a relational schema,
   MongoDB's atomic single-document operations already provide transaction
   semantics that meet the data integrity needs of the majority of
   applications. One or more fields may be written in a single operation,
   including updates to multiple sub-documents and elements of an array.
   The guarantees provided by MongoDB ensure complete isolation as a
   document is updated; any errors cause the operation to roll back so
   that clients receive a consistent view of the document.

   Starting in version 4.0, for situations that require atomicity for
   updates to multiple documents or consistency between reads to multiple
   documents, MongoDB provides :doc:`multi-document transactions
   </core/transactions>` for replica sets, and transactions for sharded
   clusters are scheduled for MongoDB 4.2.
---
ref: transactions-operations-restrictions
content: |
 
   The following operations are not allowed in multi-document
   transactions:

   - Operations that affect the database catalog, such as creating or
     dropping a collection or an index. For example, a multi-document
     transaction cannot include an insert operation that would result
     in the creation of a new collection.

     The :dbcommand:`listCollections` and :dbcommand:`listIndexes`
     commands and their helper methods are also excluded.
 
   - Non-CRUD and non-informational operations, such as
     :dbcommand:`createUser`, :dbcommand:`getParameter`,
     :dbcommand:`count`, etc. and their helpers.

---
ref: transactions-operations-restrictions-info
content: |

   Informational commands, such as :dbcommand:`isMaster`,
   :dbcommand:`buildInfo`, :dbcommand:`connectionStatus` (and their
   helper methods) are allowed in transactions; however, they cannot be
   the first operation in the transaction.

---
ref: transactions-operations-retry
content: |
   The commit and abort transaction operations are :doc:`retryable write
   operations </core/retryable-writes>`. If the commit operation or the
   abort operation encounters an error, MongoDB drivers retry the
   operation a single time regardless of whether :urioption:`retryWrites` is
   set to ``true``.
---
ref: transactions-operations-crud
content: |
   - You can specify read/write (CRUD) operations on **existing**
     collections.  The collections can be in different databases.

   - You cannot read/write to collections in the ``config``, ``admin``,
     or ``local`` databases.

   - You cannot write to ``system.*`` collections.

   - You cannot return the supported operation's query plan (i.e. ``explain``).

   .. include:: /includes/extracts/transactions-operations-getMore.rst
---
ref: transactions-operations-catalog-tip
content: |

   .. tip:: 

      When creating or dropping a collection immediately before
      starting a transaction, if the collection is accessed within the
      transaction, issue the create or drop operation with write
      concern :writeconcern:`"majority"` to ensure that the transaction
      can acquire the required locks.

---
ref: transactions-operations-getMore
content: |

   - For cursors created outside of transactions, you cannot call
     :dbcommand:`getMore` inside a transaction.

   - For cursors created in a transaction, you cannot call
     :dbcommand:`getMore` outside the transaction.

---
ref: transactions-supported-operation
content: |

   |operation| supports :doc:`multi-document transactions
   </core/transactions>`.

---
ref: transactions-operations-write-concern
content: |

   Do not explicitly set the write concern for the operation if run in
   a transaction. To use write concern with transactions, see
   :ref:`transaction-options`.

---
ref: transactions-read-concern-tip
content: |

   For :readconcern:`"local"` and :readconcern:`"majority"` read
   concern, MongoDB may provide stronger isolation guarantees than
   specified. Specifically, in MongoDB 4.0, all multi-documents
   transactions have :readconcern:`"snapshot"` isolation.

   In future versions of MongoDB, the server will optimize around the
   specified read concern (isolation level) instead of providing
   stronger isolation guarantees than explicitly specified.
   
   As such, if stronger guarantees than :readconcern:`"local"` and
   :readconcern:`"majority"` read concern are needed, explicitly
   specify the appropriate read concern instead of relying on MongoDB
   to promote the read concern level.

...
