.. _what-is-fts:

==============
|fts| Overview
==============

.. default-domain:: mongodb

.. meta::
   :keywords: atlas search, atlas search overview, text indexing, query data, advance search capabilities, text analyzer, search aggregation pipeline stage, searchMeta aggregation pipeline stage, atlas search architecture, apache lucene, atlas search indexes, atlas search queries
   :description: Learn how MongoDB Atlas can perform advanced text searches in your application using Atlas Search aggregation pipeline stages, MongoDB aggregation pipeline stages, and score-based results ranking.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

MongoDB's |fts| allows fine-grained text indexing and querying of data 
on your |service| cluster. It enables advanced search functionality for 
your applications without any additional management or separate search 
system alongside your database. |fts| provides options for several 
kinds of :ref:`text analyzers <analyzers-ref>`, a rich :ref:`query 
language <query-syntax-ref>` that uses |fts| aggregation pipeline 
stages like :pipeline:`$search` and :pipeline:`$searchMeta` in 
conjunction with other MongoDB aggregation pipeline stages, and 
score-based results ranking.

|fts| is available on |service| instances running MongoDB 4.2 or higher 
versions only. For certain features, |fts| might require a specific 
version of MongoDB. The following table lists the |fts| features that 
require specific MongoDB versions.

.. list-table:: 
   :header-rows: 1
   :widths: 50 50

   * - |fts| Feature 
     - MongoDB Version for Feature 

   * - :ref:`Facets <fts-facet-ref>`
     - 4.4.11+, 5.0.4+, 6.0+, 7.0+

   * - :ref:`Facets on Sharded Clusters <fts-facet-ref>`
     - 6.0+, 7.0+

   * - :ref:`Stored Source Fields <fts-stored-source-definition>`
     - 4.4.12+, 5.0.6+, 6.0+, 7.0+

   * - :ref:`Query Analytics <fts-query-analytics>`
     - 5.0+

   * - :ref:`$lookup with $search <lookup-with-search-tutorial>`
     - 6.0+, 7.0+

   * - :ref:`$unionWith with $search <search-with-unionwith-tutorial>`
     - 6.0+, 7.0+

You can also use |fts| with local |service| deployments that you create  
with the {+atlas-cli+}. To learn more, see :atlascli:`Create a Local
Atlas Deployment </atlas-cli-deploy-local>`. 

|fts| is not supported for :manual:`time series
</core/timeseries-collections/>` collections.

.. _fts-architecture:

|fts| Architecture 
------------------

The |fts| ``mongot`` process uses `Apache Lucene 
<https://lucene.apache.org/>`__ and runs alongside ``mongod`` on each 
node in the |service| cluster. The ``mongot`` process: 

1. Creates |fts| indexes based on the rules in the :ref:`index 
   definition <ref-index-definitions>` for the collection.
#. Monitors :manual:`change streams </changeStreams/>` for the current 
   state of the documents and index changes for the collections for 
   which you defined |fts| indexes.
#. Processes |fts| queries and returns matching documents.

.. image:: /images/fts-architecture.png
   :alt: Atlas Search architecture 
   :figwidth: 100%

Stored Source Architecture 
~~~~~~~~~~~~~~~~~~~~~~~~~~

If you define :ref:`stored source <fts-stored-source-definition>` 
fields in your |fts| index, the ``mongot`` process stores the 
specified fields and, for matching documents, returns the stored fields 
directly from ``mongot`` instead of doing a full document lookup on the 
database if you specify the :ref:`returnStoredSource Option 
<fts-return-stored-source-option>` in your query.

.. image:: /images/fts-stored-source-architecture.png
   :alt: Atlas Search stored source architecture 
   :figwidth: 100%

.. _what-is-search-node:

Search Nodes Architecture 
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-fts-search-nodes-preview.rst

For dedicated (``M10`` or higher) |service| {+clusters+} on |aws|,
you can deploy separate search nodes that run only the  ``mongot``
process for workload isolation. Deploying separate search nodes provides
the following benefits: 

- Scales storage independent of MongoDB {+cluster+}. 
- Scales query load independent of MongoDB.

When you deploy separate search nodes, the ``mongot`` processes run on
separate search nodes that you can configure independently. 

.. image:: /images/fts-search-nodes-architecture.png
   :alt: Atlas Search separate search nodes architecture 
   :figwidth: 50%

You can configure search nodes to run the ``mongot`` process separately
from the database nodes that run the ``mongod`` process on your
|service| {+cluster+}. You can also configure the number of search nodes
and the amount of resources provisioned for each search node. 

You can configure search nodes for only single-region |aws|
{+clusters+}. You can't deploy search nodes separately for
:ref:`serverless <create-new-serverless-instance>` or :ref:`multi-cloud 
<create-cluster-multi-region>` {+clusters+}. To learn more
about deploying search nodes separately, see
:ref:`configure-search-nodes`. To deploy the search nodes from the UI or  
|api|, see :ref:`create-new-cluster`.

When you deploy separate search nodes, |service| automatically assigns a
``mongod`` for each ``mongot``. The ``mongot`` communicates with
the ``mongod`` to listen for and sync index changes for the indexes that
it stores. 

If you delete all the search nodes on your {+cluster+}, there will be a
brief interruption in processing your search query results. To learn
more, see :ref:`Modify a Cluster <scale-cluster-cloud-provider>`. If you 
delete your |service| {+cluster+}, |service| pauses and then  deletes
all associated |fts| deployments (``mongot`` processes).

.. _fts-about-indexing:

|fts| Indexes
-------------

.. include:: /includes/facts/fts-index-description.rst

When you configure one or more |fts| indexes, |service| enables the
``mongot`` process on the nodes in the cluster. Each ``mongot`` process
talks to the ``mongod`` on the same node. To create and update search
indexes, the ``mongot`` process performs collection scans on the 
backend database and opens change streams for each index.

You can specify the fields to index using the following methods: 

- :ref:`Dynamic mappings <static-dynamic-mappings>`, which enables 
  |fts| to automatically index all the fields of :ref:`supported types 
  <bson-data-chart>` in each document. This takes disk space and might 
  negatively impact cluster performance. 
- :ref:`Static mappings <static-dynamic-mappings>`, which allows you to 
  selectively identify the fields to index. If fields contain
  polymorphic data, |fts| indexes only documents that correspond to the
  mapping in the index definition and ignores documents that contain
  values that don't correspond to the mapping specified in the index
  definition for the fields.

|fts| performs inverted indexing and stores the indexed fields on disk. 
An inverted index is a mapping between terms and which documents contain
those terms. |fts| indexes contain the term, the ``_id``, and other
relevant metadata about the term, such as the position of the term, in
the document. 

Although the data stored on |fts| isn't an identical copy of data from
the collection on your |service| cluster, |fts| indexes still take some
disk space and memory. If you enable the ``store`` option for fields
that contain :ref:`string <bson-data-types-string>` values or if you configure
the :ref:`stored source fields <fts-stored-source-definition>` in your
index, |fts| stores an identical copy of the specified fields on disk,
which can take disk space.

|fts| provides built-in analyzers for creating indexable terms that 
correct for differences in punctuation, capitalization, stop words, 
and more. Analyzers apply parsing and language rules to the query. You 
can also create a custom analyzer using available built-in character 
filters, tokenizers, and token filters. To learn more about the 
built-in and custom analyzers, see :ref:`analyzers-ref`.

For text fields, the ``mongot`` performs the following tasks to analyze text and create indexable tokens:

1. Tokenization, which is breaking up of words in a string to indexable 
   tokens
#. Normalization, such as transforming the text to lower case, folding 
   diacritics, and removing stop words
#. Stemming, such as ignoring plural and other word forms to index the 
   word in the most reduced form

To learn more about |fts| support for other data types, see 
:ref:`bson-data-types`. The ``mongot`` 
process stores the indexed fields and the ``_id`` field on disk per 
index for the collections on the cluster. 

If you change an existing index, |fts| rebuilds the index without downtime.
This allows you to continue using the old index for existing and new
queries until the index rebuilding is complete.

If you make changes to the collection for which you defined |fts| 
indexes, the latest data might not be available immediately for 
queries. However, ``mongot`` monitors the change streams, which allows 
it to update stored copies of data, and |fts| indexes are eventually 
consistent.

.. note:: For Dedicated Search Nodes

   |fts| indexes might be temporarily unavailable when you do any of the
   following:  

   - :manual:`Shard </sharding/>` a {+cluster+}.
   - :manual:`Add shards </tutorial/add-shards-to-shard-cluster/>` to a
     {+cluster+}. 
   - :manual:`Shard a collection </reference/command/shardCollection/>`
     with |fts| indexes.

   If you :manual:`reshard </core/sharding-reshard-a-collection/>` a
   collection with |fts| indexes, |fts| indexes on the collection
   become unavailable when the resharding operation completes. You
   *must* rebuild your |fts| indexes once the resharding operation
   completes. 

After you set up an |fts| index for a collection, you can run queries 
against the indexed fields.

|fts| Queries 
-------------

|fts| queries take the form of an :manual:`aggregation pipeline stage 
</aggregation>`. |fts| provides :pipeline:`$search` and 
:pipeline:`$searchMeta` stages, both of which must be the first stage 
in the query pipeline. These stages can be used in conjunction with 
other :manual:`aggregation pipeline stages </aggregation>` in your 
query pipeline. To learn more about these pipeline stages, see 
:ref:`query-syntax-ref`.

|fts| also provides query :ref:`operators <operators-ref>` and 
:ref:`collectors <collectors-ref>` that you can use inside the 
:pipeline:`$search` and :pipeline:`$searchMeta` :ref:`aggregation
pipeline stages <query-syntax-ref>`. The |fts| operators allow you to
locate and retrieve matching data from the collection on your |service|
{+cluster+}. The collector returns a document representing the search
metadata results. 

You can use |fts| operators to query terms, phrases, geographic shapes 
and points, numeric values, similar documents, synonymous terms, and more.
You can also search using regex and wildcard expressions. The |fts|
:ref:`compound-ref` operator allows you to combine multiple operators 
inside your :pipeline:`$search` stage to perform a complex search and 
filter of data based on what *must*, *must not*, or *should* be present 
in the documents returned by |fts|. You can use the :ref:`compound-ref` 
operator to also match or filter documents in the :pipeline:`$search` 
stage itself. Running :pipeline:`$match` after :pipeline:`$search` is 
less performant than running :pipeline:`$search` with the 
:ref:`compound-ref` operator.

To learn more about the syntax, options, and usage of the |fts| operators,
see :ref:`operators-ref`.

When you run a query, |fts| uses the :ref:`configured read preference 
<replica-set-tags>` to identify the node on which to run the query.  
The query first goes to the MongoDB process, which is ``mongod`` for a 
replica set cluster or ``mongos`` for a sharded cluster. For sharded 
clusters, your cluster data is partitioned across ``mongod`` instances 
and each ``mongot`` knows about the data on the ``mongod`` on the same 
node only. Therefore, you can't run queries that target a particular 
shard. ``mongos`` directs the queries to all shards, making these 
*scatter gather* queries. 

The MongoDB process routes the query to the ``mongot`` on the same 
node. |fts| performs the search and scoring and returns the document 
IDs and other search metadata for the matching results to ``mongod``. 
The ``mongod`` then performs a full document lookup implicitly for the 
matching results and returns the results to the client. 

.. note:: For Dedicated Search Nodes

   When you run a query, the query first goes to the MongoDB process
   based on the :ref:`configured read preference <replica-set-tags>`.
   The ``mongod`` process routes the search query through a load
   balancer on the same node, which distributes the requests across all
   of the ``mongot`` processes. The |fts| ``mongot`` process performs
   the search and scoring and returns the matching results to
   ``mongod``, which ``mongod`` then returns to the client. If you use
   the :pipeline:`$search` :ref:`concurrent <concurrent-ref>` option in
   your query, |fts| enables intra-query parallelism. To learn more, see 
   :ref:`Parallelize Query Execution Across Segments <concurrent-ref>`. 

|fts| associates a relevance-based score with every document in the 
result set. The relevance-based scoring allows |fts| to return documents
in the order from the highest score to the lowest. |fts| scores documents 
higher if the query term appears frequently in a document and lower if 
the query term appears across many documents in the collection. |fts| 
also supports customizing the relevance-based default score by 
boosting, decaying, or other modifying options. To learn more about
customizing the resulting scores, see :ref:`scoring-ref`.

.. _fts-search-node-cost-overview:

Search Nodes Cost 
-----------------

MongoDB supports separate search nodes on single-region |aws| dedicated
(``M10`` or higher) {+clusters+} only. Search nodes are deployed on
compute-intensive NVMe instances. You must deploy a minimum of
two nodes. You will be billed daily for hourly resource usage per node. 
To learn more, see :ref:`Search Node Costs <fts-search-node-costs>`.

Next Steps 
----------

For hands-on experience creating |fts| indexes and running |fts| 
queries against the :doc:`sample datasets </sample-data>`, try the 
tutorials in the following pages:

- :ref:`fts-tutorial-ref`
- :ref:`fts-tutorials`

**Prefer to learn by watching?**

Watch an overview of |service| and |fts| and get started setting up
|fts| for your data. The video demonstrates how to load sample data on
your {+cluster+}, create an |fts| index, and run a sample query using
:guilabel:`Search Tester` and :guilabel:`Data Explorer`. 

*Duration: 10 Minutes*

.. video:: https://youtu.be/HsS0z3eOCSQ

.. toctree::
   :titlesonly:

   /atlas-search/best-practices
