.. _bson-data-types-token:

======================================
How to Index String Fields for Sorting 
======================================

.. default-domain:: mongodb

.. meta::
   :description: Use the token field type to index string values in fields for sorting.

.. :keywords: token, token field type, atlas search field type, sort atlas search results, field type for sorting results by string values 

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. |fts-field-type| replace:: ``token``
.. |sample-collection| replace:: :ref:`sample_mflix.movies <sample-mflix>`
.. |properties-link| replace:: :ref:`Field Properties <fts-field-types-token-options>`

You can use the |fts| ``token`` type to index :manual:`string 
</reference/bson-types/#string>` fields for sorting the |fts| results.
You can then use the :pipeline:`$search` ``sort`` option in your query
to sort the results by the indexed field. To learn more, see
:ref:`sort-ref`.  

Review the Behavior of the |fts-field-type| Type  
------------------------------------------------

Behavior
~~~~~~~~

When you index a field as ``token`` type, |fts| indexes the terms in
the string as a single token (searchable term). You can transform the
token using a :ref:`normalizer <ref-built-in-normalizers>`. By default,
|fts| indexes strings in their original form because the normalizer is
set to ``none`` by default. 

The major difference between the |fts| ``string`` and ``token`` types is
that |fts| creates one or more tokens for fields indexed as ``string``
type whereas |fts| creates only a single token for fields indexed as the
``token`` type. 

If a string being indexed as a ``token`` field type exceeds 8181
characters, |fts| truncates it to 8181 characters before indexing.

Limitations
~~~~~~~~~~~

When you index a field as the ``token`` type, you can only *sort* by
that field. To also *query* that field, you must index that field as
``string`` type also. You can't query a field indexed only as the
``token`` type.
 
.. _fts-field-types-string-vib-jsonib:

Define the Index for the |fts-field-type| Type 
----------------------------------------------

.. include:: /includes/extracts/fts-index-definition-intro.rst 

.. note:: 

   The :guilabel:`Visual Editor` doesn't support indexing fields as
   the |fts-field-type| type. You must use the :guilabel:`JSON Editor`
   to index string fields as the |fts-field-type| type.

.. include:: /includes/extracts/fts-jsonib-index-definition.rst  

.. code-block:: json 
   :emphasize-lines: 6-7

   {
     "mappings": {
       "dynamic": true|false,
       "fields": {
         "<field-name>": {
           "type": "token",
           "normalizer": "lowercase | none"
         }
       }
     }
   }

.. _fts-field-types-token-options: 

Configure |fts-field-type| Field Properties  
-------------------------------------------

The |fts| |fts-field-type| type takes the following parameters:

.. list-table::
   :widths: 20 10 10 40 20
   :header-rows: 1

   * - Option
     - Type
     - Necessity
     - Description
     - Default

   * - ``type``
     - string
     - Required
     - Human-readable label that identifies this field type.
       Value must be ``token``.
     - 

   * - ``normalizer``
     - string
     - Optional
     - Type of transformation to perform on the field value. Value can
       be one of the following:  
       
       - ``lowercase`` - to transform text values in string fields to
         lowercase. 
       - ``none`` - to not perform any transformation.

       If omitted, defaults to ``none``. 

     - ``none``

.. _fts-field-types-string-egs:

Try an Example for the |fts-field-type| Type  
--------------------------------------------

The following index definition example uses the |sample-collection|
collection. If you have the :ref:`sample data <sample-data>` already
loaded on your {+cluster+}, you can use the |json| Editor in the
{+atlas-ui+} to configure the index. After you select your preferred
configuration method, select the database and collection, and refine
your index to replace the default index definition with the following
index definition. 

.. tabs::  

   .. tab:: Index for Sort Only  
      :tabid: basic 

      The following index definition indexes string values in the  
      ``title`` field as |fts| |fts-field-type| type and converts the
      field value to ``lowercase``, which allows you to perform
      case-insensitive sort, as specified by the ``normalizer``. 

      .. code-block:: json 
         :emphasize-lines: 6

         {
           "mappings": {
             "dynamic": false,
             "fields": {
               "title": {
                 "type": "token",
                 "normalizer": "lowercase"
               }
             }
           }
         }

   .. tab:: Index for Sort and Query
      :tabid: multi

      The following index definition for the ``sample_mflix.movies`` 
      collection in the :ref:`sample dataset 
      <available-sample-datasets>` indexes the ``genres`` field as 
      ``string`` and ``token`` types to return the following: 
      
      - Search results for queries using |fts| operators like
        :ref:`text-ref`, :ref:`phrase-ref`, and other operators that
        perform text search on the ``genres`` field. 
      - Sorted results for queries using the :pipeline:`$search`
        :ref:`sort <sort-ref>` option on the ``genres`` field.

      .. code-block:: json
         :copyable: true

         {
           "mappings": {
             "dynamic": false,
             "fields": {
               "genres": [{
                 "type": "string"
               },
               {
                 "type": "token"
               }]
             }
           }
         }
