:orphan:

Start a session with `mongoc_client_start_session <{+api-libmongoc+}/mongoc_client_start_session.html>`__, use the session for a sequence of operations and multi-document transactions, then free it with `mongoc_client_session_destroy <{+api-libmongoc+}/mongoc_client_session_destroy.html>`__. Any `mongoc_cursor_t <{+api-libmongoc+}/mongoc_cursor_t.html>`__ or `mongoc_change_stream_t <{+api-libmongoc+}/mongoc_change_stream_t.html>`__ using a session must be destroyed before the session, and a session must be destroyed before the `mongoc_client_t <{+api-libmongoc+}/mongoc_client_t.html>`__ it came from.

By default, sessions are `causally consistent <https://www.mongodb.com/docs/manual/core/read-isolation-consistency-recency/#causal-consistency>`_. To disable causal consistency, before starting a session create a `mongoc_session_opt_t <{+api-libmongoc+}/mongoc_session_opt_t.html>`__ with `mongoc_session_opts_new <{+api-libmongoc+}/mongoc_session_opts_new.html>`__ and call `mongoc_session_opts_set_causal_consistency <{+api-libmongoc+}/mongoc_session_opts_set_causal_consistency.html>`__, then free the struct with `mongoc_session_opts_destroy <{+api-libmongoc+}/mongoc_session_opts_destroy.html>`__.

Unacknowledged writes are prohibited with sessions.

.. the timeout warning is mandated by the Driver Sessions Spec

A `mongoc_client_session_t <{+api-libmongoc+}/mongoc_client_session_t.html>`__ must be used by only one thread at a time. Due to session pooling, `mongoc_client_start_session <{+api-libmongoc+}/mongoc_client_start_session.html>`__ may return a session that has been idle for some time and is about to be closed after its idle timeout. Use the session within one minute of acquiring it to refresh the session and avoid a timeout.
