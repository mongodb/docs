.. _code-example-guidelines:

=====================================
Code Example Guidelines
=====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. default-domain:: mongodb

.. note::

   This page provides general guidance for creating code examples in our Docs,
   irrespective of language. Language-specific style guidelines and coding
   standards are in progress.

Code examples demonstrate how to use our products programmatically. Our readers
use these examples to learn, troubleshoot, or even copy and adapt them for
their own needs. Well-crafted and well-maintained code examples improve the
overall readability and quality of our Docs, helping build trust with users and
reduce reported issues.

What is a Code Example?
-----------------------

We define a code example specifically as ***any block of code that is set apart
from the surrounding copy in a page***.

.. TODO Add section BRIEFLY introducing semantic meaning and why it's relevant to code block vs. inline code

Inline Code vs. Code Block
~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Inline Code
#. Code Block

.. figure:: /images/code-inline-vs-block.png
   :alt: Comparison of rendered inline code and a code block

Inline Code
```````````

Inline code (sometimes referred to as "code in text") refers to code-related
words or phrases, such as a method name in a sentence, rendered in
``monospace``. To learn more about when to use ``monospace`` text, see
`Text Formatting <https://www.mongodb.com/docs/meta/style-guide/style/text-formatting/#text-formatting>`__.

Inline code is not considered a type of code example.
Inline code is not a code block, and it does not have the same formatting or functionality as a code block. Unlike code blocks elements, inline code isn't a different element. It is still paragraph text, similar to text formatted with **bold**  or *italic* markup. To learn more, see `Inline Markup <https://www.mongodb.com/docs/meta/style-guide/markup/inline/#inline-markup>`__.

Code Block
``````````

Code examples are always formatted in code blocks, which are distinct from the
surrounding text. Code blocks support additional functionality, such as syntax
highlighting or a caption label. For more information on the rST directives
used to render a code block, see
`Code Examples <https://www.mongodb.com/docs/meta/reference/code-blocks/>`__.

Types of Code Examples
----------------------

.. NOTE related page: `Reference/Code Examples <https://www.mongodb.com/docs/meta/reference/code-blocks/`__

We categorize code examples in our Docs as ***Usage Examples***,
***Snippets***, or ***Sample Applications***. These categories and their
subcategories have specific definitions and serve specific purposes.

.. TODO adopt the Informational vs Actionable paradigm to explain the difference between usage examples and snippets

Usage Examples
~~~~~~~~~~~~~~

Usage examples are self-contained code examples that establish parameters,
perform basic set-up code, and demonstrate how to accomplish a task using our
product.

.. code-block:: csharp

   using MongoDB.Driver;

   const string connectionUri = "mongodb://<db_username>:<db_password>@<hostname>:<port>/?connectTimeoutMS=10000";

   // Create a new client and connect to the server
   var client = new MongoClient(connectionUri);


Snippets
````````

We define snippets as ***a specific, atomic piece of code removed from any
surrounding context.***

.. PLACEHOLDER snippets taken out of the context of surrounding content don't really serve a purpose or make much sense.

.. note::

   This guidance makes a distinction between the terms "code example" and
   "code snippet." These terms are often used interchangeably. However,
   "snippet" here has a specific definition as a type of code example.

Snippets can fall into one of the following subcategories:

- **Non-MongoDB command:** code blocks containing command-line commands for
  non-MongoDB tooling, typically in the context of a larger tutorial-style
  page. For example, terminal commands like ``mkdir``, ``cd``, ``npm``, etc.

.. code-block:: shell

   dotnet run MyCompany.RAG.csproj

- **Syntax example:** a tightly-scoped code block showing syntax for an API
  method, an Atlas CLI command, a ``mongosh`` command, or other MongoDB tooling.

.. code-block:: text

   mongodb+srv://<db_username>:<db_password>@<clusterName>.<hostname>.mongodb.net

- **Return example**: a code block containing a JSON blob, example document, or
  other return object type. Use this snippet type to demonstrate what a user might expect from executing a piece of code.

.. code-block:: text

   A timeout occurred after 30000ms selecting a server using ...
   Client view of cluster state is
   {
      ClusterId : "1",
      Type : "Unknown",
      State : "Disconnected",
      Servers :
      [{
         ServerId: "{ ClusterId : 1, EndPoint : "Unspecified/localhost:27017" }",
         EndPoint: "Unspecified/localhost:27017",
         ReasonChanged: "Heartbeat",
         State: "Disconnected",
         ServerVersion: ,
         TopologyVersion: ,
         Type: "Unknown",
         HeartbeatException: "<exception details>"
      }]


- **Configuration object example**: a code block showing an example object,
  often represented in YAML or JSON, enumerating parameters and their types.

.. code-block:: ini

   apiVersion: atlas.mongodb.com/v1
   kind: AtlasDeployment
   metadata:
   name: my-atlas-cluster
   spec:
   backupRef:
      name: atlas-default-backupschedule
      namespace: mongodb-atlas-system


Sample Applications
```````````````````

Sample applications are fully runnable applications that connect more discrete pieces
of code. They may include error handling, framework integrations, or frontend user
interface (UI) elements.

General Guidelines
------------------

In general, our code examples should be simple enough to understand, complex
enough to do something interesting, and provide value to our audience.

As you're writing code examples, keep the following guidelines in mind:

Treat Code Like Writing
~~~~~~~~~~~~~~~~~~~~~~~

Apply the same writing guidelines in this Style Guide to your code examples,
unless overruled by language-specific coding standards. For
example, be consistent, avoid jargon, check for typos, write for accessibility
and a global audience, etc.

- Write code to be as clean and easy to understand as possible, even if it
  isn't the most efficient or clever way to write it.
- Provide examples that address problems our readers are trying to solve. Don't
  illustrate obvious or contrived scenarios.

Follow Best Practices
~~~~~~~~~~~~~~~~~~~~~

Our code examples should always follow generally accepted best practices. This
is especially important because readers will copy and use our code examples
outside of our Docs.

- If code should *not* be copyable by users, ensure the ``:copyable:`` option is
  ``false`` for the code block. To learn more about this markup, see
  `Reference/Code Examples
  <https://www.mongodb.com/docs/meta/reference/code-blocks/>`__.
- Always follow best practices for security in your code and in any user
  recommendations or instructions. For example, never hard code secrets or
  credentials in an example.
- If a code example is not production worthy in a significant way, communicate
  this to readers clearly.
- Don't write code examples that demonstrate the wrong way to do something. In
  the rare instances that justify calling out how *not* to do something (eg, to
  caution against a common bad practice or frequently made error), do so in the
  page copy, in an admonition, or through inline code comments that can't be
  mistaken for part of the code.

Provide Context and Comments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Try to include enough information to ensure reader comprehension without
stating the obvious or overwhelming with unnecessary details.

- Introduce each code block with a high-level explanation of what the example
  does, and why it's useful.
- List specific prerequisites or dependencies.
- Include code comments directly in the code block to explain or call out
  important details, such as non-obvious logic or placeholder values that users
  need to modify. Don't restate the code.

.. TODO To learn more, see `TBD - Comments <PLACEHOLDER>`__.

Test Every Example
~~~~~~~~~~~~~~~~~~

Non-working or incorrect examples negatively impact our credibility. Testing
user-facing code examples ensures that they do what we say they do and work
as expected. This is especially important for code that you didn't write
yourself, such as an example provided by a SME or stakeholder.

.. TODO update this section and the callout to DevDocs

.. note::

   For information or assistance with testing code examples, reach out to the
   DevDocs team in the ``#ask-devdocs`` Slack channel or through the
   ``@DevDocs`` GitHub team tag.

- Writers: Always compile and test your code examples. Your code should pass as
  written for the documentation.
- Reviewers: Run all code examples as part of your review.

For tutorials or content with multi-step examples, confirm that the code works
by walking through every step exactly as written:

- If there are any prerequisite steps or additional setup, begin at the assumed
  starting point and complete the prerequisites exactly. Confirm that every step is correct, comprehensive, and necessary.
- If you have to make changes or take additional steps to get an example to
  work, make sure those details are reflected in the Doc.

Considerations for Robot Users, LLMs, and Other AI Models
--------------------

.. note::

   This guidance uses phrases such as "robots *understand*" or "models *interpret* code" as convenient shorthand when discussing robot users. interpreted to mean that robot users have human-like reasoning capabilities.

Robot users, such as LLMs (large language models), web crawlers, and other AI models, also consume our Docs content. However, robot users don't understand, think, or learn like a human user. They don't "read code" or "get context." Instead, they are predictive engines that pattern-match, tokenize, and respond based on probability and training data.

To write code examples that robot users can understand quickly and interpret accurately, keep the following considerations in mind:

- Code examples are as complete as possible. If there are omissions or truncations in an example, indicate the omissions clearly (for example, a code comment ``// imports omitted for brevity`` at the relevant line).
- Ensure that transitions to code examples are obvious and explicit.
- Never use inline code markup for code examples. Always use a code block directive, preferably as a shared include.
- Use placeholder variables only when necessary, and ensure they are clearly commented or explained. Avoid placeholder variables that are not self-explanatory.
- Do not insert explanations mid-block. Commentary should be before or after the code block, or as inline comments.



- Code examples are self-contained and provide enough information for robot users to understand their purpose without relying on surrounding text or context.
- code examples that provide enough information for robot users to understand their purpose without relying on surrounding text or context.
- Code is consistently formatted and uses syntax-highlighted Markdown fences (eg., java).
- Uses canonical imports, namespaces, and entry points (no unnecessary aliasing).
- Placeholder variables are either avoided or clearly commented/explained.
- Code includes concise, purposeful inline comments explaining intent or function.
- File names and structure follow standard conventions (e.g., main.py, index.js, etc.).
- Code blocks are single-language — no mixing languages inside one fence.
- All code fences are properly closed to avoid truncating downstream content.


 Nice-to-Have: Improves Model Understanding and UX
- Function/variable names are descriptive and realistic (connectToMongoDB() vs foo()).
- Includes expected output blocks after commands or API calls when relevant.
- Uses consistent multi-language tab structures for examples (e.g., JS/Python/Java).
- Avoids over-abstraction — keeps just enough context to make examples meaningful.
- Keeps logic explicit, even if it's less clever (avoid nested ternaries, dense one-liners).
- Experimental, deprecated, or unsafe examples are clearly annotated with warnings.
- Avoids mixing config, shell, and code in the same block — separate into clearly labeled sections.
- Examples reflect the latest stable version of the tooling or API unless otherwise stated.


When writing code examples, there are a few considerations to keep in mind for robot users that also consume our Docs content. Unlike human users, robot users cannot interpret meaning or context directly.



.. collapsible::
   :heading: Prerequisites
   :sub_heading: Complete the previous steps in the tutorial and install dependencies
   :expanded:

   Body content goes here.

.. AI models and web crawlers--such as LLMs, Googlebot, or machine translation engines--are referred to as robot users. They also consume our Docs content, so it's important to ensure that our Docs content, including code examples, effectively meets the needs of both human and robot users. Many of these considerations apply to code examples the same way they do to the rest of our Docs.

.. For example, the following are applicable to both human and robot users:

.. - Clear, descriptive headings and subheadings make it easier for users to understand the overall structure and purpose of the page and its elements, including code examples.
.. - Enforcing a consistent, standard style and formatting, for page copy and code, ensures that users can parse the content easily and effectively.

.. - Use clear and descriptive variable names, function names, and class names. Avoid using generic or ambiguous names that don't convey the purpose of the code. This helps robot users understand the code's functionality and intent.

.. The considerations specific to robot users are related to how LLMs and other AI models interpret meaning, which is very limited compared to human users can. Robot users can't reliably understand or assume context or intent, extrapolate extract or assume meaning from the surrounding text or context.



.. The following are considerations to help optimize code examples for robot users, especially LLMs:


.. -

.. - Provide context for every code example through introductory text and succinct code comments. See the
..   `Provide Context and Comments <#provide-context-and-comments>`__ section
..   above for more information.

.. - For longer code examples (such as a single function), opt for keeping it as a single code block with explanatory inline comments as needed. Avoid splitting it into smaller blocks interspersed in the page text.

.. .. TODO Add explanatory image