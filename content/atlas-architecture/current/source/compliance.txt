.. _arch-center-compliance:

===============================================
Features for Compliance with External Standards
===============================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: GDPR, ISO, PCI-DDS, FedRAMP, HIPAA
   :description: Learn how MongoDB Atlas meets compliance and regulation controls.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: onecol

Use the following {+service+} features to address compliance requirements.

.. _arch-center-compliance-certs:

Certifications and Compliance with Regulations
----------------------------------------------

To help you address security, compliance, and privacy requirements, MongoDB {+service+}
aims to deliver the highest levels of standards conformance and regulatory
compliance.

{+service+} data platform undergoes rigorous independent third-party audits to verify
its security, privacy, and organizational controls. These audits help ensure
that the platform  meets compliance and regulatory requirements, including
those specific to highly-regulated industries.

{+service+} adheres to compliance frameworks including ISO/IEC 27001, 
SOC2 Type II, PCI DSS, and others listed in our |atlas-trust|.  You can 
view and download attestations, compliance reports, and other 
compliance documentation in our `Customer Trust Portal <https://trust.mongodb.com/>`__.

.. _arch-center-compliance-atlas-gov:

MongoDB {+service+} for Government
-----------------------------------

MongoDB |atlas-gov| is the first fully-managed multi-cloud developer data platform
authorized at FedRAMP® Moderate that:

- Uses a secure, fully-managed, dedicated FedRAMP® authorized environment.
- Supports the unique requirements and missions of the U.S. Government.
- Offers a set of features and the scalability needed to modernize legacy applications.

.. _arch-center-resource-policies:

{+arps+} 
-----------------------

To support your compliance requirements, {+arps+} offer 
organization-wide controls for configuring and managing {+service+} resources in 
alignment with your security, compliance, and operational best practices. Organization 
Owners can define rules that govern user actions when creating or modifying resources 
such as clusters, network configurations, and project settings. We 
recommend that you set a resource policy according to your company's 
standards at Organization creation time.

{+arps+} support your compliance objectives by enabling you to:

- **Enforce Minimum TLS Version:** Mandate the use of modern |tls| protocols across 
  all {+service+} deployments, enhancing security and mitigating risks associated with 
  older, less secure versions. This ensures adherence to contemporary encryption 
  standards for all data in transit.

- **Customize Default TLS Ciphers:** Select a specific set of allowed |tls| ciphers 
  to optimize security based on operational needs while eliminating 
  vulnerabilities associated with legacy encryption methods. This allows for fine-tuning 
  encryption protocols to meet specific compliance requirements.

- **Restrict VPC Peering Modifications:** Enable secure cross-network communication 
  through established |vpc| peering connections while preventing configuration changes. 
  Current project-level peerings remain active with their existing routing tables 
  and security protocols, allowing customers to view but not alter these one-to-one 
  |vpc| relationships and their associated network control mechanisms.

- **Restrict Private Endpoint Modifications:** Maintain secure service connectivity 
  through existing private endpoint configurations with read-only access. Project-level 
  connections remain functional with their current private IP addressing scheme, while 
  customers can view but not modify these dedicated service connection points within 
  their |vpc|.

- **Control IP Access Lists:** Prevent unauthorized modifications to IP access lists, 
  ensuring consistent and controlled network access to your databases. This strengthens 
  database security by preserving carefully defined network boundaries and protecting 
  against accidental configuration changes.

- **Set Cluster Tier Limits:** Define deployment guardrails by establishing both 
  maximum and minimum cluster size limits that developers must adhere to when 
  provisioning resources. This boundary-setting approach ensures teams can deploy 
  appropriately sized environments within organization-approved parameters, optimizing 
  infrastructure utilization while enforcing consistent resource allocation policies 
  across all project workloads.

- **Set Maintenance Window Requirement:** Enhance platform stability by requiring 
  a maintenance window for all projects. This governance control ensures organizations 
  establish a predictable update period (without dictating a specific timeframe) 
  to supporting consistent system maintenance according to operational needs.

- **Set Cloud Provider and Regions:** Set your cloud provider and 
  distribute clusters across multiple regions and providers to meet 
  data residency requirements and ensure high availability.

- **Block Usage of the Wildcard IP Address:** Ensure that your cluster 
  is only accessible from explicitly permitted IP addresses by not 
  including the wildcard IP address in your IP access list or firewall 
  rules. The wildcard IP address is 0.0.0.0/0 and allows access from 
  anywhere.

To learn more, see :atlas:`Atlas Resource Policies </atlas-resource-policies/>`.

The following resource policy example, allows clusters to be created 
on |aws|:

.. code-block::
   :copyable: true

   {
     "name": "Only Allow Clusters on AWS",
     "policies": [
       {
         "body": "forbid ( principal, action == cloud::Action::\"cluster.createEdit\", resource) unless { context.cluster.cloudProviders   == [cloud::cloudProvider::\"aws\"] };"
       }
     ]
   }

The following example creates a Terraform resource policies file you 
can use to enforce resource policies in your application. The file 
enforces the following policies:

- Restricts cluster modification to only a specified cloud provider.
- Forbids cluster access from a wildcard IP address.
- Specifies a minimum and maximum cluster size.
- Prevents modification to private endpoints.

.. include:: /includes/examples/terraform/tf-example-resource-policy.rst

.. _arch-center-compliance-encryption:

Encryption
----------

You can implement encryption to ensure data security and compliance across all
stages of data handling. Encryption is one of the most common requirements for 
ensuring compliance with certain standards and {+service+} offers a robust set 
of encryption options to satisfy the requirements.

- By default, |service| encrypts data in transit. To ensure data privacy and
  regulatory compliance, |service| requires |tls-ssl| to encrypt the connections
  to your databases.

- By default, |service| encrypts all data at rest using 
  `cloud provider disk encryption <https://www.mongodb.com/docs/atlas/security-kms-encryption/>`__. When using {+service+} cloud backups,
  |service| uses |AES-256|
  encryption to encrypt all data stored in |s3| buckets in your |service|
  {+database-deployments+}.
  In addition, |service| supports using |aws| |kms|, |akv|, and |gcp| to
  encrypt storage engines and cloud provider backups. To learn more, see
  :atlas:`Encryption at Rest using your Key Management 
  </security-kms-encryption>`. 

- You can use :manual:`Queryable Encryption </core/queryable-encryption/>`
  to secure queries on encrypted data on select, sensitive fields 
  in a document stored on MongoDB. With Queryable Encryption, sensitive
  information remains protected even when users run queries on data.

  Use  well-researched non-deterministic encryption schemes to maintain
  a balance between security and functionality.

  With {+qe+}, you can perform the following tasks:

  - Encrypt sensitive data fields from the client-side.
  - Store sensitive data fields as fully randomized encrypted data on the database 
    {+cluster+}-side, run with {+service+}.
  - Run expressive queries on the encrypted data.

  MongoDB completes these tasks without the server having knowledge of the data
  it's processing.

  When using Queryable Encryption, sensitive data is encrypted throughout its 
  lifecycle: in transit, at rest, in use,
  in logs, and backups. The data is only ever decrypted on the client-side,
  since only you have access to the encryption keys.

  You can set up {+qe+} using the following mechanisms:

  - :manual:`Automatic Encryption </core/queryable-encryption/>`
    enables you to perform encrypted read and write operations without
    having to add explicit calls to encrypt and decrypt fields. We recommend automatic encryption in most situations, as it streamlines the process of writing your client application. With automatic encryption, MongoDB automatically encrypts and decrypts fields in read and write operations.
  - :manual:`Explicit Encryption </core/queryable-encryption/fundamentals/manual-encryption/>` enables
    you to perform encrypted read and write operations through your MongoDB
    driver's encryption library. You must specify the logic for encryption
    with this library throughout your application. Explicit encryption provides fine-grained control over security, at the cost of increased complexity when configuring collections and writing code for MongoDB Drivers. With explicit encryption, you specify how to encrypt fields in your document for each operation you perform on the database, and you include this logic throughout your application.

    To learn more, see :manual:`Use Explicit Encryption </core/queryable-encryption/tutorials/explicit-encryption/>`.

.. _arch-center-compliance-data-sovereignty:

Data Sovereignty
----------------

{+service+} supports over 110+ regions across |aws|, |azure|, and |gcp|. 
This global distribution of supported locations ensures that you can 
provision clusters and store data that complies with your data sovereignty 
and compliance requirements. Understanding the data sovereignty requirements 
for any application being built on {+service+} is necessary to ensure you 
stay compliant with proper governance.

You can simplify your data sovereignty compliance by deploying your 
Atlas clusters across multiple regions. When you deploy a 
:ref:`multi-region deployment paradigm 
<arch-center-paradigms-multi-region>`, you can partition your data to 
reside in distinct regions, each situated in a different geographical 
region.  For example, you can store European customer data in Europe 
and U.S. customer data in the U.S. This allows you to comply with data 
sovereignty regulations and reduces latency for users accessing data 
from their respective regions.

.. _arch-center-compliance-backup-distribution:

Backup Snapshot Distribution
----------------------------

You can distribute backup snapshots and oplog data across multiple regions.
For example, you can satisfy compliance requirements and store backups in
different geographical locations to ensure disaster recovery
in case of regional outages. To learn more, see :atlas:`Snapshot Distribution </backup/cloud-backup/snapshot-distribution/>`.

.. _arch-center-compliance-backup-compliance-policy:

Backup Compliance Policy
------------------------

You can use |bcp| in {+service+} to secure business-critical data. You can prevent
all backup snapshots and oplog data stored in {+service+} from being modified
or deleted for a predefined retention period by any user, regardless of their
{+service+} role.

This guarantees that your backups are fully WORM (Write Once Read Many)-compliant.
Only a designated, authorized
user can turn off this protection after completing a verification
process with MongoDB support and legal. This adds a mandatory manual 
delay and cooldown period so that an attacker cannot change the backup 
policy and export the data. To learn more, see :atlas:`Configure a Backup Compliance Policy </backup/cloud-backup/backup-compliance-policy/>`.
