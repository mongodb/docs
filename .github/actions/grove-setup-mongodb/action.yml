name: 'Grove - Setup MongoDB with Sample Data'
description: 'Sets up a local MongoDB instance using Atlas CLI and loads sample data for Grove code examples'
inputs:
  port:
    description: 'MongoDB port'
    required: false
    default: '27017'
  deployment_name:
    description: 'Atlas deployment name'
    required: false
    default: 'myLocalRs1'
  load_sample_data:
    description: 'Whether to load sample data'
    required: false
    default: 'true'
  cache_key_suffix:
    description: 'Additional suffix for cache key'
    required: false
    default: ''
  enforce_checksums:
    description: 'Enforce strict checksum verification (set to false for iterative local PR testing)'
    required: false
    default: 'true'

outputs:
  connection_string:
    description: 'MongoDB connection string'
    value: ${{ steps.connection.outputs.connection_string }}
  cache_hit:
    description: 'Whether MongoDB setup was restored from cache'
    value: ${{ steps.cache-mongodb.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Cache MongoDB setup
      id: cache-mongodb
      uses: actions/cache@v4
      with:
        path: |
          /tmp/mongodb-tools
          /tmp/sampledata.archive
        key: mongodb-tools-${{ runner.os }}-v1${{ inputs.cache_key_suffix }}
        restore-keys: |
          mongodb-tools-${{ runner.os }}-v1

    - name: Install Atlas CLI
      if: steps.cache-mongodb.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail

        ENFORCE="${{ inputs.enforce_checksums }}"

        # Security: Define expected checksums for verification
        ATLAS_CLI_URL="https://fastdl.mongodb.org/mongocli/mongodb-atlas-cli_1.42.2_linux_x86_64.deb"
        # IMPORTANT: Replace with the official published SHA256. If value remains CHANGE_ME or not 64 hex chars, verification will fail.
        ATLAS_CLI_SHA256="9154ed602c506866cd51c7d7ad74ce192eb360c226f12c49a9016bd4c4d5a8ce"

        # Security: Use secure temporary directory
        SECURE_TMP=$(mktemp -d)
        trap "rm -rf $SECURE_TMP" EXIT

        # Download with verification
        curl -fsSL "$ATLAS_CLI_URL" --output "$SECURE_TMP/atlas-cli.deb"

        # Security: Verify checksum (enforced once real hash is present)
        if [[ "$ENFORCE" == "true" ]]; then
          if [[ "$ATLAS_CLI_SHA256" =~ ^[0-9a-fA-F]{64}$ ]]; then
            echo "$ATLAS_CLI_SHA256  $SECURE_TMP/atlas-cli.deb" | sha256sum -c --strict --status || { echo "ERROR: Atlas CLI checksum mismatch" >&2; exit 1; }
          else
            echo "ERROR: Atlas CLI SHA256 not set correctly (value: $ATLAS_CLI_SHA256). Set a valid 64-hex hash before merging." >&2
            exit 1
          fi
        else
          if [[ "$ATLAS_CLI_SHA256" =~ ^[0-9a-fA-F]{64}$ ]]; then
            if ! echo "$ATLAS_CLI_SHA256  $SECURE_TMP/atlas-cli.deb" | sha256sum -c --strict --status; then
              echo "ERROR: Atlas CLI checksum mismatch even with enforcement disabled." >&2; exit 1; fi
          else
            echo "WARNING: Skipping Atlas CLI checksum enforcement (placeholder or missing hash)" >&2
          fi
        fi

        # Install with minimal privileges
        sudo apt install -y "$SECURE_TMP/atlas-cli.deb"
        mkdir -p /tmp/mongodb-tools
        cp /usr/bin/atlas /tmp/mongodb-tools/

    - name: Install MongoDB Database Tools
      if: steps.cache-mongodb.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail

        ENFORCE="${{ inputs.enforce_checksums }}"

        # Security: Define expected checksums
        DB_TOOLS_URL="https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.13.0.deb"
        # IMPORTANT: Replace with official published SHA256.
        DB_TOOLS_SHA256="6a54a62b2cfc81e4c3b88d6eaabf949133d3666375d9262fb24c77b16e37e2ae"

        # Security: Use secure temporary directory
        SECURE_TMP=$(mktemp -d)
        trap "rm -rf $SECURE_TMP" EXIT

        # Download with verification
        curl -fsSL "$DB_TOOLS_URL" --output "$SECURE_TMP/mdb-db-tools.deb"

        if [[ "$ENFORCE" == "true" ]]; then
          if [[ "$DB_TOOLS_SHA256" =~ ^[0-9a-fA-F]{64}$ ]]; then
            echo "$DB_TOOLS_SHA256  $SECURE_TMP/mdb-db-tools.deb" | sha256sum -c --strict --status || { echo "ERROR: DB Tools checksum mismatch" >&2; exit 1; }
          else
            echo "ERROR: DB Tools SHA256 not set correctly (value: $DB_TOOLS_SHA256). Set a valid 64-hex hash before merging." >&2
            exit 1
          fi
        else
            if [[ "$DB_TOOLS_SHA256" =~ ^[0-9a-fA-F]{64}$ ]]; then
              if ! echo "$DB_TOOLS_SHA256  $SECURE_TMP/mdb-db-tools.deb" | sha256sum -c --strict --status; then
                echo "ERROR: DB Tools checksum mismatch even with enforcement disabled." >&2; exit 1; fi
            else
              echo "WARNING: Skipping DB Tools checksum enforcement (placeholder or missing hash)" >&2
            fi
        fi

        # Install with minimal privileges
        sudo apt install -y "$SECURE_TMP/mdb-db-tools.deb"
        cp /usr/bin/mongorestore /tmp/mongodb-tools/
        cp /usr/bin/mongoimport /tmp/mongodb-tools/ || true

    - name: Download sample data
      if: steps.cache-mongodb.outputs.cache-hit != 'true' && inputs.load_sample_data == 'true'
      shell: bash
      run: |
        set -euo pipefail

        # Security: Validate URL and use secure download
        SAMPLE_DATA_URL="https://atlas-education.s3.amazonaws.com/sampledata.archive"

        # Security: Use secure temporary location
        SECURE_TMP=$(mktemp -d)
        trap "rm -rf $SECURE_TMP" EXIT

        # Download to secure location first, then move
        curl -fsSL --retry 5 --retry-delay 2 "$SAMPLE_DATA_URL" --output "$SECURE_TMP/sampledata.archive"

        # Optional sample data integrity verification (if checksum file provided alongside the action)
        SAMPLE_DATA_SHA_FILE="${GITHUB_ACTION_PATH}/sampledata.sha256"
        if [[ -f "$SAMPLE_DATA_SHA_FILE" ]]; then
          if grep -E '^[0-9a-fA-F]{64}  sampledata.archive$' "$SAMPLE_DATA_SHA_FILE" >/dev/null 2>&1; then
            (cd "$SECURE_TMP" && sha256sum -c "$SAMPLE_DATA_SHA_FILE" --strict --status) || { echo "ERROR: sampledata.archive checksum mismatch" >&2; exit 1; }
          else
            echo "WARNING: sampledata.sha256 present but not in expected format; skipping verification" >&2
          fi
        else
          echo "INFO: No sampledata.sha256 provided; skipping sample data checksum verification" >&2
        fi

        mv "$SECURE_TMP/sampledata.archive" /tmp/sampledata.archive

    - name: Restore tools from cache
      if: steps.cache-mongodb.outputs.cache-hit == 'true'
      shell: bash
      run: |
        set -euo pipefail

        # Security: Verify cached files exist and are executable before copying
        if [[ -f /tmp/mongodb-tools/atlas && -x /tmp/mongodb-tools/atlas ]]; then
          sudo cp /tmp/mongodb-tools/atlas /usr/bin/
        fi
        if [[ -f /tmp/mongodb-tools/mongorestore && -x /tmp/mongodb-tools/mongorestore ]]; then
          sudo cp /tmp/mongodb-tools/mongorestore /usr/bin/
        fi
        if [[ -f /tmp/mongodb-tools/mongoimport && -x /tmp/mongodb-tools/mongoimport ]]; then
          sudo cp /tmp/mongodb-tools/mongoimport /usr/bin/
        fi

    - name: Set up MongoDB deployment
      shell: bash
      run: |
        set -euo pipefail

        # Security: Validate inputs
        if [[ ! "${{ inputs.deployment_name }}" =~ ^[a-zA-Z0-9_-]+$ ]]; then
          echo "ERROR: Invalid deployment name: ${{ inputs.deployment_name }}" >&2
          exit 1
        fi

        if [[ ! "${{ inputs.port }}" =~ ^[0-9]+$ ]] || [[ "${{ inputs.port }}" -lt 1024 ]] || [[ "${{ inputs.port }}" -gt 65535 ]]; then
          echo "ERROR: Invalid port: ${{ inputs.port }}" >&2
          exit 1
        fi

        atlas deployments setup "${{ inputs.deployment_name }}" --type local --port "${{ inputs.port }}" --force

        # Readiness poll: wait for port to accept connections (max ~20s)
        for i in {1..20}; do
          if nc -z localhost "${{ inputs.port }}" 2>/dev/null; then
            echo "MongoDB is listening on port ${{ inputs.port }}"; break; fi
          sleep 1
          if [[ $i -eq 20 ]]; then
            echo "ERROR: MongoDB not ready on port ${{ inputs.port }}" >&2; exit 1; fi
        done

    - name: Load sample data
      if: inputs.load_sample_data == 'true'
      shell: bash
      run: |
        set -euo pipefail

        # Security: Validate port input
        if [[ ! "${{ inputs.port }}" =~ ^[0-9]+$ ]]; then
          echo "ERROR: Invalid port for mongorestore: ${{ inputs.port }}" >&2
          exit 1
        fi

        if [ -f /tmp/sampledata.archive ]; then
          # Security: Verify file is readable and not empty
          if [[ -r /tmp/sampledata.archive && -s /tmp/sampledata.archive ]]; then
            mongorestore --archive=/tmp/sampledata.archive --port="${{ inputs.port }}" --quiet
          else
            echo "ERROR: Sample data file is not readable or empty" >&2
            exit 1
          fi
        else
          # Fallback download with security measures
          SECURE_TMP=$(mktemp -d)
          trap "rm -rf $SECURE_TMP" EXIT

          curl -fsSL https://atlas-education.s3.amazonaws.com/sampledata.archive -o "$SECURE_TMP/sampledata.archive"

          # Security: Verify downloaded file
          if [[ -r "$SECURE_TMP/sampledata.archive" && -s "$SECURE_TMP/sampledata.archive" ]]; then
            mongorestore --archive="$SECURE_TMP/sampledata.archive" --port="${{ inputs.port }}" --quiet
          else
            echo "ERROR: Downloaded sample data file is not readable or empty" >&2
            exit 1
          fi
        fi

    - name: Set connection string output
      id: connection
      shell: bash
      run: |
        set -euo pipefail

        # Security: Validate port before creating connection string
        if [[ ! "${{ inputs.port }}" =~ ^[0-9]+$ ]]; then
          echo "ERROR: Invalid port for connection string: ${{ inputs.port }}" >&2
          exit 1
        fi

        echo "connection_string=mongodb://localhost:${{ inputs.port }}/?directConnection=true" >> $GITHUB_OUTPUT
