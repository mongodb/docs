===========
Development
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. COMMENT This file is included in another file.  Keep the subtitle levels as is.

The following checklist, along with the
:doc:`/administration/production-checklist-operations`, provides
recommendations to help you avoid issues in your production MongoDB
deployment.

.. start-content

Data Durability
~~~~~~~~~~~~~~~

.. cssclass:: checklist

   - Ensure that your replica set includes at least three data-bearing nodes
     with ``w:majority`` :doc:`write concern
     </reference/write-concern>`. Three data-bearing nodes are
     required for replica-set wide data durability.

   - Ensure that all instances use :doc:`journaling </core/journaling>`.

Schema Design
~~~~~~~~~~~~~

.. cssclass:: checklist

   - Ensure that your schema design does not rely on indexed arrays that
     grow in length without bound. Typically, best performance can
     be achieved when such indexed arrays have fewer than 1000 elements.

Replication
~~~~~~~~~~~

.. cssclass:: checklist

   - Do not use secondary reads to scale overall read throughput. See:
     `Can I use more replica nodes to scale`_ for an overview of read
     scaling. For information about secondary reads, see:
     :doc:`/core/read-preference`.

     .. _Can I use more replica nodes to scale: http://askasya.com/post/canreplicashelpscaling

Sharding
~~~~~~~~

.. cssclass:: checklist

   - Ensure that your shard key distributes the load evenly on your shards.
     See: :doc:`/core/sharding-shard-key` for more information.

   - Use :ref:`targeted operations <sharding-mongos-targeted>`
     for workloads that need to scale with the number of shards.

   - Always read from primary nodes for non-targeted queries that may
     be sensitive to `stale or orphaned data <http://blog.mongodb.org/post/74730554385/background-indexing-on-secondaries-and-orphaned>`_.

   - :doc:`Pre-split and manually balance chunks
     </tutorial/create-chunks-in-sharded-cluster>` when inserting large
     data sets into a new non-hashed sharded collection. Pre-splitting
     and manually balancing enables the insert load to be distributed
     among the shards, increasing performance for the initial load.

Drivers
~~~~~~~

.. cssclass:: checklist

   - Make use of connection pooling. Most MongoDB drivers support
     connection pooling. Adjust the connection pool size to suit your
     use case, beginning at 110-115% of the typical number of concurrent
     database requests.

   - Ensure that your applications handle transient write and read errors
     during replica set elections.

   - Ensure that your applications handle failed requests and retry them if
     applicable. Drivers **do not** automatically retry failed requests.

   - Use exponential backoff logic for database request retries.

   - Use :method:`cursor.maxTimeMS()` for reads and :ref:`wc-wtimeout` for
     writes if you need to cap execution time for database operations.
