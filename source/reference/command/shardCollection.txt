===============
shardCollection
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: shardCollection

   :doc:`Shards </sharding>` a collection to distribute its documents
   across shards. You must run :dbcommand:`enableSharding` on a
   database before running the :dbcommand:`shardCollection` command.
   The :dbcommand:`shardCollection` command must be run against the
   ``admin`` database.

   .. |command| replace:: :dbcommand:`shardCollection`

   .. include:: /includes/fact-dbcommand.rst

   :dbcommand:`shardCollection` has the following form:

   .. code-block:: javascript

      {
         shardCollection: "<database>.<collection>",
         key: <shardkey>,
         unique: <boolean>,
         numInitialChunks: <integer>,
         collation: { locale: "simple" }
      }

   :dbcommand:`shardCollection` has the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``shardCollection``
   
        - string
   
        - The :term:`namespace` of the collection to shard in the form
          ``<database>.<collection>``.
          
          
   
      * - ``key``
   
        - document
   
        - The index specification document to use as the
          :doc:`shard key </core/sharding-shard-key/>`. The shard key
          determines how MongoDB distributes the documents among the shards.
          
          The *key* of the index specification document is the field to use as
          the shard key. The *value* of the document must be one of the
          following:
          
          - ``1`` for :doc:`ranged based sharding </core/ranged-sharding>`
          
          - ``"hashed"`` to specify a
            :ref:`hashed shard key <hashed-shard-keys>`.
          
          Unless the collection is empty, the index must exist prior to the
          :dbcommand:`shardCollection` command. If the collection is empty,
          MongoDB creates the index prior to sharding the collection if the
          index that can support the shard key does not already exist.
          
          See also :ref:`sharding-shard-key-indexes`
          
          
   
      * - ``unique``
   
        - boolean
   
        - When ``true``, the ``unique`` option ensures that the underlying index
          enforces a unique constraint. Hashed shard keys do not support unique
          constraints. Defaults to ``false``.
          
          
   
      * - ``numInitialChunks``
   
        - integer

        - Specifies the initial number of chunks to create across all shards in
          the cluster when sharding an *empty* collection with a
          :ref:`hashed shard key <sharding-hashed-sharding>`. MongoDB
          will then create and balance chunks across the cluster. The
          ``numInitialChunks`` must result in less than ``8192`` per shard.
          
          .. versionchanged:: 4.0.3
          
             The option has no effect if zones and zone ranges have been
             defined for the empty collection. See :ref:`shardCollection-zones`.
          
          .. versionchanged:: 3.4
          
             If the collection is not empty or the shard key is not a hashed
             key, the operation returns an error.
          
          
   
      * - ``collation``
   
        - document
   
        - Optional. If the collection specified to ``shardCollection``
          has a default :doc:`collation </reference/collation>`,
          you *must* include a collation document with
          ``{ locale : "simple" }``, or
          the ``shardCollection`` command fails. At least one of the indexes
          whose fields support the shard key pattern must have the simple
          collation.
          
          
   


Considerations
--------------

Use
~~~

You can only shard a collection once.

Do **not** run more than one :dbcommand:`shardCollection` command on
the same collection at the same time.

.. include:: /includes/fact-cannot-unshard-collection.rst

Shard Keys
~~~~~~~~~~

Choosing the best shard key to effectively distribute load among your
shards requires some planning. Review :ref:`sharding-shard-key`
regarding choosing a shard key and restrictions.

.. _hashed-shard-keys:

Hashed Shard Keys
~~~~~~~~~~~~~~~~~

:ref:`Hashed shard keys <sharding-hashed-sharding>` use a
:doc:`hashed index </core/index-hashed>` of a
single field as the shard key.

Use the form ``{field: "hashed"}`` to specify a hashed shard key.
Hashed shard keys may not be compound indexes.

.. include:: /includes/note-hashed-shard-key-during-chunk-migration.rst

.. seealso:: :doc:`/core/hashed-sharding`

.. _shardCollection-zones:

Zone Sharding and Initial Chunk Distribution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/zoned-sharding-shard-operation-chunk-distribution-with-links.rst

The ``numInitialChunks`` option has no effect if zones and zone
ranges have been defined for the empty collection.

See :ref:`pre-define-zone-range-example` for an example.

.. seealso:: :ref:`initial-chunks`
 

Uniqueness
~~~~~~~~~~

If specifying ``unique: true``:

.. include:: /includes/extracts/shard-collection-unique-restriction-command.rst

See also :ref:`Sharded Collection and Unique Indexes
<sharding-shard-key-unique>`

.. include:: /includes/fact-shardCollection-collation.rst

Write Concern
~~~~~~~~~~~~~

.. include:: /includes/extracts/mongos-operations-wc-shard-collection.rst

Example
-------

The following operation enables sharding for the ``people`` collection
in the ``records`` database and uses the ``zipcode`` field as the
:ref:`shard key <shard-key>`:

.. code-block:: javascript

   db.adminCommand( { shardCollection: "records.people", key: { zipcode: 1 } } )

.. seealso::  :doc:`/sharding`
