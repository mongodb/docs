# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 18:48+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 44a683366ffc4bc38a35841a7e8ace56
#: ../source/reference/operator/aggregation/sort.txt:3
msgid "$sort (aggregation)"
msgstr ""

# 3e83f1ddecc14041995af479939abcc5
#: ../source/reference/operator/aggregation/sort.txt
msgid "On this page"
msgstr ""

# f76733b77f5b43d790fd1d1ee8be372d
#: ../source/reference/operator/aggregation/sort.txt:14
msgid "Definition"
msgstr ""

# 4439c43a0f964f03b475277fb5fc9890
#: ../source/reference/operator/aggregation/sort.txt:18
msgid ""
"Sorts all input documents and returns them to the pipeline in sorted "
"order."
msgstr ""

# a36a4b772c2f4528b9479d28809b2e9b
#: ../source/reference/operator/aggregation/sort.txt:21
msgid "The :pipeline:`$sort` stage has the following prototype form:"
msgstr ""

# 6cfe839ec19c4d7daad871cb57adaf0c
#: ../source/reference/operator/aggregation/sort.txt:27
msgid ""
":pipeline:`$sort` takes a document that specifies the field(s) to sort by"
" and the respective sort order. ``<sort order>`` can have one of the "
"following values:"
msgstr ""

# a0b45df5f7d3489faea7296d5fca3797
#: ../source/reference/operator/aggregation/sort.txt:31
msgid "``1`` to specify ascending order."
msgstr ""

# ad783aa89f414572a29b3683a6a22163
#: ../source/reference/operator/aggregation/sort.txt:33
msgid "``-1`` to specify descending order."
msgstr ""

# c7504a9880984e6bb419d416818ea505
#: ../source/reference/operator/aggregation/sort.txt:35
msgid ""
"``{ $meta: \"textScore\" }`` to sort by the computed ``textScore`` "
"metadata in descending order. See :ref:`sort-pipeline-metadata` for an "
"example."
msgstr ""

# 7c9bb04b7a544ec38e1e7a5c7355b3e0
#: ../source/reference/operator/aggregation/sort.txt:40
msgid "Examples"
msgstr ""

# 6fcd3371724f4591bd42b586987a7670
#: ../source/reference/operator/aggregation/sort.txt:45
msgid "Ascending/Descending Sort"
msgstr ""

# 7cda0f023ef9483b98619b826b2a08ae
#: ../source/reference/operator/aggregation/sort.txt:47
msgid ""
"For the field or fields to sort by, set the sort order to ``1`` or ``-1``"
" to specify an ascending or descending sort respectively, as in the "
"following example:"
msgstr ""

# 37de32b4007440ef84435a96dd007f0b
#: ../source/reference/operator/aggregation/sort.txt:58
msgid ""
"This operation sorts the documents in the ``users`` collection, in "
"descending order according by the ``age`` field and then in ascending "
"order according to the value in the ``posts`` field."
msgstr ""

# 73cf41ba4dd74d018b0cfa5989f745d8
#: ../source/includes/fact-sort-order.rst:1
msgid ""
"When comparing values of different :ref:`BSON types <bson-types>`, "
"MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

# b1993feb0f2b4b59b609dfbc00f2827e
#: ../source/includes/fact-sort-order.rst:4
msgid "MinKey (internal type)"
msgstr ""

# d7cd02c5c409483484bae024d016ab06
#: ../source/includes/fact-sort-order.rst:5
msgid "Null"
msgstr ""

# 52fd3a379acf4ef099782e5ab726ec99
#: ../source/includes/fact-sort-order.rst:6
msgid "Numbers (ints, longs, doubles, decimals)"
msgstr ""

# 69a8ce1ac1a142bcb9b9666317322a31
#: ../source/includes/fact-sort-order.rst:7
msgid "Symbol, String"
msgstr ""

# 9e3d4790fbf948ef97fff5cbce5df5a6
#: ../source/includes/fact-sort-order.rst:8
msgid "Object"
msgstr ""

# d82a2b786075485980e0765fd69ca027
#: ../source/includes/fact-sort-order.rst:9
msgid "Array"
msgstr ""

# aa8967f33c034c6e940949d9f5e4d7a6
#: ../source/includes/fact-sort-order.rst:10
msgid "BinData"
msgstr ""

# eb8ca35923b34d0cac5c0b751067a1c0
#: ../source/includes/fact-sort-order.rst:11
msgid "ObjectId"
msgstr ""

# b1b4e7d6c00e4e1993e2477eac41d37b
#: ../source/includes/fact-sort-order.rst:12
msgid "Boolean"
msgstr ""

# 841a24b756834654a55683e474d29d6a
#: ../source/includes/fact-sort-order.rst:13
msgid "Date"
msgstr ""

# f5e68cdcfbac44e58433873b667d4e61
#: ../source/includes/fact-sort-order.rst:14
msgid "Timestamp"
msgstr ""

# 7835c965ab2542f79316513a44270a72
#: ../source/includes/fact-sort-order.rst:15
msgid "Regular Expression"
msgstr ""

# e268aa2290164736b4a4d235fbf51d5f
#: ../source/includes/fact-sort-order.rst:16
msgid "MaxKey (internal type)"
msgstr ""

# 1a1acf72a9c84950b859a4ee39e42a90
#: ../source/reference/operator/aggregation/sort.txt:64
msgid ""
"For details on the comparison/sort order for specific types, see :ref"
":`bson-types-comparison-order`."
msgstr ""

# fe23b2507da44a408e60008e34059f79
#: ../source/reference/operator/aggregation/sort.txt:70
msgid "Metadata Sort"
msgstr ""

# 4886e155e84c48f2b1b723f23ffbc988
#: ../source/reference/operator/aggregation/sort.txt:72
msgid ""
"Specify in the ``{ <sort-key> }`` document, a new field name for the "
"computed metadata and specify the :expression:`$meta` expression as its "
"value, as in the following example:"
msgstr ""

# d06c6e3c4696450bb6ac8b0d14bfe032
#: ../source/reference/operator/aggregation/sort.txt:85
msgid ""
"This operation uses the :query:`$text` operator to match the documents, "
"and then sorts first by the ``\"textScore\"`` metadata and then by "
"descending order of the ``posts`` field. The specified metadata "
"determines the sort order. For example, the ``\"textScore\"`` metadata "
"sorts in descending order. See :expression:`$meta` for more information "
"on metadata."
msgstr ""

# 942c8f46d87f47d5b141d7a412799512
#: ../source/reference/operator/aggregation/sort.txt:95
msgid "``$sort`` Operator and Memory"
msgstr ""

# c4f21172abae4b3ea88c84f3ca93d584
#: ../source/reference/operator/aggregation/sort.txt:100
msgid "``$sort`` + ``$limit`` Memory Optimization"
msgstr ""

# 12a62fec0ec14a12ab13a33c87c2ed78
#: ../source/includes/fact-agg-sort-limit.rst:1
msgid ""
"When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit` in the"
" pipeline, the :pipeline:`$sort` operation only maintains the top ``n`` "
"results as it progresses, where ``n`` is the specified limit, and MongoDB"
" only needs to store ``n`` items in memory. This optimization still "
"applies when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the "
":ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

# 974b5a5acc564f31bf7b20bf71568cb0
#: ../source/includes/fact-agg-sort-limit.rst:8
msgid ""
"Before MongoDB 2.4, :pipeline:`$sort` would sort all the results in "
"memory, and then limit the results to n results."
msgstr ""

# beef9ff107d549c6ab60be20439c0bd0
#: ../source/includes/fact-optimizations-subject-to-change.rst:1
msgid "Optimizations are subject to change between releases."
msgstr ""

# 3c3978c9558349cf8a19b77a38eb44f0
#: ../source/reference/operator/aggregation/sort.txt:109
msgid "``$sort`` and Memory Restrictions"
msgstr ""

# bd6acc2d1544484abc1e50ca819f1a42
#: ../source/reference/operator/aggregation/sort.txt:111
msgid ""
"The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By "
"default, if the stage exceeds this limit, :pipeline:`$sort` will produce "
"an error. To allow for the handling of large datasets, set the "
"``allowDiskUse`` option to ``true`` to enable :pipeline:`$sort` "
"operations to write to temporary files. See the ``allowDiskUse`` option "
"in :method:`db.collection.aggregate()` method and the "
":dbcommand:`aggregate` command for details."
msgstr ""

# c8a77acdd12b4dc0b6e2d5e7aa079f24
#: ../source/reference/operator/aggregation/sort.txt:119
msgid ""
"The memory limit for :pipeline:`$sort` changed from 10 percent of RAM to "
"100 megabytes of RAM."
msgstr ""

# ada47d64085242109322748ecb6a6a14
#: ../source/reference/operator/aggregation/sort.txt:124
msgid "``$sort`` Operator and Performance"
msgstr ""

# 8a471b6bcc124fe388f58bb6591ab893
#: ../source/reference/operator/aggregation/sort.txt:126
msgid ""
":pipeline:`$sort` operator can take advantage of an index when placed at "
"the **beginning** of the pipeline or placed **before** the "
":pipeline:`$project`, :pipeline:`$unwind`, and :pipeline:`$group` "
"aggregation operators. If :pipeline:`$project`, :pipeline:`$unwind`, or "
":pipeline:`$group` occur prior to the :pipeline:`$sort` operation, "
":pipeline:`$sort` cannot use any indexes."
msgstr ""

# d0703ac179284ff8bca7594bf0df69de
#: ../source/reference/operator/aggregation/sort.txt:138
msgid ""
":doc:`/tutorial/aggregation-zip-code-data-set`, :doc:`/tutorial"
"/aggregation-with-user-preference-data`"
msgstr ""

#~ msgid ""
#~ "The :pipeline:`$sort` :term:`pipeline` operator "
#~ "sorts all input documents and returns"
#~ " them to the pipeline in sorted "
#~ "order."
#~ msgstr ""

#~ msgid "Consider the following prototype form:"
#~ msgstr ""

#~ msgid ""
#~ "This sorts the documents in the "
#~ "collection named ``<collection-name>``, "
#~ "according to the key and specification"
#~ " in the ``{ <sort-key> }`` "
#~ "document. The sort key has the "
#~ "following syntax:"
#~ msgstr ""

#~ msgid ""
#~ "The ``{ <sort-key> }`` document "
#~ "can specify :ref:`ascending or descending "
#~ "sort on existing fields <sort-"
#~ "pipeline-asc-desc>` or :ref:`sort on "
#~ "computed metadata <sort-pipeline-metadata>`."
#~ msgstr ""

#~ msgid "Behaviors"
#~ msgstr ""

#~ msgid ""
#~ "Specify in the ``{ <sort-key> }``"
#~ " document the field or fields to "
#~ "sort by and a value of ``1`` "
#~ "or ``-1`` to specify an ascending "
#~ "or descending sort respectively, as in"
#~ " the following example:"
#~ msgstr ""

#~ msgid ""
#~ "When a :pipeline:`$sort` immediately precedes"
#~ " a :pipeline:`$limit` in the pipeline, "
#~ "the :pipeline:`$sort` operation only maintains"
#~ " the top n results as it "
#~ "progresses, where n is the specified "
#~ "limit, and MongoDB only needs to "
#~ "store the number of items specified "
#~ "by :pipeline:`$limit` in memory."
#~ msgstr ""

#~ msgid ""
#~ "The :pipeline:`$sort` stage has a limit"
#~ " of 100 megabytes of RAM. By "
#~ "default, if the stage exceeds this "
#~ "limit, :pipeline:`$sort` will produce an "
#~ "error. To allow for the handling "
#~ "of large datasets, set the "
#~ "``allowDiskUsage`` option to ``true`` to "
#~ "enable :pipeline:`$sort` operations to write"
#~ " to temporary files. See the "
#~ "``allowDiskUsage`` option in "
#~ ":method:`db.collection.aggregate()` method and the"
#~ " :dbcommand:`aggregate` command for details."
#~ msgstr ""

# f22c3e59f5154f2eab5d53c2203bcef0
#~ msgid ""
#~ "When comparing values of different "
#~ ":term:`BSON` types, MongoDB uses the "
#~ "following comparison order, from lowest "
#~ "to highest:"
#~ msgstr ""

# 8a2ea7c5483944ffa570b0ab036712b8
#~ msgid "Numbers (ints, longs, doubles)"
#~ msgstr ""

# cff75c84c8a245e696e80e314b00e8d5
#~ msgid "Date, Timestamp"
#~ msgstr ""

# 1724adaed3cb45af97ae3c62d4513d5b
#~ msgid ""
#~ "MongoDB treats some types as equivalent"
#~ " for comparison purposes. For instance, "
#~ "numeric types undergo conversion before "
#~ "comparison."
#~ msgstr ""

# 561437f41013450fa32e9e4cdf5c8551
#~ msgid ""
#~ "The comparison treats a non-existent "
#~ "field as it would an empty BSON"
#~ " Object. As such, a sort on the"
#~ " ``a`` field in documents ``{ }`` "
#~ "and ``{ a: null }`` would treat"
#~ " the documents as equivalent in sort"
#~ " order."
#~ msgstr ""

# 92d094853ff441a9b9022ee953b0a469
#~ msgid ""
#~ "With arrays, a less-than comparison "
#~ "or an ascending sort compares the "
#~ "smallest element of arrays, and a "
#~ "greater-than comparison or a descending "
#~ "sort compares the largest element of "
#~ "the arrays. As such, when comparing "
#~ "a field whose value is a "
#~ "single-element array (e.g. ``[ 1 ]``)"
#~ " with non-array fields (e.g. ``2``),"
#~ " the comparison is between ``1`` and"
#~ " ``2``. A comparison of an empty "
#~ "array (e.g. ``[ ]``) treats the "
#~ "empty array as less than ``null`` "
#~ "or a missing field."
#~ msgstr ""

# f8d54de3b5574090820a1df6961904ec
#~ msgid ""
#~ ":pipeline:`$sort` operator can take advantage"
#~ " of an index when placed at the"
#~ " **beginning** of the pipeline or "
#~ "placed **before** the following aggregation"
#~ " operators: :pipeline:`$project`, :pipeline:`$unwind`,"
#~ " and :pipeline:`$group`."
#~ msgstr ""

#~ msgid ""
#~ "To  ascending order for a field or"
#~ " fields to sort by and a value"
#~ " of ``1`` or ``-1`` to specify "
#~ "an ascending or descending sort "
#~ "respectively, as in the following "
#~ "example:"
#~ msgstr ""

#~ msgid "MongoDB sorts ``BinData`` in the following order:"
#~ msgstr ""

#~ msgid "First, the length or size of the data."
#~ msgstr ""

#~ msgid "Then, by the BSON one-byte subtype."
#~ msgstr ""

#~ msgid "Finally, by the data, performing a byte-by-byte comparison."
#~ msgstr ""

