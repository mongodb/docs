==================================================
Reconfigure a Replica Set with Unavailable Members
==================================================

.. default-domain:: mongodb

To reconfigure a :term:`replica set` when a **minority** of
members are unavailable, use the :method:`rs.reconfig()`
operation on
the current :term:`primary`, following the example in the
:ref:`Replica Set Reconfiguration Procedure
<replica-set-reconfiguration-usage>`.

To reconfigure a replica set when a **majority** of members are
unavailable, use one of the procedures:

- :ref:`replica-set-force-reconfiguration`
- :ref:`replica-set-reconfigure-by-replacing`

You may need to use one of these procedures, for example, in a
geographically distributed replica set, where *no* local group of
members can reach a majority. See
:ref:`replica-set-elections-and-network-partitions` for more
information on this situation.

This document provides the following options for reconfiguring a replica
set when a **majority** of members are accessible:

.. index:: replica set; reconfiguration
.. _replica-set-force-reconfiguration:

Reconfigure by Forcing the Reconfiguration
------------------------------------------

.. versionchanged:: 2.0

This procedure lets you recover while a majority of :term:`replica set`
members are down or unreachable. You connect to any surviving member and
use the ``force`` option to the :method:`rs.reconfig()`  method.

The ``force`` option forces a new configuration onto the. Use this procedure only to
recover from catastrophic interruptions. Do not use ``force`` every
time you reconfigure. Also, do not use the ``force`` option in any automatic
scripts and do not use ``force`` when there is still a :term:`primary`.

To force reconfiguration:

1. Back up a surviving member.

#. Connect to a surviving member and save the current configuration.
   Consider the following example commands for saving the configuration:

   .. code-block:: javascript

      cfg = rs.conf()

      printjson(cfg)

#. On the same member, remove the down and unreachable members of the
   replica set from the :data:`members <rs.conf.members>` array by
   setting the array equal to the surviving members alone. Consider the
   following example, which uses the ``cfg`` variable created in the
   previous step:

   .. code-block:: javascript

      cfg.members = [cfg.members[0] , cfg.members[4] , cfg.members[7]]

#. On the same member, reconfigure the set by using the
   :method:`rs.reconfig()` command with the ``force`` option set to
   ``true``:

   .. code-block:: javascript

      rs.reconfig(cfg, {force : true})

   This operation forces the secondary to use the new configuration. The
   configuration is then propagated to all the surviving members listed
   in the ``members`` array. The replica set then elects a new primary.

   .. note:: When you use ``force : true``, the version number in the
      replica set configuration increases significantly, by tens or
      hundreds of thousands. This is normal and designed to prevent set
      version collisions if there are forced reconfigs on both sides of
      a network partition and then the network partitioning ends.

#. If the failure or partition was only temporary, shut down or
   decommission the removed members as soon as possible.

.. _replica-set-reconfigure-by-replacing:

Reconfigure by Replacing the Replica Set
----------------------------------------

Use the following procedure **only** for versions of MongoDB prior to
version 2.0. If you're running MongoDB 2.0 or later, use the above
procedure, :ref:`replica-set-force-reconfiguration`.

These procedures are for situations where a *majority* of the
:term:`replica set` members are down or unreachable. If a majority is
*running*, then skip these procedures and instead use the
:method:`rs.reconfig()` command according to the examples in
:ref:`replica-set-reconfiguration-usage`.

If you run a pre-2.0 version and a majority of your replica set is down,
you have the two options described here. Both involve replacing the
replica set.

Reconfigure by Turning Off Replication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This option replaces the :term:`replica set` with a :term:`standalone` server.

1. Stop the surviving :program:`mongod` instances. To ensure a clean shutdown, use
   an existing :term:`control script` or an invocation that resembles the
   following:

   .. code-block:: javascript

      mongod --dbpath /data/db/ --shutdown

   Set :option:`--dbpath <mongod --dbpath>` to the data directory of your
   :program:`mongod` instance.

#. Create a backup of the data directory (i.e. :setting:`dbpath`) of
   the surviving members of the set.

   .. optional:: If you have a backup of the database you may instead remove
      this data.

#. Restart one of the :program:`mongod` instances *without* the
   :option:`--replSet <mongod --replSet>` parameter.

   The data is now accessible and provided by a single server that is
   not a replica set member. Clients can use this server for both
   reads and writes.

When possible, re-deploy a replica set to provide redundancy and to
protect your deployment from operational interruption.

Reconfigure by "Breaking the Mirror"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This option selects a surviving :term:`replica set` member to be the new
:term:`primary` and to "seed" a new replica set. In this procedure, the
member to be the new primary is referred to as ``A``. All other members
will resync from this new primary.

1. Stop the surviving :program:`mongod` instances. To ensure a clean shutdown, use
   an existing :term:`control script` or an invocation that resembles the
   following:

   .. code-block:: javascript

      mongod --dbpath /data/db/ --shutdown

   Set :option:`--dbpath <mongod --dbpath>` to the data directory of your
   :program:`mongod` instance.

#. Move the data directories (i.e. :setting:`dbpath <mongod --dbpath>`)
   for all the members except ``A``, so that all the members except ``A``
   have empty data directories. For example:

   .. code-block:: sh

      mv /data/db /data/db-old

#. Move ``A``'s ``local.*`` files so that ``A`` has an empty ``local``
   directory. For example

   .. code-block:: sh

      mkdir /data/local-old
      mv /data/db/local* /data/local-old/

#. Restart the replica set members the usual way.

#. Connect to ``A`` in a :program:`mongo` shell and run :method:`rs.initiate()`
   to initiate the replica set.

#. Add the other set members using :method:`rs.add()`. For example, to add a member running
   on ``example.net`` at port ``27017``, you would issue this command:

   .. code-block:: javascript

      rs.add("example.net:27017")

   The added members will initial sync their data from ``A``.
