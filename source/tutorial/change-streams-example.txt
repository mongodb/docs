.. index:: changeStreams notification

.. _change_streams_example_tabs:

======================
Change Stream Examples
======================

.. default-domain:: mongodb

.. versionadded:: 3.6

.. important::
   Change streams are available for replica sets or sharded clusters with replica set
   shards. You cannot open a change stream against a standalone :binary:`~bin.mongod`. 
   For a sharded cluster, you must issue the open change stream operation against
   the :binary:`~bin.mongos`.

   The replica set or the sharded cluster must use:

   - replica set protocol version 1 (:rsconf:`pv1 <protocolVersion>`)

   -  :ref:`WiredTiger <storage-wiredtiger>` storage engine (can be :ref:`encrypted <encrypted-storage-engine>`)

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. tabs-drivers::

   tabs:
     - id: python
       content: |

         The examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <http://api.mongodb.com/python/current/tutorial.html?_ga=2.166792574.1325858930.1510605946-1663796716.1426889906#making-a-connection-with-mongoclient/>`__
         that contains an ``inventory`` collection.

     - id: java-sync
       content: |
         The examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <http://mongodb.github.io/mongo-java-driver/3.6/driver/tutorials/databases-collections/>`__
         that contains an ``inventory`` collection.

     - id: csharp
       content: |
          The examples below assume that you have `connected to a MongoDB replica set and have accessed a database
          <http://mongodb.github.io/mongo-csharp-driver/2.4/getting_started/quick_tour/#make-a-connection/>`__
          that contains an ``inventory`` collection.

     - id: c
       content: |
         The examples below assume that you have `connected to a MongoDB replica set and have accessed a database
         <http://mongoc.org/libmongoc/current/tutorial.html#making-a-connection/>`__
         that contains an ``inventory`` collection.

Open A Change Stream
--------------------

This example opens a change stream against a replica set. The change stream is bound to a collection and
change stream documents are iterated with a cursor. This cursor remains open until it is explicitly closed,
as long as a connection to the MongoDB deployment remains open *and* the collection exists.

.. tabs-drivers::

   tabs:
     - id: python
       content: |
         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test_examples.py
            :language: python
            :dedent: 8
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

     - id: java-sync
       content: |
         .. class:: copyable-code

         .. literalinclude:: /driver-examples/DocumentationSamples.java
            :language: java
            :dedent: 8
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

     - id: csharp
       content: |
         .. class:: copyable-code
         .. literalinclude:: /driver-examples/ChangeStreamExamples.cs
            :language: c#
            :dedent: 12
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

     - id: c
       content: |
         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
            :language: c
            :dedent: 0
            :start-after: Start Changestream Example 1
            :end-before: End Changestream Example 1

In order to retrieve the data change event notifications, iterate
the change stream ``cursor``.

.. note::
   The lifecycle of an unclosed cursor is language-dependent.

See :ref:`change-stream-output` for more information on the change stream
response document format.

Lookup Full Document for Update Operations
------------------------------------------

.. tabs-drivers::

   tabs:
     - id: python
       content: |
         By default, change streams only return the delta of fields during the update operation.
         To return the most current majority-committed version of the updated
         document, pass ``full_document='updateLookup'`` to the
         :method:`db.collection.watch()` method.

     - id: java-sync
       content: |
         By default, change streams only return the delta of fields during the update operation.
         To return the most current majority-committed version of the updated
         document, pass ``FullDocument.UPDATE_LOOKUP``  to the
         :method:`db.collection.watch.fullDocument()` method.

     - id: c
       content: |
         By default, change streams only return the delta of fields during the update operation.
         To return the most current majority-committed version of the updated
         document, pass the ``"fullDocument"`` option with the ``"updateLookup"`` value to the
         :method:`mongoc_collection_watch` method.

     - id: csharp
       content: |
         By default, change streams only return the delta of fields during the update operation.
         To return the most current majority-committed version of the updated
         document, pass ``"FullDocument = ChangeStreamFullDocumentOption.UpdateLookup"`` to the
         :method:`collection.Watch()` method.


If there are one or more majority-committed operations that modified the
updated document *after* the update operation but *before* the lookup, the
full document returned may differ significantly from the document at the time
of the update operation.

However, the deltas included in the change stream document always
correctly describe the watched
collection changes that applied to that change stream event.

Iterate the change stream ``cursor`` to retrieve the change stream
documents in order. In the example below, all update operations notifications
include a ``fullDocument``
field that represents the *current* version of the document affected by the
update operation.

.. tabs-drivers::

   tabs:
     - id: python
       content: |
         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test_examples.py
            :language: python
            :dedent: 8
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2

     - id: java-sync
       content: |
         .. class:: copyable-code

         .. literalinclude:: /driver-examples/DocumentationSamples.java
            :language: java
            :dedent: 8
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2

     - id: csharp
       content: |
         .. class:: copyable-code

         .. literalinclude:: /driver-examples/ChangeStreamExamples.cs
            :language: C#
            :dedent: 12
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2

     - id: c
       content: |
         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
            :language: C
            :dedent: 0
            :start-after: Start Changestream Example 2
            :end-before: End Changestream Example 2

See :ref:`change-stream-output` for more information on the change stream
response document format.

Modify Change Stream Output using Aggregation Pipelines
-------------------------------------------------------

You can control change stream output by providing an array of one or
more of the following pipeline stages when configuring the change stream:

- :pipeline:`$match`
- :pipeline:`$project`
- :pipeline:`$addFields`
- :pipeline:`$replaceRoot`
- :pipeline:`$redact`

.. tabs-drivers::

   tabs:
     - id: java-sync
       content: |
         .. code-block:: java

            MongoClient mongoClient = new MongoClient( new MongoClientURI("mongodb://host1:port1,host2:port2..."));

            // Select the MongoDB database and collection to open the change stream against

            MongoDatabase db = mongoClient.getDatabase("myTargetDatabase");

            MongoCollection<Document> collection = database.getCollection("myTargetCollection");

            // Create $match pipeline stage.
            List<Bson> pipeline = singletonList(Aggregates.match(Filters.or(
                Document.parse("{'fullDocument.username': 'alice'}"),
                Filters.in("operationType", asList("delete")))));

            // Create the change stream cursor, passing the pipeline to the
            // collection.watch() method

            MongoCursor<Document> cursor = collection.watch(pipeline).iterator();

.. tabs-drivers::

   tabs:
     - id: java-sync
       content: |
         The ``pipeline`` list includes a single :pipeline:`$match` stage that
         filters any operations where the ``username`` is ``alice``, or
         operations where the ``operationType`` is ``delete``.

         Passing the ``pipeline`` to the :method:`~db.collection.watch()` method directs the
         change stream to return notifications after passing them through the
         specified ``pipeline``.

See :ref:`change-stream-output` for more information on the change stream
response document format.

.. _change-stream-resume:

Resume a Change Stream
----------------------

Each change stream response document has an ``_id`` field that contains a
document containing a resume token.  The ``resumeToken`` includes the change
stream notification id. You can use the ``resumeToken`` document to resume
notification after a specific notification.

.. tabs-drivers::

   tabs:
     - id: python
       content: |
         In the example below, the ``resumeAfter`` modifier takes a parameter that must resolve to a resume
         token. Passing the ``resumeToken`` to the ``resumeAfter`` modifier directs
         the change stream to attempt to resume notifications starting at the
         operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test_examples.py
            :language: python
            :dedent: 8
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: java-sync
       content: |
         In the example below, the ``resumeAfter()`` method takes a parameter that must resolve to a resume
         token. Passing the ``resumeToken`` to the ``resumeAfter()`` method directs
         the change stream to attempt to resume notifications starting at the
         operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/DocumentationSamples.java
            :language: java
            :dedent: 8
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: csharp
       content: |
         In the example below, the ``resumeToken`` is retrieved from the last change stream document
         and passed to the ``Watch()`` method as an option. Passing the ``resumeToken``
         to the ``Watch()`` method directs
         the change stream to attempt to resume notifications starting at the
         operation specified in the resume token.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/ChangeStreamExamples.cs
            :language: C#
            :dedent: 12
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3

     - id: c
       content: |
         In the example below, the ``resumeAfter`` option is appended to the stream options
         to recreate the stream after it has been destroyed. Passing the ``_id`` to
         the change stream attempts to resume notifications starting at the
         operation specified.

         .. class:: copyable-code

         .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
            :language: C
            :dedent: 0
            :start-after: Start Changestream Example 3
            :end-before: End Changestream Example 3


As long as that operation has not rolled off the :term:`oplog`, the
change stream can successfully resume notifications.

.. include:: /includes/fact-cannot-resume-invalidated-change-stream.rst

See :ref:`change-stream-output` for more information on the change stream
response document format.

