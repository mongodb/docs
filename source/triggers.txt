.. _atlas-triggers:

===========================
Configure Database Triggers
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

|service| **Triggers** allow you to execute server-side logic in response
to database events or according to a schedule. |service| provides
two kinds of Triggers: **Database** and **Scheduled** triggers.

.. figure:: /images/triggers-arch.png
   :alt: Triggers in the MongoDB architecture
   :width: 750px
   :lightbox:

.. _database-triggers:

Database Triggers
~~~~~~~~~~~~~~~~~

Database Triggers allow you to execute server-side logic whenever a
document is added, updated, or removed in a linked |service| cluster.
Unlike SQL data triggers, which run on the database server, triggers run
on a serverless compute layer that scales independently of the database
server. Triggers automatically call :ref:`Atlas Functions <functions>`
and can forward events to external handlers through AWS EventBridge.

Use database triggers to implement event-driven data interactions. For
example, you can automatically update information in one document when a
related document changes or send a request to an external service
whenever a new document is inserted.

Database triggers use MongoDB :manual:`change streams </changeStreams>`
to watch for real-time changes in a collection. A change stream is a
series of :ref:`database events <atlas-database-events>` that each
describe an operation on a document in the collection. Your app opens a
single change stream for each collection with at least one enabled
trigger. If multiple triggers are enabled for a collection they all
share the same change stream.

You control which operations cause a trigger to fire as well as what
happens when it does. For example, you can run a function whenever a
specific field of a document is updated. The function can access the
entire change event, so you always know what changed. You can also pass
the change event to :ref:`AWS EventBridge <aws-eventbridge>` to handle
the event outside of Atlas.

Triggers support :manual:`$match
</reference/operator/aggregation/match>` expressions to filter change
events and :manual:`$project </reference/operator/aggregation/project>`
expressions to limit the data included in each event.

.. important:: Change Stream Limitations
   
   There are limits on the total number of change streams you can open
   on a cluster, depending on the cluster's size. See :ref:`change
   stream limitations <mongodb-service-limitations-change-streams>` for
   more information.

   You cannot define a database trigger on a :ref:`serverless instance
   <serverless-caveats>` or :ref:`{+fdi+}
   <data-federation-caveats>` because they do not support change streams.

.. note::

   MongoDB Atlas performs a ``replace`` command rather than an
   ``update`` command when executing an update via the {+atlas-ui+}.
   Database triggers will only recognize this update via the 
   {+atlas-ui+} if you have marked the :guilabel:`replace`
   :ref:`database event <atlas-database-events>` for the trigger.

.. _scheduled-triggers:

Scheduled Triggers
~~~~~~~~~~~~~~~~~~

Scheduled triggers allow you to execute server-side logic on a
regular schedule that you define using
:doc:`CRON expressions </triggers/cron-expressions>`.
Use scheduled triggers to do work that happens on a periodic
basis, such as updating a document every minute, generating a nightly
report, or sending an automated weekly email newsletter.

.. _server-side-logic:

|service| Functions Provide Server-side Logic
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Triggers execute a :appservices:`function </functions>`
that you specify. Each trigger is associated with exactly one
Function.

When you create a trigger, you will see a function editor where you can
write the JavaScript code to be executed by the trigger. This function
exists in a shared :appservices:`{+app-services+} </>` app called
:guilabel:`Triggers`, which |service| creates
automatically for you.

To find this app, click :guilabel:`App Services` in the
navigation and select the :guilabel:`Triggers` app.

.. include:: /includes/admonitions/notes/note-trigger-names.rst

Create a Trigger
~~~~~~~~~~~~~~~~

To create a new database or scheduled trigger:

1. Click the :guilabel:`Data Services` tab in the top navigation of 
   your screen if you haven't already navigated to |service|.

3. Click :guilabel:`Triggers` in the left-hand navigation.

4. On the :guilabel:`Overview` tab of the :guilabel:`Triggers` page,
   click :guilabel:`Add Trigger` to open the trigger configuration page.

5. Enter :ref:`configuration values <database-trigger-configuration>`
   for the trigger and click :guilabel:`Save` at the bottom of
   the page.

Restart a Suspended Trigger
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Triggers may enter a :guilabel:`suspended` state in response to an
event that prevents the trigger's change stream from continuing, such
as a network disruption. When a trigger is suspended, it does not
receive change events and will not fire.

.. note::

   In the event of a failed trigger, {+atlas-app-services+} sends an email
   notification to the project owner, alerting them of the issue.

To restart a suspended trigger:

.. include:: /includes/steps/restart-a-trigger.rst

External Dependencies
~~~~~~~~~~~~~~~~~~~~~

An external dependency is an external library that includes logic you'd
rather not implement yourself, such as string parsing, convenience
functions for array manipulations, and data structure or algorithm
implementations.

You can upload external dependencies from the `npm repository
<https://www.npmjs.com/>`_ to {+app-services+} and then import those libraries
into your functions using standard JavaScript module syntax. To use
external dependencies in the functions run by your triggers, see
:ref:`External Dependencies <external-dependencies>`.

Configure a Trigger
~~~~~~~~~~~~~~~~~~~

To configure a Database trigger, see
:ref:`Database Trigger Configuration <database-trigger-configuration>`.

To configure a Scheduled trigger, see
:ref:`Scheduled Trigger Configuration <scheduled-trigger-configuration>`.

.. toctree::
   :caption: Reference
   :titlesonly:
   :includehidden:
   :hidden:

   Configuration Parameters </triggers/trigger-configuration>
   Send Events to a Bus </triggers/eventbridge>
   CRON Expressions </triggers/cron-expressions>
   External Dependencies </triggers/external-dependencies>

Billing
~~~~~~~

To learn about how |service| bills triggers, see 
:appservices:`{+app-services+} Billing </billing/>`.
