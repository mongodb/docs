=========================
MongoDB CRUD Introduction
=========================

.. default-domain:: mongodb

MongoDB stores data in the form of *documents*, which are JSON-like
field and value pairs. Documents are analogous to structures in
programming languages that associate keys with values (e.g.
dictionaries, hashes, maps, and associative arrays). Formally, MongoDB
documents are :term:`BSON` documents. BSON is a binary representation
of :term:`JSON` with additional type information. In the documents, the
value of a field can be any of the BSON data types, including other
documents, arrays, and arrays of documents. For more information, see
:doc:`/core/document`.

.. include:: /images/crud-annotated-document.rst

MongoDB stores all documents in :term:`collections <collection>`. A
collection is a group of related documents that have a set of shared
common indexes. Collections are analogous to a table in relational
databases.

.. include:: /images/crud-annotated-collection.rst

Database Operations
-------------------

Query
~~~~~

In MongoDB a query targets a specific collection of documents. Queries
specify criteria, or conditions, that identify the documents that
MongoDB returns to the clients. A query may include a *projection* that
specifies the fields from the matching documents to return. You can
optionally modify queries to impose limits, skips, and sort orders.

In the following diagram, the query process specifies a query criteria
and a sort modifier:

.. include:: /images/crud-query-stages.rst

See :doc:`/core/read-operations-introduction` for more information.

Data Modification
~~~~~~~~~~~~~~~~~

Data modification refers to operations that create, update, or delete
data. In MongoDB, these operations modify the data of a single
:term:`collection`. For the update and delete operations, you can
specify the criteria to select the documents to update or remove.

In the following diagram, the insert operation adds a new document to
the ``users`` collection.

.. include:: /images/crud-insert-stages.rst

See :doc:`/core/write-operations-introduction` for more
information.

Related Features
----------------

:doc:`/indexes`
~~~~~~~~~~~~~~~

To enhance the performance of common queries and updates, MongoDB
has full support for secondary indexes. These indexes allow
applications to store a *view* of a portion of the collection in an
efficient data structure. Most indexes store an ordered
representation of all values of a field or a group of
fields. Indexes may also :ref:`enforce uniqueness
<index-type-unique>`, store objects in a :doc:`geospatial
representation </applications/geospatial-indexes>`, and facilitate
:doc:`text search </core/index-text>`.

:doc:`/core/read-preference`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For replica sets and sharded clusters with replica set components,
applications specify :ref:`read preferences
<replica-set-read-preference>`. A read preference determines how
the client direct read operations to the set.

:doc:`/core/write-concern`
~~~~~~~~~~~~~~~~~~~~~~~~~~

Applications can also control the behavior of write operations using
:ref:`write concern <write-concern>`. Particularly useful for
deployments with replica sets, the write concern semantics allow
clients to specify the assurance that MongoDB provides when reporting
on the success of a write operation.

:doc:`/aggregation`
~~~~~~~~~~~~~~~~~~~

In addition to the basic queries, MongoDB provides several data
aggregation features. For example, MongoDB can return counts of the
number of documents that match a query, or return the number of
distinct values for a field, or process a collection of documents using
a versatile stage-based data processing pipeline or map-reduce
operations.
