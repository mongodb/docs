.. _kotlin-fundamentals-retrieve-data:

=============
Retrieve Data
=============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, read, query, filter

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
database by using the {+driver-short+}. You can perform **read
operations** to retrieve data from MongoDB.

Read operations enable you to perform the following tasks:

- Retrieve a subset of documents from your collection using a :ref:`find
  operation <retrieve-find>`
- Perform transformations on retrieved documents from your collection
  using an :ref:`aggregate operation <retrieve-aggregate>`
- Monitor real-time changes to your database using :ref:`change streams
  <retrieve-watch>`

.. _retrieve-paint-order-collection:

Sample Data for Examples
~~~~~~~~~~~~~~~~~~~~~~~~

The following sections include examples that demonstrate how you can
manage customer orders for cans of paint. For each order, you keep
track of the color and quantity, which corresponds to the ``color`` and
``qty`` fields in documents in the ``orders`` collection:

.. code-block:: json

   { "_id": 1, "color": "purple", "qty": 10 }
   { "_id": 2, "color": "green", "qty": 8 }
   { "_id": 3, "color": "purple", "qty": 4 }
   { "_id": 4, "color": "green", "qty": 11 }

This data is modeled by the following {+language+} data class:

.. literalinclude:: /examples/generated/RetrieveDataTest.snippet.retrieve-data-model.kt
   :language: kotlin

.. _retrieve-find:

Find Operation
--------------

Use the find operation to retrieve a subset of your existing data in
MongoDB. You can specify what data to return including which documents
to retrieve, in what order to retrieve them, and how many to retrieve.

To perform a find operation, call the ``find()`` method on an instance
of a ``MongoCollection``. This method searches a collection for documents that
match the query filter you provide. For more information on how to
specify a query, see the :ref:`kotlin-fundamentals-query` guide.

Example
~~~~~~~

You want to know which orders contain greater than ``3``, but
less than ``9`` cans of paint.

Run the following code to find orders to match the criteria:

.. io-code-block::

   .. input:: /examples/generated/RetrieveDataTest.snippet.basic-find.kt
      :language: kotlin

   .. output::
      :language: console

      PaintOrder(id=2, qty=8, color=green)
      PaintOrder(id=3, qty=4, color=purple)

To learn more about the ``Filters`` builder, see the 
:ref:`filters-builders` guide.  

To view a runnable ``find()`` example, see the :ref:`kotlin-usage-find`
usage example.

.. _retrieve-aggregate:

Aggregate Operation
-------------------

Use aggregation operations to run an aggregation pipeline on your data.
An aggregation pipeline is a multi-staged transformation that produces
an aggregated result.

To perform an aggregation operation, call the ``aggregate()`` method on an
instance of ``MongoCollection``. This method accepts aggregation
expressions to run in sequence. To perform aggregations, you can
define aggregation stages that specify how to match documents, rename
fields, and group values. To learn more, see the
:ref:`kotlin-aggregation` guide.

Example
~~~~~~~

You want to know which paint color is the most popular by finding the
color that is bought the most.

You can create an aggregation pipeline that performs the following actions:

- Matches all the documents in the ``orders`` collection
- Groups orders by colors
- Sums up the quantity field by color
- Orders the results by highest-to-lowest quantity

.. io-code-block::

   .. input:: /examples/generated/RetrieveDataTest.snippet.aggregation-find.kt
      :language: kotlin

   .. output::
      :language: console

      PaintOrder(id=2, qty=19, color=green)
      PaintOrder(id=3, qty=14, color=purple)

To learn more about constructing aggregation pipelines, see
:manual:`Aggregation </aggregation>` in the Server manual.

To learn more about the methods mentioned on this page, see
the following API Documentation:

- `MongoCollection.find() <{+driver-api+}/-mongo-collection/find.html>`__
- `MongoCollection.aggregate() <{+driver-api+}/-mongo-collection/aggregate.html>`__
