.. _indexes-builders:

================
Indexes Builders
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to specify **indexes** using
:doc:`builders </fundamentals/builders/>` in the MongoDB Kotlin Driver.
The ``Indexes`` builder provides helper methods for constructing the
following types of indexes:

- :ref:`Ascending Indexes <ascending-indexes>`
- :ref:`Descending Indexes <descending-indexes>`
- :ref:`Compound Indexes <index-compound-indexes>`
- :ref:`Text Indexes <index-text-indexes>`
- :ref:`Hashed Indexes <index-hashed-indexes>`
- :ref:`Geospatial Indexes <index-geospatial-indexes>`

Indexes store a subset of the collection's data set. The index stores
the value of a specific field or set of fields, ordered by the value of
the field. See our guide on :doc:`Indexes </fundamentals/indexes>` for
examples of queries covered by indexes.

The ``Indexes`` class provides static factory methods for all the MongoDB index types.
Each method returns a `BSON <{+api+}/apidocs/bson/org/bson/conversions/Bson.html>`__
instance, which you can pass to
`createIndex() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/create-index.html>`__.

.. tip::

   For brevity, you may choose to import all methods of the
   `Indexes <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html>`__
   class:

   .. code-block:: kotlin

      import com.mongodb.client.model.Indexes.*

.. _ascending-indexes:

Ascending Indexes
-----------------

An ascending index enables you to sort query results by the value of the
indexed fields from smallest to largest.

In order to create an ascending index, first call the
`ascending() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#ascending(java.lang.String...)>`__
builder method to create a ``Bson`` instance that represents the index
document, passing the name or names of the fields you want to index.
Then, call the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.

.. note::

   If you have an ascending or a descending index on a single field, MongoDB
   can sort using the index in either direction.

The following example specifies an ascending index on the ``name`` field:

.. io-code-block::

   .. input:: /examples/generated/IndexesBuildersTest.snippet.ascending-index.kt
      :language: kotlin

   .. output::
      :language: console

      name_1

.. _descending-indexes:

Descending Indexes
------------------

A descending index enables you to sort query results by the value of the
indexed fields from largest to smallest.

In order to create a descending index, first call the
`descending() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#descending(java.lang.String...)>`__
builder method to create a ``Bson`` instance that represents the index
document, passing the name or names of the fields you want to index.
Then, call the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.

The following example specifies a descending index on the ``capacity`` field: 

.. io-code-block::

   .. input:: /examples/generated/IndexesBuildersTest.snippet.descending-index.kt
      :language: kotlin

   .. output::
      :language: console

      capacity_-1

.. _index-compound-indexes:

Compound Indexes
----------------

In order to create a compound index, first call the
`compoundIndex() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#compoundIndex(org.bson.conversions.Bson...)>`__
builder method to create a ``Bson`` instance that represents the index
document, passing the names of the fields you want to index. Then, call
the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.

The following example specifies a compound index composed of
descending index on the ``capacity`` and ``year`` field, followed
by an ascending index on the ``name`` field:

.. io-code-block::

   .. input:: /examples/generated/IndexesBuildersTest.snippet.compound-index.kt
      :language: kotlin

   .. output::
      :language: console

      capacity_-1_year_-1_name_1

.. _index-text-indexes:

Text Indexes
------------

A text index groups documents by the text in the indexed field.

In order to create a text index, first call the
`text() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#text(java.lang.String)>`__
builder method to create a ``Bson`` instance that represents the index
document, passing the name of the fields you want to index. Then, call
the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.

The following example specifies a text index key on the ``theaters`` field:

.. io-code-block::

   .. input:: /examples/generated/IndexesBuildersTest.snippet.text-index.kt
      :language: kotlin

   .. output::
      :language: console

      theaters_text

.. _index-hashed-indexes:

Hashed Indexes
--------------

A hashed index groups documents by the hash value in the indexed field.

In order to create a hashed index, first call the
`hashed() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#hashed(java.lang.String)>`__
builder method to create a ``Bson`` instance that represents the index
document, passing the name of the fields you want to index. Then, call
the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.


The following example specifies a hashed index on the ``capacity``
field:

.. io-code-block::

   .. input:: /examples/generated/IndexesBuildersTest.snippet.hashed-index.kt
      :language: kotlin

   .. output::
      :language: console

      capacity_hashed

.. _index-geospatial-indexes:

Geospatial Indexes
------------------

A ``2dsphere`` index groups documents by the coordinates in the indexed field.

In order to create a ``2dsphere`` index, first call the
`geo2dsphere() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#geo2dsphere(java.lang.String...)>`__
builder method to create a ``Bson`` instance that represents the index
document, passing the name or names of the fields you want to index.
Then, call the ``createIndex()`` method on the collection, passing the ``Bson``
instance that contains the index document.

The following example specifies a ``2dsphere`` index on the ``location`` field:

.. io-code-block::

   .. input:: /examples/generated/IndexesBuildersTest.snippet.geo2dsphere-index.kt
      :language: kotlin

   .. output::
      :language: console

      location_2dsphere
