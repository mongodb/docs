.. _fts-paginate-results:

=================================
Paginate the Results Sequentially 
=================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: atlas search, paginate documents in the results, searchAfter option, search after a reference point, searchBefore option, search before a reference point
   :description: Retrieve $search results before or after a given reference point.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


On |service| {+clusters+} running MongoDB 6.0.13+ or 7.0.5+, |fts|
allows you to retrieve your :pipeline:`$search` query results
sequentially after or before a reference point. You can use the
:pipeline:`$search` ``searchAfter`` or ``searchBefore`` options to 
traverse results in-order and build "Next Page" and "Previous Page"
functions in your application. 

To jump to a page non-sequentially, you can use the :pipeline:`$skip`
and :pipeline:`$limit` stages in your aggregation pipeline as
demonstrated in the :ref:`pagination-skip-limit-tutorial` tutorial.
However, jumping to a page non-sequentially might be slow if your query
results are large. 

Usage
-----

To retrieve paginated results sequentially, you must do the following: 

1. Create an |fts| index on the fields you want to query. To learn more,
   see :ref:`ref-create-index`.
2. Run a :pipeline:`$search` query that returns a point of reference. To
   learn more, see :ref:`paginate-results-search-sequence-token`.
3. Use the point of reference in your subsequent :pipeline:`$search`
   query to retrieve the next or previous set of documents in the
   results. 
   
   - To learn more about retrieving results to build a "Next
     Page" function, see :ref:`paginate-results-search-after`.
   - To learn more about retrieving results to build a "Previous Page"
     function, see :ref:`paginate-results-search-before`. 

.. note:: 

   The ``searchAfter`` and ``searchBefore`` options are mutually
   exclusive and can't be used in the same query.

Considerations 
--------------

If you update your collection between your initial and subsequent
queries, |fts| reflects the updates in your subsequent query results. For
example, suppose you sort the results by an ``updated_time`` field. If
you update the documents between your first query and subsequent query,
the same document might appear in both your query results. To avoid
this, sort the results by an immutable field. 

By default, |fts| sorts the documents in the results by the relevance
score of the documents. If multiple documents in the results have identical scores,
|fts| returns arbitrarily ordered results. To return documents in a determined order, 
use a unique field to sort your query results.

To learn how to sort your query results by an immutable or unique field, see :ref:`sort-ref`. 

.. _paginate-results-search-sequence-token:

Retrieve Point of Reference  
---------------------------

To retrieve query results at a certain point, you must provide the point
of reference in your :pipeline:`$search` query. You can retrieve the
reference point by using the :expression:`$meta` keyword
``searchSequenceToken`` in the :pipeline:`$project` stage after your
:pipeline:`$search` stage. 

.. _search-sequence-token-syntax:

Syntax 
~~~~~~

.. code-block:: json
   :copyable: true
   :caption: searchSequenceToken
   :emphasize-lines: 10
   :linenos: 

   [{
     "$search": {
       "index": "<index-name>",
       "<operator-name>"|"<collector-name>": {
         <operator-specification>|<collector-specification>
       }
       ...
     },
     {
       "$project": {
         { "paginationToken" : { "$meta" : "searchSequenceToken" } }
     },
     ...
   }]

.. _search-sequence-token-output:

Output 
~~~~~~

The ``searchSequenceToken`` generates a Base64-encoded token for each
document in the results. The length of the token increases with the number
of fields specified in the :ref:`sort <sort-ref>` option of your query.
The token isn't tied to a snapshot of the database. 

The documents in the results are sorted in the default order, unless you
specify the ``sort`` option in your query. To learn about sorting your
results, see :ref:`sort-ref`. 

.. _paginate-results-search-after:

Search After a Specific Point of Reference 
------------------------------------------

To search after a reference point, you must specify the reference point
in your :pipeline:`$search` query by using the ``searchAfter`` option with
the token generated by ``searchSequenceToken``. You can use the token
generated by ``searchSequenceToken`` only when you rerun the
:pipeline:`$search` query for which ``searchSequenceToken`` generated
the token. The semantics (search fields and values) of the subsequent 
:pipeline:`$search` query in which you use the token must be identical
to the query for which ``searchSequenceToken`` generated the token. 

You can use the ``searchAfter`` option to build a "Next Page" function
in your application. For a demonstration of this, see the :ref:`example
<search-after-query-eg>` on this page. 

.. _search-after-syntax:

``searchAfter`` Syntax 
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: json
   :copyable: true
   :caption: searchSequenceToken
   :emphasize-lines: 7
   :linenos: 

   {
     "$search": {
       "index": "<index-name>",
       "<operator-name>"|"<collector-name>": {
         <operator-specification>|<collector-specification>
       }
       "searchAfter": "<base64-encoded-token>"
       ...
     },
     "$project": {
       { "paginationToken" : { "$meta" : "searchSequenceToken" } }
     },
     ...
   }

.. _search-after-output:

Output 
~~~~~~

|fts| returns the documents in the results after the specified token.
|fts| returns the generated tokens for the documents in the results
because you specified the ``searchSequenceToken`` in the
:pipeline:`$project` stage after the :pipeline:`$search` stage (as 
shown in line 11). These tokens can be used as a reference point for
another query with the same semantics.

The documents in the results are sorted in the default order, unless you
specify the ``sort`` option in your query. To learn about sorting your
results, see :ref:`sort-ref`. 

.. _paginate-results-search-before:

Search Before a Specific Point of Reference 
-------------------------------------------

To search before a reference point, you must specify the reference point 
in your :pipeline:`$search` query by using the ``searchBefore`` option
with the token generated by ``searchSequenceToken``. You can use the token
generated by ``searchSequenceToken`` only when you rerun the
:pipeline:`$search` query for which ``searchSequenceToken`` generated
the token. The semantics (search fields and values) of the subsequent 
:pipeline:`$search` query in which you use the token must be identical
to the query for which ``searchSequenceToken`` generated the token. 

You can build a "Previous Page" function in your application using the
``searchBefore`` option. To build a "Previous Page" function, combine
the following:

- :pipeline:`$search` stage with ``searchBefore`` option
- :pipeline:`$limit` stage 
- :manual:`toArray() </reference/method/cursor.toArray/>` and
  ``reverse()`` methods.  
  
For a demonstration of this, see the ``searchBefore`` query :ref:`examples
<search-before-query-eg>` on this page.

.. _search-before-syntax:

``searchBefore`` Syntax 
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: json
   :copyable: true
   :caption: searchSequenceToken
   :emphasize-lines: 7
   :linenos: 

   {
     "$search": {
       "index": "<index-name>",
       "<operator-name>"|"<collector-name>": {
         <operator-specification>|<collector-specification>
       }
       "searchBefore": "<base64-encoded-token>"
       ...
     },
     "$project": {
       { "paginationToken" : { "$meta" : "searchSequenceToken" } }
     },
     ...
   }

.. _search-before-output:

``searchBefore`` Output 
~~~~~~~~~~~~~~~~~~~~~~~

|fts| returns documents in the results preceding the specified token in 
reverse order. |fts| also returns the generated tokens for the documents
in the results because you specified the ``searchSequenceToken`` in the
:pipeline:`$project` stage after the :pipeline:`$search` stage (as 
shown in line 11). These tokens can be used as a reference point for
another query with the same semantics.   

.. _search-before-egs:

Examples 
--------

The following examples use the :ref:`sample-mflix.movies <sample-mflix>`
collection, which has an |fts| index named ``default`` with dynamic
mappings. If you load the collection and create the index, you can run
the following queries against the collection.

.. _search-sequence-token-eg:

``searchSequenceToken`` Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following query uses the following pipeline stages: 

- :pipeline:`$search` to do the following:

  - Search for the term ``war`` in ``title`` field of the collection.
  - Sort the results first by score and then by the value of the
    ``released`` field in ascending order for documents with identical
    scores. 
    
- :pipeline:`$limit` stage to limit the results to ``10`` documents. 
- :pipeline:`$project` stage to do the following: 

  - Include only the ``title`` and ``released`` fields.
  - Add the following fields: 

    - Field named ``paginationToken`` that contains the Base64-encoded
      token for each document. 
    - Field named ``score`` that contains the relevance score of each
      document. 

.. io-code-block::
   :copyable:

   .. input:: 
      :language:  json
      :linenos: 

      db.movies.aggregate([
        {
          "$search": {
            "text": {
              "path": "title",
              "query": "war"
            },
            "sort": {unused: {$meta: "searchScore"}, "released": 1}
          }
        },
        {
          "$limit": 10
        },
        {
          "$project": {
            "_id": 0,
            "title": 1,
            "released": 1,
            "paginationToken" : { "$meta" : "searchSequenceToken" },
            "score": {$meta: "searchScore"}
          }
        }
      ])

   .. output:: 
      :language: shell
      :emphasize-lines: 5,11,16,22,28,34,40,46,52,58
      :linenos: 

      [
        {
          title: 'War',
          released: ISODate('2002-03-14T00:00:00.000Z'),
          paginationToken: 'CMFRGgYQup3BhQgaCSkAQCKS7AAAAA==',
          score: 3.3774025440216064
        },
        {
          title: 'War',
          released: ISODate('2014-09-21T00:00:00.000Z'),
          paginationToken: 'CMelARoGELqdwYUIGgkpAAiClUgBAAA=',
          score: 3.3774025440216064
        },
        {
          title: 'War Photographer',
          paginationToken: 'CMBRGgYQuq+ngwgaAmAA',
          score: 2.8268959522247314
        },
        {
          title: "Troma's War",
          released: ISODate('1989-11-18T00:00:00.000Z'),
          paginationToken: 'CL8kGgYQuq+ngwgaCSkAbP8QkgAAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'The War',
          released: ISODate('1994-11-04T00:00:00.000Z'),
          paginationToken: 'CI0wGgYQuq+ngwgaCSkAnIKEtgAAAA==',
          score: 2.8268959522247314
        },
        {
         title: 'War Stories',
          released: ISODate('1996-05-09T00:00:00.000Z'),
          paginationToken: 'CPIyGgYQuq+ngwgaCSkA/DifwQAAAA==',
          score: 2.8268959522247314
        },
        {
          title: "Gaston's War",
          released: ISODate('1997-10-23T00:00:00.000Z'),
          paginationToken: 'CMQ7GgYQuq+ngwgaCSkALPBSzAAAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'Shooting War',
          released: ISODate('2000-12-07T00:00:00.000Z'),
          paginationToken: 'CMJJGgYQuq+ngwgaCSkAOOhG4wAAAA==',
          score: 2.8268959522247314
        },
        {
          title: "Varian's War",
          released: ISODate('2001-04-22T00:00:00.000Z'),
          paginationToken: 'CM5IGgYQuq+ngwgaCSkAGEkD5gAAAA==',
          score: 2.8268959522247314
        },
        {
          title: "Hart's War",
          released: ISODate('2002-02-15T00:00:00.000Z'),
          paginationToken: 'CMtJGgYQuq+ngwgaCSkAjBYH7AAAAA==',
          score: 2.8268959522247314
        }
      ]

.. note:: 

   The tokens for the documents in your results might be different.
   Replace the tokens in the :ref:`subsequent queries
   <subsequent-query-egs>` with the tokens that |fts| returned in your
   results before running the ``searchAfter`` or ``searchBefore``
   queries. 

.. _subsequent-query-egs:

Subsequent ``searchAfter`` and ``searchBefore`` Queries 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following queries use the token from another query with the same
semantics to retrieve paginated results after or before the specified
token. If you ran the example :ref:`search-sequence-token-eg`, the
tokens for the documents in your results might be different. Make sure
to replace the tokens in the queries in this section with the tokens
returned in your query result.

The queries use the following pipeline stages:

- :pipeline:`$search` stage to do the following: 

  - Search for documents from the |fts| results for the term ``war`` in
    ``title`` field.  
  - Sort the results first by score and then by the value of the 
    ``released`` field in ascending order for documents with identical 
    scores. 
    
- :pipeline:`$limit` stage to limit the results to ``10`` documents. 
- :pipeline:`$project` stage to do the following: 

  - Include only the ``title`` and ``released`` fields in the documents. 
  - Add the following fields: 

    - Field named ``paginationToken`` that contains the Base64-encoded
      token for  each document.  
    - Field named ``score`` that contains the relevance score of each
      document. 

.. _search-after-query-eg:

Search After the Reference Point 
````````````````````````````````

The following query requests documents in the |fts| results that contain
the term ``war`` in ``title`` field *after* the specified reference
point. It uses the token (on line 58) associated with the last document
from the :ref:`search-sequence-token-eg` results as the reference point
to retrieve the next ``10`` documents in the results.  

.. io-code-block::
   :copyable: true 

   .. input:: 
      :language: json 
      :linenos:

      db.movies.aggregate([
        {
          "$search": {
            "text": {
              "path": "title",
              "query": "war"
            },
            "sort": {unused: {$meta: "searchScore"}, "released": 1},
            "searchAfter": "CMtJGgYQuq+ngwgaCSkAjBYH7AAAAA=="
          }
        },
        {
          "$limit": 10
        },
        {
          "$project": {
            "_id": 0,
            "title": 1,
            "released": 1,
            "paginationToken" : { "$meta" : "searchSequenceToken" },
            "score": { "$meta": "searchScore" }
          }
        }
      ])

   .. output::
      :language: json 
      :emphasize-lines: 5,11,17,23,29,35,41,47,53,59
      :linenos:

      [
        {
          title: 'The War',
          released: ISODate('2007-09-23T00:00:00.000Z'),
          paginationToken: 'CP9xGgYQuq+ngwgaCSkA1KkvFQEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War, Inc.',
          released: ISODate('2008-06-13T00:00:00.000Z'),
          paginationToken: 'COhuGgYQuq+ngwgaCSkAtDh/GgEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War, Inc.',
          released: ISODate('2008-06-13T00:00:00.000Z'),
          paginationToken: 'COluGgYQuq+ngwgaCSkAtDh/GgEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War Dance',
          released: ISODate('2008-11-01T00:00:00.000Z'),
          paginationToken: 'CONvGgYQuq+ngwgaCSkAYFlVHQEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War Horse',
          released: ISODate('2011-12-25T00:00:00.000Z'),
          paginationToken: 'CJWFARoGELqvp4MIGgkpAEyEcjQBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'Cold War',
          released: ISODate('2012-11-08T00:00:00.000Z'),
          paginationToken: 'CJGUARoGELqvp4MIGgkpAPBQ3ToBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'Drug War',
          released: ISODate('2013-04-04T00:00:00.000Z'),
          paginationToken: 'CMWTARoGELqvp4MIGgkpAMRX0j0BAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'War Story',
          released: ISODate('2014-07-30T00:00:00.000Z'),
          paginationToken: 'CJCdARoGELqvp4MIGgkpAPyQhEcBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'A War',
          released: ISODate('2015-09-10T00:00:00.000Z'),
          paginationToken: 'CL2kARoGELqvp4MIGgkpAECNtE8BAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'War Pigs',
          released: ISODate('2015-09-18T00:00:00.000Z'),
          paginationToken: 'CJ6kARoGELqvp4MIGgkpACDA3U8BAAA=',
          score: 2.8268959522247314
        }
      ]

.. _search-before-query-eg:

Search Before the Reference Point 
`````````````````````````````````

The following query requests |fts| results for the term ``war`` in
``title`` field *before* the specified reference point. It uses the
token (on line 59) associated with the last document in the :ref:`sample 
<search-after-query-eg>` ``searchAfter`` query results as the 
reference point to retrieve the preceding ``10`` documents from the
results.  

.. io-code-block::
   :copyable: true 

   .. input:: 
      :language: json 
      :linenos:

      db.movies.aggregate([
        {
          "$search": {
            "text": {
              "path": "title",
              "query": "war"
            },
            "sort": {unused: {$meta: "searchScore"}, "released": 1},
            "searchBefore": "CJ6kARoGELqvp4MIGgkpACDA3U8BAAA="
          }
        },
        {
          "$limit": 10
        },
        {
          "$project": {
            "_id": 0,
            "title": 1,
            "released": 1,
            "paginationToken" : { "$meta" : "searchSequenceToken" },
            "score": { "$meta": "searchScore" }
          }
        }
      ])

   .. output::
      :language: json 
      :emphasize-lines: 5,11,17,23,29,35,41,47,53,59
      :linenos:

      [
        {
          title: 'A War',
          released: ISODate('2015-09-10T00:00:00.000Z'),
          paginationToken: 'CL2kARoGELqvp4MIGgkpAECNtE8BAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'War Story',
          released: ISODate('2014-07-30T00:00:00.000Z'),
          paginationToken: 'CJCdARoGELqvp4MIGgkpAPyQhEcBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'Drug War',
          released: ISODate('2013-04-04T00:00:00.000Z'),
          paginationToken: 'CMWTARoGELqvp4MIGgkpAMRX0j0BAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'Cold War',
          released: ISODate('2012-11-08T00:00:00.000Z'),
          paginationToken: 'CJGUARoGELqvp4MIGgkpAPBQ3ToBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'War Horse',
          released: ISODate('2011-12-25T00:00:00.000Z'),
          paginationToken: 'CJWFARoGELqvp4MIGgkpAEyEcjQBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'War Dance',
          released: ISODate('2008-11-01T00:00:00.000Z'),
          paginationToken: 'CONvGgYQuq+ngwgaCSkAYFlVHQEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War, Inc.',
          released: ISODate('2008-06-13T00:00:00.000Z'),
          paginationToken: 'COluGgYQuq+ngwgaCSkAtDh/GgEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War, Inc.',
          released: ISODate('2008-06-13T00:00:00.000Z'),
          paginationToken: 'COhuGgYQuq+ngwgaCSkAtDh/GgEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'The War',
          released: ISODate('2007-09-23T00:00:00.000Z'),
          paginationToken: 'CP9xGgYQuq+ngwgaCSkA1KkvFQEAAA==',
          score: 2.8268959522247314
        },
        {
          title: "Hart's War",
          released: ISODate('2002-02-15T00:00:00.000Z'),
          paginationToken: 'CMtJGgYQuq+ngwgaCSkAjBYH7AAAAA==',
          score: 2.8268959522247314
        }
      ]

For the preceding query, note that |fts| results are in reverse order. 
The following query uses the :pipeline:`$limit` stage with the
:manual:`toArray() </reference/method/cursor.toArray/>` and
``reverse()`` methods to build a function similar to "Previous Page". 

.. io-code-block::
   :copyable: true 

   .. input:: 
      :language: json 
      :linenos:

      db.movies.aggregate([
        {
          "$search": {
            "text": {
              "path": "title",
              "query": "war"
            },
            "sort": {unused: {$meta: "searchScore"}, "released": 1},
            "searchBefore": "CJ6kARoGELqvp4MIGgkpACDA3U8BAAA="
          }
        },
        {
          "$limit": 10
        },
        {
          "$project": {
            "_id": 0,
            "title": 1,
            "released": 1,
            "paginationToken" : { "$meta" : "searchSequenceToken" },
            "score": { "$meta": "searchScore" }
          }
        }
      ]).toArray().reverse()

   .. output::
      :language: json 
      :emphasize-lines: 5,11,17,23,29,35,41,47,53,59
      :linenos:

      [
        {
          title: "Hart's War",
          released: ISODate('2002-02-15T00:00:00.000Z'),
          paginationToken: 'CMtJGgYQuq+ngwgaCSkAjBYH7AAAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'The War',
          released: ISODate('2007-09-23T00:00:00.000Z'),
          paginationToken: 'CP9xGgYQuq+ngwgaCSkA1KkvFQEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War, Inc.',
          released: ISODate('2008-06-13T00:00:00.000Z'),
          paginationToken: 'COhuGgYQuq+ngwgaCSkAtDh/GgEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War, Inc.',
          released: ISODate('2008-06-13T00:00:00.000Z'),
          paginationToken: 'COluGgYQuq+ngwgaCSkAtDh/GgEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War Dance',
          released: ISODate('2008-11-01T00:00:00.000Z'),
          paginationToken: 'CONvGgYQuq+ngwgaCSkAYFlVHQEAAA==',
          score: 2.8268959522247314
        },
        {
          title: 'War Horse',
          released: ISODate('2011-12-25T00:00:00.000Z'),
          paginationToken: 'CJWFARoGELqvp4MIGgkpAEyEcjQBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'Cold War',
          released: ISODate('2012-11-08T00:00:00.000Z'),
          paginationToken: 'CJGUARoGELqvp4MIGgkpAPBQ3ToBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'Drug War',
          released: ISODate('2013-04-04T00:00:00.000Z'),
          paginationToken: 'CMWTARoGELqvp4MIGgkpAMRX0j0BAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'War Story',
          released: ISODate('2014-07-30T00:00:00.000Z'),
          paginationToken: 'CJCdARoGELqvp4MIGgkpAPyQhEcBAAA=',
          score: 2.8268959522247314
        },
        {
          title: 'A War',
          released: ISODate('2015-09-10T00:00:00.000Z'),
          paginationToken: 'CL2kARoGELqvp4MIGgkpAECNtE8BAAA=',
          score: 2.8268959522247314
        }
      ]
