===========
mergeChunks
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: mergeChunks

   For a sharded collection, :dbcommand:`mergeChunks` combines
   contiguous :term:`chunk` ranges on a shard into a single
   chunk. Issue the :dbcommand:`mergeChunks` command from a
   :binary:`~bin.mongos` instance.

   :dbcommand:`mergeChunks` has the following form:

   .. code-block:: javascript

      db.runCommand( { mergeChunks : <namespace> ,
                       bounds : [ { <shardKeyField>: <minFieldValue> },
                                  { <shardKeyField>: <maxFieldValue> } ] } )

   For compound shard keys, you must include the full shard key in the
   ``bounds`` specification. If the shard key is ``{ x: 1, y: 1 }``,
   :dbcommand:`mergeChunks` has the following form:

   .. code-block:: javascript

      db.runCommand( { mergeChunks : <namespace> ,
                       bounds : [ { x: <minValue>, y: <minValue> },
                                  { x: <maxValue>, y: <maxValue> } ] } )

   The :dbcommand:`mergeChunks` command has the following fields:

   .. include:: /includes/apiargs/command-mergeChunks-field.rst

Behavior
--------

.. note::

   Use the :dbcommand:`mergeChunks` only in special circumstances. For
   instance, when cleaning up your :term:`sharded cluster` after removing
   many documents.

In order to successfully merge chunks, the following *must* be true:

- In the ``bounds`` field, ``<minkey>`` and ``<maxkey>`` must correspond to
  the lower and upper bounds of the :term:`chunks <chunk>` to merge.

- The chunks must reside on the same shard.

- The chunks must be contiguous.

:dbcommand:`mergeChunks` returns an error if these conditions are not
satisfied.

Return Messages
---------------

On success, :dbcommand:`mergeChunks` returns to following document:

.. code-block:: javascript

   {
     "ok" : 1,
     "$clusterTime" : {
        "clusterTime" : Timestamp(1510767081, 1),
        "signature" : {
            "hash" : BinData(0,"okKHD0QuzcpbVQg7mP2YFw6lM04="),
            "keyId" : NumberLong("6488693018630029321")
         }
     },
     "operationTime" : Timestamp(1510767081, 1)
   }

Another Operation in Progress
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:dbcommand:`mergeChunks` returns the following error message if another
metadata operation is in progress on the :data:`~config.chunks` collection:

.. code-block:: none

   errmsg: "The collection's metadata lock is already taken."

If another process, such as balancer process, changes metadata while
:dbcommand:`mergeChunks` is running, you may see this error. You can
retry the :dbcommand:`mergeChunks` operation without side effects.

Chunks on Different Shards
~~~~~~~~~~~~~~~~~~~~~~~~~~

If the input :term:`chunks <chunk>` are not on the same :term:`shard`,
:dbcommand:`mergeChunks` returns an error similar to the following:

.. code-block:: javascript

   {
     "ok" : 0,
     "errmsg" : "could not merge chunks, collection test.users does not contain a chunk ending at { username: \"user63169\" }",
     "$clusterTime" : {
        "clusterTime" : Timestamp(1510767081, 1),
        "signature" : {
            "hash" : BinData(0,"okKHD0QuzcpbVQg7mP2YFw6lM04="),
            "keyId" : NumberLong("6488693018630029321")
         }
     },
     "operationTime" : Timestamp(1510767081, 1)
   }

Noncontiguous Chunks
~~~~~~~~~~~~~~~~~~~~

If the input :term:`chunks <chunk>` are not contiguous,
:dbcommand:`mergeChunks` returns an error similar to the following:

.. code-block:: javascript

   {
     "ok" : 0,
     "errmsg" : "could not merge chunks, collection test.users has more than 2 chunks between [{ username: \"user29937\" }, { username: \"user49877\" })"
     "$clusterTime" : {
        "clusterTime" : Timestamp(1510767081, 1),
        "signature" : {
            "hash" : BinData(0,"okKHD0QuzcpbVQg7mP2YFw6lM04="),
            "keyId" : NumberLong("6488693018630029321")
         }
     },
     "operationTime" : Timestamp(1510767081, 1)

   }

.. admin-only
