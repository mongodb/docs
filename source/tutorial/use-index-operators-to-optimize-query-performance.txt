=================================================================
Use Index Operators and Projections to Optimize Query Performance
=================================================================

.. default-domain:: mongodb

Limit the Number of Query Results to Reduce Network Demand
----------------------------------------------------------

MongoDB :term:`cursors <cursor>` return results in groups of multiple
documents. If you know the number of results you want, you can reduce
the demand on network resources by issuing the :method:`cursor.limit()`
method.

This is typically used in conjunction with sort operations. For example,
if you need only 10 results from your query to the ``posts``
collection, you would issue the following command:

.. code-block:: javascript

   db.posts.find().sort( { timestamp : -1 } ).limit(10)

For more information on limiting results, see :method:`cursor.limit()`

Use Projections to Return Only Necessary Data
---------------------------------------------

When you need only a subset of fields from documents, you can achieve better
performance by returning only the fields you need:

For example, if in your query to the ``posts`` collection, you need only
the ``timestamp``, ``title``, ``author``, and ``abstract`` fields, you
would issue the following command:

.. code-block:: javascript

   db.posts.find( {}, { timestamp : 1 , title : 1 , author : 1 , abstract : 1} ).sort( { timestamp : -1 } )

For more information on using projections, see
:ref:`read-operations-projection`.

Use ``$hint`` to Select a Particular Index
------------------------------------------

In most cases the :ref:`query optimizer
<read-operations-query-optimization>` selects the optimal index for a
specific operation; however, you can force MongoDB to use a specific
index using the :method:`hint() <cursor.hint()>` method. Use
:method:`hint() <cursor.hint()>` to support performance testing, or on
some queries where you must select a field or field included in
several indexes.

Use the Increment Operator to Perform Operations Server-Side
------------------------------------------------------------

Use MongoDB's :operator:`$inc` operator to increment or decrement
values in documents. The operator increments the value of the field on
the server side, as an alternative to selecting a document, making
simple modifications in the client and then writing the entire
document to the server.  The :operator:`$inc` operator can also help
avoid race conditions, which would result when two application
instances queried for a document, manually incremented a field, and
saved the entire document back at the same time.
