========================
Automation API Endpoints
========================

.. default-domain:: mongodb

Overview
--------

The Automation API provides endpoints that let you update a group's
deployments by modifying the group's :doc:`cluster configuration
</reference/cluster-configuration>`. The cluster configuration describes
the goal state of the group's deployments. When you submit a new cluster
configuration through the API, the |application| adjusts the current state
of the system to match the configuration saves the configuration as the
current version.

.. _concurrent-cluster-config:

Concurrent Modifications Issue
------------------------------

There is no protection in the Automation API to prevent concurrent
modifications. If two administrators both start with a configuration based
on the current version, make their own modifications, and then submit
their modifications, the later modification wins.

Use the Automation API with great caution.

Endpoints
---------

The Automation API endpoints allow you to perform the operations described
here.

Get the Cluster Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use ``GET`` with the following endpoint to retrieve the current
:doc:`cluster configuration </reference/cluster-configuration>` for a
group. Replace ``<group-id>`` with the Group ID as listed on the
:guilabel:`Administration` / :guilabel:`Group Settings` page in |mms|.

.. code-block:: none

   GET /api/public/v1.0/groups/<group-id>/automationConfig

.. Example command???

Update the Cluster Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use ``PUT`` with the following endpoint to update a group's :doc:`cluster
configuration </reference/cluster-configuration>`. Replace ``<group-id>``
with the Group ID as listed on the :guilabel:`Administration` /
:guilabel:`Group Settings` page in |mms|.

.. code-block:: none

   PUT/api/public/v1.0/groups/<group-id>/automationConfig

For example, issue the following command, where:

- ``<user@example.net>`` is the |mms| user

- ``<api_key>`` is the :doc:`API key </tutorial/enable-public-api>`

- ``<app-example.net>`` is the URL of the |application|

- ``<group_id>``, which can be found on the :guilabel:`Administration` /
  :guilabel:`Group Settings` page in |mms|

- ``<cluster_configuration_document>`` is the directory path and name of
  the :doc:`cluster configuration </reference/cluster-configuration>` file

.. code-block:: none

   curl -u "<user@example.net>:<api_key>" -H "Content-Type: application/json" "https://<app-example.net>:8080/api/public/v1.0/groups/<group_id>/automationConfig" --digest -X PUT -d @<cluster_configuration_document> -i

For steps for updating a cluster configuration, see
:doc:`/tutorial/create-cluster-with-api`.

Get the Status of the MongoDB Deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use ``GET`` with the following endpoint to retrieve status of each MongoDB
process in the deployment. Replace ``<group-id>`` with the Group ID as
listed on the :guilabel:`Administration` / :guilabel:`Group Settings` page
in |mms|.

.. code-block:: none

   GET /api/public/v1.0/groups/<group-id>/automationStatus

For example, issue the following command, where ``<user@example.net>`` is
the |mms| user, ``<api_key>`` is the :doc:`API key
</tutorial/enable-public-api>`, ``<app-example.net>`` is the URL of the
|application|, and ``<group_id>`` is the ID specified on the
:guilabel:`Administration` / :guilabel:`Group Settings` page in |mms|:

.. code-block:: none

   curl -u "<user@example.net>:<api_key>" "http://<app-example.net>:8080/api/public/v1.0/groups/<group_id>/automationStatus" --digest -i

The endpoint returns the ``goalVersion`` field and the ``processes``
array. The array reports the status of each MongoDB process as viewed by
the Automation Agent.

.. code-block::

   "goalVersion": 29,
   "processes": [
       {
           "hostname": "<agent_hostname>",
           "name": "blue_0",
           "lastGoalAchieved": 28,
           "plan": ["Download", "Start", "WaitRsInit"]
       },
       {
           "hostname": "<agent_hostname>",
           "name": "blue_1",
           "lastGoalAchieved": 29,
           "plan": []
       }
   ]

The ``goalVersion`` field specifies the version of the most recently
submitted cluster configuration. If there is a :ref:`conflict in
submissions of cluster configurations <concurrent-cluster-config>`, this
field lists the winning configuration.

In the ``processes`` array:

``hostname`` indicates the fully qualified hostname (retrieved by issuing
``hostname -f``) of the server on which the MongoDB process and Automation
Agent are hosted.

``name`` field is the process name as specified in the :doc:`cluster
configuration </reference/cluster-configuration>`.

``lastGoalAchieved`` indicates the last version of the cluster
configuration with which this process had deployed as configured. If the
``lastGoalAchieved`` number is not equal to the ``goalVersion`` number,
the process has not yet deployed according to the current
configuration.

The ``plan`` array describes how a process that is not yet up-to-date with
the configuration will achieve the goal state.
