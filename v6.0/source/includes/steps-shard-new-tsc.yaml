title: Connect to your sharded cluster.
ref: new-sharded-tsc-connect
stepnum: 1
level: 4
content: |
   Connect :binary:`~bin.mongosh` to the :binary:`~bin.mongos` for your
   sharded cluster. Specify the ``host`` and ``port`` on which the
   ``mongos`` is running:

   .. code-block:: javascript

      mongosh --host <hostname> --port <port>

---
title: Confirm that sharding is enabled on your database. 
ref: new-sharded-tsc-confirm-sharding
stepnum: 2
level: 4
content: |
   Run :method:`sh.status()` to confirm that sharding is enabled on your database:

   .. code-block:: javascript

      sh.status()

   The command returns the sharding information:

   .. code-block:: javascript

      --- Sharding Status --- 
         sharding version: {
            "_id" : 1,
            "minCompatibleVersion" : 5,
            "currentVersion" : 6,
      ...

---
title: Create the collection.
ref: new-sharded-tsc-create
stepnum: 3
level: 4
content: |
   Use the :method:`~sh.shardCollection()` method with the :ref:`timeseries
   <method-sharded-time-series-collection-options>` option.

   For example:

   .. code-block:: javascript

      sh.shardCollection(
         "test.weather",
         { "metadata.sensorId": 1 },
         {
            timeseries: {
               timeField: "timestamp",
               metaField: "metadata",
               granularity: "hours"
            }
         }
      )

   In this example, :method:`sh.shardCollection()`:

   - Shards a new time series collection named ``weather`` on the
     ``test`` database.

   - Specifies the ``metadata.sensorId`` field as the :ref:`shard key
     <shard-key>`.

   - Specifies a ``granularity`` of hours.

   The following document contains the appropriate metadata for the
   collection:

   .. code-block:: javascript

      db.weather.insertOne( {
         "metadata": { "sensorId": 5578, "type": "temperature" },
         "timestamp": ISODate("2021-05-18T00:00:00.000Z"),
         "temp": 12
      } )

...
