.. _sharding-hashed:
.. _sharding-hashed-sharding:

===============
Hashed Sharding
===============

.. default-domain:: mongodb

Hashed sharding uses a :ref:`hashed index <index-hashed-index>` to
partition data across your shared cluster. Hashed indexes compute the
hash value of a single field as the index value; this value is used as
your shard key. [#hashvalue]_

.. include:: /images/sharding-hash-based.rst

Hashed sharding provides more even data distribution across the sharded
cluster at the cost of reducing :ref:`sharding-query-isolation`. Post-hash,
documents with "close" shard key values are unlikely to be on the same
chunk or shard - the :binary:`~bin.mongos` is more likely to perform
:ref:`sharding-mongos-broadcast` to fulfill a given ranged query.
:binary:`~bin.mongos` can target queries with equality matches to a single shard.

If you shard an empty collection using a hashed shard key, MongoDB
automatically creates two empty chunks per shard, to cover the entire range
of the hashed shard key value across the cluster. You can control how many
chunks MongoDB creates with the ``numInitialChunks`` parameter to
:dbcommand:`shardCollection` or by manually creating chunks on the empty
collection using the :dbcommand:`split` command.

.. include:: /includes/tip-applications-do-not-need-to-compute-hashes.rst

.. [#hashvalue]
   Starting in version 4.0, the :binary:`~bin.mongo` shell provides the
   method :method:`convertShardKeyToHashed()`. This method uses the
   same hashing function as the hashed index and can be used to see
   what the hashed value would be for a key.

.. _hashed-sharding-shard-key:

Hashed Sharding Shard Key
-------------------------

The field you choose as your hashed shard key should have a good
:ref:`cardinality<shard-key-range>`, or large number of different values.
Hashed keys are ideal for shard keys with fields that change
:ref:`monotonically<shard-key-monotonic>` like :term:`ObjectId` values or
timestamps. A good example of this is the default ``_id`` field, assuming
it only contains :term:`ObjectID` values.

To shard a collection using a hashed shard key, see
:doc:`/tutorial/deploy-sharded-cluster-hashed-sharding`.

Hashed vs Ranged Sharding
-------------------------

Given a collection using a monotonically increasing value ``X`` as the
shard key, using ranged sharding results in a distribution of incoming
inserts similar to the following:

.. include:: /images/sharded-cluster-monotonic-distribution.rst

Since the value of ``X`` is always increasing, the chunk with an upper bound
of :bsontype:`maxKey<data_maxkey>` receives the majority incoming writes. This
restricts insert operations to the single shard containing this chunk, which
reduces or removes the advantage of distributed writes in a sharded cluster.

By using a hashed index on ``X``, the distribution of inserts is similar
to the following:

.. include:: /images/sharded-cluster-hashed-distribution.rst

Since the data is now distributed more evenly, inserts are efficiently
distributed throughout the cluster.

Shard the Collection
--------------------

Use the :method:`sh.shardCollection()` method, specifying the full namespace
of the collection and the target :doc:`hashed index</core/index-hashed>`
to use as the :term:`shard key`.

.. code-block:: javascript

   sh.shardCollection( "database.collection", { <field> : "hashed" } )


Specify the Initial Number of Chunks
------------------------------------

If you shard an empty collection using a hashed shard key, MongoDB
automatically creates and migrates empty chunks so that each shard
has two chunks. To control how many chunks MongoDB creates when
sharding the collection, use :dbcommand:`shardCollection` with the
``numInitialChunks`` parameter.

.. include:: /includes/warning-hashed-index-floating-point.rst

.. toctree::
   :titlesonly:
   :hidden:

   /tutorial/deploy-sharded-cluster-hashed-sharding
