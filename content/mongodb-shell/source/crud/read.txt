.. _mongosh-read:

===============
Query Documents
===============

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :description: Use the db.collection.find() method in the MongoDB Shell to query documents in a collection.
   :keywords: server, atlas, sample dataset
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Use the :method:`db.collection.find()` method in the |mdb-shell|
to query documents in a collection.

.. include:: /includes/fact-sample-data-examples.rst

.. TODO: Make a callout here to the Connect to an Atlas Cluster section
   in the connection docs

Read All Documents in a Collection
----------------------------------

To read all documents in the collection, pass an empty document as the
query filter parameter to the find method. The query filter parameter
determines the select criteria.

.. example::

   To return all documents from the ``sample_mflix.movies`` collection:

   .. code-block:: javascript

      use sample_mflix

      db.movies.find()

   This operation is equivalent to the following SQL statement:

   .. code-block:: sql
      :copyable: false

      SELECT * FROM movies

Specify Equality Condition
--------------------------

To select documents which match an equality condition, specify
the condition as a ``<field>:<value>`` pair in the
:manual:`query filter document </document/#query-filter-documents>`.

.. example::

   To return all movies where the ``title`` equals ``Titanic`` from the
   ``sample_mflix.movies`` collection:

   .. code-block:: javascript

      use sample_mflix

      db.movies.find( { "title": "Titanic" } )

   This operation corresponds to the following SQL statement:

   .. code-block:: sql
      :copyable: false

      SELECT * FROM movies WHERE title = "Titanic"

Specify Conditions Using Query Operators
----------------------------------------

Use :manual:`query operators
</reference/operator/query/#query-selectors>` in a
:manual:`query filter document </core/document/#document-query-filter>`
to perform more complex comparisons and evaluations. Query operators
in a query filter document have the following form:

.. code-block:: javascript

   { <field1>: { <operator1>: <value1> }, ... }

.. example::

   To return all movies from the ``sample_mflix.movies`` collection
   which are either rated ``PG`` or ``PG-13``:

   .. code-block:: javascript

      use sample_mflix

      db.movies.find( { rated: { $in: [ "PG", "PG-13" ] } } )

   This operation corresponds to the following SQL statement:

   .. code-block:: sql
      :copyable: false

      SELECT * FROM movies WHERE rated in ("PG", "PG-13")

.. note::

   Although you can express this query using the :query:`$or` operator,
   use the :query:`$in` operator rather than the :query:`$or`
   operator when performing equality checks on the same field.

Specify Logical Operators (``AND`` / ``OR``)
--------------------------------------------

A compound query can specify conditions for more than one field in the
collection's documents. Implicitly, a logical ``AND`` conjunction
connects the clauses of a compound query so that the query selects the
documents in the collection that match all the conditions.

.. example::

   To return movies which were released in Mexico **and** have an IMDB
   rating of at least 7:

   .. code-block:: javascript

      use sample_mflix

      db.movies.find( { countries: "Mexico", "imdb.rating": { $gte: 7 } } )

Use the :query:`$or` operator to specify a compound query that joins
each clause with a logical ``OR`` conjunction so that the query selects
the documents in the collection that match at least one condition.

.. example::

   To return movies from the ``sample_mflix.movies`` collection which
   were released in 2010 **and** *either* won at least 5 awards or
   have a ``genre`` of ``Drama``:

   .. code-block:: javascript

      use sample_mflix

      db.movies.find( {
           year: 2010,
           $or: [ { "awards.wins": { $gte: 5 } }, { genres: "Drama" } ]
      } )

Read Behavior
-------------

To learn more about the specific behavior of reading documents,
see :manual:`Behavior </tutorial/query-documents/#behavior>`.

Additional Query Tutorials
--------------------------

For additional query examples, see:

- :manual:`Query Embedded Documents
  </tutorial/query-embedded-documents>`

- :manual:`Query an Array </tutorial/query-arrays>`

- :manual:`Query an Array of Embedded Documents 
  </tutorial/query-array-of-documents>`

- :manual:`Project Fields to Return from Query
  </tutorial/project-fields-from-query-results>`

- :manual:`Query for Null or Missing Fields
  </tutorial/query-for-null-fields>`
