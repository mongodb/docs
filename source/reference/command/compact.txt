.. _compact:

=======
compact
=======

.. default-domain:: mongodb

Definition
----------

.. dbcommand:: compact

   .. versionadded:: 2.0

   Rewrites and defragments a single
   collection. The command drops all indexes at the beginning of
   compaction and rebuilds the indexes at the end. :dbcommand:`compact`
   is conceptually similar to :dbcommand:`repairDatabase` but works on a
   single collection rather than an entire database.

   The command has the following syntax:

   .. code-block:: javascript

      { compact: <collection name> }

   The command uses the following fields:

   .. include:: /reference/command/compact-field.rst

.. _compact-paddingFactor:

paddingFactor
~~~~~~~~~~~~~

.. versionadded:: 2.2

The ``paddingFactor`` field takes the following range of values:

- Default: ``1.0``

- Minimum: ``1.0`` (no padding)

- Maximum: ``4.0``

If your updates increase the size of the documents, padding will
increase the amount of space allocated to each document and avoid
expensive document relocation operations within the data files.

You can calculate the padding size by subtracting the document size from
the record size or, in terms of the ``paddingFactor``, by subtracting
``1`` from the ``paddingFactor``:

.. code-block:: none

   padding size = (paddingFactor - 1) * <document size>.

For example, a ``paddingFactor`` of ``1.0`` specifies a padding size of
``0`` whereas a ``paddingFactor`` of ``1.2`` specifies a padding size of
``0.2`` or 20 percent (20%) of the document size.

With the following command, you can use the ``paddingFactor`` option of
the :dbcommand:`compact` command to set the record size to ``1.1`` of
the document size, or a padding factor of 10 percent (10%):

.. code-block:: javascript

   db.runCommand ( { compact: '<collection>', paddingFactor: 1.1 } )

:dbcommand:`compact` compacts existing documents but does not reset
``paddingFactor`` statistics for the collection. After the
:dbcommand:`compact` MongoDB will use the existing ``paddingFactor``
when allocating new records for documents in this collection.

.. _compact-paddingBytes:

paddingBytes
~~~~~~~~~~~~

.. versionadded:: 2.2

Specifying ``paddingBytes`` can be useful if your documents start small
but then increase in size significantly. For example, if your documents
are initially 40 bytes long and you grow them by 1KB, using
``paddingBytes: 1024`` might be reasonable since using ``paddingFactor:
4.0`` would specify a record size of 160 bytes (``4.0`` times the
initial document size), which would only provide a padding of 120 bytes
(i.e. record size of 160 bytes minus the document size).

With the following command, you can use the ``paddingBytes`` option of
the :dbcommand:`compact` command to set the padding size to ``100``
bytes on the collection named by ``<collection>``:

.. code-block:: javascript

   db.runCommand ( { compact: '<collection>', paddingBytes: 100 } )

.. warning:: Always have an up-to-date backup before performing server
   maintenance such as the :dbcommand:`compact` operation.

Behaviors
---------

The :dbcommand:`compact` has the behaviors described here.

Blocking
~~~~~~~~

In MongoDB 2.2, :dbcommand:`compact` blocks activities only for its
database. Prior to 2.2, the command blocked all activities.

You may view the intermediate progress either by viewing the
:program:`mongod` log file or by running the :method:`db.currentOp()`
in another shell instance.

Operation Termination
~~~~~~~~~~~~~~~~~~~~~

If you terminate the operation with the :method:`db.killOp()
<db.killOp()>` method or restart the server before the
:dbcommand:`compact` operation has finished:

- If you have journaling enabled, the data remains consistent and
  usable, regardless of the state of the :dbcommand:`compact` operation.
  You may have to manually rebuild the indexes.

- If you do not have journaling enabled and the :program:`mongod` or
  :dbcommand:`compact` terminates during the operation, it is impossible
  to guarantee that the data is in a consistent state.

- In either case, much of the existing free space in the collection may
  become un-reusable. In this scenario, you should rerun the compaction
  to completion to restore the use of this free space.

Size and Number of Data Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:dbcommand:`compact` may increase the total size and number of your data
files, especially when run for the first time. However, this will not
increase the total collection storage space since storage size is the
amount of data allocated within the database files, and not the
size/number of the files on the file system.

Disk Space
~~~~~~~~~~

:dbcommand:`compact` generally uses less disk space than
:dbcommand:`repairDatabase` and is faster. However, the
:dbcommand:`compact` command is still slow and blocks other database
use. Only use :dbcommand:`compact` during scheduled maintenance periods.

:dbcommand:`compact` requires a small amount of additional disk space
while running but unlike :dbcommand:`repairDatabase` it does *not* free
space on the file system.

To see how the storage space changes for the collection, run the
:dbcommand:`collStats` command before and after compaction.

Replica Sets
~~~~~~~~~~~~

:dbcommand:`compact` commands do not replicate to secondaries in a
:term:`replica set`:

- Compact each member separately.

- Ideally run :dbcommand:`compact` on a secondary. See option
  ``force:true`` above for information regarding compacting the primary.

.. warning::

   If you run :dbcommand:`compact` on a secondary, the secondary will
   enter a ``RECOVERING`` state to prevent clients from sending read
   operations during compaction. Once the operation finishes the
   secondary will automatically return to ``SECONDARY`` state. See
   :data:`~replSetGetStatus.members.state` for more information about
   replica set member states. Refer to the "`partial script for
   automating step down and compaction`_" for an example of this
   procedure.

Sharded Clusters
~~~~~~~~~~~~~~~~

:dbcommand:`compact` is a command issued to a :program:`mongod`. In a
sharded environment, run :dbcommand:`compact` on each shard separately
as a maintenance operation.

.. important:: You cannot issue :dbcommand:`compact` against a
   :program:`mongos` instance.

Capped Collections
~~~~~~~~~~~~~~~~~~

It is not possible to compact :term:`capped collections <capped
collection>` because they don't have padding, and documents cannot grow
in these collections. However, the documents of a :term:`capped
collection` are not subject to fragmentation.

.. _`partial script for automating step down and compaction`:
   https://github.com/mongodb/mongo-snippets/blob/master/js/compact-example.js
