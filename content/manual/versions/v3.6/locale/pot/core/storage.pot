# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/storage.txt:3
# f5c443113cfd4de6956c5265d1222bb9
msgid "Storage"
msgstr ""

#: ../source/core/storage.txt:7
# 17a36f23cd6048508c477f383943fbe8
msgid "MongoDB adds support for additional storage engines. MongoDB's original storage engine, known as ``mmapv1`` remains the default in 3.0, but the new ``wiredTiger`` engine is available and can offer additional flexibility and improved throughput for many workloads."
msgstr ""

#: ../source/core/storage.txt:14
# ce86c5acce944e548d37d8ff6bfeded4
msgid "Data Model"
msgstr ""

#: ../source/core/storage.txt:16
# 0447f8e3a6d5467eaa63ad006b9a8d19
msgid "MongoDB stores data in the form of :term:`BSON` documents, which are rich mappings of keys, or field names, to values. BSON supports a rich collection of types, and fields in BSON documents may hold arrays of values or embedded documents. All documents in MongoDB must be less than 16MB, which is the :limit:`BSON document size <BSON Document Size>`."
msgstr ""

#: ../source/core/storage.txt:22
# 60b2f1ff537949cbb47e5d1d526ae24a
msgid "All documents are part of a :term:`collection`, which are a logical groupings of documents in a MongoDB database. The documents in a collection share a set of indexes, and typically these documents share common fields and structure."
msgstr ""

#: ../source/core/storage.txt:27
# eb0c256331b74b6a89f1b077edb9a4e6
msgid "In MongoDB the :term:`database` construct is a group of related collections. Each database has a distinct set of data files and can contain a large number of collections. A single MongoDB deployment may have many databases."
msgstr ""

#: ../source/core/storage.txt:35
# 734852e72107424ca23835e423706f7f
msgid "WiredTiger Storage Engine"
msgstr ""

#: ../source/core/storage.txt:39
# cf96a9df8a604d289bd77fd7c765b97f
msgid "WiredTiger is a storage engine that is optionally available in the 64-bit build of MongoDB 3.0. It excels at read and insert workloads as well as more complex update workloads."
msgstr ""

#: ../source/core/storage.txt:44
# 9ffc040f95524228b250b32d6375daef
msgid "Document Level Locking"
msgstr ""

#: ../source/core/storage.txt:46
# c2ce8fdbc56e4790a371883abe6c546b
msgid "With WiredTiger, all write operations happen within the context of a *document* level lock. As a result, multiple clients can modify more than one document in a single collection at the same time. With this very granular concurrency control, MongoDB can more effectively support workloads with read, write and updates as well as high-throughput concurrent workloads."
msgstr ""

#: ../source/core/storage.txt:56
#: ../source/core/storage.txt:127
# f99d1fb06aa24376ac554e39f0cc495a
# f72eed0710874593a9cd8ca377a78a27
msgid "Journal"
msgstr ""

#: ../source/core/storage.txt:58
# cb79e07547074d9c9ed7ce8c2916a239
msgid "WiredTiger uses a write-ahead transaction log in combination with checkpoints to ensure data persistence. With WiredTiger, MongoDB will commit a checkpoint to disk every 60 seconds or when there are 2 gigabytes of data to write. Between and during checkpoints the data files are *always* valid."
msgstr ""

#: ../source/core/storage.txt:64
# bbe28635f8f0431fa14974a58f59f188
msgid "The WiredTiger journal persists all data modifications between checkpoints. If MongoDB exits between checkpoints, it uses the journal to replay all data modified since the last checkpoint. By default, the"
msgstr ""

#: ../source/core/storage.txt:68
# e4f1d20e42664337ae788dba69c640ff
msgid "WiredTiger journal is compressed using the :term:`snappy` compression library. To specify an alternate compression algorithm or no compression, use the :setting:`storage.wiredTiger.engineConfig.journalCompressor` setting."
msgstr ""

#: ../source/core/storage.txt:73
# e986f3a5b50c4d89a8b547d51eb8c959
msgid "You can disable journaling by setting :setting:`storage.journal.enabled` to ``false``, which can reduce the overhead of maintaining the journal. For :term:`standalone` instances, not using the journal means that you will lose some data modifications when MongoDB exits unexpectedly between checkpoints. For members of :term:`replica sets <replica set>`, the replication process may provide sufficient durability guarantees."
msgstr ""

#: ../source/core/storage.txt:84
# 2d8af93a13ac4d75b82ce6fc7a4bb1df
msgid "Compression"
msgstr ""

#: ../source/core/storage.txt:86
# dba320bad9144a9c91803012d1e04584
msgid "With WiredTiger, MongoDB supports compression for all collections and indexes. Compression minimizes storage use at the expense of additional CPU."
msgstr ""

#: ../source/core/storage.txt:90
# 0ae677f85e4d4f89827edffb7c760a2a
msgid "By default, WiredTiger uses block compression with the :term:`snappy` compression library for all collections and :term:`prefix compression` for all indexes."
msgstr ""

#: ../source/core/storage.txt:94
# 46f4efbe57db431a8ebff4e84a1f8ab8
msgid "For collections, block compression with :term:`zlib` is also available. To specify an alternate compression algorithm or no compression, use the :setting:`storage.wiredTiger.collectionConfig.blockCompressor` setting."
msgstr ""

#: ../source/core/storage.txt:99
# e876b70426b440cfbb282a0091422111
msgid "For indexes, to disable :term:`prefix compression`, use the :setting:`storage.wiredTiger.indexConfig.prefixCompression` setting."
msgstr ""

#: ../source/core/storage.txt:102
# ba15e2f64c32414e90ba7203dcb8c0a1
msgid "Compression settings are also configurable on a per-collection and per-index basis during collection and index creation. See :ref:`create-collection-storage-engine-options` and :ref:`db.collection.createIndex() storageEngine option <createIndex-options>`."
msgstr ""

#: ../source/core/storage.txt:108
# 1cf6f44936ca4389bbe757da240d806f
msgid "For most workloads, the default compression settings balance storage efficiency and processing requirements."
msgstr ""

#: ../source/core/storage.txt:111
# 042e2b186e6840318bc3f2137b6118bc
msgid "The WiredTiger journal is also compressed by default. For information on journal compression, see :ref:`storage-wiredtiger-journal`."
msgstr ""

#: ../source/core/storage.txt:114
# cac6e612d448436c951679a37b92e0e6
msgid "`<http://wiredtiger.com>`_"
msgstr ""

#: ../source/core/storage.txt:119
# 675025e1c9e6456989fc9e98a3ab6c56
msgid "MMAPv1 Storage Engine"
msgstr ""

#: ../source/core/storage.txt:121
# 40108ecd78e24d77a34e8af55d86d124
msgid "MMAPv1 is MongoDB's original storage engine based on memory mapped files. It excels at workloads with high volume inserts, reads, and in-place updates. MMAPv1 is the default storage engine in MongoDB 3.0 and all previous versions."
msgstr ""

#: ../source/core/storage.txt:129
# 3b2f2437ff804e1a83fed9e04f2db734
msgid "In order to ensure that all modifications to a MongoDB data set are durably written to disk, MongoDB records all modifications to a journal that it writes to disk more frequently than it writes the data files. The journal allows MongoDB to successfully recover data from data files after a :program:`mongod` instance exits without flushing all changes."
msgstr ""

#: ../source/core/storage.txt:136
# eb9bb22ad704458da4b2acc6b90ef9f8
msgid "See :doc:`/core/journaling` for more information about the journal in MongoDB."
msgstr ""

#: ../source/core/storage.txt:140
# d3cd160cafb944b697bbfd095423c09f
msgid "Record Storage Characteristics"
msgstr ""

#: ../source/core/storage.txt:142
# b24241bb054e44c985aa7651741a2ee2
msgid "All records are contiguously located on disk, and when a document becomes larger than the allocated record, MongoDB must allocate a new record. New allocations require MongoDB to move a document and update all indexes that refer to the document, which takes more time than in-place updates and leads to storage fragmentation."
msgstr ""

#: ../source/core/storage.txt:151
# 5aa629ef0db348c89d097f5a897e2fab
msgid "By default, MongoDB uses :ref:`power-of-2-allocation` so that every document in MongoDB is stored in a *record* which contains the document itself and extra space, or :term:`padding`. Padding allows the document to grow as the result of updates while minimizing the likelihood of reallocations."
msgstr ""

#: ../source/core/storage.txt:160
# cdd378a55a9d4980a0e6fb105e796ad8
msgid "Record Allocation Strategies"
msgstr ""

#: ../source/core/storage.txt:162
# 5e9da269d9874f4988d2468967ea2930
msgid "MongoDB supports multiple record allocation strategies that determine how :program:`mongod` adds padding to a document when creating a record. Because documents in MongoDB may grow after insertion and all records are contiguous on disk, the padding can reduce the need to relocate documents on disk following updates. Relocations are less efficient than in-place updates and can lead to storage fragmentation. As a result, all padding strategies trade additional space for increased efficiency and decreased fragmentation."
msgstr ""

#: ../source/core/storage.txt:171
# 276c0e8e99274c0fb6ced5f09b91b2fc
msgid "Different allocation strategies support different kinds of workloads: the :ref:`power of 2 allocations <power-of-2-allocation>` are more efficient for insert/update/delete workloads; while :ref:`exact fit allocations <exact-fit-allocation>` is ideal for collections *without* update and delete workloads."
msgstr ""

#: ../source/core/storage.txt:180
# d99bd530ca544c109ade11ff8561c0ac
msgid "Power of 2 Sized Allocations"
msgstr ""

#: ../source/core/storage.txt:184
# c09c5009b48340298f578568610a1d9f
msgid "MongoDB 3.0 uses the power of 2 sizes allocation as the default record allocation strategy for MMAPv1. With the power of 2 sizes allocation strategy, each record has a size in bytes that is a power of 2 (e.g. 32, 64, 128, 256, 512 ... 2MB). For documents larger than 2MB, the allocation is rounded up to the nearest multiple of 2MB."
msgstr ""

#: ../source/core/storage.txt:190
# c4d6e29993bc41a7866584f94cd0b595
msgid "The power of 2 sizes allocation strategy has the following key properties:"
msgstr ""

#: ../source/core/storage.txt:193
# 21385c394e6847a2970468f68e958ef3
msgid "Can efficiently reuse freed records to reduce fragmentation. Quantizing record allocation sizes into a fixed set of sizes increases the probability that an insert will fit into the free space created by an earlier document deletion or relocation."
msgstr ""

#: ../source/core/storage.txt:198
# 03bef98c74a742e58c227336191904e4
msgid "Can reduce moves. The added padding space gives a document room to grow without requiring a move. In addition to saving the cost of moving, this results in less updates to indexes. Although the power of 2 sizes strategy can minimize moves, it does not eliminate them entirely."
msgstr ""

#: ../source/core/storage.txt:207
# fc1ee554848a4e67b839430cacb06800
msgid "No Padding Allocation Strategy"
msgstr ""

#: ../source/core/storage.txt:211
# 0c9bfd0418ad4aa7a77e58cded7cef0c
msgid "For collections whose workloads do not change the document sizes, such as workloads that consist of insert-only operations or update operations that do not increase document size (such as incrementing a counter), you can disable the :ref:`power of 2 allocation <power-of-2-allocation>` using the :dbcommand:`collMod` command with the :collflag:`noPadding` flag or the :method:`db.createCollection()` method with the ``noPadding`` option."
msgstr ""

#: ../source/core/storage.txt:219
# 49f8e1d3385d44e9bc61cc142d415f0c
msgid "Prior to version 3.0.0, MongoDB used an allocation strategy that included a dynamically calculated :data:`padding <collStats.paddingFactor>` as a factor of the document size."
msgstr ""

#: ../source/core/storage.txt:224
# 36379339c49644beba6eeafdf98b0731
msgid "Capped Collections"
msgstr ""

#: ../source/core/storage.txt:226
# b00846144c5a4228a007fd34bdd43407
msgid ":term:`Capped collections <capped collection>` are fixed-size collections that support high-throughput operations that store records in insertion order. Capped collections work like circular buffers: once a collection fills its allocated space, it makes room for new documents by overwriting the oldest documents in the collection."
msgstr ""

#: ../source/core/storage.txt:232
# 3523238a1e364644a9b1f3fbf1f0744f
msgid "See :doc:`/core/capped-collections` for more information."
msgstr ""

#: ../source/includes/extracts/additional-resources-storage.rst:4
# 29935ca881254a66bf516ee84bed6233
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-storage.rst:6
# c66178e2a08046958e992dc98a6becad
msgid "`Blog Post: New Compression Options in MongoDB 3.0 <https://www.mongodb.com/blog/post/new-compression-options-mongodb-30?jmp=docs>`_"
msgstr ""

