# table structure. all content symbolic.
section: layout
header: [ meta.h_action, meta.h_params, meta.h_result]
rows:
  - 1: [ content.atype_authenticate, content.params_authenticate, content.results_authenticate ]
  - 2: [ content.atype_authCheck, content.params_authCheck, content.results_authCheck ]
  - 3: [ content.atype_createCollection, content.params_createCollection, content.results_0 ]
  - 4: [ content.atype_createDatabase, content.params_createDatabase, content.results_0 ]
  - 5: [ content.atype_createIndex, content.params_createIndex, content.results_0 ]
  - 6: [ content.atype_renameCollection, content.params_renameCollection, content.results_0 ]
  - 7: [ content.atype_dropCollection, content.params_dropCollection, content.results_0 ]
  - 8: [ content.atype_dropDatabase, content.params_dropDatabase, content.results_0 ]
  - 9: [ content.atype_dropIndex, content.params_dropIndex, content.results_0 ]
  - 10: [ content.atype_createUser, content.params_createUser, content.results_0 ]
  - 11: [ content.atype_dropUser, content.params_dropUser, content.results_0 ]
  - 12: [ content.atype_dropAllUsersFromDatabase, content.params_dropAllUsersFromDatabase, content.results_0 ]
  - 13: [ content.atype_updateUser, content.params_updateUser, content.results_0 ]
  - 14: [ content.atype_grantRolesToUser, content.params_grantRolesToUser, content.results_0 ]
  - 15: [ content.atype_revokeRolesFromUser, content.params_revokeRolesFromUser, content.results_0 ]
  - 16: [ content.atype_createRole, content.params_createRole, content.results_0 ]
  - 17: [ content.atype_updateRole, content.params_updateRole, content.results_0 ]
  - 18: [ content.atype_dropRole, content.params_dropRole, content.results_0 ]
  - 19: [ content.atype_dropAllRolesFromDatabase, content.params_dropAllRolesFromDatabase, content.results_0 ]
  - 20: [ content.atype_grantRolesToRole, content.params_grantRolesToRole, content.results_0 ]
  - 21: [ content.atype_revokeRolesFromRole, content.params_revokeRolesFromRole, content.results_0 ]
  - 22: [ content.atype_grantPrivilegesToRole, content.params_grantPrivilegesToRole, content.results_0 ]
  - 23: [ content.atype_revokePrivilegesFromRole, content.params_revokePrivilegesFromRole, content.results_0 ]
  - 24: [ content.atype_replSetReconfig, content.params_replSetReconfig, content.results_0 ]
  - 25: [ content.atype_enableSharding, content.params_enableSharding, content.results_0 ]
  - 26: [ content.atype_shardCollection, content.params_shardCollection, content.results_0 ]
  - 27: [ content.atype_addShard, content.params_addShard, content.results_0 ]
  - 28: [ content.atype_removeShard, content.params_removeShard, content.results_0 ]
  - 29: [ content.atype_shutdown, content.params_shutdown, content.results_0 ]
  - 30: [ content.atype_applicationMessage, content.params_applicationMessage, content.results_0 ]
---
# table metadata, as meta.<key>
section: meta
h_action: "``atype``"
h_params: "``param``"
h_result: "``result``"
---
# table content, as content.<key>
section: content
blank: " "
atype_authenticate: ":authaction:`authenticate`"
atype_authCheck: ":authaction:`authCheck`"
atype_createIndex: ":authaction:`createIndex`"
atype_createDatabase: ":authaction:`createDatabase`"
atype_createCollection: ":authaction:`createCollection`"
atype_renameCollection: ":authaction:`renameCollection`"
atype_dropIndex: ":authaction:`dropIndex`"
atype_dropDatabase: ":authaction:`dropDatabase`"
atype_dropCollection: ":authaction:`dropCollection`"
atype_createUser: ":authaction:`createUser`"
atype_dropUser: ":authaction:`dropUser`"
atype_dropAllUsersFromDatabase: ":authaction:`dropAllUsersFromDatabase`"
atype_updateUser: ":authaction:`updateUser`"
atype_grantRolesToUser: ":authaction:`grantRolesToUser`"
atype_revokeRolesFromUser: ":authaction:`revokeRolesFromUser`"
atype_createRole: ":authaction:`createRole`"
atype_updateRole: ":authaction:`updateRole`"
atype_dropRole: ":authaction:`dropRole`"
atype_dropAllRolesFromDatabase: ":authaction:`dropAllRolesFromDatabase`"
atype_grantRolesToRole: ":authaction:`grantRolesToRole`"
atype_revokeRolesFromRole: ":authaction:`revokeRolesFromRole`"
atype_grantPrivilegesToRole: ":authaction:`grantPrivilegesToRole`"
atype_revokePrivilegesFromRole: ":authaction:`revokePrivilegesFromRole`"
atype_shutdown: ":authaction:`shutdown`"
atype_replSetReconfig: ":authaction:`replSetReconfig`"
atype_applicationMessage: ":authaction:`applicationMessage`"
atype_enableSharding: ":authaction:`enableSharding`"
atype_addShard: ":authaction:`addShard`"
atype_removeShard: ":authaction:`removeShard`"
atype_shardCollection: ":authaction:`shardCollection`"
params_authenticate: |

   .. code-block:: none

      {
        user: <user name>,
        db: <database>,
        mechanism: <mechanism>
      }

results_authenticate: |

   ``0`` - Success

   ``18`` - Authentication Failed

params_authCheck: |

   .. code-block:: none

      {
        command: <name>,
        ns: <database>.<collection>,
        args: <command object>
      }

   ``ns`` field is optional.

   ``args`` field may be redacted.

results_authCheck: |

   ``0`` - Success

   ``13`` - Unauthorized to perform the operation.

   By default, the auditing system logs only the authorization
   failures. To enable the system to log authorization successes, use
   the :parameter:`auditAuthorizationSuccess` parameter.

params_createIndex: |

   .. code-block:: none

      {
        ns: <database>.<collection>,
        indexName: <index name>,
        indexSpec: <index specification>
      }

params_createDatabase: |

   .. code-block:: none

      { ns: <database> }

params_createCollection: |

   .. code-block:: none

      { ns: <database>.<collection> }

params_renameCollection: |

   .. code-block:: none

      {
        old: <database>.<collection>,
        new: <database>.<collection>
      }

params_dropIndex: |

   .. code-block:: none

      {
        ns: <database>.<collection>,
        indexName: <index name>
      }

params_dropDatabase: |

   .. code-block:: none

      { ns: <database> }

params_dropCollection: |

   .. code-block:: none

      { ns: <database>.<collection> }

params_createUser: |

   .. code-block:: none

      {
        user: <user name>,
        db: <database>,
        customData: <document>,
        roles: [
           {
             role: <role name>,
             db: <database>
           },
           ...
        ]
      }

   The ``customData`` field is optional.

params_dropUser: |

   .. code-block:: none

      {
        user: <user name>,
        db: <database>
      }

params_dropAllUsersFromDatabase: |

   .. code-block:: none

      { db: <database> }

params_updateUser: |

   .. code-block:: none

      {
        user: <user name>,
        db: <database>,
        passwordChanged: <boolean>,
        customData: <document>,
        roles: [
           {
             role: <role name>,
             db: <database>
           },
           ...
        ]
      }

   The ``customData`` field is optional.

params_grantRolesToUser: |

   .. code-block:: none

      {
        user: <user name>,
        db: <database>,
        roles: [
           {
             role: <role name>,
             db: <database>
           },
           ...
        ]
      }

params_revokeRolesFromUser: |

   .. code-block:: none

      {
        user: <user name>,
        db: <database>,
        roles: [
           {
             role: <role name>,
             db: <database>
           },
           ...
        ]
      }

params_createRole: |

   .. code-block:: none

      {
        role: <role name>,
        db: <database>,
        roles: [
           {
             role: <role name>,
             db: <database>
           },
           ...
        ],
        privileges: [ 
          {
            resource: <resource document>,
            actions: [ <action>, ... ]
          },
          ...
        ]
      }

   The ``roles`` and the ``privileges`` fields are optional.

   For details on the resource document, see :ref:`resource-document`.
   For a list of actions, see :ref:`security-user-actions`.

params_updateRole: |

   .. code-block:: none

      {
        role: <role name>,
        db: <database>,
        roles: [
           {
             role: <role name>,
             db: <database>
           },
           ...
        ],
        privileges: [ 
          {
            resource: <resource document>,
            actions: [ <action>, ... ]
          },
          ...
        ]
      }

   The ``roles`` and the ``privileges`` fields are optional.

   For details on the resource document, see :ref:`resource-document`.
   For a list of actions, see :ref:`security-user-actions`.

params_dropRole: |

   .. code-block:: none

      {
        role: <role name>,
        db: <database>
      }

params_dropAllRolesFromDatabase: |

   .. code-block:: none

      { db: <database> }

params_grantRolesToRole: |

   .. code-block:: none

      {
        role: <role name>,
        db: <database>,
        roles: [
           {
             role: <role name>,
             db: <database>
           },
           ...
        ]
      }

params_revokeRolesFromRole: |

   .. code-block:: none

      {
        role: <role name>,
        db: <database>,
        roles: [
           {
             role: <role name>,
             db: <database>
           },
           ...
        ]
      }

params_grantPrivilegesToRole: |

   .. code-block:: none

      {
        role: <role name>,
        db: <database>,
        privileges: [ 
          {
            resource: <resource document>,
            actions: [ <action>, ... ]
          },
          ...
        ]
      }

   For details on the resource document, see :ref:`resource-document`.
   For a list of actions, see :ref:`security-user-actions`.

params_revokePrivilegesFromRole: |

   .. code-block:: none

      {
        role: <role name>,
        db: <database name>,
        privileges: [ 
          {
            resource: <resource document>,
            actions: [ <action>, ... ]
          },
          ...
        ]
      }

   For details on the resource document, see :ref:`resource-document`.
   For a list of actions, see :ref:`security-user-actions`.

params_shutdown: |

   .. code-block:: none

      { }

   Indicates commencement of database shutdown.

params_replSetReconfig: |

   .. code-block:: none

      {
        old: <configuration>,
        new: <configuration>
      }

   Indicates membership change in the replica set.

   The ``old`` field is optional.

params_applicationMessage: |

   .. code-block:: none

      { msg: <custom message string> }

   See :dbcommand:`logApplicationMessage`.

params_enableSharding: |

   .. code-block:: none

      { ns: <database> }

params_addShard: |

   .. code-block:: none

      {
        shard: <shard name>,
        connectionString: <hostname>:<port>,
        maxSize: <maxSize>
      }

   When a shard is a replica set, the ``connectionString`` includes the
   replica set name and can include other members of the replica set.

params_removeShard: |

   .. code-block:: none

      { shard: <shard name> }

params_shardCollection: |

   .. code-block:: none

      {
        ns: <database>.<collection>,
        key: <shard key pattern>,
        options: { unique: <boolean> }
      }

results_0: "``0`` - Success"
...
