.. _java-legacy-api:

===========================
Migrate from the Legacy API
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


Overview
--------

On this page, you can identify the changes you must make to migrate from the
legacy API to the current API. You can also learn about features unique to 
the current {+driver-short+} and the benefits of migrating to the new API.


The legacy API, packaged as the ``mongodb-driver-legacy`` JAR, contains
the legacy synchronous Java driver and uses naming conventions used in earlier
versions of the driver.

The current API, packaged as the ``mongodb-driver-sync`` JAR, contains the
current synchronous Java driver. It features the ``MongoCollection``
interface as an entry point to CRUD operations. It does not contain the
legacy API.

To perform a migration from the legacy API to the current API, ensure your
code no longer references the legacy API, updating your code when necessary.
Then, replace the legacy API and any uber JAR that contains it with the
current API JAR in your application dependencies.

In addition to updating your application to handle any necessary changes,
always check for any other differences in options and return values before
moving it to production.

Current API Benefits
--------------------

You can continue to use the legacy API with each new {+mdb-server+} release.
However, the legacy API does not support any updates introduced in {+mdb-server+}
3.0 or later. Additionally, the legacy API lacks support for certain features
of the current {+driver-short+}. Some features only available in the non-legacy
API include:

- **Change streams**, a {+mdb-server+} feature designed to monitor real-time
  changes to a single collection, database, or deployment
- **Multi-document ACID transactions**, which ensure atomicity of reads and
  writes to multiple documents and allow for transactions across multiple
  operations, collections, databases, documents, and shards
- **Time series collections**, which store sequences of measurements over a
  period of time and improve query efficiency for time series data
- **Queryable Encryption**, which allows you to encrypt sensitive workloads
  and to query the encrypted data
- **Java records**, or concise Java classes that separate business logic from
  data representation and reduce boilerplate code
- **Native POJO support**, which provides automatic or custom mapping between
  MongoDB documents and Java objects

To learn about more features of the current API, see :ref:`java-whats-new`.

 
API Changes
-----------

The following table shows the majority of the changes in class and method
names between the legacy and current API.

.. list-table::
   :header-rows: 1
   :widths: 50 50
   :class: compatibility-large

   * - Legacy
     - Current

   * - `MongoClientOptions <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClientOptions.html>`__
     - `MongoClientSettings <{+api+}/apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`__

   * - `new MongoClient() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClient.html>`__
     - `MongoClients.create() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoClients.html#create()>`__

   * - `MongoClient.getDB() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/MongoClient.html#getDB(java.lang.String)>`__
     - `MongoClient.getDatabase() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html#getDatabase(java.lang.String)>`__

   * - `DB <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DB.html>`__
     - `MongoDatabase <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html>`__

   * - `DBCollection <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html>`__
     - `MongoCollection<> <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html>`__

   * - `DBCursor <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCursor.html>`__
     - `MongoCursor <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCursor.html>`__

   * - `DBCollection.findOne() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#findOne()>`__
     - | ``MongoCollection.find().first()``
       |
       | See the following API documentation pages for these methods:

       - `find() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#find()>`__
       - `first() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoIterable.html#first()>`__

   * - `DBCollection.insert() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#insert(com.mongodb.DBObject...)>`__
     - Use one of the following methods:

       - `MongoCollection.insertOne() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#insertOne(TDocument)>`__
       - `MongoCollection.insertMany() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#insertMany(java.util.List)>`__

   * - `DBCollection.update() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#update(com.mongodb.DBObject,com.mongodb.DBObject)>`__
     - Use one of the following methods:

       - `MongoCollection.updateOne() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,java.util.List)>`__
       - `MongoCollection.updateMany() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,java.util.List)>`__
       - `MongoCollection.replaceOne() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#replaceOne(org.bson.conversions.Bson,TDocument)>`__

   * - `DBCollection.remove() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#remove(com.mongodb.DBObject)>`__
     - Use one of the following methods:

       - `MongoCollection.deleteOne() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#deleteOne(org.bson.conversions.Bson)>`__
       - `MongoCollection.deleteMany() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#deleteMany(org.bson.conversions.Bson)>`__

   * - `DBCollection.count() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#count()>`__
     - Use one of the following methods:

       - `MongoCollection.countDocuments() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#countDocuments()>`__
       - `MongoCollection.estimatedDocumentCount() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#estimatedDocumentCount()>`__

   * - `DBCollection.findAndModify() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#findAndModify(com.mongodb.DBObject,com.mongodb.client.model.DBCollectionFindAndModifyOptions)>`__
     - Use one of the following methods:

       - `MongoCollection.findOneAndUpdate() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndUpdate(org.bson.conversions.Bson,org.bson.conversions.Bson)>`__
       - `MongoCollection.findOneAndReplace() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndReplace(org.bson.conversions.Bson,TDocument)>`__
       - `MongoCollection.findOneAndDelete() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#findOneAndDelete(org.bson.conversions.Bson)>`__

   * - `QueryBuilder <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/QueryBuilder.html>`__
     - `Filters <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html>`__

In addition to the preceding items, consider the following changes:

- The current API uses ``Options`` classes and method chaining rather than
  overloaded methods.

- The current API uses relaxed JSON format by default in driver versions 4.0
  and later. If your application relies on the strict JSON format, use the
  strict mode when reading or writing data. Learn how to specify the JSON
  format in the current API in the :ref:`Document Data Format: Extended JSON <java-extended-json>`
  guide.

- The default generic type for ``MongoCollection`` in the current API is
  `org.bson.Document <{+api+}/apidocs/bson/org/bson/Document.html>`__.
  You can specify `BasicDBObject <{+api+}/apidocs/mongodb-driver-core/com/mongodb/BasicDBObject.html>`__
  as a type parameter if it eases your migration.

- In the current API, the aggregation pipeline you pass to the ``aggregate()``
  method accepts a list of objects that extend the ``Bson`` interface.
  In the legacy API, it accepts a list of objects that extend the
  ``DBObject`` interface.

  The method signatures also differ between the APIs. See the following API
  documentation for more information:

  - `aggregate() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#aggregate(java.util.List)>`__ method in the current API
  - `aggregate() <{+api+}/apidocs/mongodb-driver-legacy/com/mongodb/DBCollection.html#aggregate(java.util.List,com.mongodb.AggregationOptions)>`__ method in the legacy API
  - `Bson <{+api+}/apidocs/bson/org/bson/conversions/Bson.html>`__ interface
  - `DBObject <{+api+}/apidocs/mongodb-driver-core/com/mongodb/DBObject.html>`__ interface

