=====================
``mongod`` Parameters
=====================

.. default-domain:: mongodb

.. versionchanged:: 2.4

Synopsis
--------

MongoDB provides a number of configuration options that are accessible
via the :option:`--setParameter <mongod --setParameter>` option to
:program:`mongod`. This document documents all of these options.

For additional run time configuration options, see
:doc:`/reference/configuration-options` and :doc:`Manual Page for
mongod </reference/program/mongod>`.

Parameters
----------

.. parameter:: enableLocalhostAuthBypass

   .. versionadded:: 2.4

   Specify ``0`` to disable localhost authentication bypass.  Enabled
   by default.

   :parameter:`enableLocalhostAuthBypass` is not available using
   :dbcommand:`setParameter` database command. Use the
   :setting:`setParameter` option in the configuration file or the
   :option:`--setParameter <mongod --setParameter>` option on the
   command line.

.. parameter:: enableTestCommands

   .. versionadded:: 2.4

   :parameter:`enableTestCommands` enables a set of internal commands
   useful for internal testing
   operations. :parameter:`enableTestCommands` is only available when
   starting :program:`mongod` and you cannot use
   :dbcommand:`setParameter` to modify this parameter. Consider the
   following :program:`mongod` innovation, which sets
   :parameter:`enableTestCommands`:

   .. code-block:: sh

      mongod --setParameter enableTestCommands=1

   :parameter:`enableTestCommands` provides access to the following
   internal commands:

   - :dbcommand:`captrunc`
   - :dbcommand:`configureFailPoint`
   - :dbcommand:`emptycapped`
   - :dbcommand:`godinsert`
   - :dbcommand:`_hashBSONElement`
   - :dbcommand:`journalLatencyTest`
   - :dbcommand:`replSetTest`
   - :dbcommand:`_skewClockCommand`
   - :dbcommand:`sleep`
   - :dbcommand:`_testDistLockWithSkew`
   - :dbcommand:`_testDistLockWithSyncCluster`

.. parameter:: journalCommitInterval

   Specify an integer between ``1`` and ``500`` signifying the number
   of milliseconds (ms) between journal commits.

   Consider the following example which sets the
   :parameter:`journalCommitInterval` to ``200`` ms:

   .. code-block:: javascript

      db.getSiblingDB("admin").runCommand( { setParameter: 1, journalCommitInterval: 200 } )

   .. seealso:: :setting:`journalCommitInterval`.

.. parameter:: logUserIds

   .. versionadded:: 2.4

   Specify ``1`` to enable logging of userids.

   Disabled by default.

.. parameter:: logLevel

   Specify an integer between ``0`` and ``5`` signifying the verbosity
   of the logging, where ``5`` is the most verbose.

   Consider the following example which sets the
   :parameter:`logLevel` to ``2``:

   .. code-block:: javascript

      use admin
      db.runCommand( { setParameter: 1, logLevel: 2 } )

   .. seealso::

      :setting:`verbose`.

.. parameter:: notablescan

   Specify whether queries must use indexes. If ``1``, queries that
   perform a table scan instead of using an index will fail.

   Consider the following example which sets :parameter:`notablescan` to
   true:

   .. code-block:: javascript

      db.getSiblingDB("admin").runCommand( { setParameter: 1, notablescan: 1 } )

   .. seealso:: :setting:`notablescan`

.. parameter:: replIndexPrefetch

   .. versionadded:: 2.2

   Use :parameter:`replIndexPrefetch` in conjunction with
   :setting:`replSet`. The default value is ``all`` and available
   options are:

   - ``none``
   - ``all``
   - ``_id_only``

   By default :term:`secondary` members of a :term:`replica set` will
   load all indexes related to an operation into memory before
   applying operations from the oplog. You can modify this behavior so
   that the secondaries will only load the ``_id`` index. Specify
   ``_id_only`` or ``none`` to prevent the :program:`mongod` from
   loading *any* index into memory.

.. parameter:: replApplyBatchSize

   .. versionadded:: 2.4

   Specify the number of oplog entries to apply as a single batch.
   :parameter:`replApplyBatchSize` must be an integer between 1 and 1024.
   This option only applies to replica set members when they are in the :term:`secondary` state.

   Batch sizes must be ``1`` for members with :setting:`slaveDelay`
   configured.

.. parameter:: saslHostName

   .. versionadded:: 2.4

   :parameter:`saslHostName` overrides MongoDB's default hostname
   detection for the purpose of configuring SASL and Kerberos
   authentication.

   :parameter:`saslHostName` does not affect the hostname of the
   :program:`mongod` or :program:`mongos` instance for any purpose
   beyond the configuration of SASL and Kerberos.

   You can only set :parameter:`saslHostName` during start-up, and
   cannot change this setting using the :dbcommand:`setParameter`
   database command.

   .. note::

      :parameter:`saslHostName` supports Kerberos authentication and is
      only included in MongoDB Enterprise. For Linux systems, see
      :doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`
      for more information.

      .. COMMENT
         .. versionadded:: 2.5.3
            MongoDB Enterprise now supports Windows systems,
            which includes support for Kerberos. See also
            :doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication-under-windows`.

.. parameter:: supportCompatibilityFormPrivilegeDocuments

   .. versionadded:: 2.4

   :parameter:`supportCompatibilityFormPrivilegeDocuments` is not
   available using :dbcommand:`setParameter` database command. Use the
   :setting:`setParameter` option in the configuration file or the
   :option:`--setParameter <mongod --setParameter>` option on the
   command line.

.. parameter:: syncdelay

   Specify the interval in seconds between :term:`fsync` operations
   where :program:`mongod` flushes its working memory to disk. By
   default, :program:`mongod` flushes memory to disk every 60
   seconds. In almost every situation you should not set this value
   and use the default setting.

   Consider the following example which sets the ``syncdelay`` to
   ``60`` seconds:

   .. code-block:: javascript

      db.getSiblingDB("admin").runCommand( { setParameter: 1, syncdelay: 60 } )

   .. seealso:: :setting:`syncdelay` and
      :parameter:`journalCommitInterval`.

.. parameter:: traceExceptions

   .. versionadded:: 2.2

   Configures :program:`mongod` log full stack traces on assertions or
   errors. If ``1``, :program:`mongod` will log full stack
   traces on assertions or errors.

   Consider the following example which sets the
   ``traceExceptions`` to ``true``:

   .. code-block:: javascript

      db.getSiblingDB("admin").runCommand( { setParameter: 1, traceExceptions: true } )

   .. seealso:: :setting:`traceExceptions`

.. parameter:: quiet

   Sets quiet logging mode. If
   ``1``, :program:`mongod` will go into a quiet logging
   mode which will not log the following events/activities:

   - connection events;

   - the :dbcommand:`drop` command, the
     :dbcommand:`dropIndexes` command, the
     :dbcommand:`diagLogging` command, the
     :dbcommand:`validate` command, and the
     :dbcommand:`clean` command; and

   - replication synchronization activities.

   Consider the following example which sets the
   ``quiet`` to ``1``:

   .. code-block:: javascript

      db = db.getSiblingDB("admin")
      db.runCommand( { setParameter: 1, quiet: 1 } )

   .. seealso:: :setting:`quiet`

.. parameter:: textSearchEnabled

   .. deprecated:: 2.6
      MongoDB enables the text search feature by default.
      Manual enabling of this feature is unnecessary.

   Enables the :doc:`text search </core/index-text>` feature. When
   manually enabling, you must enable on **each and every**
   :program:`mongod` for replica sets.

.. parameter:: releaseConnectionsAfterResponse

   .. versionadded:: 2.2.4 and 2.4.2

   Changes the behavior of the connection pool that :program:`mongos` uses
   to connect to the shards. As a result, each :program:`mongos`
   should need to maintain fewer connections to each shard. When
   enabled, the :program:`mongos` will release a connection into the
   thread pool *after* each read operation or command.

   .. warning:: For applications that do not use the :ref:`default
      <write-concern-acknowledged>`, :ref:`journaled
      <write-concern-replica-journaled>`, or :ref:`replica
      acknowledged <write-concern-replica-acknowledged>` write concern
      modes of the driver, :parameter:`releaseConnectionsAfterResponse`
      will affect the meaning of :dbcommand:`getLastError`.

      If an application allows read operations in between
      write operations and :dbcommand:`getLastError` calls,
      the resulting :dbcommand:`getLastError` will **not** report on
      the success of the proceeding write operation.

      Use with caution.

   To enable, use the following command while connected to a
   :program:`mongos`:

   .. code-block:: javascript

      db.getSiblingDB('admin').runCommand( { setParameter: 1, releaseConnectionsAfterResponse: true } )

   Alternately, you may start the :program:`mongos` instance with the
   following run-time option:

   .. code-block:: sh

      mongos --setParameter releaseConnectionsAfterResponse=true

   To change this policy for the entire cluster, you must set
   :parameter:`releaseConnectionsAfterResponse` on each
   :program:`mongos` instance in the cluster.

.. parameter:: authenticationMechanisms

   .. note:: Available only in MongoDB Enterprise.

   Specify the authentication mechanism.

   For example, to specify ``PLAIN`` as the authentication mechanism,
   use the following command:

   .. code-block:: sh

      mongod --setParameter authenticationMechanisms=PLAIN --auth

.. parameter:: saslauthdPath

   .. note:: Available only in MongoDB Enterprise (except MongoDB Enterprise for Windows).

   Specify the path to the Unix Domain Socket of the ``saslauthd``
   instance to use for proxy authentication.

.. parameter:: sslMode

   .. versionadded:: 2.5.4

   .. include:: /includes/note-general-ssl-support.rst

   Set the :setting:`sslMode` to either ``preferSSL`` or
   ``requireSSL``. Useful during :doc:`rolling upgrade to SSL
   </tutorial/upgrade-cluster-to-ssl>` to minimize downtime.

   .. code-block:: sh

      db.getSiblingDB('admin').runCommand( { setParameter: 1, sslMode: "preferSSL" } )

.. parameter:: clusterAuthMode

   .. versionadded:: 2.5.4

   .. include:: /includes/note-general-ssl-support.rst

   Set the :setting:`clusterAuthMode` to either ``sendX509`` or
   ``x509``. Useful during :ref:`rolling upgrade to use x509 for
   membership authentication <upgrade-to-x509-internal-authentication>`
   to minimize downtime.

   .. code-block:: sh

      db.getSiblingDB('admin').runCommand( { setParameter: 1, clusterAuthMode: "sendX509" } )

.. parameter:: ttlMonitorEnabled

   .. versionadded:: 2.4.6

   To support :doc:`TTL Indexes </core/index-ttl>`, :program:`mongod`
   instances have a background thread that is responsible for deleting
   documents from collections with TTL indexes.

   To disable this worker thread for a :program:`mongod`, set
   :parameter:`ttlMonitorEnabled` to ``false``, as in the following
   operations:

   .. code-block:: javascript

      db.getSibligDB('admin').runCommand( { setParameter: 1, ttlMonitorEnabled: false } )

   Alternately, you may disable the thread at run-time by starting the
   :program:`mongod` instance with the following option:

   .. code-block:: sh

      mongod --setParameter ttlMonitorEnabled=false

.. parameter:: newCollectionsUsePowerOf2Sizes

   .. versionadded:: 2.5.5

   *Default*: ``true``.

   :program:`mongod` uses an allocation strategy called
   :collflag:`usePowerOf2Sizes` where each record has a size, in bytes
   that is a power of 2 (e.g. 4, 8, 16, 32, 64, 128, 256,
   512...8388608.)

   MongoDB stores documents in contiguous spaces on disk, and each
   record includes both the document itself and some additional space
   to allow the document to grow slightly through updates.

   By default, all *new* collections, created after 2.5.5 use
   the :collflag:`usePowerOf2Sizes` strategy. To revert to the prior
   *exact fit allocation* strategy, set
   :parameter:`newCollectionsUsePowerOf2Sizes` to
   ``false``.

   New collections include those: created during
   :ref:`initial sync <replica-set-initial-sync>`, as well as those
   created by the :program:`mongorestore` and :program:`mongoimport`
   tools, by running :program:`mongod` with the :option:`--repair
   <mongod --repair>` option, as well as the
   :dbcommand:`restoreDatabase` command.

   Issue the following command to change the allocation strategy for a
   running :program:`mongod` instance:

   .. code-block:: javascript

      db.getSibligDB('admin').runCommand( { setParameter: 1, newCollectionsUsePowerOf2Sizes: false } )

   You can also set :parameter:`newCollectionsUsePowerOf2Sizes`  at
   run-time with the following operation.

   .. code-block:: sh

      mongod --setParameter newCollectionsUsePowerOf2Sizes=false
