=============================
db.collection.findAndModify()
=============================

.. default-domain:: mongodb

.. EDITS to db.collection.findAndModify.txt must be carried over
   (possibly w modifications) to the command findAndModify.txt and vice
   versa

Definition
----------

.. method:: db.collection.findAndModify( <document> )

   Atomically
   modifies and returns a single document. By default, the returned
   document does not include the modifications made on the update. To
   return the document with the modifications made on the update, use
   the ``new`` option. The :method:`~db.collection.findAndModify()` method is a shell
   helper around the :dbcommand:`findAndModify` command.

   The :method:`~db.collection.findAndModify()` method has the following
   form:

   .. code-block:: none

      db.collection.findAndModify({
          query: <document>,
          sort: <document>,
          remove: <boolean>,
          update: <document>,
          new: <boolean>,
          fields: <document>,
          upsert: <boolean>
      });

   The :method:`db.collection.findAndModify()` method takes a document
   parameter with the following subdocument fields:

   .. |operation| replace:: :method:`~db.collection.findAndModify()`

   .. include:: /reference/method/db.collection.findAndModify-param.rst

Return Data
-----------

The :method:`~db.collection.findAndModify()` method returns either:
the pre-modification document or, if ``new: true`` is set, the
modified document.

.. note::

   - If the query finds no document for ``update`` or ``remove``
     operations, :method:`~db.collection.findAndModify()` returns
     ``null``.

   - If the query finds no document for an ``update`` with an
     ``upsert`` operation, :method:`~db.collection.findAndModify()`
     creates a new document. If ``new`` is ``false``, **and** the
     ``sort`` option is **NOT** specified, the method returns ``null``.

   - If the query finds no document for an ``update`` with an
     ``upsert`` operation, :method:`~db.collection.findAndModify()`
     creates a new document. If ``new`` is ``false``, **and** a
     ``sort`` option, the method returns an empty document ``{}``.

Behaviors
---------

.. _upsert-and-unique-index:

Upsert and Unique Index
~~~~~~~~~~~~~~~~~~~~~~~

When :method:`~db.collection.findAndModify()` includes the ``upsert:
true`` option **and** the query field(s) is not uniquely indexed, the
method could insert a document multiple times in certain circumstances.
For instance, if multiple clients each invoke the method with the same
``query`` condition and these methods complete the ``find`` phase
before any of methods perform the ``modify`` phase, these methods could
result in the insertion of the same document.

In the following example, no document with the name ``Andy`` exists,
and multiple clients issue the following command:

.. code-block:: javascript

   db.people.findAndModify({
       query: { name: "Andy" },
       sort: { rating: 1 },
       update: { $inc: { score: 1 } },
       upsert: true
   })

Then, if these clients' :method:`~db.collection.findAndModify()`
methods finish the ``query`` phase before any command starts the
``modify`` phase, **and** there is no unique index on the ``name``
field, the commands may all perform an upsert. To prevent this
condition, create a :ref:`unique index <index-type-unique>` on the
``name`` field. With the unique index in place, the multiple methods
would observe one of the following behaviors:

- Exactly one :method:`~db.collection.findAndModify()` would
  successfully insert a new document.

- Zero or more :method:`~db.collection.findAndModify()` methods
  would update the newly inserted document.

- Zero or more :method:`~db.collection.findAndModify()` methods
  would fail when they attempted to insert a duplicate. If the
  method fails due to a unique index constraint violation, you can
  retry the method. Absent a delete of the document, the retry
  should not fail.

Sharded Collections
~~~~~~~~~~~~~~~~~~~

When using :dbcommand:`findAndModify` in a :term:`sharded <sharding>`
environment, the ``query`` **must** contain the :term:`shard key` for
all operations against the shard cluster for the *sharded* collections.

:dbcommand:`findAndModify` operations issued against :program:`mongos`
instances for *non-sharded* collections function normally.

Differences with ``update`` Method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Both :method:`~db.collection.findAndModify()` and :method:`~db.collection.update()`
atomically update a single document. See
:doc:`/tutorial/isolate-sequence-of-operations` for more details about
interactions and order of operations of these methods.

The :method:`~db.collection.findAndModify()` and
:method:`~db.collection.update()` methods operate differently:

- By default, both operations modify a single document. However, the
  :method:`~db.collection.update()` method with its ``multi`` option can
  modify more than one document.

- If multiple documents match the update criteria, for
  :method:`~db.collection.findAndModify()`, you can specify a ``sort`` to provide some
  measure of control on which document to update. 
  
  With the default behavior of the :method:`~db.collection.update()`
  method, you cannot specify which single document to update when multiple documents match.
 
- By default, the returned document from the
  :method:`~db.collection.findAndModify()` command is an object that
  contains the pre-modified version of the document. To return the updated
  document in a return object, use the ``new`` option.
  
  The :method:`~db.collection.update()` method returns a
  :method:`WriteResult` object that contains the status of the operation.
  To return the updated document, use the :method:`~db.collection.find()`
  method. However, other updates may have modified the document between
  your update and the document retrieval. Also, if the update modified
  only a single document but multiple documents matched, you will need to
  use additional logic to identify the updated document.

Examples
--------

Update and Return
~~~~~~~~~~~~~~~~~

The following method updates and returns an existing document in the
people collection where the document matches the query criteria:

.. code-block:: javascript

   db.people.findAndModify({
       query: { name: "Tom", state: "active", rating: { $gt: 10 } },
       sort: { rating: 1 },
       update: { $inc: { score: 1 } }
   })

This method performs the following actions:

#. The ``query`` finds a document in the ``people`` collection
   where the ``name`` field has the value ``Tom``, the ``state``
   field has the value ``active`` and the ``rating`` field has a
   value :operator:`greater than <$gt>` 10.

#. The ``sort`` orders the results of the query in ascending order.
   If multiple documents meet the ``query`` condition, the method
   will select for modification the first document as ordered by
   this ``sort``.

#. The update :operator:`increments <$inc>` the value of the
   ``score`` field by 1.

#. The method returns the original (i.e. pre-modification) document
   selected for this update:

   .. code-block:: javascript

      {
        "_id" : ObjectId("50f1e2c99beb36a0f45c6453"),
        "name" : "Tom",
        "state" : "active",
        "rating" : 100,
        "score" : 5
      }

   To return the modified document, add the ``new:true`` option to
   the method.

   If no document matched the ``query`` condition, the method
   returns ``null``:

   .. code-block:: javascript

      null

Upsert
~~~~~~

The following method includes the ``upsert: true`` option for the
``update`` operation to either update a matching document or, if no
matching document exists, create a new document:

.. code-block:: javascript

   db.people.findAndModify({
       query: { name: "Gus", state: "active", rating: 100 },
       sort: { rating: 1 },
       update: { $inc: { score: 1 } },
       upsert: true
   })


If the method finds a matching document, the method performs an update.

If the method does **not** find a matching document, the method creates
a new document. Because the method included the ``sort`` option, it
returns an empty document ``{ }`` as the original (pre-modification)
document:

.. code-block:: javascript

   { }

If the method did **not** include a ``sort`` option, the method returns
``null``.

.. code-block:: javascript

   null

Return New Document
~~~~~~~~~~~~~~~~~~~

The following method includes both the ``upsert: true`` option and the
``new:true`` option. The method either updates a matching document and
returns the updated document or, if no matching document exists,
inserts a document and returns the newly inserted document in the
``value`` field.

In the following example, no document in the ``people`` collection
matches the ``query`` condition:

.. code-block:: none

   db.people.findAndModify({
       query: { name: "Pascal", state: "active", rating: 25 },
       sort: { rating: 1 },
       update: { $inc: { score: 1 } },
       upsert: true,
       new: true
   })

The method returns the newly inserted document:

.. code-block:: javascript

   {
      "_id" : ObjectId("50f49ad6444c11ac2448a5d6"),
      "name" : "Pascal",
      "rating" : 25,
      "score" : 1,
      "state" : "active"
   }

.. _findAndModify-wrapper-sorted-remove:

Sort and Remove
~~~~~~~~~~~~~~~

By including a ``sort`` specification on the ``rating`` field, the
following example removes from the ``people`` collection a single
document with the ``state`` value of ``active`` and the lowest
``rating`` among the matching documents:

.. code-block:: javascript

   db.people.findAndModify(
      {
        query: { state: "active" },
        sort: { rating: 1 },
        remove: true
      }
   )

The method returns the deleted document:

.. code-block:: javascript

   {
      "_id" : ObjectId("52fba867ab5fdca1299674ad"),
      "name" : "XYZ123",
      "score" : 1,
      "state" : "active",
      "rating" : 3
   }
