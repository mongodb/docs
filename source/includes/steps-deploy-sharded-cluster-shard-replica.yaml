level: 4
stepnum: 1
source:
  file: steps-deploy-replica-set-with-auth.yaml
  ref: deploy-repset-start-members
pre: |
  Running a :binary:`~bin.mongod` with the ``keyFile`` parameter enforces both 
  :doc:`/core/security-internal-authentication` and 
  :doc:`/core/authorization`.

  Start *each* :binary:`~bin.mongod` in the replica set using either 
  a configuration file or the command line.
action:
  - pre: |
      **Configuration File**
      
      If using a configuration file, set the :setting:`security.keyFile` option
      to the keyfile's path, the :setting:`replication.replSetName` to the 
      desired name of the replica set, and the :setting:`sharding.clusterRole` 
      option to ``shardsvr``.
    language: yaml
    code: |
      security:
        keyFile: <path-to-keyfile>
      sharding:
        clusterRole: shardsvr
      replication:
        replSetName: <replSetName>
      storage:
         dbPath: <path>
    post: |
       .. include:: /includes/extracts/default-bind-ip-security-additional-config-file.rst
  - pre: |
       Start the :binary:`~bin.mongod` specifying the ``--config`` option
       and the path to the configuration file.
    language: sh
    code: |
       mongod --config <path-to-config-file>
  - pre: |
      **Command Line**
      
      If using the command line option, when starting the component, specify 
      the ``--keyFile``, ``replSet``, and ``--shardsvr`` parameters, as in the
      following example:
    language: sh
    code: |
       mongod --keyFile <path-to-keyfile> --shardsvr --replSet <replSetName>  --dbpath <path>
    post: |
       .. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst
---
stepnum: 2
level: 4
source:
  file: steps-deploy-replica-set-with-auth.yaml
  ref: deploy-repset-connect-to-member
---
stepnum: 3
level: 4
source:
  file: steps-deploy-replica-set-with-auth.yaml
  ref: deploy-repset-initiate
action:
  - pre: |
      The following example initates a three member replica set.
    language: javascript
    code: |
      rs.initiate(
        {
          _id : <replicaSetName>,
          members: [
            { _id : 0, host : "s1-mongo1.example.net:27017" },
            { _id : 1, host : "s1-mongo2.example.net:27017" },
            { _id : 2, host : "s1-mongo3.example.net:27017" }
          ]
        }
      )
---
title: Create the shard-local user administrator (optional).
stepnum: 4
level: 4
source:
  file: steps-deploy-replica-set-with-auth.yaml
  ref: deploy-repset-user-admin
---
title: Authenticate as the shard-local user administrator (optional).
stepnum: 5
level: 4
source:
  file: steps-deploy-replica-set-with-auth.yaml
  ref: deploy-repset-auth-user
---
title: Create the shard-local cluster administrator (optional).
stepnum: 6
level: 4
source:
  file: steps-deploy-replica-set-with-auth.yaml
  ref: deploy-repset-add-user-cluster
pre: |
  The shard-local cluster administrator user has the
  :authrole:`clusterAdmin` role, which provides privileges that allow
  access to replication operations.

  For a full list of roles related to replica set operations see
  :ref:`cluster-admin-roles`.
...
