.. _javars-compression:

===========
Compression
===========

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, optimize

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+driver-short+} supports compression of messages to and from MongoDB
servers. The driver implements the three algorithms that are supported
by MongoDB servers:

- `Snappy <https://google.github.io/snappy/>`__: Snappy compression can
  be used when connecting to MongoDB servers running version 3.4 and later.
- `Zlib <https://zlib.net/>`__: Zlib compression can be used when
  connecting to MongoDB servers running version 3.6 and later.
- `Zstandard <https://github.com/facebook/zstd/>`__: Zstandard
  compression can be used when connecting to MongoDB servers running
  version 4.2 and later.

The driver will negotiate which, if any, compression algorithm is used
based on capabilities advertised by the server in the ``hello`` command
response.

Specify Compression By Using ConnectionString
---------------------------------------------

Include the following import statements:

.. code-block:: java

   import com.mongodb.ConnectionString;
   import com.mongodb.reactivestreams.client.MongoClients;
   import com.mongodb.reactivestreams.client.MongoClient;

To specify compression within a ``ConnectionString``, specify
compressors as part of the connection string.

The following code specifies the Snappy compression algorithm:

.. code-block:: java

   ConnectionString connectionString =
       new ConnectionString("mongodb://localhost/?compressors=snappy");
   MongoClient mongoClient = MongoClients.create(connectionString);

The following code specifies the Zlib compression algorithm:

.. code-block:: java

   ConnectionString connectionString =
       new ConnectionString("mongodb://localhost/?compressors=zlib");
   MongoClient mongoClient = MongoClients.create(connectionString);

The following code specifies the Zstandard compression algorithm:

.. code-block:: java

   ConnectionString connectionString =
       new ConnectionString("mongodb://localhost/?compressors=zstd");
   MongoClient mongoClient = MongoClients.create(connectionString);

The following code specifies multiple compression algorithms:

.. code-block:: java

   ConnectionString connectionString =
       new ConnectionString("mongodb://localhost/?compressors=snappy,zlib,zstd");
   MongoClient mongoClient = MongoClients.create(connectionString);

In all cases, the driver uses the first compressor in the list for which
the server has support.

Specify Compression By Using MongoClientSettings
------------------------------------------------

Include the following import statements:

.. code-block:: java

   import com.mongodb.MongoClientSettings;
   import com.mongodb.MongoCompressor;
   import java.util.Arrays;

To specify compression within a ``MongoClientSettings`` instance, set the ``compressors``
property to a list of ``MongoCompressor`` instances.

The following code specifies the Snappy compression algorithm:

.. code-block:: java

   MongoClientSettings settings = MongoClientSettings.builder()
       .compressorList(Arrays.asList(MongoCompressor.createSnappyCompressor()))
       .build();
   MongoClient client = MongoClients.create(settings);

The following code specifies the Zlib compression algorithm:

.. code-block:: java

   MongoClientSettings settings = MongoClientSettings.builder()
       .compressorList(Arrays.asList(MongoCompressor.createZlibCompressor()))
       .build();
   MongoClient client = MongoClients.create(settings);

The following code specifies the Zstandard compression algorithm:

.. code-block:: java

   MongoClientSettings settings = MongoClientSettings.builder()
       .compressorList(Arrays.asList(MongoCompressor.createZstdCompressor()))
       .build();
   MongoClient client = MongoClients.create(settings);

The following code specifies multiple compression algorithms:

.. code-block:: java

   MongoClientSettings settings = MongoClientSettings.builder()
       .compressorList(Arrays.asList(MongoCompressor.createSnappyCompressor(),
                                     MongoCompressor.createZlibCompressor(),
                                     MongoCompressor.createZstdCompressor()))
       .build();
   MongoClient client = MongoClients.create(settings);

As with configuration that uses a URI, the driver uses the first
compressor in the list for which the server has support.

Dependencies
------------

As the JDK has no built-in support for Snappy or Zstandard, the driver
takes a dependency on existing open-source Snappy and Zstandard
implementations. See the `snappy-java GitHub repository
<https://github.com/xerial/snappy-java>`__ and the `zstd-java GitHub
repository <https://github.com/luben/zstd-jni>`__ for details.
