.. _scoring-ref:

==================================
Score the Documents in the Results
==================================

.. default-domain:: mongodb

.. meta::
   :keywords: multiply base score, boost fields, constant option, replace score, alter final document score, score details
   :description: Modify, normalize, or return a breakdown of the score assigned to a returned document with the boost, constant, embedded, or function options.

Every document returned by an |fts| query is assigned a score based
on relevance, and the documents included in a result set are returned
in order from highest score to lowest. 

Many factors can influence a document's score, including:

- The position of the search term in the document,
- The frequency of occurrence of the search term in the document,
- The type of :ref:`operator <fts-operators>` the query uses,
- The type of :ref:`analyzer <analyzers-ref>` the query uses.

.. note:: 

   .. include:: /includes/fact-fts-array-scoring.rst

The score assigned to a returned document is part of the document's
metadata. You can include each returned document's score along with the
result set by using a :pipeline:`$project` stage in your aggregation
pipeline. 

After the :pipeline:`$search` stage, in the :pipeline:`$project` stage,
the ``score`` field takes the :manual:`$meta
</reference/operator/aggregation/meta/>` expression, which requires the
``searchScore`` value. You can also specify the ``searchScoreDetails``
value for the ``scoreDetails`` field :manual:`$meta
</reference/operator/aggregation/meta/>` expression for a detailed
breakdown of the score. 

After the :pipeline:`$vectorSearch` stage, in the :pipeline:`$project`
stage, the ``score`` field takes the :manual:`$meta
</reference/operator/aggregation/meta/>` expression, which requires the 
``vectorSearchScore`` value to return the score of each document in your
vector search results. 

.. example::

   The following query uses a :pipeline:`$project` stage to add a
   field named ``score`` to the returned documents:

   .. tabs:: 
   
      .. tab:: Search Score 
         :tabid: searchscore

         .. code-block:: javascript
            :copyable: false
            :linenos:
            :emphasize-lines: 13

            db.movies.aggregate([
              {
                "$search": {
                  "text": {
                    <operator-specification>
                  }
                }
              },
              {
                "$project": {
                  "<field-to-include>": 1,
                  "<field-to-exclude>": 0,
                  "score": { "$meta": "searchScore" }
                }
              }
            ])

         To learn more, see :ref:`modify <scoring-behavior>` and
         :ref:`normalize <fts-normalize-score>` the search score.

      .. tab:: Search Score Details
         :tabid: scoredetails
      
         .. code-block:: javascript
            :copyable: false
            :linenos:
            :emphasize-lines: 7, 14

            db.movies.aggregate([
              {
                "$search": {
                  "text": {
                    <operator-specification>
                  },
                  "scoreDetails": true 
                }
              },
              {
                "$project": {
                  "<field-to-include>": 1,
                  "<field-to-exclude>": 0,
                  "scoreDetails": { "$meta": "searchScoreDetails" }
                }
              }
            ])

         To learn more, see :ref:`return <fts-score-details>` the search
         score details.

      .. tab:: Vector Search Score
         :tabid: vectorsearchscore

         .. code-block:: javascript
            :copyable: false
            :linenos:
            :emphasize-lines: 11

            db.movies.aggregate([
              {
                "$vectorSearch": {
                  <query-syntax>
                }
              },
              {
                "$project": {
                  "<field-to-include>": 1,
                  "<field-to-exclude>": 0,
                  "score": { "$meta": "vectorSearchScore" }
                }
              }
            ])

         To learn more, see :ref:`vectorSearch-agg-pipeline-score`.

After a :pipeline:`$project` stage, you don't need to include a
descending :pipeline:`$sort` because |fts| returns the documents from
highest score to lowest. However, if multiple documents in the results
have identical scores, the ordering of the documents in the results is
non-deterministic. If you want the results to have a determined order,
we recommend that you include the :ref:`sort <sort-ref>` option in your
:pipeline:`$search` stage to sort the results by a unique field. If you 
don't specify a unique field, |fts| defaults to sorting the results
arbitrarily when the results have an identical score. You can use the
:ref:`sort <sort-ref>` option to also return an ascending sort of the
results by score. To learn more, see :ref:`sort-ref` and :ref:`Sort by
Score Examples <sort-by-score-egs>`. 

More information about the Lucene scoring algorithm can be found in the
`Lucene documentation
<https://lucene.apache.org/core/3_5_0/scoring.html>`__.

.. toctree::
   :titlesonly:
   
   /atlas-search/score/modify-score
   /atlas-search/score/get-details 
   /atlas-search/score/normalize-score
