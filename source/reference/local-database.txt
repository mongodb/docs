.. _replica-set-local-database:

======================
The ``local`` Database
======================

.. default-domain:: mongodb

.. index:: replica set; local database
.. index:: local database
.. index:: database; local
.. index:: namespace; local

Overview
--------

Every :program:`mongod` instance has its own ``local`` database, which
stores data used in the replication process, and other
instance-specific data. The ``local`` database is invisible to
replication: collections in the ``local`` database are not replicated.

In replication, the ``local`` database store stores internal replication
data for each member of a :term:`replica set`. The ``local`` stores the
following collections:

.. versionchanged:: 2.4
   When running with authentication (i.e. :setting:`~security.authorization`),
   authenticating to the ``local`` database is **not** equivalent to
   authenticating to the ``admin`` database. In previous versions,
   authenticating to the ``local`` database provided access to all databases.

Collection on all ``mongod`` Instances
--------------------------------------

.. data:: local.startup_log

   On startup, each :program:`mongod` instance inserts a document into
   :data:`~local.startup_log` with diagnostic information about the
   :program:`mongod` instance itself and host
   information. :data:`~local.startup_log` is a capped
   collection. This information is primarily useful for diagnostic
   purposes.

   .. example::

      Consider the following prototype of a document from the
      :data:`~local.startup_log` collection:

      .. code-block:: javascript

         {
           "_id" : "<string>",
           "hostname" : "<string>",
           "startTime" : ISODate("<date>"),
           "startTimeLocal" : "<string>",
           "cmdLine" : {
                 "dbpath" : "<path>",
                 "<option>" : <value>
           },
           "pid" : <number>,
           "buildinfo" : {
                 "version" : "<string>",
                 "gitVersion" : "<string>",
                 "sysInfo" : "<string>",
                 "loaderFlags" : "<string>",
                 "compilerFlags" : "<string>",
                 "allocator" : "<string>",
                 "versionArray" : [ <num>, <num>, <...> ],
                 "javascriptEngine" : "<string>",
                 "bits" : <number>,
                 "debug" : <boolean>,
                 "maxBsonObjectSize" : <number>
           }
         }

    Documents in the :data:`~local.startup_log` collection contain the
    following fields:

    .. data:: local.startup_log._id

       Includes the system hostname and a millisecond epoch value.

    .. data:: local.startup_log.hostname

       The system's hostname.

    .. data:: local.startup_log.startTime

       A UTC :term:`ISODate` value that reflects when the server started.

    .. data:: local.startup_log.startTimeLocal

       A string that reports the :data:`~local.startup_log.startTime`
       in the system's local time zone.

    .. data:: local.startup_log.cmdLine

       A sub-document that reports the :program:`mongod` runtime
       options and their values.

    .. data:: local.startup_log.pid

       The process identifier for this process.

    .. data:: local.startup_log.buildinfo

       A sub-document that reports information about the build
       environment and settings used to compile this
       :program:`mongod`. This is the same output as
       :dbcommand:`buildInfo`. See :data:`buildInfo`.

Collections on Replica Set Members
----------------------------------

.. data:: local.system.replset

   :data:`local.system.replset` holds the replica set's configuration
   object as its single document. To view the object's configuration
   information, issue :method:`rs.conf()` from the :program:`mongo`
   shell. You can also query this collection directly.

.. data:: local.oplog.rs

   :data:`local.oplog.rs` is the capped collection that holds the
   :term:`oplog`. You set its size at creation using the
   :setting:`~replication.oplogSizeMB` setting. To resize the oplog after replica set
   initiation, use the :doc:`/tutorial/change-oplog-size`
   procedure. For additional information, see the
   :ref:`replica-set-oplog-sizing` section.

.. data:: local.replset.minvalid

   This contains an object used internally by replica sets to track replication
   status.

.. data:: local.slaves

   This contains information about each member of the set and the
   latest point in time that this member has synced to. If this
   collection becomes out of date, you can refresh it by dropping the
   collection and allowing MongoDB to automatically refresh it during
   normal replication:

   .. code-block:: javascript

      db.getSiblingDB("local").slaves.drop()

Collections used in Master/Slave Replication
--------------------------------------------

In :term:`master`\/:term:`slave` replication, the ``local`` database contains
the following collections:

- On the master:

  .. data:: local.oplog.$main

     This is the oplog for the master-slave configuration.

  .. data:: local.slaves

     This contains information about each slave.

- On each slave:

  .. data:: local.sources

     This contains information about the slave's master server.
