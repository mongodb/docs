====================
KeyVault.deleteKey()
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionadded:: 4.2

.. method:: KeyVault.deleteKey(UUID)

   Deletes a data encryption key with the specified UUID from the key
   vault associated to the database connection.

   :method:`~KeyVault.deleteKey()` has the following syntax:

   .. code-block:: none

      keyVault = db.getMongo().getKeyVault()
      
      keyVault.deleteKey(UUID("<UUID String>"))

   The :abbr:`UUID (Universally unique identifier)` is a BSON 
   :bsontype:`binary data <Binary>` object with subtype ``4``.

   :returns: A document indicating the number of deleted keys.

Behavior
--------

Requires Configuring Client-Side Field Level Encryption on Database Connection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/csfle-requires-enabling-encryption.rst

Example
-------

The following example is intended for rapid evaluation of
client-side field level encryption. For more complete examples 
appropriate for development and production environments, see
:ref:`field-level-encryption-data-key-delete`.

.. include:: /includes/extracts/csfle-connection-boilerplate.rst

Retrieve the :method:`KeyVault <getKeyVault()>` object and
use the :method:`KeyVault.deleteKey()` method to 
delete the data encryption key with matching ``UUID``:

.. code-block:: javascript

   keyVault = encryptedClient.getKeyVault()
   keyVault.deleteKey(UUID("b4b41b33-5c97-412e-a02b-743498346079"))

If successful, :method:`~KeyVault.deleteKey()` returns output similar to
the following:

.. code-block:: json

   { "acknowledged" : true, "deletedCount" : 1 }

.. seealso::

   :ref:`field-level-encryption-data-key-delete`
