#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-introduction.txt:5
msgid "Sharding Introduction"
msgstr "分片介绍"

#: ../source/core/sharding-introduction.txt:17
msgid ""
"Sharding is a method for storing data across multiple machines. MongoDB uses "
"sharding to support deployments with very large data sets and high "
"throughput operations."
msgstr ""
"分片是使用多个机器存储数据的方法,MongoDB使用分片以支持巨大的数据存储量与对数"
"据操作."

#: ../source/core/sharding-introduction.txt:22
msgid "Purpose of Sharding"
msgstr "分片的目的"

#: ../source/core/sharding-introduction.txt:24
msgid ""
"Database systems with large data sets and high throughput applications can "
"challenge the capacity of a single server. High query rates can exhaust the "
"CPU capacity of the server. Larger data sets exceed the storage capacity of "
"a single machine. Finally, working set sizes larger than the system's RAM "
"stress the I/O capacity of disk drives."
msgstr ""
"高数据量和吞吐量的数据库应用会对单机的性能造成较大压力,大的查询量会将单机的"
"CPU耗尽,大的数据量对单机的存储压力较大,最终会耗尽系统的内存而将压力转移到磁盘"
"IO上."

#: ../source/core/sharding-introduction.txt:30
msgid ""
"To address these issues of scales, database systems have two basic "
"approaches: **vertical scaling** and **sharding**."
msgstr "为了解决这些问题,有两个基本的方法: **纵向扩展** 和 **分片** ."

#: ../source/core/sharding-introduction.txt:33
msgid ""
"**Vertical scaling** adds more CPU and storage resources to increase "
"capacity. Scaling by adding capacity has limitations: high performance "
"systems with large numbers of CPUs and large amount of RAM are "
"disproportionately *more expensive* than smaller systems. Additionally, "
"cloud-based providers may only allow users to provision smaller instances.  "
"As a result there is a *practical maximum* capability for vertical scaling."
msgstr ""
" **纵向扩展** 增加CPU数量和存储资源来扩展单机性能,单机性能的增加是有限制的:通过"
"增加CPU与存储资源来扩展单机性能与使用多个小系统进行横向扩展相比*更为昂贵*,另"
"外,云供应商不会提供大型机给用户,因此,使用纵向扩展提高性能在有*实际情况下的极"
"限*."

#: ../source/core/sharding-introduction.txt:41
msgid ""
"**Sharding**, or *horizontal scaling*, by contrast, divides the data set and "
"distributes the data over multiple servers, or **shards**. Each shard is an "
"independent database, and collectively, the shards make up a single logical "
"database."
msgstr ""
" **分片** ,或者说 *水平扩展* ,与纵向扩展不同,是将数据分割为多份并分别存储到不"
"同的服务器,即 **分片** 上,每个分片都是一个独立的数据库,总体上,所有分片构成一"
"个逻辑上的数据库."

#: ../source/core/sharding-introduction.txt:48
msgid ""
"Sharding addresses the challenge of scaling to support high throughput and "
"large data sets:"
msgstr "分片为应对高吞吐量与大数据量提供了方法."

#: ../source/core/sharding-introduction.txt:51
msgid ""
"Sharding reduces the number of operations each shard handles. Each shard "
"processes fewer operations as the cluster grows. As a result, a cluster can "
"increase capacity and throughput *horizontally*."
msgstr ""
"使用分片减少了每个分片需要处理的请求数,因此,通过 *水平扩展* ,集群可以提高自己"
"的存储容量和吞吐量."

#: ../source/core/sharding-introduction.txt:55
msgid ""
"For example, to insert data, the application only needs to access the shard "
"responsible for that record."
msgstr "举例来说,当插入一条数据时,应用只需要访问存储这条数据的分片."

#: ../source/core/sharding-introduction.txt:58
msgid ""
"Sharding reduces the amount of data that each server needs to store. Each "
"shard stores less data as the cluster grows."
msgstr "使用分片减少了每个分片存储的数据."


#: ../source/core/sharding-introduction.txt:66

msgid "Sharding in MongoDB"
msgstr "MongoDB的分片"

#: ../source/core/sharding-introduction.txt:68
msgid ""
"MongoDB supports sharding through the configuration of a :term:`sharded "
"clusters <sharded cluster>`."
msgstr "MongoDB通过配置 :term:`集群 <sharded cluster>` 支持分片."

#: ../source/core/sharding-introduction.txt:73
msgid ""
"Sharded cluster has the following components: :term:`shards <shard>`, :term:"
"`query routers <mongos>` and :term:`config servers <config server>`."
msgstr ""

#: ../source/core/sharding-introduction.txt:76
msgid ""
"**Shards** store the data. To provide high availability and data "
"consistency, in a production sharded cluster, each shard is a :term:`replica "
"set` [#dev-only-shard-deployment]_. For more information on replica sets, "
"see :doc:`Replica Sets </core/replication>`."
msgstr ""
" **分片** 存储数据,为了提供冗余与提高可靠性,生产环境中的每个分片都应当是 :"
"term:`replica set` [#dev-only-shard-deployment]_.参见 :doc:`复制集 </core/"
"replication>` 获得关于复制集的更多信息."


#: ../source/core/sharding-introduction.txt:105

msgid "Data Partitioning"
msgstr "数据分区"

#: ../source/core/sharding-introduction.txt:107
msgid ""
"MongoDB distributes data, or shards, at the collection level. Sharding "
"partitions a collection's data by the **shard key**."
msgstr ""
"MongoDB中数据的分片是以集合为基本单位的,集合中的数据通过 **片键** 被分成多部"
"分."

#: ../source/core/sharding-introduction.txt:111
msgid "Shard Keys"
msgstr "片键"

#: ../source/core/sharding-introduction.txt:113
msgid ""
"To shard a collection, you need to select a **shard key**. A :term:`shard "
"key` is either an indexed field or an indexed compound field that exists in "
"every document in the collection. MongoDB divides the shard key values into "
"**chunks** and distributes the :term:`chunks <chunk>` evenly across the "
"shards. To divide the shard key values into chunks, MongoDB uses either "
"**range based partitioning** or **hash based partitioning**. See the "
":doc:`Shard Key </core/sharding-shard-key>` documentation for more "
"information."
msgstr ""

#: ../source/core/sharding-introduction.txt:123
msgid "Range Based Sharding"
msgstr "以范围为基础的分片"

#: ../source/core/sharding-introduction.txt:125
msgid ""
"For *range-based sharding*, MongoDB divides the data set into ranges "
"determined by the shard key values to provide **range based partitioning**. "
"Consider a numeric shard key: If you visualize a number line that goes from "
"negative infinity to positive infinity, each value of the shard key falls at "
"some point on that line. MongoDB partitions this line into smaller, non-"
"overlapping ranges called **chunks** where a chunk is range of values from "
"some minimum value to some maximum value."
msgstr ""
"对于 *基于范围的分片* ,MongoDB按照片键的范围把数据分成不同部分.假设有一个数字"
"的片键:想象一个从负无穷到正无穷的直线,每一个片键的值都在直线上画了一个点."
"MongoDB把这条直线划分为更短的不重叠的片段,并称之为 **数据块** ,每个数据块包含"
"了片键在一定范围内的数据."

#: ../source/core/sharding-introduction.txt:134
msgid ""
"Given a range based partitioning system, documents with \"close\" shard key "
"values are likely to be in the same chunk, and therefore on the same shard."
msgstr ""
"在使用片键做范围划分的系统中,拥有\"相近\"片键的文档很可能存储在同一个数据块"
"中,因此也会存储在同一个分片中."

#: ../source/core/sharding-introduction.txt:141
msgid "Hash Based Sharding"
msgstr "基于哈希的分片"

#: ../source/core/sharding-introduction.txt:143
msgid ""
"For *hash based partitioning*, MongoDB computes a hash of a field's value, "
"and then uses these hashes to create chunks."
msgstr ""
"对于 *基于哈希的分片* ,MongoDB计算一个字段的哈希值,并用这个哈希值来创建数据"
"块."

#: ../source/core/sharding-introduction.txt:146
msgid ""
"With hash based partitioning, two documents with \"close\" shard key values "
"are *unlikely* to be part of the same chunk. This ensures a more random "
"distribution of a collection in the cluster."
msgstr ""
"在使用基于哈希分片的系统中,拥有\"相近\"片键的文档 *很可能不会* 存储在同一个数"
"据块中,因此数据的分离性更好一些."

#: ../source/core/sharding-introduction.txt:153
msgid "Performance Distinctions between Range and Hash Based Partitioning"
msgstr "基于范围的分片方式与基于哈希的分片方式性能对比"

#: ../source/core/sharding-introduction.txt:155
msgid ""
"Range based partitioning supports more efficient range queries. Given a "
"range query on the shard key, the query router can easily determine which "
"chunks overlap that range and route the query to only those shards that "
"contain these chunks."
msgstr ""
"基于范围的分片方式提供了更高效的范围查询,给定一个片键的范围,分发路由可以很简"
"单地确定哪个数据块存储了请求需要的数据,并将请求转发到相应的分片中."

#: ../source/core/sharding-introduction.txt:160
msgid ""
"However, range based partitioning can result in an uneven distribution of "
"data, which may negate some of the benefits of sharding. For example, if the "
"shard key is a linearly increasing field, such as time, then all requests "
"for a given time range will map to the same chunk, and thus the same shard. "
"In this situation, a small set of shards may receive the majority of "
"requests and the system would not scale very well."
msgstr ""
"不过,基于范围的分片会导致数据在不同分片上的不均衡,有时候,带来的消极作用会大于"
"查询性能的积极作用.比如,如果片键所在的字段是线性增长的,一定时间内的所有请求都"
"会落到某个固定的数据块中,最终导致分布在同一个分片中.在这种情况下,一小部分分片"
"承载了集群大部分的数据,系统并不能很好地进行扩展."

#: ../source/core/sharding-introduction.txt:168
msgid ""
"Hash based partitioning, by contrast, ensures an even distribution of data "
"at the expense of efficient range queries. Hashed key values results in "
"random distribution of data across chunks and therefore shards. But random "
"distribution makes it more likely that a range query on the shard key will "
"not be able to target a few shards but would more likely query every shard "
"in order to return a result."
msgstr ""
"与此相比,基于哈希的分片方式以范围查询性能的损失为代价,保证了集群中数据的均衡."
"哈希值的随机性使数据随机分布在每个数据块中,因此也随机分布在不同分片中.但是也"
"正由于随机性,一个范围查询很难确定应该请求哪些分片,通常为了返回需要的结果,需要"
"请求所有分片."

#: ../source/core/sharding-introduction.txt:176
msgid "Customized Data Distribution with Tag Aware Sharding"
msgstr ""

#: ../source/core/sharding-introduction.txt:178
msgid ""
"MongoDB allows administrators to direct the balancing policy using **tag "
"aware sharding**. Administrators create and associate tags with ranges of "
"the shard key, and then assign those tags to the shards. Then, the balancer "
"migrates tagged data to the appropriate shards and ensures that the cluster "
"always enforces the distribution of data that the tags describe."
msgstr ""

#: ../source/core/sharding-introduction.txt:185
msgid ""
"Tags are the primary mechanism to control the behavior of the balancer and "
"the distribution of chunks in a cluster.  Most commonly, tag aware sharding "
"serves to improve the locality of data for sharded clusters that span "
"multiple data centers."
msgstr ""

#: ../source/core/sharding-introduction.txt:190
msgid "See :doc:`/core/tag-aware-sharding` for more information."
msgstr ""

#: ../source/core/sharding-introduction.txt:193
msgid "Maintaining a Balanced Data Distribution"
msgstr "数据均衡的维护"

#: ../source/core/sharding-introduction.txt:195
msgid ""
"The addition of new data or the addition of new servers can result in data "
"distribution imbalances within the cluster, such as a particular shard "
"contains significantly more chunks than another shard or a size of a chunk "
"is significantly greater than other chunk sizes."
msgstr ""
"新数据的加入或者新分片的加入可能会导致集群中数据的不均衡,即表现为有些分片保存"
"的数据块数目显著地大于其他分片保存的数据块数."

#: ../source/core/sharding-introduction.txt:200
msgid ""
"MongoDB ensures a balanced cluster using two background process: splitting "
"and the balancer."
msgstr "MongoBD使用两个过程维护集群中数据的均衡:分裂和均衡器."

#: ../source/core/sharding-introduction.txt:204
msgid "Splitting"
msgstr "分裂"

#: ../source/core/sharding-introduction.txt:206
msgid ""
"Splitting is a background process that keeps chunks from growing too large. "
"When a chunk grows beyond a :ref:`specified chunk size <sharding-chunk-"
"size>`, MongoDB splits the chunk in half. Inserts and updates triggers "
"splits. Splits are an efficient meta-data change. To create splits, MongoDB "
"does *not* migrate any data or affect the shards."
msgstr ""

#: ../source/core/sharding-introduction.txt:216
msgid "Balancing"
msgstr "均衡"


#: ../source/core/sharding-introduction.txt:222

msgid ""
"When the distribution of a sharded collection in a cluster is uneven, the "
"balancer process migrates chunks from the shard that has the largest number "
"of chunks to the shard with the least number of chunks until the collection "
"balances. For example: if collection ``users`` has 100 chunks on *shard 1* "
"and 50 chunks on *shard 2*, the balancer will migrate chunks from *shard 1* "
"to *shard 2* until the collection achieves balance."
msgstr ""
"当集群中数据的不均衡发生时,均衡器会将数据块从数据块数目最多的分片迁移到数据块"
"最少的分片上,举例来讲:如果集合 ``users`` 在 *分片1* 上有100个数据块,在 *分片"
"2* 上有50个数据块,均衡器会将数据块从 *分片1* 一直向 *分片2* 迁移,一直到数据均"
"衡为止."

#: ../source/core/sharding-introduction.txt:230
msgid ""
"The shards manage *chunk migrations* as a background operation between an "
"*origin shard* and a *destination shard*.  During a chunk migration, the "
"*destination shard* is sent all the current documents in the chunk from the "
"*origin shard*. Next, the destination shard captures and applies all changes"
" made to the data during the migration process. Finally, the metadata "
"regarding the location of the chunk on *config server* is updated."
msgstr ""

#: ../source/core/sharding-introduction.txt:238
msgid ""
"If there's an error during the migration, the balancer aborts the process "
"leaving the chunk unchanged on the origin shard. MongoDB removes the chunk's"
" data from the origin shard **after** the migration completes successfully."
msgstr ""

#: ../source/core/sharding-introduction.txt:246
msgid "Adding and Removing Shards from the Cluster"
msgstr "在集群中增加或者删除分片"

#: ../source/core/sharding-introduction.txt:248
msgid ""
"Adding a shard to a cluster creates an imbalance  since the new shard has no "
"chunks. While MongoDB begins migrating data to the new shard immediately, it "
"can take some time before the cluster balances."
msgstr ""
"在集群中增加分片时,由于新的分片上并没有数据块,会造成数据的不均衡.此时MongoDB"
"会立即开始向新分片迁移数据,集群达到数据均衡的状态需要花费一些时间."

#: ../source/core/sharding-introduction.txt:252
msgid ""
"When removing a shard, the balancer migrates all chunks from a shard to "
"other shards. After migrating all data and updating the meta data, you can "
"safely remove the shard."
msgstr ""
"当删除一个分片时,均衡器需要将被删除的分片上的数据全部迁移到其他分片上,在全部"
"迁移结束且元信息更新完毕之后,你可以安全地将这个分片移除."

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:4
msgid "Additional Resources"
msgstr ""
"对集合进行分片时,你需要选择一个 **片键** , :term:`shard key` 是每条记录都必须"
"包含的,且建立了索引的单个字段或复合字段,MongoDB按照片键将数据划分到不同的 **"
"数据块** 中,并将 :term:`数据块 <chunk>` 均衡地分布到所有分片中.为了按照片键划"
"分数据块,MongoDB使用 **基于范围的分片方式** 或者 **基于哈希的分片方式** ,参"
"见 :doc:`片键 </core/sharding-shard-key>` 获得更多信息."

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:6
msgid ""
"`Sharding Methods for MongoDB (Presentation) "
"<http://www.mongodb.com/presentations/webinar-sharding-methods-"
"mongodb?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:7
msgid ""
"`Everything You Need to Know About Sharding (Presentation) "
"<http://www.mongodb.com/presentations/webinar-everything-you-need-know-"
"about-sharding?jmp=docs>`_"
msgstr ""
"MongoDB允许管理员使用 **标记** 直接决定集群的均衡策略.管理员使用标记与片键的"
"范围做绑定,并将标记与分片直接绑定,之后,均衡器会将满足标记的数据直接分发到与之"
"绑定的分片上,并且确保之后满足标记的数据一直存储在相应的分片上."

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:8
msgid ""
"`MongoDB for Time Series Data: Sharding "
"<http://www.mongodb.com/presentations/mongodb-time-series-data-"
"part-3-sharding?jmp=docs>`_"
msgstr ""
"标记是控制均衡器行为和数据块分布的首要条件,一般来讲,在拥有多个数据中心时,才会"
"使用标记自定义集群中数据块的分布,以提高不同地域之间数据访问的效率."

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:9
msgid ""
"`MongoDB Operations Best Practices White Paper <http://www.mongodb.com/lp"
"/white-paper/ops-best-practices?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:10
msgid ""
"`Talk to a MongoDB Expert About Scaling <http://www.mongodb.com/lp/contact"
"/planning-for-scale?jmp=docs>`_"
msgstr ""
"分片管理在后台管理从 *源分片* 到 *目标分片* 的 *数据块迁移* ,在迁移过程中, *"
"目标分片* 首先会接收源分片在迁移数据块上的所有数据,之后,目标分片应用在上一迁"
"移步骤之间发生在源分片上的迁移数据块的更改,最后,存储在 *配置服务器* 上的元信"
"息被更新."

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:11
msgid ""
"`MongoDB Consulting Package "
"<https://www.mongodb.com/products/consulting?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-sharding-introduction.rst:12
msgid ""
"`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-"
"cards?jmp=docs>`_"
msgstr ""

#: ../source/core/sharding-introduction.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/sharding-introduction.txt:61
msgid ""
"For example, if a database has a 1 terabyte data set, and there are 4 "
"shards, then each shard might hold only 256 GB of data. If there are 40 "
"shards, then each shard might hold only 25 GB of data."
msgstr ""

#: ../source/core/sharding-introduction.txt:82
msgid ""
"**Query Routers**, or :program:`mongos` instances, interface with client "
"applications and direct operations to the appropriate shard or shards. A "
"client sends requests to a :program:`mongos`, which then routes the "
"operations to the shards and returns the results to the clients. A sharded "
"cluster can contain more than one :program:`mongos` to divide the client "
"request load, and most sharded clusters have more than one :program:`mongos`"
" for this reason."
msgstr ""

#: ../source/core/sharding-introduction.txt:90
msgid ""
"**Config servers** store the cluster's metadata. This data contains a "
"mapping of the cluster's data set to the shards. The query router uses this "
"metadata to target operations to specific shards."
msgstr ""

#: ../source/includes/fact-mirrored-config-servers-deprecated.rst:1
msgid ""
"Starting in MongoDB 3.2, config servers for sharded clusters can be deployed"
" as a :doc:`replica set </core/replication-introduction>`. The replica set "
"config servers must run the :doc:`WiredTiger storage engine "
"</core/wiredtiger>`. MongoDB 3.2 deprecates the use of three mirrored "
":program:`mongod` instances for config servers."
msgstr ""

#: ../source/core/sharding-introduction.txt:98
msgid ""
"For development and testing purposes only, each **shard** can be a single "
":program:`mongod` instead of a replica set."
msgstr ""

#: ../source/core/sharding-introduction.txt:218
msgid ""
"The :ref:`balancer <sharding-balancing-internals>` is a background process "
"that manages chunk migrations. The balancer can run from any of the "
":program:`mongos` instances in a cluster."
msgstr ""

#~ msgid ""
#~ "For example, if a database has a 1 terabyte data set, and there are 4 "
#~ "shards, then each shard might hold only 256GB of data. If there are 40 "
#~ "shards, then each shard might hold only 25GB of data."
#~ msgstr ""

#~ msgid ""
#~ "**Query Routers**, or :program:`mongos` instances, interface with client "
#~ "applications and direct operations to the appropriate shard or shards. The "
#~ "query router processes and targets operations to shards and then returns "
#~ "results to the clients. A sharded cluster can contain more than one query "
#~ "router to divide the client request load. A client sends requests to one "
#~ "query router. Most sharded clusters have many query routers."
#~ msgstr ""

#~ msgid ""
#~ "**Config servers** store the cluster's metadata. This data contains a "
#~ "mapping of the cluster's data set to the shards. The query router uses this "
#~ "metadata to target operations to specific shards. Production sharded "
#~ "clusters have *exactly* 3 config servers."
#~ msgstr ""

#~ msgid ""
#~ "For development and testing purposes only, each **shard** can be a single "
#~ ":program:`mongod` instead of a replica set. Do **not** deploy production "
#~ "clusters without 3 config servers."
#~ msgstr ""

#~ msgid ""
#~ "The :ref:`balancer <sharding-balancing-internals>` is a background process "
#~ "that manages chunk migrations. The balancer can run from any of the query "
#~ "routers in a cluster."
#~ msgstr ""
