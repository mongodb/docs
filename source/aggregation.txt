===========
Aggregation
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Aggregation operations process data records and return computed
results. Aggregation operations group values from multiple documents
together, and can perform a variety of operations on the grouped data
to return a single result. MongoDB provides three ways to perform
aggregation: the :ref:`aggregation pipeline
<aggregation-framework>`, the :ref:`map-reduce function
<aggregation-map-reduce>`, and :ref:`single purpose aggregation methods
<single-purpose-agg-operations>`.

.. _aggregation-framework:

Aggregation Pipeline
--------------------

MongoDB's :doc:`aggregation framework
</core/aggregation-pipeline>` is modeled on the concept of data
processing pipelines. Documents enter a multi-stage pipeline that
transforms the documents into an aggregated result. For example:

.. raw::
   
   <video style="width:100%;" src="../_images/agg-pipeline.mp4" controls> </video>

In the example,

.. code-block:: javascript

   db.orders.aggregate([
      { $match: { status: "A" } },
      { $group: { _id: "$cust_id", total: { $sum: "$amount" } } }
   ])

**First Stage**: The :pipeline:`$match` stage filters the documents by
the ``status`` field and passes to the next stage those documents that
have ``status`` equal to ``"A"``.

**Second Stage**: The :pipeline:`$group` stage groups the documents by
the ``cust_id`` field to calculate the sum of the amount for each
unique ``cust_id``.

The most basic pipeline stages provide *filters* that operate like
queries and *document transformations* that modify the form
of the output document.

Other pipeline operations provide tools for grouping and sorting
documents by specific field or fields as well as tools for aggregating
the contents of arrays, including arrays of documents. In addition,
pipeline stages can use :ref:`operators
<aggregation-expression-operators>` for tasks such as calculating the
average or concatenating a string.

The pipeline provides efficient data aggregation using native
operations within MongoDB, and is the preferred method for data
aggregation in MongoDB.

The aggregation pipeline can operate on a
:doc:`sharded collection </sharding>`.

The aggregation pipeline can use indexes to improve its performance
during some of its stages. In addition, the aggregation pipeline has an
internal optimization phase. See
:ref:`aggregation-pipeline-operators-and-performance` and
:doc:`/core/aggregation-pipeline-optimization` for details.

.. _aggregation-map-reduce:

Map-Reduce
----------

.. tip::

   :doc:`Aggregation pipelines </core/aggregation-pipeline>`
   provide better performance and a more coherent interface than
   map-reduce.

   For examples of aggregation alternatives to map-reduce operations,
   see :doc:`/tutorial/map-reduce-examples`. See also
   :doc:`/reference/map-reduce-to-aggregation-pipeline`.

MongoDB also provides :doc:`map-reduce </core/map-reduce>` operations
to perform aggregation. Map-reduce uses custom JavaScript functions to
perform the map and reduce operations, as well as the optional
*finalize* operation.

.. include:: /images/map-reduce.rst

.. _single-purpose-agg-operations:

Single Purpose Aggregation Operations
-------------------------------------

MongoDB also provides :method:`db.collection.estimatedDocumentCount()`,
:method:`db.collection.count()` and :method:`db.collection.distinct()`.

All of these operations aggregate documents from a single collection.
While these operations provide simple access to common aggregation
processes, they lack the flexibility and capabilities of the
aggregation pipeline and map-reduce.

.. include:: /images/distinct.rst

Additional Features and Behaviors
---------------------------------

For a feature comparison of the aggregation pipeline,
map-reduce, and the special group functionality, see
:doc:`/reference/aggregation-commands-comparison`.

.. toctree::
   :titlesonly: 
   :hidden: 

   /core/aggregation-pipeline
   /core/map-reduce
   /reference/aggregation
