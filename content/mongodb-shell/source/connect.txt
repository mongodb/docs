.. _mdb-shell-connect:

=======================
Connect to a Deployment
=======================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :description: How to use the MongoDB Shell to connect to a MongoDB Atlas cloud-hosted deployment, a local deployment, or another remote host.
   :keywords: server

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page shows how to use the |mdb-shell| to connect to a MongoDB
deployment. You can connect to a 
`MongoDB Atlas cloud-hosted deployment <https://www.mongodb.com/docs/atlas>`__,
connect to a local deployment, or connect to another remote host with
|mdb-shell|.

Prerequisites
-------------

.. include:: /includes/fact-connect-prereqs.rst

Install ``mongosh``
~~~~~~~~~~~~~~~~~~~

These procedures assume you have already installed ``mongosh``. For more 
information about installing ``mongosh``, refer to 
:ref:`mdb-shell-install`.

Connect to a MongoDB Atlas Deployment
-------------------------------------

You can connect to your MongoDB Atlas deployment directly from your shell.

.. procedure::
   :style: normal

   .. step:: Get your Atlas Connection String

      You need an Atlas connection string to connect from |mdb-shell|.
      You can get the Atlas connection string in the Atlas UI.

      Refer to the
      `Find Your MongoDB Atlas Connection String 
      <https://www.mongodb.com/docs/manual/reference/connection-string/#find-your-mongodb-atlas-connection-string>`__ 
      guide for details.

   .. step:: Set Your Database Credentials

      If you haven't already 
      `created a database user 
      <https://www.mongodb.com/docs/atlas/tutorial/create-mongodb-user-for-cluster/>`__, 
      you must set a username and password. To connect to Atlas, pass your username with 
      the Atlas connection string. After you issue the connect command, the 
      shell prompts for your password.

   .. step:: Connect to MongoDB Atlas with ``mongosh``

      To establish your connection, run the ``mongosh`` command with your 
      connection string and options to establish the connection.

      The connection string includes the following elements:

      - Your cluster name
      - A hash
      - A flag for the API version
      - A flag for the username you want to use to connect

      It resembles the following string:

      .. code-block:: sh

         mongosh "mongodb+srv://YOUR_CLUSTER_NAME.YOUR_HASH.mongodb.net/" --apiVersion YOUR_API_VERSION --username YOUR_USERNAME

.. note:: Learn More

   You can use other connection security options to connect to Atlas via
   ``mongosh``. For information on connecting with a private 
   IP for peering or a Private Endpoint connection, refer to the 
   `Atlas Connect via mongosh <https://www.mongodb.com/docs/atlas/mongo-shell-connection/#choose-your-connection-security>`__ 
   documentation.

Connect to a Local Deployment on the Default Port
-------------------------------------------------

To connect to a MongoDB deployment running on **localhost** with
**default port** 27017, run ``mongosh`` without any options:

.. code-block:: sh

   mongosh

This is equivalent to the following command:

.. code-block:: sh

   mongosh "mongodb://localhost:27017"

Connect to a Local Deployment on a Non-Default Port
---------------------------------------------------

To specify a port to connect to on localhost, you can use either:

- A :manual:`connection string </reference/connection-string>` with the
  chosen port

- The ``--port`` command-line option

For example, the following commands connect to a deployment running on
localhost port 28015:

.. code-block:: sh

   mongosh "mongodb://localhost:28015"

.. code-block:: sh

   mongosh --port 28015

Connect to a Deployment on a Remote Host
----------------------------------------

To specify a remote host and port, you can use either:

- A :manual:`connection string </reference/connection-string>` with the
  chosen host and port.

- The ``--host`` and ``--port`` command-line options. If you omit the
  ``--port`` option, ``mongosh`` uses the default port 27017.

For example, the following commands connect to a MongoDB deployment
running on host ``mongodb0.example.com`` and port 28015:

.. code-block:: sh

   mongosh "mongodb://mongodb0.example.com:28015"

.. code-block:: sh

   mongosh --host mongodb0.example.com --port 28015

.. note:: Connect to |service-fullname|

   If your remote host is an |service| cluster, you can copy your
   connection string from the |service| UI. To learn more, see
   :atlas:`Connect to a Cluster
   </connect-to-cluster/#use-the-connect-dialog-to-connect-to-your-cluster>`
   in the Atlas documentation.

Specify Connection Options
--------------------------

Specify different connection options to connect to different types of
deployments.

Connect With Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a MongoDB deployment that requires authentication, use the
:option:`--username <--username>` and :option:`--authenticationDatabase
<--authenticationDatabase>` options. ``mongosh`` prompts you for a
password, which it hides as you type.

For example, to authenticate as user ``alice`` on the ``admin``
database, run the following command:

.. code-block:: sh

   mongosh "mongodb://mongodb0.example.com:28015" --username alice --authenticationDatabase admin
   
To provide a password as part of the connection command instead of using
the prompt, use the :option:`--password <--password>` option. Use this
option for programmatic usage of ``mongosh``, like a :driver:`driver
</>`.

.. seealso::

   - To enforce authentication on a deployment, see
     :manual:`Enable Access Control </tutorial/enable-authentication/>`.

   - To provision access to a MongoDB deployment, see :manual:`Database
     Users </core/security-users/>`.

Connect with OpenID Connect
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a deployment using :manual:`OpenID Connect </core/security-oidc/>`, 
use the :option:`--authenticationMechanism` option and set it to ``MONGODB-OIDC``. 
``mongosh`` redirects you to a browser where you enter your identity provider's 
log-in information. 

For example, the following connects to a local deployment using ``MONGODB-OIDC``:

.. code-block:: sh

   mongosh "mongodb://localhost/" --authenticationMechanism MONGODB-OIDC 

Connect with LDAP
~~~~~~~~~~~~~~~~~

To connect to a deployment using :ref:`LDAP <security-ldap>`:

- Set :option:`--username <mongosh --username>` to a username that 
  respects the :setting:`security.ldap.authz.queryTemplate`, or any 
  configured :setting:`security.ldap.userToDNMapping` template.

- Set :option:`--password <mongosh --password>` to the appropriate 
  password. If you do not specify the password to the 
  ``--password`` command-line option, ``mongosh`` prompts you for 
  the password.

- Set :option:`--authenticationDatabase <mongosh --authenticationDatabase>` 
  to ``$external``.
  The ``$external`` argument must be placed in single quotes, not
  double quotes, to prevent the shell from interpreting ``$external``
  as a variable.

- Set :option:`--authenticationMechanism <mongosh --authenticationMechanism>` 
  to ``PLAIN``.

.. warning::

   When you use one-time passwords with LDAP authentication, adding 
   the :ref:`connection string options <connections-connection-options>` 
   ``maxPoolSize=1&srvMaxHosts=1`` to your connection string is 
   recommended to reduce the potential for connection failures.

Include the :option:`--host <mongosh --host>` and 
:option:`--port <mongosh --port>` of the MongoDB deployment, along with 
any other options relevant to your deployment.

For example, the following operation authenticates to a MongoDB 
deployment running with LDAP authentication and authorization:

.. code-block:: bash

   mongosh --username alice@dba.example.com --password  --authenticationDatabase '$external' --authenticationMechanism "PLAIN"  --host "mongodb.example.com" --port 27017

Connect to a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a replica set, you can either: 

- Use the :manual:`DNS Seedlist Connection Format
  </reference/connection-string/#dns-seedlist-connection-format>`.

- Explicitly specify the replica set name and members in the connection
  string.

.. important::

   When a replica set runs in Docker, it might expose only one 
   MongoDB endpoint. In this case, the replica set is not discoverable, and specifying 
   ``directConnection=false`` can prevent your application from connecting to it.
   
   In a test or development environment, you can connect to the replica set by specifying
   ``directConnection=true`` in your connection URI. In a production environment, we
   recommend configuring the cluster to make each MongoDB instance accessible outside of
   the Docker virtual network.
   
Option 1: DNS Seedlist Format
`````````````````````````````

To use the DNS seedlist connection format, include the ``+srv`` modifier
in your connection string.

For example, to connect to a replica set on ``server.example.com``, run
the following command:

.. code-block:: sh

   mongosh "mongodb+srv://server.example.com/"

.. note:: +srv TLS Behavior

   When you use the ``+srv`` connection string modifier, MongoDB
   automatically sets the :option:`--tls <--tls>` connection option to
   ``true``. To override this behavior, set ``--tls`` to ``false``.

Option 2: Specify Members in Connection String
``````````````````````````````````````````````

You can specify individual replica set members in the
:manual:`connection string </reference/connection-string>`. 

For example, to connect to a three-member replica set named ``replA``,
run the following command:

.. code-block:: sh

   mongosh "mongodb://mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017/?replicaSet=replA"
   
.. note:: directConnection Parameter Added Automatically

   When you specify individual replica set members in the connection
   string, ``mongosh`` automatically adds the ``directConnection=true``
   parameter, unless at least one of the following is true:

   - The ``replicaSet`` query parameter is present in the connection string.
   - The connection string uses the ``mongodb+srv://`` connection string
     format.
   - The connection string contains a seed list with multiple hosts.
   - The connection string already contains a ``directConnection``
     parameter.

   When ``directConnection=true``, all operations are run on the host
   specified in the connection URI.

Connect Using TLS
~~~~~~~~~~~~~~~~~

To connect to a deployment using TLS, you can either:

- Use the :manual:`DNS Seedlist Connection Format
  </reference/connection-string/#dns-seedlist-connection-format>`. The
  ``+srv`` connection string modifier automatically sets the ``tls``
  option to ``true`` for the connection.

  For example, to connect to a DNS seedlist-defined replica set with
  ``tls`` enabled, run the following command:

  .. code-block:: sh

     mongosh "mongodb+srv://server.example.com/"

- Set the :option:`--tls <--tls>` option to ``true`` in the connection
  string.

  For example, to enable ``tls`` with a connection string option, run
  the following command:

  .. code-block:: sh

     mongosh "mongodb://mongodb0.example.com:28015/?tls=true"

- Specify the ``--tls`` command-line option.

  For example, to connect to a remote host with ``tls`` enabled, run the
  following command:

  .. code-block:: sh

     mongosh "mongodb://mongodb0.example.com:28015" --tls

Connect to a Specific Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a specific default database, specify a database in your
:manual:`connection string URI path </reference/connection-string/>`.
If unspecified by the connection string, the default database
is the ``test`` database.

For example, to connect to a database called ``qa`` on localhost, run the
following command:

.. code-block:: sh

    mongosh "mongodb://localhost:27017/qa"

You can specify the authentication database in your connection string
using the :urioption:`authSource` connection option. If specified, the
client uses this database to verify your user identity and credentials. 
If :urioption:`authSource` is unspecified, it defaults to the default 
database specified in the connection string. If both :urioption:`authSource` 
and the default database are unspecified, 
:urioption:`authSource` defaults to the ``admin`` database.

The following connection string sets the default database to ``myDefaultDB``
and the authentication database to ``admin``:

.. code-block:: bash

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@mongodb0.example.com:27017/myDefaultDB?authSource=admin

Proxy Settings
~~~~~~~~~~~~~~

To establish a connection with proxy configurations, you can use the 
following environment variables:

.. include:: /includes/table-proxy-env-variables.rst

.. note:: 

   ``mongosh`` supports the following proxy types: 
   
   - Socks5 proxies
   - HTTP proxies 
   - CONNECT proxies
   - :abbr:`PAC (proxy auto-config)` URLs that resolve to one of the previously 
     listed proxies

Connect to a Different Deployment
---------------------------------

If you are already connected to a deployment in the |mdb-shell|, you can
use the :method:`Mongo()` or :manual:`connect()
</reference/method/connect/>` method to connect to a different
deployment from within the |mdb-shell|.

To learn how to connect to a different deployment using these methods,
see :ref:`mdb-shell-open-new-connections-in-shell`.

Verify Current Connection
-------------------------

To verify your current database connection, use the
:method:`db.getMongo()` method.

The method returns the :manual:`connection string URI
</reference/connection-string/>` for your current connection.

Disconnect from a Deployment
----------------------------

To disconnect from a deployment and exit ``mongosh``, perform one of the
following actions:

- Type ``.exit``, ``exit``, or ``exit()``.

- Type ``quit`` or ``quit()``.

- Press ``Ctrl`` + ``D``.

- Press ``Ctrl`` + ``C`` twice.

.. _mongosh-work-alike-deployments:

Non-genuine Deployments
-----------------------

The shell displays a warning message when you connect to non-genuine
MongoDB instances. Non-genuine instances may behave differently from the
official MongoDB instances due to missing, inconsistent, or incomplete
features.

Limitations
-----------

- :manual:`Kerberos authentication </core/kerberos/>` does not allow
  ``authMechanismProperties=CANONICALIZE_HOST_NAME:true|false`` in the
  connection string. Instead, use either:
  
  - ``authMechanismProperties=CANONICALIZE_HOST_NAME:forward``
  - ``authMechanismProperties=CANONICALIZE_HOST_NAME:forwardAndReverse``
  - ``authMechanismProperties=CANONICALIZE_HOST_NAME:none``

- ``mongosh`` currently only supports the ``zlib``
  :manual:`compressor </core/wiredtiger/#compression>`. The following 
  compressors are not supported:

  - ``zstd``
  - ``snappy``

- Starting in ``mongosh`` 2.0.0:

  .. include:: /includes/boolean-logic-connection-strings.rst
