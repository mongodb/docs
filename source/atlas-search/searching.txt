.. _searching-ref:
.. _fts-about-queries:

============================
Create and Run |fts| Queries
============================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: perform specific searches, search options, get detailed information
   :description: Create an Atlas Search query to perform a full text search on indexed fields using the Mongo Shell (mongosh), a driver, or the Atlas user interface.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

|fts| queries take the form of an :manual:`aggregation pipeline stage 
</aggregation>`. |fts| provides :pipeline:`$search` and 
:pipeline:`$searchMeta` stages, both of which must be the first stage 
in any query pipeline, including the :pipeline:`$lookup` and
:pipeline:`$unionWith` sub-pipelines. These stages can be used in
conjunction with other :manual:`aggregation pipeline stages
</aggregation>` in your query pipeline. To learn more about these
pipeline stages, see :ref:`query-syntax-ref`.

|fts| also provides query :ref:`operators <operators-ref>` and 
:ref:`collectors <collectors-ref>` that you can use inside the 
:pipeline:`$search` and :pipeline:`$searchMeta` :ref:`aggregation
pipeline stages <query-syntax-ref>`. The |fts| operators allow you to
locate and retrieve relevant data from the collection on your |service|
{+cluster+}. The collector returns a document representing the search
metadata results. 

You can use |fts| operators to query terms, phrases, geographic shapes 
and points, numeric values, similar documents, synonymous terms, and more.
You can also search using regex and wildcard expressions. The |fts|
:ref:`compound-ref` operator allows you to combine multiple operators 
inside your :pipeline:`$search` stage to perform a complex search and 
filter of data based on what *must*, *must not*, or *should* be present 
in the documents returned by |fts|. You can use the :ref:`compound-ref` 
operator to also match or filter documents in the :pipeline:`$search` 
stage itself. Running :pipeline:`$match` after :pipeline:`$search` is 
less performant than running :pipeline:`$search` with the 
:ref:`compound-ref` operator.

To learn more about the syntax, options, and usage of the |fts| operators,
see :ref:`operators-ref`.

``mongod`` and ``mongot`` on the Same Node
  When you run a query, |fts| uses the :ref:`configured read preference
  <replica-set-tags>` to identify the node on which to run the query. The
  query first goes to the MongoDB process, which is ``mongod`` for a
  replica set cluster or ``mongos`` for a sharded cluster.  

  For a replica set {+cluster+}, the MongoDB process routes the query to
  the ``mongot`` on the same node. For sharded clusters, your cluster data
  is partitioned across ``mongod`` instances and each ``mongot`` knows
  about the data on the ``mongod`` on the same node only. Therefore, you
  can't run |fts| queries that target a particular  shard. ``mongos``
  directs the queries to all shards, making these *scatter gather*
  queries. If you use :manual:`zones </core/zone-sharding/>` to
  distribute a sharded collection over a subset of the shards in the
  {+cluster+}, |fts| routes the query to the zone that contains the
  shards for the collection that you are querying and runs your
  :pipeline:`$search` queries on just the shards where the collection is
  located.  

  |fts| performs the search and scoring and returns the document IDs and
  other search metadata for the matching results to ``mongod``. The
  ``mongod`` then performs a full document lookup implicitly for the
  matching results and returns the results to the client. If you use
  the :pipeline:`$search` :ref:`concurrent <concurrent-ref>` option in
  your query, |fts| enables intra-query parallelism. To learn more, see
  :ref:`Parallelize Query Execution Across Segments <concurrent-ref>`.

``mongod`` and ``mongot`` on Different Nodes 
  When you run a query, the query first goes to the ``mongod`` based on
  the :ref:`configured read preference <replica-set-tags>`. The
  ``mongod`` process routes the search query through a load balancer on
  the same node, which distributes the requests across all of the
  ``mongot`` processes. 
  
  The |fts| ``mongot`` process performs the search and scoring and
  returns the document IDs and metadata for the matching results to
  ``mongod``. The ``mongod`` then performs a full document lookup for
  the matching results and returns the results to the client. If you use 
  the :pipeline:`$search` :ref:`concurrent <concurrent-ref>` option in
  your query, |fts| enables intra-query parallelism. To learn more, see
  :ref:`Parallelize Query Execution Across Segments <concurrent-ref>`.   

|fts| associates a relevance-based score with every document in the 
result set. The relevance-based scoring allows |fts| to return documents
in the order from the highest score to the lowest. |fts| scores documents 
higher if the query term appears frequently in a document and lower if 
the query term appears across many documents in the collection. |fts| 
also supports customizing the relevance-based default score by 
boosting, decaying, or other modifying options. To learn more about
customizing the resulting scores, see :ref:`scoring-ref`.

.. seealso:: Learn by Watching

   Watch this video for an overview of searching and tracking your
   queries with |fts|. In this video, you can learn more about |fts|
   :ref:`operators <operators-ref>` and how |fts| :ref:`scores
   <scoring-ref>` documents in the results. 

   *Duration: 15 Minutes*

   .. video:: https://youtu.be/U-hAo_TAi9c

.. _ref-query-management:

Supported Clients
-----------------

You can create and run |fts| queries using the following: 

- :ref:`Search Tester <atlas-search-queries>`
- {+mongosh+}
- |compass|
- {+atlas-cli+}
- :driver:`MongoDB drivers </>`

Next Steps 
----------

To learn how to create and run a query, see :ref:`fts-create-queries`. 
For hands-on experience creating |fts| indexes and running |fts| 
queries against the :ref:`sample datasets <sample-data>`, try the 
tutorials in the following pages:

- :ref:`fts-tutorial-ref`
- :ref:`fts-tutorials`

.. toctree::
   :titlesonly:
   
   Create a Query </atlas-search/create-queries>
   Test and Run Queries </atlas-search/search-ui>
   Explain Plan and Statistics </atlas-search/explain>
   Troubleshoot </atlas-search/troubleshooting-search>
