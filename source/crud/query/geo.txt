.. _node-fundamentals-geospatial:
.. _node-geospatial:

===================
Search Geospatially
===================

.. meta::
   :description: Explore how to perform geospatial queries with the MongoDB Node.js Driver by using geospatial query operators with examples for both Earth-like sphere and 2D plane coordinate systems.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can query data based on geographical location using geospatial query
operators. You can format geospatial queries using one of the following
coordinate systems:

- :ref:`Coordinates on an Earth-like Sphere <sphere>`
- :ref:`Coordinates on a 2D Plane <plane>`

This section contains examples of geospatial queries using different
query operators that you can run against your Atlas sample dataset.

.. _sphere:

Coordinates on an Earth-like Sphere
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For geospatial queries using longitude and latitude coordinates
on an Earth-like sphere, use the :manual:`GeoJSON
</geospatial-queries/#geojson-objects>`
query format. While GeoJSON has :manual:`multiple types
</reference/geojson/>`, all GeoJSON data
types use some form of the following structure:

.. code-block:: javascript

   <field> : {
      type: <GeoJSON type>,
      coordinates: [
         [longitude_1, latitude_1],
         ...
         [longitude_n, latitude_n]
      ]
   }

The object type determines the number of coordinates. For instance, a
``Point`` requires only one coordinate: a longitude and a latitude.
A ``Line`` uses two coordinates: a longitude and a latitude for each end.
A ``Polygon`` consists of a list of coordinates in which the first and last
coordinate are the same, effectively closing the polygon. To learn more
about the GeoJSON shapes you can use in MongoDB, consult the
:manual:`GeoJSON manual entry </reference/geojson/>`.

To enable querying GeoJSON data, you must add the field to a ``2dsphere``
index. The following snippet creates an index on the ``location.geo`` field in
the ``theaters`` collection using the ``createIndex()`` method:

.. code-block:: javascript

   await db.theaters.createIndex({location.geo: "2dsphere"});

.. _plane:

Coordinates on a 2D Plane
~~~~~~~~~~~~~~~~~~~~~~~~~

You can also express geospatial queries using ``x`` and ``y`` coordinates in
a two-dimensional Euclidean plane. Until MongoDB, this was the only format
compatible with geospatial queries, and are now referred to as
"legacy coordinate pairs".

Legacy coordinate pairs use the following structure:

.. code-block:: javascript

   <field> : [ x, y ]

The field contains an array of two values in which the first represents
the ``x`` axis value and the second represents the ``y`` axis value.

To enable querying using legacy coordinate pairs, create a ``2d`` index on
the field on the collection. The following snippet creates an index on the
``coordinates`` field in the ``shipwrecks`` collection using the
``createIndex()`` method:

.. code-block:: javascript

   await db.shipwrecks.createIndex({coordinates: "2d"});

See the
:manual:`{+mdb-server+} manual page on legacy coordinate pairs </geospatial-queries/#legacy-coordinate-pairs>`
for more information.

.. note::

   Spherical (``2dsphere``) and flat (``2d``) indexes support some, but
   not all, of the same query operators. For a full list of operators
   and their index compatibility, consult the
   :manual:`manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.

Examples
--------

The following examples use the MongoDB Atlas sample dataset. You can learn how to set up your own free-tier Atlas cluster and how to load the sample dataset in our
:doc:`get started guide </get-started>`.

The examples use the ``theaters`` collection in the ``sample_mflix`` database
from the sample dataset. The ``theaters`` collection contains a ``2dsphere`` index
on the ``location.geo`` field.

Query by Proximity
~~~~~~~~~~~~~~~~~~

The :manual:`$near </reference/operator/query/near/#mongodb-query-op.-near>`
operator accepts a set of longitude-latitude coordinates and returns
documents ordered from nearest to farthest. To limit the results to a
maximum distance in meters, use the ``$maxDistance`` option. For a
complete list of options, see the reference documentation for ``$near``.
The following example queries for theaters within ``10,000`` meters of
``[ -73.9667, 40.78 ]``.

.. literalinclude:: /code-snippets/crud/theaters.js
   :language: javascript
   :start-after: start proximity geo example
   :end-before: end proximity geo example

Query Within a Range
~~~~~~~~~~~~~~~~~~~~

The :manual:`$geoWithin </reference/operator/query/geoWithin/>` operator
selects documents with geospatial data that exist within a specified
shape. The following example searches for movie theaters in the New
England area:

.. literalinclude:: /code-snippets/crud/theaters.js
   :language: javascript
   :start-after: start range geo example
   :end-before: end range geo example

See the :manual:`{+mdb-server+} manual page on geospatial query operators </geospatial-queries/index.html>`
for more information on the operators you can use in your query.
