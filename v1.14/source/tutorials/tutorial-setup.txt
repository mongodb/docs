.. _kafka-tutorials-docker-setup:

==============================
Kafka Connector Tutorial Setup
==============================

.. meta:: 
   :keywords: environment, ports

The tutorials in this section run on a development environment using Docker to
package the dependencies and configurations required to run the
{+connector-long+}. Make sure you complete the development environment setup
steps before proceeding to the tutorials.

Requirements
~~~~~~~~~~~~

- Create or sign into your Docker account to download the Docker containers
  you need for this tutorial. To learn how to sign up for an account and
  install Docker Desktop, read the signup and download steps in the
  `Docker Hub Quickstart <https://docs.docker.com/docker-hub/>`__.

- A terminal app and shell. For MacOS users, use Terminal or a similar app.
  For Windows users, use PowerShell.

- Optional. Install **git** to download the setup files. To learn how to
  install git, read the `Git Downloads <https://git-scm.com/downloads>`__
  page.

Set Up Your Development Environment with Docker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. procedure::
   :style: connected

   .. step:: Clone or Download the Tutorial Repository

      Next, clone the tutorial git repository with the following command:

      .. code-block:: bash
         :copyable: true

         git clone https://github.com/mongodb-university/kafka-edu.git

      If you do not have git installed, you can download the
      `zip archive <https://github.com/mongodb-university/kafka-edu/archive/refs/heads/main.zip>`__
      instead.

   .. step:: Run the Development Environment

      .. _tutorial-setup-run-environment:

      Select the tab that matches your OS for instructions on how to run the
      commands in this guide:

      .. tabs::

         .. tab:: Linux or Mac OS
            :tabid: shell

            Navigate to the tutorial directory "mongodb-kafka-base" within
            the repository or unzipped archive using bash shell. If you
            cloned the repository with git, your command resembles the
            following:

            .. code-block:: bash
               :copyable: true

               cd {+sandbox-directory+}

         .. tab:: Windows
            :tabid: powershell

            Navigate to the tutorial directory "mongodb-kafka-base" within
            the repository or unzipped archive using PowerShell.  If you
            cloned the repository with git, your command resembles the
            following:

            .. code-block:: none
               :copyable: true

               cd {+win-sandbox-directory+}

      Start the Docker image with the following command:

      .. code-block:: bash
         :copyable: true

         docker-compose -p mongo-kafka up -d --force-recreate

      .. include:: /includes/tutorials/port-mapping-note.rst

      The "mongo-kafka-base" image creates a Docker container that includes
      all the services you need in the tutorial and runs them on a shared
      network called "mongodb-kafka-base_localnet" as shown in the following
      diagram:

      .. figure:: /includes/figures/mongo-kafka-base-container.png
         :alt: Diagram that shows the Docker compose containers in mongo-kafka-base

      When the command completes successfully, it outputs the following
      text:

      .. include:: /includes/tutorials/docker-success.rst

   .. step:: Verify the Successful Setup

      Confirm that the development environment started successfully by
      running the following commands:

      .. code-block:: bash

         docker exec mongo1 status

      This command should output the following information if the Docker
      development environment was set up successfully:

      .. include:: /includes/tutorials/setup/status-setup.rst

      Since you have not started the connectors, the status and configured
      list are empty.

      Your development environment setup is complete and you can proceed to
      the next step of the tutorial.

      .. tip:: Connect To Development Environment MongoDB

         You can connect to the {+cluster+} running in your
         development environment with the following connection string:

         .. code-block:: text

            mongodb://localhost:{+mongodb-port-mapping+}/?directConnection=true
