title: "Restore the shard primary :binary:`mongod <bin.mongod>` data files."
stepnum: 1
ref: restore-backup-files
content: |
  Select the tab that corresponds to your preferred backup method:

  .. tabs::

     tabs:

       - id: lvm
         name: "LVM Snapshot"
         content: |

           1. Mount the :term:`LVM` snapshot on the target host machine. 
              The specific steps for mounting an LVM snapshot depends on 
              your LVM configuration.

              The following example assumes an LVM snapshot created 
              using the :ref:`lvm-backup-operation` step in the
              :doc:`/tutorial/backup-with-filesystem-snapshots` 
              procedure.

              .. code-block:: shell

                 lvcreate --size 250GB --name mongod-datafiles-snapshot vg0
                 gzip -d -c mongod-datafiles-snapshot.gz | dd o/dev/vg0/mongod-datafiles-snapshot
                 mount /dev/vg0/mongod-datafiles-snapshot /snap/mongodb

              This example may not apply to all possible LVM 
              configurations. Refer to the LVM documentation for your 
              system for more complete guidance on LVM restoration.

           #. Copy the :binary:`mongod <bin.mongod>` data files from the
              snapshot mount to the data directory created in
              :guilabel:`B. Prepare the Target Host for Restoration`:

              .. code-block:: sh

                 c -a /snap/mongodb/path/to/mongodb /path/to/mongodb

              The ``-a`` option recursively copies the contents of
              the source path to the destination path while preserving
              folder and file permissions.

           #. Comment out or omit the following 
              :ref:`configuration file <configuration-file>` settings:

              .. code-block:: yaml

                 #replication
                 #  replSetName: myShardName
                 #sharding
                 #  clusterRole: shardsvr


              To start the :binary:`mongod <bin.mongod>` using a 
              configuration file, specify the 
              :option:`--config <mongod --config>` option in the command
              line specifying the full path to the configuration file:

              .. code-block:: sh

                 mongod --config /path/to/mongodb/mongod.conf

              If you have :binary:`mongod <bin.mongod>` configured to 
              run as a system service, start it using the recommended 
              process for your system service manager.

              After the :binary:`mongod <bin.mongod>` starts, connect 
              to it using the :binary:`mongo <bin.mongo>` shell.

       - id: mongorestore
         name: "mongodump / mongorestore"
         content: |

           1. Comment out or omit the following 
              :ref:`configuration file <configuration-file>` settings:

              .. code-block:: yaml

                 #replication
                 #  replSetName: myShardName
                 #sharding
                 #  clusterRole: shardsvr


              To start the :binary:`mongod <bin.mongod>` using a 
              configuration file, specify the 
              :option:`--config <mongod --config>` option in the command
              line specifying the full path to the configuration file:

              .. code-block:: sh

                 mongod --config /path/to/mongodb/mongod.conf

              If you have :binary:`mongod <bin.mongod>` configured to 
              run as a system service, start it using the recommended 
              process for your system service manager.

           #. Use :binary:`mongorestore <bin.mongorestore>` to restore 
              the data captured by :binary:`mongodump <bin.mongodump>` 
              into the :binary:`mongod <bin.mongod>`. If you ran 
              :binary:`mongodump <bin.mongodump>` with
              :option:`--oplog <mongodump --oplog>`, you must run
              :binary:`mongorestore <bin.mongorestore>` with 
              :option:`--oplogReplay <mongorestore --oplogReplay>` to 
              restore the captured oplog entries.

              The following operation restores a 
              :binary:`mongodump <bin.mongodump>` dump created
              with the :option:`--gzip <mongodump --gzip>`, 
              :option:`--archive <mongodump --archive>`, and
              :option:`--oplog <mongodump --oplog>` options:

              .. code-block:: shell

                 mongorestore --host localhost --port 27017 \
                   --oplogReplay \
                   --gzip --archive="/path/to/dump.gz"

              Add any additional options as required by your deployment.
              Change the hostname and port based on the configuration
              of the target :binary:`mongod <bin.mongod>`.

       - id: other
         name: "Other Backup Method"
         content: |

           1. Make the data files stored in your selected backup medium
              accessible on the host. This may require mounting the 
              backup volume, opening the backup in a software utility, 
              or using another tool to extract the data to disk. Refer 
              to the documentation for your preferred backup tool for 
              instructions on accessing the data contained in the 
              backup. 

           #. Copy the :binary:`mongod <bin.mongod>` data files from the
              backup data location to the data directory created in
              :guilabel:`B. Prepare the Target Host for Restoration`:

              .. code-block:: sh

                 c -a /backup/mongodb/path/to/mongodb /path/to/mongodb

              The ``-a`` option recursively copies the contents of
              the source path to the destination path while preserving
              folder and file permissions.

           #. Comment out or omit the following 
              :ref:`configuration file <configuration-file>` settings:
    
              .. code-block:: yaml

                 #replication
                 #  replSetName: myShardName
                 #sharding
                 #  clusterRole: shardsvr

              To start the :binary:`mongod <bin.mongod>` using a 
              configuration file, specify the 
              :option:`--config <mongod --config>` option in the command
              line specifying the full path to the configuration file:

              .. code-block:: sh

                 mongod --config /path/to/mongodb/mongod.conf

              If you have :binary:`mongod <bin.mongod>` configured to 
              run as a system service, start it using the recommended 
              process for your system service manager.

              After the :binary:`mongod <bin.mongod>` starts, connect 
              to it using the :binary:`mongo <bin.mongo>` shell.
---
stepnum: 2
ref: drop-local
source:
  file: steps-restore-sharded-config-primary-from-backup.yaml
  ref: drop-local
---
title: "For any CSRS hostname or replica set name changes, update shard metadata in each shard's identity document."
stepnum: 3
ref: metadata-update
optional: true
content: |

  You can skip this step if all of the following are true:

  * The hostnames for any CSRS host did not change during this procedure.
  * The CSRS replica set name did not change during this procedure.

  Each shard has  :data:`admin.system.versions` collection that 
  contains metadata related to the shard, including the CSRS 
  connection string. If either the CSRS name or any member hostnames
  changed while restoring the CSRS, you must update this metadata.

  Issue the following :method:`~db.collection.find()` method on the 
  :data:`~admin.system.versions` collection in the ``admin`` database:

  .. code-block:: javascript

     use admin
     db.system.version.find( {"_id" : "shardIdentity" } )

  The :method:`~db.collection.find()` method returns a document that
  resembles the following:

  .. code-block:: javascript

     { 
       "_id" : "shardIdentity", 
       "clusterId" : ObjectId("2bba123c6eeedcd192b19024"), 
       "shardName" : "shard1", 
       "configsvrConnectionString" : "myCSRSName/alpha.example.net:27019,beta.example.net:27019,charlie.example.net:27019" }

  The following :method:`~db.collection.updateOne` method
  updates the document such that the ``host`` string represents
  the most current CSRS connection string:

  .. code-block:: javascript

     db.system.version.updateOne(
       { "_id" : "shardIdentity" },
       { $set : 
         { "configsvrConnectionString" : "myNewCSRSName/config1.example.net:27019,config2.example.net:27019,config3.example.net:27019"}
       } 
     )

  .. important::

     The ``shardName`` value must match the ``_id`` value in the 
     :data:`~config.shards` collection on the CSRS. Validate
     that the metadata on the CSRS match the metadata for the shard.
     Refer to substep :guilabel:`3` in the
     :guilabel:`C. Restore Config Server Replica Set` portion
     of this procedure for instructions on viewing the
     CSRS metadata.

---
stepnum: 4
ref: restart-as-repl
source:
  file: steps-restore-sharded-config-primary-from-backup.yaml
  ref: restart-as-repl
replacement:
  code: |

    .. code-block:: yaml

       replication
         replSetName: myNewShardName
       sharding
         clusterRole: shardsvr

---
stepnum: 5
ref: initiate
source:
  file: steps-restore-sharded-config-primary-from-backup.yaml
  ref: initiate
---
stepnum: 6
ref: add-members
source:
  file: steps-restore-sharded-config-primary-from-backup.yaml
  ref: add-members
replacement:
  code: |

    .. code-block:: javascript

       rs.add("myNewShardName/repl2.example.net:27018")
       rs.add("myNewShardName/repl3.example.net:27018")

  morecode: |

    .. code-block:: javascript

       rs.add(
        {
          "host" : "myNewShardName/repl2.example.net:27018",
          priority: <int>,
          votes: <int>,
          tags: <int>
        }
       )
  component: "shard replica set"
---
stepnum: 7
ref: configure-replication
source:
  file: steps-restore-sharded-config-primary-from-backup.yaml
  ref: configure-replication
...