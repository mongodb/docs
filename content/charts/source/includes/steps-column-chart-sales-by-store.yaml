title: Select the dashboard.
ref: column-chart-select-dashboard
level: 4
content: |  
  From the :guilabel:`Dashboards` page, select the dashboard 
  where you want to add a new chart. For instructions on setting 
  up a dashboard, see :doc:`Dashboards </dashboards>`.

---
title: Click :guilabel:`Add Chart`.
ref: bar-chart-add-chart
level: 4
---
ref: column-chart-select-source
inherit:
  file: steps-source-select-data-source.yaml
  ref: sample-supplies-sales-data-source


---
title: Select the Chart Type
ref: click-stacked-column
level: 4
content: |

   In the :guilabel:`Chart Type` dropdown, select
   :guilabel:`Stacked Column`.

   To render a :ref:`stacked column <stacked-ref-example>` chart, 
   |charts| creates a bar or column for each distinct value in the
   :guilabel:`category` :ref:`encoding channel <encoding-channels>`
   field.

---
title: Add the desired fields to the proper encoding channels.
ref: bar-chart-add-fields
level: 4
content: |

   a. Drag the ``storeLocation`` property from the :guilabel:`Fields`
      section of the Chart Builder view to the :guilabel:`X Axis`
      encoding channel. 
      
      This tells |charts| to create a column for each ``storeLocation`` value in the dataset.

      .. note::

         |charts| infers the data type of each field and
         provides symbols to easily determine these data types when
         building your chart. These symbols can help ensure your chart renders as
         expected by using proper data types for each
         :ref:`encoding channel <encoding-channels>`.
         For example, the calendar icon next to
         the ``saleDate`` field signifies that this field is a
         timestamp. 

   #. In the :guilabel:`Fields` section click the ``items`` field to
      expand the ``items`` object and view its properties.


   #. Drag the ``items.price`` field to the :guilabel:`Y Axis`
      encoding channel. 
      
      This tells |charts| to use the ``items.price`` field 
      for the chart's :manual:`aggregation </aggregation>`.

   #. In the :guilabel:`items` dropdown below :guilabel:`Array Reductions`, select
      :guilabel:`Unwind array`.

      Array reductions dictate how to process an array so
      its elements can be visualized. 
      The :manual:`unwind array </reference/operator/aggregation/unwind/>`
      option creates a new document for each element in the array,
      so each item's price is added to the total for that store.

   #. In the :guilabel:`Aggregate` dropdown, select :guilabel:`sum`.

      The :manual:`$sum aggregation operator </reference/operator/aggregation/sum/>` 
      adds the prices of all items per store together to
      display the chart.
---
title: Title your chart.
ref: bar-chart-add-title
level: 4
content: |

   a. Hover over your chart title above the center of the chart and
      click the pencil icon.

   #. Copy the following into the chart title input:

      .. code-block:: none

         Total Sales ($) by Store Location

   #. Click the check mark to save your title.

      Your chart should now look something like this:

      .. figure:: /images/charts/tutorial-stacked-bar-in-progress-2.png
         :figwidth: 750px
         :alt: Stacked Bar Chart Builder

      Notice that the stores generating the most revenue are the
      ``Denver`` and ``Seattle`` locations.
---
title: Click :guilabel:`Save and Close` at the top right of the chart
       builder view.
ref: bar-chart-save-and-close
level: 4
content: |

   You will be navigated back to your :guilabel:`Super Supply Store
   Orders` dashboard and it should look something like this:

   .. figure:: /images/charts/order-tutorial-dashboard-stage1.png
      :figwidth: 750px
      :alt: Order Tutorial Dashboard Stage 1
...
