.. _autocomplete-tutorial:

==================================
How to Use Autocomplete with |fts|
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This tutorial describes how to create an |fts| index that enables 
autocomplete queries. We will create an |fts| index for indexing 
values of the ``title`` field in the ``sample_mflix.movies`` 
collection. The index enables ``autocomplete`` operators to query the 
``title`` field. Then we will run a search for a sequence of 
characters against the ``title`` field for movie title suggestions that 
match the incomplete input string. It takes you through the following 
steps:

1. Set up an |fts| index with autocomplete data type for the 
   ``sample_mflix.movies`` collection.

#. Run |fts| queries against the ``title`` field in the 
   ``sample_mflix.movies`` collection for a sequence of characters that 
   appear in the movie titles.

Before you begin, ensure that your Atlas cluster meets the requirements 
described in the :ref:`Prerequisites <fts-tutorials-prereqs>`.

Define an Index with Autocomplete
---------------------------------

.. include:: /includes/fact-autocomplete-field-type.rst

In this section, you will create an |fts| index that indexes the 
``title`` field for autocompletion using the ``edgeGram`` tokenization 
strategy. 

.. include:: /includes/steps/fts-autocomplete-tutorial-create-index.rst

Run an Autocomplete Query
-------------------------

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the 
language of the example on this page.

----------

.. tabs-selector:: drivers

.. include:: /includes/fact-autocomplete-operator.rst

In this section, you will connect to your |service| cluster and the run 
the sample queries against the ``title`` field in the 
``sample_mflix.movies`` collection using the ``autocomplete`` operator. 
The sample queries use a sequence of characters to find movie titles 
that begin with the input character string. |fts| returns results that 
begin with the specified query string because the ``title`` field is 
indexed using the ``edgeGram`` tokenization strategy.

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. include:: /includes/steps/fts-autocomplete-tutorial-run-query-shell.rst

   .. tab::
      :tabid: compass

      .. include:: /includes/steps/fts-autocomplete-tutorial-run-query-compass.rst

   .. tab:: 
      :tabid: go

      .. include:: /includes/steps/fts-autocomplete-tutorial-run-query-go.rst

   .. tab:: 
      :tabid: java-sync 

      .. include:: /includes/steps/fts-autocomplete-tutorial-run-query-java.rst

   .. tab::
      :tabid: nodejs

      .. include:: /includes/steps/fts-autocomplete-tutorial-run-query-nodejs.rst

   .. tab::
      :tabid: python

      .. include:: /includes/steps/fts-autocomplete-tutorial-run-query-python.rst

In these results, the characters ``ger`` appear at the
beginning of a word in all the titles. |fts| returns ``Gèraldine``       
and ``Rece do gèry`` in the results because we set ``foldDiacritics`` 
to ``true``.

Continue Learning  
-----------------

Follow along with this video tutorial walk-through that demonstrates 
how to use the |fts| :ref:`autocomplete-ref` operator and JavaScript to 
build a frontend form element that suggests data to the user.

*Duration: 30 minutes*

.. video:: https://youtu.be/3IDlOI0D8-8
