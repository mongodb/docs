====================
``2dsphere`` Indexes
====================

.. default-domain:: mongodb

.. versionadded:: 2.4

A ``2dsphere`` index supports queries that calculate geometries on an
earth-like sphere. The index supports data stored as both
:term:`GeoJSON` objects and as legacy coordinate pairs. The index
supports legacy coordinate pairs by converting the data to the GeoJSON
``Point`` type.

The ``2dsphere`` index supports all MongoDB geospatial queries: queries
for inclusion, intersection and proximity.

A :ref:`compound <index-type-compound>` ``2dsphere`` index can reference
multiple location and non-location fields within a collectionâ€™s
documents. You can arrange the fields in any order.

The default datum for an earth-like sphere in MongoDB 2.4 is :term:`WGS84`.
Coordinate-axis order is **longitude, latitude**.

.. |first-geo-index| replace:: ``2dsphere``
.. |second-geo-index| replace:: :doc:`2d </core/2d>`
.. include:: /includes/fact-limitation-one-geo-index-per-collection.rst

.. important:: You cannot use a ``2dsphere`` index as a shard key when
   sharding a collection. However, you can create and maintain a
   geospatial index on a sharded collection by using a different field
   as the shard key.

.. _geospatial-indexes-store-geojson:

Store GeoJSON Objects
---------------------

.. versionadded:: 2.4

MongoDB supports the following GeoJSON objects:

- :term:`Point`

- :term:`LineString`

- :term:`Polygon`

In order to index GeoJSON data, you must store the data in a location
field that you name. The location field contains a subdocument with a
``type`` field specifying the GeoJSON object type and a ``coordinates``
field specifying the object's coordinates. Always store coordinates
``longitude, latitude`` order.

Use the following syntax:

.. code-block:: javascript

   { <location field> : { type : "<GeoJSON type>" ,
                          coordinates : <coordinates>
   } }

The following example stores a GeoJSON ``Point``:

.. code-block:: javascript

   { loc : { type : "Point" ,
             coordinates : [ 40, 5 ]
   } }

The following example stores a GeoJSON ``LineString``:

.. code-block:: javascript

   { loc : { type : "LineString" ,
             coordinates : [ [ 40 , 5 ] , [ 41 , 6 ] ]
   } }

:term:`Polygons <Polygon>` consist of an array of GeoJSON
``LinearRing`` coordinate arrays. These ``LinearRings`` are closed
``LineStrings``. Closed ``LineStrings`` have at least four coordinate
pairs and specify the same position as the first and last coordinates.

The following example stores a GeoJSON ``Polygon`` with an exterior
ring and no interior rings (or holes). Note the first and last
coordinate pair with the ``[ 0 , 0 ]`` coordinate:

.. code-block:: javascript

   { loc :
      { type : "Polygon" ,
        coordinates : [ [ [ 0 , 0 ] , [ 3 , 6 ] , [ 6 , 1 ] , [ 0 , 0 ] ] ]
   } }

For Polygons with multiple rings:

- The first described ring must be the exterior ring.

- The exterior ring cannot self-intersect.

- Any interior ring must be entirely contained by the outer ring.

- Interior rings cannot intersect or overlap each other. Interior
  rings can share an edge.

The following document represents a polygon with an interior ring as
GeoJSON:

.. code-block:: javascript

   { loc :
      { type : "Polygon" ,
        coordinates : [ [ [ 0 , 0 ] , [ 3 , 6 ] , [ 6 , 1 ] , [ 0 , 0 ] ],
                        [ [ 2 , 2 ] , [ 3 , 3 ] , [ 4 , 2 ] , [ 2 , 2 ] ] ]
   } }


.. _geospatial-indexes-create-2dsphere:

Create a ``2dsphere`` Index
---------------------------

To create a geospatial index for GeoJSON-formatted data, use the
:method:`~db.collection.ensureIndex()` method and set the
value of the location field for your collection to ``2dsphere``. A
``2dsphere`` index can be a :ref:`compound index <index-type-compound>`
and does not require the location field to be the first field indexed.

To create the index use the following syntax:

.. code-block:: javascript

   db.points.ensureIndex( { <location field> : "2dsphere" } )

The following are four example commands for creating a ``2dsphere`` index:

.. code-block:: javascript

   db.points.ensureIndex( { loc : "2dsphere" } )
   db.points.ensureIndex( { loc : "2dsphere" , type : 1 } )
   db.points.ensureIndex( { rating : 1 , loc : "2dsphere" } )
   db.points.ensureIndex( { loc : "2dsphere" , rating : 1 , category : -1 } )

The first example creates a simple geospatial index on the location
field ``loc``. The second example creates a compound index where the
second field contains non-location data. The third example creates an
index where the location field is not the primary field: the location
field does not have to be the first field in a ``2dsphere`` index. The
fourth example creates a compound index with three fields. You can
include as many fields as you like in a ``2dsphere`` index.

.. _geospatial-indexes-query-2dsphere:

Query a ``2dsphere`` Index
--------------------------

The following sections describe queries supported by the ``2dsphere`` index.
For an overview of recommended geospatial queries, see
:ref:`geospatial-query-compatibility-chart`.

GeoJSON Objects Bounded by a Polygon
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :operator:`$geoWithin` operator queries for location data found
within a GeoJSON polygon. Your location
data must be stored in GeoJSON format. Use the following syntax:

.. code-block:: javascript

   db.<collection>.find( { <location field> :
                            { $geoWithin :
                              { $geometry :
                                { type : "Polygon" ,
                                  coordinates : [ <coordinates> ]
                         } } } } )

The following example selects all points and shapes that
exist entirely within a GeoJSON polygon:

.. code-block:: javascript

   db.places.find( { loc :
                     { $geoWithin :
                       { $geometry :
                         { type : "Polygon" ,
                           coordinates : [ [
                                             [ 0 , 0 ] ,
                                             [ 3 , 6 ] ,
                                             [ 6 , 1 ] ,
                                             [ 0 , 0 ]
                                           ] ]
                   } } } } )

Intersections of GeoJSON Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 2.4

The :operator:`$geoIntersects` operator queries for locations that
intersect a specified GeoJSON object. A location intersects the object
if the intersection is non-empty. This includes documents that have a
shared edge.

The :operator:`$geoIntersects` operator uses the following syntax:

.. code-block:: javascript

   db.<collection>.find( { <location field> :
                            { $geoIntersects :
                              { $geometry :
                                { type : "<GeoJSON object type>" ,
                                  coordinates : [ <coordinates> ]
                         } } } } )

The following example uses :operator:`$geoIntersects` to select all
indexed points and shapes that intersect with the polygon defined by the
``coordinates`` array.

.. code-block:: javascript

   db.places.find( { loc :
                     { $geoIntersects :
                       { $geometry :
                         { type : "Polygon" ,
                           coordinates: [ [
                                            [ 0 , 0 ] ,
                                            [ 3 , 6 ] ,
                                            [ 6 , 1 ] ,
                                            [ 0 , 0 ]
                                          ] ]
                   } } } } )

Proximity to a GeoJSON Point
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Proximity queries return the points closest to the defined point and
sorts the results by distance. A proximity query on GeoJSON data
requires a ``2dsphere`` index.

To query for proximity to a GeoJSON point, use either the
:operator:`$near` operator or :dbcommand:`geoNear` command. Distance
is in meters.

The :operator:`$near` uses the following syntax:

.. code-block:: javascript

   db.<collection>.find( { <location field> :
                            { $near :
                              { $geometry :
                                 { type : "Point" ,
                                   coordinates : [ <longitude> , <latitude> ] } ,
                                $maxDistance : <distance in meters>
                         } } } )

For examples, see :operator:`$near`.

The :dbcommand:`geoNear` command uses the following syntax:

.. code-block:: javascript

   db.runCommand( { geoNear: <collection>, near: [ <x> , <y> ] } )

The :dbcommand:`geoNear` command offers more options and returns more
information than does the :operator:`$near` operator. To run the
command, see :dbcommand:`geoNear`.

Points within a Circle Defined on a Sphere
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To select all grid coordinates in a "spherical cap" on a sphere, use
:operator:`$geoWithin` with the :operator:`$centerSphere` operator.
Specify an array that contains:

- The grid coordinates of the circle's center point

- The circle's radius measured in radians. To calculate radians, see
  :doc:`/tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes`.

Use the following syntax:

.. code-block:: javascript

   db.<collection>.find( { <location field> :
                            { $geoWithin :
                              { $centerSphere :
                                 [ [ <x>, <y> ] , <radius> ] }
                         } } )

The following example queries grid coordinates and returns all
documents within a 10 mile radius of longitude ``88 W`` and latitude
``30 N``. The example converts the distance, 10 miles, to radians by
dividing by the approximate radius of the earth, 3959 miles:

.. code-block:: javascript

   db.places.find( { loc :
                     { $geoWithin :
                       { $centerSphere :
                          [ [ 88 , 30 ] , 10 / 3959 ]
                   } } } )
