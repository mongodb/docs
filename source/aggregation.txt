.. _csharp-aggregation:

======================
Aggregation Operations
======================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: dotnet, code example, transform, pipeline

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :maxdepth: 1

   Pipeline Stages </aggregation/stages>
   LINQ </aggregation/linq>

Overview
--------

In this guide, you can learn how to use the {+driver-long+} to perform
**aggregation operations**.

Aggregation operations process data in your MongoDB collections and
return computed results. The MongoDB Aggregation framework is modeled on the 
concept of data processing pipelines. Documents enter a pipeline comprised of one or
more stages, and this pipeline transforms the documents into an aggregated result.

To learn more about the aggregation stages supported by the {+driver-short+}, see
:ref:`Aggregation Stages <csharp-aggregation-stages>`.

.. sharedinclude:: dbx/agg-tutorials-manual-tip.rst

   .. replacement:: language

      :guilabel:`{+language+}`

Analogy
~~~~~~~

Aggregation operations function similarly to car factories with assembly
lines. The assembly lines have stations with specialized tools to
perform specific tasks. For example, when building a car, the assembly
line begins with the frame. Then, as the car frame moves through the
assembly line, each station assembles a separate part. The result is a
transformed final product, the finished car.

The assembly line represents the *aggregation pipeline*, the individual
stations represent the *aggregation stages*, the specialized tools
represent the *expression operators*, and the finished product
represents the *aggregated result*.

Compare Aggregation and Find Operations
---------------------------------------

The following table lists the different tasks you can perform with find
operations, compared to what you can achieve with aggregation
operations. The aggregation framework provides expanded functionality
that allows you to transform and manipulate your data.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Find Operations
     - Aggregation Operations

   * - | Select *certain* documents to return
       | Select *which* fields to return
       | Sort the results
       | Limit the results
       | Count the results
     - | Select *certain* documents to return
       | Select *which* fields to return
       | Sort the results
       | Limit the results
       | Count the results
       | Group the results
       | Rename fields
       | Compute new fields
       | Summarize data
       | Connect and merge data sets

Server Limitations
------------------

Consider the following :manual:`limitations </core/aggregation-pipeline-limits/>` when 
performing aggregation operations:

- Returned documents must not violate the :manual:`BSON document size limit </reference/limits/#mongodb-limit-BSON-Document-Size>`
  of 16 megabytes.

- Pipeline stages have a memory limit of 100 megabytes by default. If required, you can exceed this limit by setting
  the `AllowDiskUse <{+new-api-root+}/MongoDB.Driver/MongoDB.Driver.AggregateOptions.AllowDiskUse.html#MongoDB_Driver_AggregateOptions_AllowDiskUse>`__
  property of the ``AggregateOptions`` object that you pass to the ``Aggregate()`` method.

Troubleshooting
---------------

.. include:: /includes/troubleshooting/unsupported-filter-expression.rst

Additional Information
----------------------

To view a full list of expression operators, see 
:manual:`Aggregation Operators </reference/operator/aggregation/>`.

To learn about explaining MongoDB aggregation operations, see
:manual:`Explain Results </reference/explain-results/>` and
:manual:`Query Plans </core/query-plans/>`.
