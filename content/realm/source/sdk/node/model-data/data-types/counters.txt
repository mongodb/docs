.. meta::
   :robots: noindex, nosnippet

.. _node-data-types-counters:
.. _javascript-sdk-data-types-counters:

======================
Counters - Node.js SDK
======================

.. meta:: 
  :description: Learn how to implement and update counters in the Atlas Device SDK for Node.js.
  :keywords: code example

.. facet::
  :name: programming_language
  :values: javascript/typescript

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 12.10.0

Atlas Device SDK for Node.js offers a :js-sdk:`Counter <classes/Realm.Types.Counter.html>` class
the you can use as a logical counter when working with synchronized databases. Traditionally,
you would store a counter value and manually read, increment, and set it. However, if multiple clients
attempt to update the counter, it could result in an inaccurate underlying value across clients.

Consider a scenario where a Realm object has a ``count`` property of type ``int``. Devices A
and B both read the value as ``0``, then increment the count by adding ``1`` to the read value.
Instead of reflecting both devices' increments and converging to ``2``, the underlying value is
only ``1``.

The ``Counter`` class makes it possible to sync these updates so the value converges to
the same underlying value across all clients.

The SDK's ``counter`` is a presentation data type with an underlying type of ``int``. This
means that no migration is required when changing an ``int`` type to a ``counter``.

Counters cannot be used as:

- :doc:`Mixed values </sdk/node/model-data/data-types/mixed>`
- :ref:`Primary keys <node-primary-keys>`
- :ref:`Elements in a collection <node-data-types-collections>`

Define a Counter Property
-------------------------

To use the ``Counter`` class, declare a property in your :js-sdk:`Realm Object<classes/Realm.Object.html>`
as type ``Counter``. 

You can optionally declare this property as nullable by making it optional and passing both 
``Counter`` and ``null`` as types. With a nullable counter, you can set the counter property
within your Realm Object to ``null`` as needed.

The property is initialized by using either:

- Object notation

  - ``{ type: "int", presentation: "counter" }``
  - ``{ type: "int", presentation: "counter", optional: true }``

- Shorthand

  - ``"counter"``
  - ``"counter?"``

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. include:: /examples/generated/node/v12/formatted/models.snippet.declare-counter-schema.ts.rst
    
    .. tab::
      :tabid: javascript

      .. include:: /examples/generated/node/v12/formatted/models.snippet.declare-counter-schema.js.rst

Create and Update a Counter
---------------------------

To initialize a counter, create your object using the ``realm.create()`` method. Pass in your
:ref:`Realm Object Schema <node-define-a-realm-object-schema>` and initial counter value, as
well as initial values for any other properties the object has.

.. include:: /examples/generated/node/v12/formatted/data-types.test.snippet.initialize-counter.ts.rst

You can then use the following methods to modify the counter value:

- ``increment()`` and ``decrement()`` update the underlying value by a specified number.
- ``set()`` reassigns the counter to a specified value.

.. include:: /examples/generated/node/v12/formatted/data-types.test.snippet.update-counter.ts.rst

.. warning:: Counter Resets

   Use caution when using ``set()``, as it overwrites any prior calls to ``increment()`` and
   ``decrement()``. Depending on the order of operations, this can result in the counter
   converging on a different value. To avoid inaccurate counter values across clients, we
   recommend that you avoid mixing ``set()`` with ``increment()`` and ``decrement()``.

To update a nullable counter, either *to* or *from* a ``null`` value, you must use
``realm.create()`` with an :js-sdk:`UpdateMode <enums/Realm.UpdateMode.html#All>`
specified. Instead of updating the underlying counter value, this sets the counter
property either to null or to a new counter.

``UpdateMode`` updates any existing Counter object with a matching primary key, according to
the specified mode:

- ``UpdateMode.All`` updates all properties provided.
- ``UpdateMode.Modified`` updates only modified properties.

.. include:: /examples/generated/node/v12/formatted/data-types.test.snippet.null-updating.ts.rst

Query Counter Values
--------------------

You can query counter properties like other property types. However, to query by the 
underlying counter value, you must pass the ``counter.value`` in a :ref:`parameterized
query<rql-parameterized-queries>`. In the following example, we want to find all objects with a
counter value greater than or equal to that of the specified counter.

.. include:: /examples/generated/node/v12/formatted/data-types.test.snippet.filtering-with-counter.ts.rst

For more information on querying with the SDK, refer to 
:ref:`Realm Query Language <realm-query-language>`. 
