:template: product-landing
:hidefeedback: header
:noprevnext:

.. meta::
   :robots: noindex, nosnippet

.. _web-intro:

============================
Atlas Device SDK for the Web
============================

.. meta::
   :description: The Atlas Device SDK for the Web lets browser-based applications access data stored in Atlas and interact with App Services.

.. toctree::
   :titlesonly:
   
   Atlas App Services </web/atlas-app-services>
   User Management </web/users>
   Query MongoDB </web/mongodb>
   Apollo GraphQL Client (React) </web/graphql-apollo-react>
   Next.js Integration Guide </web/nextjs>
   SDK Telemetry </web/telemetry>
   API Reference </web/api-reference>
   Release Notes <https://github.com/realm/realm-js/releases>

The Atlas Device SDK for the Web lets browser-based applications access
data stored in Atlas and interact with App Services services like
Functions and authentication. The Web SDK supports both JavaScript and
TypeScript.

Web apps built with the SDK can query Atlas using the following methods:

- The standard MongoDB query API with the :ref:`MongoDB client <web-query-mongodb>`
- :ref:`Atlas Device Sync <web-sync>`

Unlike the other SDKs, the Web SDK only supports creating an in-memory 
database, not one persisted to disk.

.. kicker:: Learning Paths

Get Started with the Web SDK
----------------------------

.. card-group::
   :columns: 2
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/web/quickstart/
      :icon: atlas_functions
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with the Web SDK.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: realm_mobile
      :icon-alt: Atlas Device SDK Mobile Icon

      Learn by example through dissecting a working React app that
      uses the Web SDK and Atlas GraphQL API.

.. kicker:: What You Can Do

Develop Apps with the SDK
-------------------------

Use the Web SDK with Atlas App Services to query MongoDB directly,
query a GraphQL API, invoke serverless functions, manage user authentication,
and more.

.. tabs::

   .. tab:: Query MongoDB
      :tabid: query-mongodb

      .. procedure::

         .. step:: Configure Atlas App Services

            You can use the Web SDK to query MongoDB Atlas data directly
            from the browser. Perform CRUD, aggregation, and listen for database changes.

            First, you must :ref:`create an App Services App <create-app-ui>`,
            set up :ref:`database rules <rules>`, and :ref:`enable user authentication
            <users-and-authentication>`.

         .. step:: Connect to an Atlas App Services App

            To access your App Services App from the browser, :ref:`initialize the App client
            <web-init-appclient>`.

         .. step:: Authenticate a User

            To authenticate a user, usee one of the :ref:`App Services authentication providers <web-authenticate>`.
            App Services includes custom JWT, Facebook, Google, Apple,
            anonymous, and built-in email/password authentication providers.

         .. step:: Query MongoDB

            Query MongoDB directly from the browser using your authenticated user.
            The user can only access data that they're authorized to.

            For more information, refer to :ref:`Query MongoDB <web-query-mongodb>`.

      .. image:: /images/illustrations/2024_branding/Technical_SOFTWARE_Application_Spot.png
         :alt: Query MongoDB Illustration

   .. tab:: Atlas GraphQL API
      :tabid: graphql-api

      .. procedure::

         .. step:: Configure Atlas GraphQL API

            The :ref:`Atlas GraphQL API <graphql-api>` automatically generates
            a hosted endpoint with GraphQL queries and mutations based on JSON schemas
            for the documents in your database.

            Configure App Services Authentication with data access rules to
            control which users have access to what data.
            Configure the GraphQL API in Atlas App Services.

         .. step:: Connect to Atlas App Services

            To access your App Services App from the browser, :ref:`initialize the App client
            <web-init-appclient>`.

         .. step:: Authenticate a User

            To authenticate a user, usee one of the :ref:`App Services authentication providers <web-authenticate>`.
            App Services includes custom JWT, Facebook, Google, Apple,
            anonymous, and built-in email/password authentication providers.

         .. step:: Query the GraphQL API

            Query the GraphQL API using a GraphQL client from the browser.
            Authenticate requests with user credentials.

            Learn how to :ref:`query the GraphQL API with the Apollo
            Client <graphql-apollo-react>`.

      .. image:: /images/illustrations/2024_branding/Technical_ACTION_ConnectSettings_Spot.png
         :alt: API Integration Image

   .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         You can :ref:`call serverless Functions <web-call-a-function>`
         from your client application that run in an App Services backend.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication
         providers <web-authenticate>`. Use the authenticated user to
         access App Services.

      .. image:: /images/illustrations/2024_branding/Technical_ACTION_WrenchSettings_Spot.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: JavaScript API Reference
      :cta: JavaScript API Reference
      :url: https://www.mongodb.com/docs/realm/web/api-reference/
      :icon: general_content_tutorial
      :icon-alt: Reference Icon

      Explore reference docs for the JavaScript SDKs.

   .. card::
      :headline: Quick Start with React
      :cta: Add Realm to React project
      :url: https://www.mongodb.com/docs/realm/web/react-web-quickstart/
      :icon: /images/icons/react-logo-icon.png
      :icon-alt: React Logo Icon

      Learn how to add the Web SDK to your React application.

   .. card::
      :headline: Next.js Integration Guide
      :cta: Integrate with Next.js
      :url: https://www.mongodb.com/docs/realm/web/nextjs
      :icon: /images/icons/nextjs-logo-icon.png
      :icon-dark: /images/icons/nextjs-logo-icon-dark.svg
      :icon-alt: Next.js Logo Icon

      Learn all the ways that you can use the Web SDK with your Next.js
      application.

Example Projects
----------------

Explore engineering and expert-provided example projects to learn best 
practices and common development patterns using the Web SDK. Check out the 
:ref:`<realm-example-projects-table>` page for more sample apps.

.. card-group::
   :columns: 3
   :style: extra-compact
   
   .. card::
      :headline: Offline Login and Database Access
      :cta: Example project
      :url: https://github.com/realm/realm-js/tree/nh/wasm/emscripten_target/examples/example-react-task
      :icon: realm_offline
      :icon-alt: Atlas Device SDK Offline Icon

      Log in a Device Sync user and open a synced database offline.

   .. card::
      :headline: User's Online State
      :cta: Example project
      :url: https://github.com/realm/realm-kotlin-samples/tree/main/AppServicesUsageSamples/apps/presence-detection
      :icon: general_content_users
      :icon-alt: Users Icon

      Detect connectivity and activity of users and devices. 
   