:noprevnext:

.. _gst-run-queries:

====================================================
Run Queries Against Your {+FDI+} 
====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

*Estimated completion time: 5 minutes*

You can run operations using the MongoDB Query Language (MQL) which
includes most, but not all standard server commands. To learn which MQL 
operations are supported, see the :ref:`MQL Support 
<adf-mql-support>` documentation. 

.. note:: 

   The {+adf+} sample datasets are read-only.

Prerequisites
-------------

To complete this part of the tutorial, you will need to have completed:

- **Part 1:** :doc:`/data-federation/tutorial/deploy`
- **Part 2:** :ref:`config-connection`
- **Part 3:** :doc:`/data-federation/tutorial/connect`

You must be :ref:`connected <fdi-connect>` to your {+fdi+} with the
MongoDB Shell before running the following queries. 

Queries
-------

These example queries differ depending on whether you used the :ref:`Feed Downstream Systems <feed-downstream-systems>`, :ref:`Explore with Sample Data <explore-sample-data>`, or the :ref:`Query Data Across Clusters <query-across-clusters>` wizard to deploy your {+fdi+}. Click the appropriate tab for the corresponding examples.

.. tabs:: 

   .. tab:: Downstream 
      :tabid: downstream

      If you have not done so already, complete the following to run the following queries successfully: 
      
      - :ref:`Load sample data <sample-data>` into the |service| {+cluster+} you're using as a data source for your {+fdi+}.
      - :ref:`Configure the downstream system <feed-downstream-systems>` to extract data from you |service| {+cluster+} into your |aws| |s3| bucket.

      .. tabs:: 

         .. tab:: AirBnb 
            :tabid: airbnb

            Before running the queries, switch to the ``sample_airbnb`` database: 

            .. code-block:: sh 

               use sample_airbnb

            .. include:: /includes/data-federation/query-examples-airbnb.rst

         .. tab:: Analytics 
            :tabid: analytics

            Before running the queries, switch to the ``sample_analytics`` database: 

            .. code-block:: sh 

               use sample_analytics
            
            .. include:: /includes/data-federation/query-examples-analytics.rst

         .. tab:: Mflix 
            :tabid: mflix
 
            Before running the queries, switch to the ``sample_mflix`` database: 

            .. code-block:: sh 

               use sample_mflix

            .. include:: /includes/data-federation/query-examples-mflix.rst 

         .. tab:: Training 
            :tabid: training

            Before running the queries, switch to the ``sample_training`` database: 

            .. code-block:: sh

               use sample_training

            Find all states with a population greater than 10 million.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.zips.aggregate([{$group: { _id: "$state", totalPop: { $sum: "$pop" }}}, {$match: { totalPop: { $gte: 10*1000*1000 }}}])

               .. output:: 
                  :language: json
                  :linenos:

                  { "_id" : "NY", "totalPop" : 17990455 }
                  { "_id" : "FL", "totalPop" : 12937926 }
                  { "_id" : "PA", "totalPop" : 11881643 }
                  { "_id" : "CA", "totalPop" : 29760021 }
                  { "_id" : "TX", "totalPop" : 16986510 }
                  { "_id" : "IL", "totalPop" : 11430602 }
                  { "_id" : "OH", "totalPop" : 10847115 }

            Find all trips taken by customers that were less than 70 minutes.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:
               
                  db.trips.find({"tripduration": { "$lte" : 70 }, "usertype": { "$eq": "Customer" }})

               .. output:: 
                  :language: json
                  :linenos:

                  {
	                  "_id" : ObjectId("572bb8232b288919b68af7cd"),
	                  "tripduration" : 66,
	                  "start station id" : 460,
	                  "start station name" : "S 4 St & Wythe Ave",
	                  "end station id" : 460,
	                  "end station name" : "S 4 St & Wythe Ave",
	                  "bikeid" : 23779,
	                  "usertype" : "Customer",
	                  "birth year" : "",
	                  "start station location" : {
		                  "type" : "Point",
		                  "coordinates" : [
			                  -73.96590294,
			                  40.71285887
		                  ]
	                  },
	                  "end station location" : {
		                  "type" : "Point",
		                  "coordinates" : [
			                  -73.96590294,
			                  40.71285887
		                  ]
	                  },
	                  "start time" : ISODate("2016-01-02T11:49:11Z"),
	                  "stop time" : ISODate("2016-01-02T11:50:18Z")
                  }

   .. tab:: Sample Data 
      :tabid: sample

      Click and run the queries in the appropriate tabs for the sample datasets included in your {+fdi+}.

      .. tabs:: 

         .. tab:: AirBnb 
            :tabid: airbnb

            Before running the queries, switch to the ``airbnb`` database: 

            .. code-block:: sh 

               use airbnb

            .. include:: /includes/data-federation/query-examples-airbnb.rst
   
         .. tab:: Analytics 
            :tabid: analytics

            Before running the queries, switch to the ``analytics`` database: 

            .. code-block:: sh 

               use analytics
            
            .. include:: /includes/data-federation/query-examples-analytics.rst
            
         .. tab:: Mflix 
            :tabid: mflix
 
            Before running the queries, switch to the ``mflix`` database: 

            .. code-block:: sh 

               use mflix

            .. include:: /includes/data-federation/query-examples-mflix.rst

         .. tab:: Training 
            :tabid: training

            Before running the queries, switch to the ``training`` database: 

            .. code-block:: sh

               use training

            Find all trips further than ``5`` that cost ``50`` or less.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.trips.find({"fare_amount": { "$lte" : "50" }, "trip_distance": {"$gte": "5" }}).count()

               .. output:: 
                  :language: json
                  :linenos:

                  96215

            Find how many trips included four or more passengers.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.trips.find({"passenger_count": { "$gte" : 4 }}).count()

               .. output:: 
                  :language: json
                  :linenos:

                  92846

   .. tab:: Across Clusters 
      :tabid: across

      If you have not done so already, :ref:`load sample data <sample-data>` into the |service| {+clusters+} you're using as data sources for your {+fdi+} before running these queries.

      .. tabs::

         .. tab:: AirBnb 
            :tabid: airbnb

            Before running the queries, switch to the ``VirtualDatabase`` database: 

            .. code-block:: sh 

               use VirtualDatabase

            Find the number of AirBnB offerings with ``3`` bedrooms and a high review score:

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.VirtualCollection.aggregate([{$match: {"bedrooms" : 3, "review_scores.review_scores_rating": {$gt: 79}}}, {$count: "numProperties"}])
               
               .. output:: 
                  :language: json
                  :linenos:

                  { 
                     "numProperties" : 295 
                  }

            Find properties with ``3`` bedrooms and include only the ``name`` and ``bedrooms`` fields in the results. Sort the returned 
            documents by customer review rating. Limit the number of 
            documents returned to ``5``:

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:
               
                  db.VirtualCollection.find({"bedrooms": 3}, {"name": 1, "bedrooms": 1}).sort({review_scores_rating: -1}).limit(5)

               .. output:: 
                  :language: json
                  :linenos:

                  [
                   {
                      _id: '20045679',
                      name: 'House Near Espinho/Santa Maria Feira',
                      bedrooms: Long("3")
                   },
                   {
                     _id: '19760228',
                     name: 'Apartment Salva - 3 bedroom in Poble Sec',
                     bedrooms: Long("3")
                   },
                   {
                     _id: '19768051',
                     name: 'Ultra Modern Pool House Maroubra',
                     bedrooms: Long("3")
                   },
                   {
                     _id: '19877706',
                     name: 'Big 3 Bedroom Garden Level Apartment Near Subway',
                     bedrooms: Long("3")
                   },
                   {
                     _id: '6291063',
                     name: 'Beautiful Tropical Oasis near beach in Kailua',
                     bedrooms: Long("3")
                   }
                  ]

         .. tab:: Analytics 
            :tabid: analytics

            Before running the queries, switch to the ``VirtualDatabase`` database: 

            .. code-block:: sh 

               use VirtualDatabase
            
            Find users who have purchased ``Commodity`` with a limit of 
            ``10000``. Limit the number of documents returned to ``3``: 

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.VirtualCollection.find({"limit": {$eq: 10000}, "products": "Commodity"}).limit(3)

               .. output:: 
                  :language: json
                  :linenos:

                  {
	                 "_id" : ObjectId("5ca4bbc7a2dd94ee581623a3"),
	                 "account_id" : 775273,
	                 "limit" : 10000,
	                 "products" : [
		                 "Brokerage",
		                 "Commodity",
		                 "InvestmentStock"
	                 ]
                  }
                  {
	                 "_id" : ObjectId("5ca4bbc7a2dd94ee581623a9"),
	                 "account_id" : 324287,
	                 "limit" : 10000,
	                 "products" : [
		                 "Commodity",
		                 "CurrencyService",
		                 "Derivatives",
		                 "InvestmentStock"
	                 ]
                  }
                  {
	                 "_id" : ObjectId("5ca4bbc7a2dd94ee581623b2"),
	                 "account_id" : 209363,
	                 "limit" : 10000,
	                 "products" : [
		                 "Brokerage",
		                 "InvestmentStock",
		                 "Commodity",
		                 "Derivatives"
	                 ]
                  }

            Find customers whose birthdate is before ``1990-01-01`` and limit the number of documents returned to ``3``: 

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.VirtualCollection.find({"birthdate": {$lt: ISODate ("1990-01-01T22:15:34.000+00:00")}}, {"name": 1, "birthdate": 1, "email": 1}).limit(3)

               .. output:: 
                  :language: json
                  :linenos:

                  {
	                 "_id" : ObjectId("5ca4bbcea2dd94ee58162a6a"),
	                 "name" : "Katherine David",
	                 "birthdate" : ISODate("1988-06-20T22:15:34Z"),
	                 "email" : "timothy78@hotmail.com"
                  }
                  {
	                 "_id" : ObjectId("5ca4bbcea2dd94ee58162a6c"),
	                 "name" : "Brad Cardenas",
	                 "birthdate" : ISODate("1977-05-06T21:57:35Z"),
	                 "email" : "dustin37@yahoo.com"
                  }
                  {
	                 "_id" : ObjectId("5ca4bbcea2dd94ee58162a75"),
	                 "name" : "John Vega",
	                 "birthdate" : ISODate("1983-09-21T03:22:18Z"),
	                 "email" : "ryanpena@yahoo.com"
                  }
 
            Find transaction details for user whose account ID is ``557378`` 
            and use the :pipeline:`$sort` stage to sort on the 
            ``transactions.symbol`` field:

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.VirtualCollection.aggregate([{$match: {"account_id": 557378}}, {$sort: {"transactions.symbol": -1}}])

               .. output:: 
                  :language: json
                  :linenos:

                  {
	                 "_id" : ObjectId("5ca4bbc1a2dd94ee58161cb3"),
	                 "account_id" : 557378,
	                 "transaction_count" : 56,
	                 "bucket_start_date" : ISODate("1990-06-11T00:00:00Z"),
	                 "bucket_end_date" : ISODate("2016-11-06T00:00:00Z"),
	                 "transactions" : [
		            {
			              "date" : ISODate("2006-10-06T00:00:00Z"),
			              "amount" : 2561,
			              "transaction_code" : "sell",
			              "symbol" : "adbe",
			              "price" : "38.236619210617988073863671161234378814697265625",
			              "total" : "97923.98179839266745716486184"
		            },
		            {
			              "date" : ISODate("2000-06-19T00:00:00Z"),
			              "amount" : 9153,
			              "transaction_code" : "sell",
			              "symbol" : "adbe",
			              "price" : "31.12236744839008650842515635304152965545654296875",
			              "total" : "284863.0292551144618116154561"
		            },
		            {
			              "date" : ISODate("2013-11-06T00:00:00Z"),
			              "amount" : 18,
			              "transaction_code" : "buy",
			              "symbol" : "amzn",
			              "price" : "356.639066345529272439307533204555511474609375",
			              "total" : "6419.503194219526903907535598"
	               },
                  ...

         .. tab:: Mflix 
            :tabid: mflix
 
            Before running the queries, switch to the ``VirtualDatabase`` database: 

            .. code-block:: sh 

               use VirtualDatabase

            Find all movies between the years 2010 and 2015 and include only 
            the ``_id``, ``title``, and ``year`` fields in the results. Limit the number of documents returned to ``5``. 
      
            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos: 

                  db.VirtualCollection.find({"type": "movie", "year": {$gt: 2010, $lt: 2015}}, {"title": 1, "year": 1}).limit(5)

               .. output:: 
                  :language: json
                  :linenos:

                  {
	                 "_id" : ObjectId("573a13b8f29313caabd4c8c5"),
	                 "year" : 2011,
	                 "title" : "Thor"
                  }
                  {
	                 "_id" : ObjectId("573a13b0f29313caabd34a3e"),
	                 "year" : 2011,
	                 "title" : "Cowboys & Aliens"
                  }
                  {
	                 "_id" : ObjectId("573a13b8f29313caabd4ca3f"),
	                 "title" : "Red Dog",
	                 "year" : 2011
                  }
                  {
	                 "_id" : ObjectId("573a13b8f29313caabd4d58c"),
	                 "title" : "Jack and Jill",
	                 "year" : 2011
                  }
                  {
	                 "_id" : ObjectId("573a13b8f29313caabd4d5b5"),
	                 "year" : 2011,
	                 "title" : "Take Me Home Tonight"
                  }

            Find the sessions details for user specified by ID.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos: 

                  db.VirtualCollection.find({"user_id": "t3qulfeem@kwiv5.6ur"})

               .. output:: 
                  :language: json
                  :linenos:

                  { 
                     "_id" : ObjectId("5a97f9c91c807bb9c6eb5fb4"), 
                     "user_id" : "t3qulfeem@kwiv5.6ur", 
                     "jwt" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NieyJpYXQiOjE1MTk5MDkzMjEsIm5iZiI6MTUxOTk           wOTMyMSwianRpIjoiNmJlZDAwMWYtNTFiYi00NzVhLTgAtMDcwNGE5Mjk0MWZlIiwiZXhwIjox           NTE5OTEwMjIxLCJpZGVudGl0eSI6eyJlbWFpbCI6InQzcXVsZmVlbd2l2NS42dXIiLCJuYW1lI           joiM2lveHJtZnF4IiwicGFzc3dvcmQiOm51bGx9LCJmcmVzaCI6ZmFsc2UsInRUiOiJhY2Nlc3           MiLCJ1c2VyX2NsYWltcyI6eyJ1c2VyIjp7ImVtYWlsIjoidDNxdWxmZWVtQGt3aXY1LjZ1cIm5           hbWUiOiIzaW94cm1mcXgiLCJwYXNzd29yZCI6bnVsbH19ejtr_NyZyBronWMKuE0RFTjWej--T           0zGrdc_iymGtVs" 
                  }

            Find the theater specified by its ``id`` and ``zipcode``.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:
               
                  db.VirtualCollection.findOne({$and: [{"_id": ObjectId("59a47286cfa9a3a73e51e763")}, {"location.address.zipcode": "93933"}]})

               .. output:: 
                  :language: json
                  :linenos:

                  {
	                "_id" : ObjectId("59a47286cfa9a3a73e51e763"),
	                "theaterId" : 1061,
	                "location" : {
		                "address" : {
			                "street1" : "101 General Stillwell Dr",
			                "city" : "Marina",
			                "state" : "CA",
			                "zipcode" : "93933"
		                },
		                "geo" : {
			                "type" : "Point",
			                "coordinates" : [
				                -121.81196,
				                36.66708
			                ]
		              }
	                }
                  }

            Find all users whose last name is ``Lannister`` and limit the 
            number of documents returned to ``5``.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos: 
      
                  db.VirtualCollection.find({name: /Lannister/ }).limit(5)

               .. output:: 
                  :language: json
                  :linenos:

                  {
	                "_id" : ObjectId("59b99db5cfa9a34dcd7885b8"),
	                "name" : "Jaime Lannister",
	                "email" : "nikolaj_coster-waldau@gameofthron.es",
	                "password" : "$2b$12$6vz7wiwO.EI5Rilvq1zUc./9480gb1uPtXcahDxIadgyC3PS8XCUK"
                  }
                  {
	                "_id" : ObjectId("59b99db6cfa9a34dcd7885ba"),
	                "name" : "Cersei Lannister",
	                "email" : "lena_headey@gameofthron.es",
	                "password" : "$2b$12$FExjgr7CLhNCa.oUsB9seub8mqcHzkJCFZ8heMc8CeIKOZfeTKP8m"
                  }
                  {
	                "_id" : ObjectId("59b99dbdcfa9a34dcd7885c7"),
	                "name" : "Tyrion Lannister",
	                "email" : "peter_dinklage@gameofthron.es",
	                "password" : "$2b$12$xtHwQNXYlQzP2REobUDlzuQimjzBlXrTx1GnwP.xkfULeuuUpRxa2"
                  }
                  {
	                "_id" : ObjectId("59b99dc2cfa9a34dcd7885d2"),
	                "name" : "Tywin Lannister",
	                "email" : "charles_dance@gameofthron.es",
	                "password" : "$2b$12$/i04T5yEJvmsBhF0Jd.kJOk3ZhRzezbTU7ASEM5o43Xxsa4o6IgEy"
                  }
                  {
	                "_id" : ObjectId("59b99dcecfa9a34dcd7885ea"),
	                "name" : "Lancel Lannister",
	                "email" : "eugene_simon@gameofthron.es",
	                "password" : "$2b$12$mNWiHoOqOWQser3s6ezqZeTU5vhskTq.K7xkeTA2P.CIfoWsHvonO"
                  }

         .. tab:: Training 
            :tabid: training

            Before running the queries, switch to the ``VirtualDatabase`` database: 

            .. code-block:: sh 

               use VirtualDatabase

            Find all states with a total population greater than 10 million.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.VirtualCollection.aggregate([{$group: { _id: "$state", totalPop: {$sum: "$pop" }}}, {$match: {totalPop: {$gte: 10*1000*1000 }}}])

               .. output:: 
                  :language: json
                  :linenos:

                  { "_id" : "NY", "totalPop" : 17990455 }
                  { "_id" : "FL", "totalPop" : 12937926 }
                  { "_id" : "PA", "totalPop" : 11881643 }
                  { "_id" : "CA", "totalPop" : 29760021 }
                  { "_id" : "TX", "totalPop" : 16986510 }
                  { "_id" : "IL", "totalPop" : 11430602 }
                  { "_id" : "OH", "totalPop" : 10847115 }                  

            Find all trips taken by customers that were less than 70 minutes.

            .. io-code-block::
               :copyable: true
      
               .. input:: 
                  :language:  json
                  :linenos:

                  db.VirtualCollection.find({"tripduration": { "$lte" : 70 }, "usertype": { "$eq": "Customer" }})

               .. output:: 
                  :language: json
                  :linenos:

                  {
	                  "_id" : ObjectId("572bb8232b288919b68af7cd"),
	                  "tripduration" : 66,
	                  "start station id" : 460,
	                  "start station name" : "S 4 St & Wythe Ave",
	                  "end station id" : 460,
	                  "end station name" : "S 4 St & Wythe Ave",
	                  "bikeid" : 23779,
	                  "usertype" : "Customer",
	                  "birth year" : "",
	                  "start station location" : {
		                  "type" : "Point",
		                  "coordinates" : [
			                  -73.96590294,
			                  40.71285887
		                  ]
	                  },
	                  "end station location" : {
		                  "type" : "Point",
		                  "coordinates" : [
			                  -73.96590294,
			                  40.71285887
		                  ]
	                  },
	                  "start time" : ISODate("2016-01-02T11:49:11Z"),
	                  "stop time" : ISODate("2016-01-02T11:50:18Z")
                  }

Summary
-------

Congratulations! You just set up a {+fdi+}, created a database and 
collections from data stored in an S3 bucket, and queried the data 
using MQL commands. 

For more information on {+fdi+}\s, see :ref:`{+adf+} 
<atlas-data-federation>`.

.. include:: /includes/data-federation/fact-fdi-dynamic-collections.rst
