.. _replica-set-sync:

================================
Replica Set Data Synchronization
================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |source| replace:: source member
.. |destin| replace:: destination member
.. |sources| replace:: source members
.. |destins| replace:: destination members
.. |Sources| replace:: Source members
.. |Destins| replace:: Destination members

To maintain up-to-date copies of the shared data set,
secondary members of a replica set :term:`sync` or replicate data from a
|source|. MongoDB uses two forms of data synchronization:
initial sync to populate new members
with the full data set, and replication to apply ongoing changes to the
entire data set.

.. _replica-set-initial-sync:

Initial Sync
------------

Initial sync copies all the data from the |source| of the replica set to
a |destin|. See :ref:`replica-set-initial-sync-source-selection` for
more information on |source| selection criteria.

The ``local`` database stores the :term:`oplog` data that the initial
sync process uses. Ensure the |destin| has enough space in the ``local``
database to store the oplog data for the initial sync process to
complete.

.. note:: 

   During the initial sync, MongoDB truncates the oplog on the |destin|. This 
   oplog truncation can impact processes, such as :ref:`change streams 
   <changeStreams>`, that depend on oplog data.

You can specify the preferred initial sync source using the 
:parameter:`initialSyncSourceReadPreference` parameter. This parameter can 
only be specified when starting the :binary:`~bin.mongod`.

Starting in MongoDB 5.2, initial syncs can be *logical* or *file copy 
based*. 

.. _replica-set-initial-sync-logical:

Logical Initial Sync Process
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you perform a logical initial sync, MongoDB:

#. Clones all databases except the :ref:`local
   <replica-set-local-database>` database. To clone, the
   :binary:`~bin.mongod` scans every collection in each |source| 
   database and inserts all data into its own copies of these 
   collections.

#. Builds all collection indexes as the documents are copied for each 
   collection.
   
#. Pulls newly added oplog records during the data copy. Ensure that the 
   |destin| has enough disk space in the ``local`` 
   database to temporarily store these oplog records for the duration of 
   this data copy stage.

#. Applies all changes to the data set. Using the oplog from the
   |source|, the :binary:`~bin.mongod` updates its data set to reflect 
   the current state of the replica set.

When the initial sync finishes, the member transitions from
:replstate:`STARTUP2` to :replstate:`SECONDARY`.

To perform an initial sync, see :ref:`resync-replica-member`.

.. _replica-set-initial-sync-file-copy-based:

File Copy Based Initial Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Available in MongoDB Enterprise only.*

File copy based initial sync runs the initial sync process by copying
and moving files on the file system. This sync method can be faster than
:ref:`logical initial sync <replica-set-initial-sync-logical>`.

.. important:: File copy based initial sync may cause inaccurate counts

   After file copy based initial sync completes, if you run the
   :method:`~db.collection.count()` method without a query predicate, the
   count of documents returned may be inaccurate.

   A ``count`` method without a query predicate looks like this:
   ``db.<collection>.count()``.

   To learn more, see :ref:`count-method-behavior-query-predicate`.

Enable File Copy Based Initial Sync
```````````````````````````````````

To enable file copy based initial sync, set the
:parameter:`initialSyncMethod` parameter to ``fileCopyBased`` on the
|destin| for the initial sync. This parameter can only be set
at startup.

Behavior
````````

File copy based initial sync replaces the ``local`` database of the
|destin| with the ``local`` database of the source member when 
syncing.

Limitations
```````````

- During a file copy based initial sync:

  - You cannot run backups on either the |source| or the |destin|.

  - You cannot write to the ``local`` database on the |destin|.

- You can only run an initial sync from one |source| at a time. 

- When using the encrypted storage engine, MongoDB uses the |source|
  key to encrypt the destination.

Initial Sync on NVMe Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must perform an initial sync on clusters that use the local
Non-Volatile Memory Express (:term:`NVMe`) SSD storage option, including
if you're using Atlas :ref:`auto-scaling <cluster-autoscaling>`. Atlas
NVMe clusters auto-scale to the next higher tier when 90% of the storage
space is full. An initial sync takes longer to complete compared to
subsequent syncs, and reduces the performance of the :term:`primary`
from which the data is read.

.. _init-sync-retry:

Fault Tolerance
~~~~~~~~~~~~~~~

If a |destin| performing initial sync encounters a persistent network 
error during the sync process, the |destin| restarts the initial sync 
process from the beginning. 

A |destin| performing initial sync can attempt to resume the sync process 
if interrupted by a temporary network error, collection drop, or 
collection rename.

By default, the |destin| tries to resume initial sync for 24 hours.
You can use the :parameter:`initialSyncTransientErrorRetryPeriodSeconds` 
server parameter to control the amount of time the |destin| attempts to
resume initial sync. If the |destin| cannot successfully resume the
initial sync process during the configured time period, it selects a new
healthy |source| from the replica set and restarts the initial
synchronization process from the beginning. 

The secondary attempts to restart the initial sync up to ``10`` times
before returning a fatal error.

.. _replica-set-initial-sync-source-selection:

Initial Sync Source Selection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Initial sync source selection depends on the value of the
:binary:`~bin.mongod` startup parameter
:parameter:`initialSyncSourceReadPreference`:

- For :parameter:`initialSyncSourceReadPreference` set to
  :readmode:`primary` (default if :rsconf:`chainingAllowed
  <settings.chainingAllowed>` is disabled), select the :term:`primary`
  as the |source|. If the primary is unavailable or unreachable, log
  an error and periodically check for primary availability.

- For :parameter:`initialSyncSourceReadPreference` set to
  :readmode:`primaryPreferred` (default for voting replica set
  members), attempt to select the :term:`primary` as the |source|. If
  the primary is unavailable or unreachable, perform sync |source|
  selection from the remaining replica set members.

- For all other supported read modes, perform sync |source| selection 
  from the |destins|.

Members performing initial |source| selection make two passes through 
the list of all replica set members:

.. tabs::

   .. tab:: First Pass
      :tabid: firstpass

      The member applies the following criteria to each replica 
      set member when making the first pass for selecting a
      initial |source|:

      - The |source| *must* be in the :replstate:`PRIMARY` or
        :replstate:`SECONDARY` replication state.

      - The |source| *must* be online and reachable.

      - If :parameter:`initialSyncSourceReadPreference` is
        :readmode:`secondary` or :readmode:`secondaryPreferred`, 
        the |source| *must* be a :term:`secondary`.

      - The |source| *must* be :rsconf:`visible <members[n].hidden>`.

      - The |source| *must* be within ``30`` seconds of the newest 
        oplog entry on the primary.

      - If the member :rsconf:`builds indexes
        <members[n].buildIndexes>`, the |source| *must* build indexes.

      - If the member :rsconf:`votes <members[n].votes>` in 
        replica set elections, the |source| *must* also vote.

      - If the member is *not* a :rsconf:`delayed member
        <members[n].secondaryDelaySecs>`, the |source| *must not* be delayed.

      - If the member *is* a :rsconf:`delayed member
        <members[n].secondaryDelaySecs>`, the |source| must have a shorter 
        configured delay.

      - The |source| *must* be faster than 
        the current best sync source.

      If no candidate |source| remains after the first pass, 
      the member performs a second pass with relaxed criteria. 
      See :guilabel:`Sync Source Selection (Second Pass)`.

   .. tab:: Second Pass
      :tabid: second pass

      The member applies the following criteria to each replica 
      set member when making the second pass for selecting a
      initial |source|:

      - The |source| *must* be in the 
        :replstate:`PRIMARY` or :replstate:`SECONDARY` replication 
        state.

      - The |source| *must* be online and reachable.

      - If :parameter:`initialSyncSourceReadPreference` is
        :readmode:`secondary`, the |source| *must* be a
        :term:`secondary`.

      - If the member :rsconf:`builds indexes
        <members[n].buildIndexes>`, the |source| must
        build indexes.

      - The |source| *must* be faster than 
        the current best sync source.
       
If the |destin| cannot select a |source| after two passes, it
logs an error and waits ``1`` second before restarting the selection
process. The secondary :binary:`~bin.mongod` can restart the initial
sync source selection process up to ``10`` times before exiting with an
error.

Oplog Window
~~~~~~~~~~~~

The :term:`oplog window` must be long enough so that a |destin| can fetch 
any new :term:`oplog` entries that occur between the start and end of 
the :ref:`replica-set-initial-sync-logical`.
If the window isn't long enough, there is a risk that some entries may 
fall off the ``oplog`` before the |destin| can apply them.

It is recommended that you size the ``oplog`` for additional time to fetch any
new ``oplog`` entries.  This allows for changes that may occur during initial
syncs.

For more information, see :ref:`replica-set-oplog-sizing`.

.. _replica-set-replication:

Replication
-----------

|Destins| replicate data continuously after the initial sync.
|Destins| copy the :ref:`oplog <replica-set-oplog>` from
the |source| and apply these operations in an asynchronous
process.  

|Destins| automatically change their |source| as needed
based on changes in the ping time and state of other members'
replication. See :ref:`replica-set-replication-sync-source-selection`
for more information on |source| selection criteria.

.. _replica-set-streaming-replication:

Streaming Replication 
~~~~~~~~~~~~~~~~~~~~~

|Sources| send a continuous stream 
of :ref:`oplog <replica-set-oplog>` entries to their |destins|. 
Streaming replication mitigates replication lag in high-load and 
high-latency networks. It also: 

- Reduces staleness for reads from secondaries.
- Reduces risk of losing write operations with :ref:`w: 1 <wc-w>` due to 
  primary failover.
- Reduces latency on write operations with :writeconcern:`w: "majority" 
  <"majority">` and :ref:`w: >1 <wc-w>` (that is, any write concern that 
  requires waiting for replication).

Use the :parameter:`oplogFetcherUsesExhaust` startup parameter to disable 
streaming replication and using the older replication behavior. 
Set the :parameter:`oplogFetcherUsesExhaust` parameter to ``false`` only if 
there are any resource constraints on the |source| or if you wish 
to limit MongoDB's usage of network bandwidth for replication.

.. _replica-set-internals-multi-threaded-replication:

Multithreaded Replication
~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB applies write operations in batches using multiple threads to
improve concurrency. MongoDB groups batches by document ID (:ref:`WiredTiger
<storage-wiredtiger>`) and simultaneously applies each group of
operations using a different thread. MongoDB always applies write
operations to a given document in their original write order.

Read operations that
:ref:`target secondaries <replica-set-read-preference>` and are
configured with a :ref:`read concern<read-concern>` level of
:readconcern:`"local"` or  :readconcern:`"majority"` read from
a :ref:`WiredTiger<storage-wiredtiger>` snapshot of the data if the read
takes place on a secondary where replication batches are being applied. 

Reading from a snapshot guarantees a consistent view of the
data, and allows the read to occur simultaneously with the ongoing
replication without the need for a lock. As a result, secondary reads
requiring these read concern levels no longer need to wait for
replication batches to be applied, and can be handled as they are
received.

Flow Control
~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-flow-control-general-desc.rst

For more information, see :ref:`flow-control`.

.. _replica-set-replication-sync-source-selection:

Replication Sync Source Selection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Replication |source| selection depends on the replica set 
:rsconf:`chaining <settings.chainingAllowed>` setting:

- With chaining enabled (default), perform |source| selection from
  the |destins|.

- With chaining disabled, select the :term:`primary` as the |source|. 
  If the primary is unavailable or unreachable, log an error and 
  periodically check for primary availability.

Members performing replication |source| selection make two passes
through the list of all replica set members:

.. tabs::

   .. tab:: First Pass
      :tabid: firstpass

      The member applies the following criteria to each replica 
      set member when making the first pass for selecting a
      |source|:

      - The |source| *must* be in the :replstate:`PRIMARY` or
        :replstate:`SECONDARY` replication state.

      - The |source| *must* be online and reachable.

      - The |source| *must* have newer oplog entries than the member.
        That is, the |source| must be *ahead* of the member.

      - The |source| *must* be :rsconf:`visible <members[n].hidden>`.

      - The |source| *must* be within ``30`` seconds of the newest 
        oplog entry on the primary.

      - If the member :rsconf:`builds indexes
        <members[n].buildIndexes>`, the |source| *must*
        build indexes.

      - If the member :rsconf:`votes <members[n].votes>` in 
        replica set elections, the |source| *must* also vote.

      - If the member is *not* a :rsconf:`delayed member
        <members[n].secondaryDelaySecs>`, the |source| *must not* be delayed.

      - If the member *is* a :rsconf:`delayed member
        <members[n].secondaryDelaySecs>`, the |source| must have a shorter 
        configured delay.

      - The |source| *must* be faster than the current best sync source.

      If no candidate |sources| remain after the first pass, 
      the member performs a second pass with relaxed criteria. 
      See the :guilabel:`Sync Source Selection (Second Pass)`.

   .. tab:: Second Pass
      :tabid: second pass
     
      The member applies the following criteria to each replica 
      set member when making the second pass for selecting a
      |source|:

      - The |source| *must* be in the 
        :replstate:`PRIMARY` or :replstate:`SECONDARY` replication 
        state.

      - The |source| *must* be online and reachable.

      - If the member :rsconf:`builds indexes
        <members[n].buildIndexes>`, the |source| must
        build indexes.
       
      - The |source| *must* be faster than the current best sync source.

If the member cannot select a sync source after two passes, it logs an
error and waits ``1`` second before restarting the selection process.

The number of times a |source| can be changed per hour is
configurable by setting the :parameter:`maxNumSyncSourceChangesPerHour`
parameter. 

.. note::

   The startup parameter :parameter:`initialSyncSourceReadPreference` takes 
   precedence over the replica set's :rsconf:`settings.chainingAllowed` setting 
   when selecting an initial sync |source|. After a replica set member
   successfully performs initial sync, it defers to the value of
   :rsconf:`~settings.chainingAllowed` when selecting a |source|.

   See :ref:`replica-set-initial-sync-source-selection` for more
   information on initial sync source selection.
