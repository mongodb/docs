======
copydb
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: copydb

   Copies a database either from one :program:`mongod` instance to the
   current :program:`mongod` instance or within the current
   :program:`mongod`. Run :dbcommand:`copydb` in the ``admin`` database
   of the destination server with the following syntax:

   .. code-block:: javascript

      { copydb: 1,
        fromhost: <hostname>,
        fromdb: <database>,
        todb: <database>,
        slaveOk: <bool>,
        username: <username>,
        nonce: <nonce>,
        key: <key> }

   :dbcommand:`copydb` accepts the following options:

   .. include:: /includes/apiargs/dbcommand-copydb-field.rst

   The :program:`mongo` shell provides the :method:`db.copyDatabase()`
   wrapper for the :dbcommand:`copydb` command.

   .. include:: /includes/extracts/fact-copydb-cmd-authentication-mechanism.rst

   .. |command| replace:: ``copydb``

Behavior
--------

Destination
~~~~~~~~~~~

.. include:: /includes/extracts/fact-copydb-cmd-behavior-destination.rst

.. _copydb-access-control:

Authentication to Source ``mongod`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/fact-copydb-cmd-behavior-fromhost-authentication.rst

Concurrency
~~~~~~~~~~~

.. include:: /includes/extracts/fact-copydb-cmd-behavior-concurrency.rst

Indexes
~~~~~~~

.. include:: /includes/fact-copydb-cmd-behavior-indexes.rst

Replica Sets
~~~~~~~~~~~~

With :term:`read preference` configured to set the ``slaveOk`` option
to ``true``, you may run :dbcommand:`copydb` on a :term:`secondary`
member of a :term:`replica set`.

Sharded Clusters
~~~~~~~~~~~~~~~~

- Do not use :dbcommand:`copydb` from a :program:`mongos` instance.

- Do not use :dbcommand:`copydb` to copy databases that contain sharded
  collections.

.. _copydb-required-access:

Required Access
---------------

.. versionchanged:: 2.6

If the :program:`mongod` instance of the *source* database (``fromdb``)
enforces :setting:`access control <security.authorization>`, you must
have proper authorization for the *source* database.

.. include:: /includes/extracts/fact-copydb-cmd-fromhost-authentication.rst
.. include:: /includes/extracts/fact-copydb-cmd-authentication-mechanism.rst

.. _copydb-fromdb-access:

Source Database (``fromdb``)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Source is non-``admin`` Database
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /includes/extracts/access-copydb-source-not-admin.rst

Source is ``admin`` Database
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /includes/extracts/access-copydb-source-admin.rst

Target Database (``todb``)
~~~~~~~~~~~~~~~~~~~~~~~~~~

If the :program:`mongod` instance of the *target* database (``todb``)
enforces :setting:`access control <security.authorization>`, you must
have proper authorization for the *target* database.

Copy from non-``admin`` Database
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /includes/extracts/access-copydb-target-non-admin-source.rst

Copy from ``admin`` Database
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /includes/extracts/access-copydb-target-admin-source.rst

.. _copydb-nonce-key:

Generate ``nonce`` and ``key``
------------------------------

If copying from another :program:`mongod` instance that enforces access
control, then you must include a ``username``, ``nonce``, and ``key``
to authenticate to that instance as a user with proper access.

.. tip::

   The :method:`db.copyDatabase()` handles the generation of the
   ``nonce`` and ``key``.

``nonce``
~~~~~~~~~

The ``nonce`` is a one-time password that you request from the remote
server using the :dbcommand:`copydbgetnonce` command, as in the following:

.. code-block:: javascript

   use admin
   mynonce = db.runCommand( { copydbgetnonce : 1, fromhost: <hostname> } ).nonce

If running the :dbcommand:`copydbgetnonce` command directly on the
remote host, you can omit the ``fromhost`` field in the
:dbcommand:`copydbgetnonce` command.

``key``
~~~~~~~

The ``key`` is a hash generated as follows:

.. code-block:: javascript

   hex_md5(mynonce + username + hex_md5(username + ":mongo:" + password))

Examples
--------

Copy from the Same ``mongod`` Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To copy from the same host, omit the ``fromhost`` field.

The following command copies the ``test`` database to a new ``records``
database on the current :program:`mongod` instance:

.. code-block:: javascript

   use admin
   db.runCommand({
      copydb: 1,
      fromdb: "test",
      todb: "records"
   })

Copy from a Remote Host to the Current Host
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To copy from a remote host, include the ``fromhost`` field.

The following command copies the ``test`` database from the remote host
``example.net`` to a new ``records`` database on the current
:program:`mongod` instance:

.. code-block:: javascript

   use admin
   db.runCommand({
      copydb: 1,
      fromdb: "test",
      todb: "records",
      fromhost: "example.net"
   })

Copy Databases from a ``mongod`` Instances that Enforce Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/fact-copydb-cmd-fromhost-authentication.rst

.. note::

   .. include:: /includes/extracts/fact-copydb-cmd-authentication-mechanism.rst

The following command copies the ``test`` database from a
:program:`mongod` instance that runs on the remote host ``example.net``
and enforces access control:

.. code-block:: javascript

   use admin
   db.runCommand({
      copydb: 1,
      fromdb: "test",
      todb: "records",
      fromhost: "example.net",
      username: "reportingAdmin",
      nonce: "<nonce>",
      key: "<passwordhash>"
   })

.. seealso::

   - :method:`db.copyDatabase()`

   - :dbcommand:`clone` and :method:`db.cloneDatabase()`

   - :doc:`/core/backups`
