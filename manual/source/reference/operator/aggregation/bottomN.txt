==================================
$bottomN (aggregation accumulator)
==================================

.. default-domain:: mongodb

.. contents:: On this page
  :local:
  :backlinks: none
  :depth: 1
  :class: singlecol

Definition
----------

.. group:: $bottomN

   .. versionadded:: 5.2

   Returns an aggregation of the bottom ``n`` elements within a group,
   according to the specified sort order. If the group contains fewer 
   than ``n`` elements, ``$bottomN`` returns all elements in the group.

Syntax
------

.. code-block:: none
   :copyable: false

   {
      $bottomN:
         {
            n: <expression>,
            sortBy: { <field1>: <sort order>, <field2>: <sort order> ... },
            output: <expression>
         }
   }

- ``n`` limits the number of results per group and has to be a positive
  integral expression that is either a constant or depends on the ``_id``
  value for :pipeline:`$group`.
- sortBy specifies the order of results, with syntax similar to 
  :pipeline:`$sort`.
- ``output`` represents the output for each element in the group and can 
  be any expression.

Behavior
--------

Null and Missing Values
~~~~~~~~~~~~~~~~~~~~~~~

- ``$bottomN`` does not filter out null values.
- ``$bottomN`` converts missing values to null which are preserved in
  the output.

.. code-block:: javascript
   :emphasize-lines: 7,8

   db.aggregate( [
      {
         $documents: [
            { playerId: "PlayerA", gameId: "G1", score: 1 },
            { playerId: "PlayerB", gameId: "G1", score: 2 },
            { playerId: "PlayerC", gameId: "G1", score: 3 },
            { playerId: "PlayerD", gameId: "G1"},
            { playerId: "PlayerE", gameId: "G1", score: null }
         ]
      },
      {
         $group:
         {  
               _id: "$gameId",
               playerId:
                  { 
                     $bottomN:
                        {    
                           output: [ "$playerId", "$score" ],
                           sortBy: { "score": -1 },
                           n: 3
                        }
                  }
         }
      }
   ] )

In this example:

- :pipeline:`$documents` creates the literal documents that contain
  player scores.
- :pipeline:`$group` groups the documents by ``gameId``. This
  example has only one ``gameId``, ``G1``.
- ``PlayerD`` has a missing score and ``PlayerE`` has a
  null ``score``. These values are both considered as null.
- The ``playerId`` and ``score`` fields are specified as 
  ``output : ["$playerId"," $score"]`` and returned as array values. 
- Because of the ``sortBy: { "score" : -1 }``, the null values are sorted
  to the end of the returned ``playerId`` array.

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: "G1",
         playerId: [ [ "PlayerA", 1 ], [ "PlayerD", null ], [ "PlayerE", null ] ]
      }
   ]

BSON Data Type Sort Ordering
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When sorting different types, the order of :ref:`BSON data types 
<bson_sort_order>` is used to determine ordering. As an example, 
consider a collection whose values consist of strings and numbers.

- In an ascending sort, string values are sorted after numeric values.
- In a descending sort, string values are sorted before numeric values.

.. code-block:: javascript
   :emphasize-lines: 5,6

   db.aggregate( [
      {
         $documents: [
            { playerId: "PlayerA", gameId: "G1", score: 1 },
            { playerId: "PlayerB", gameId: "G1", score: "2" },
            { playerId: "PlayerC", gameId: "G1", score: "" }
         ]
      },
      {
         $group:
            {
               _id: "$gameId",
               playerId: {
                  $bottomN:
                  {
                     output: ["$playerId","$score"],
                     sortBy: {"score": -1},
                     n: 3
                  }
               }
            }
      }
   ] )

In this example:

- ``PlayerA`` has an integer score.
- ``PlayerB`` has a string ``"2"`` score. 
- ``PlayerC`` has an empty string score.

Because the sort is in descending ``{ "score" : -1 }``, the string
literal values are sorted before ``PlayerA``'s numeric score:

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: "G1",
         playerId: [ [ "PlayerB", "2" ], [ "PlayerC", "" ], [ "PlayerA", 1 ] ]
      }
   ]

Restrictions
------------

Window Function and Aggregation Expression Support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``$bottomN`` is not supported as a 
:ref:`aggregation expression <aggregation-expressions>`.

``$bottomN`` is supported as a 
:pipeline:`window operator <$setWindowFields>`.

Memory Limit Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Groups within the ``$bottomN`` aggregation pipeline are subject to the
:ref:`100 MB limit <agg-memory-restrictions>` pipeline limit. If this
limit is exceeded for an individual group, the aggregation fails
with an error.

Examples
--------

Consider a ``gamescores`` collection with the following documents:

.. code-block:: javascript

   db.gamescores.insertMany([
      { playerId: "PlayerA", gameId: "G1", score: 31 },
      { playerId: "PlayerB", gameId: "G1", score: 33 },
      { playerId: "PlayerC", gameId: "G1", score: 99 },
      { playerId: "PlayerD", gameId: "G1", score: 1 },
      { playerId: "PlayerA", gameId: "G2", score: 10 },
      { playerId: "PlayerB", gameId: "G2", score: 14 },
      { playerId: "PlayerC", gameId: "G2", score: 66 },
      { playerId: "PlayerD", gameId: "G2", score: 80 }
   ])

Find the Three Lowest ``Scores``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the ``$bottomN`` accumulator to find the lowest scoring
players in a single game.

.. code-block:: javascript

   db.gamescores.aggregate( [
      {
         $match : { gameId : "G1" }
      },
      {
         $group:
            {
               _id: "$gameId",
               playerId:
                  {
                     $bottomN:
                     {
                        output: ["$playerId", "$score"],
                        sortBy: { "score": -1 },
                        n:3
                     }
                  }
            }
      }
   ] )

The example pipeline:

- Uses :pipeline:`$match` to filter the results on a single ``gameId``. 
  In this case, ``G1``.
- Uses :pipeline:`$group` to group the results by ``gameId``. In this 
  case, ``G1``.
- Uses sort by ``{ "score": -1 }`` to sort the results in descending
  order.
- Specifies the fields that are output from ``$bottomN`` with
  ``output : ["$playerId"," $score"]``.
- Uses ``$bottomN`` to return the bottom three documents
  with the lowest ``score`` for the ``G1`` game with ``n : 3``.

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: "G1",
         playerId: [ [ "PlayerB", 33 ], [ "PlayerA", 31 ], [ "PlayerD", 1 ] ]
      }
   ]

The SQL equivalent to this query is:

.. code-block:: sql
   :copyable: false

   SELECT T3.GAMEID,T3.PLAYERID,T3.SCORE
   FROM GAMESCORES AS GS
   JOIN (SELECT TOP 3
            GAMEID,PLAYERID,SCORE
            FROM GAMESCORES
            WHERE GAMEID = "G1"
            ORDER BY SCORE) AS T3
               ON GS.GAMEID = T3.GAMEID
   GROUP BY T3.GAMEID,T3.PLAYERID,T3.SCORE
      ORDER BY T3.SCORE DESC

Finding the Three Lowest Score Documents Across Multiple Games
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the ``$bottomN`` accumulator to find the lowest scoring
players in each game.

.. code-block:: javascript

   db.gamescores.aggregate( [
         {
            $group:
            { _id: "$gameId", playerId:
               {
                  $bottomN:
                     {
                        output: [ "$playerId","$score" ],
                        sortBy: { "score": -1 },
                        n: 3
                     }
               }
            }
         }
   ] )

The example pipeline:

- Uses ``$group`` to group the results by ``gameId``.
- Specifies the fields that are output from ``$bottomN`` with
  ``output : ["$playerId", "$score"]``.
- Uses sort by ``{ "score": -1 }`` to sort the results in descending
  order.
- Uses ``$bottomN`` to return the bottom three documents
  with the lowest ``score`` for each game with ``n: 3``.

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   [
      {
         _id: "G1",
         playerId: [ [ "PlayerB", 33 ], [ "PlayerA", 31 ], [ "PlayerD", 1 ] ]
      },
      {
         _id: "G2",
         playerId: [ [ "PlayerC", 66 ], [ "PlayerB", 14 ], [ "PlayerA", 10 ] ]
      }
   ]

The SQL equivalent to this query is:

.. code-block:: sql
   :copyable: false

   SELECT PLAYERID,GAMEID,SCORE
   FROM(
      SELECT ROW_NUMBER() OVER (PARTITION BY GAMEID ORDER BY SCORE DESC) AS GAMERANK,
      GAMEID,PLAYERID,SCORE
      FROM GAMESCORES
   ) AS T
   WHERE GAMERANK >= 2
   ORDER BY GAMEID

Computing ``n`` Based on the Group Key for ``$group``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can also assign the value of ``n`` dynamically. In this example,
the :expression:`$cond` expression is used on the ``gameId`` field.

.. code-block:: javascript
   :emphasize-lines: 11

   db.gamescores.aggregate([
      {
         $group:
         {
            _id: {"gameId": "$gameId"},
            gamescores:
               {
                  $bottomN:
                     {
                        output: "$score",
                        n: { $cond: { if: {$eq: ["$gameId","G2"] }, then: 1, else: 3 } },
                        sortBy: { "score": -1 }
                     }
               }
         }
      }
   ] )

The example pipeline:

- Use ``$group`` to group the results by ``gameId``.
- Specifies the fields that are output from ``$bottomN`` with
  ``output : "$score"``.
- If the ``gameId`` is ``G2`` then ``n`` is 1, otherwise ``n`` is 3.
- Uses sort by ``{ "score": -1 }`` to sort the results in descending
  order.

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   [
      { _id: { gameId: "G2" }, gamescores: [ 10 ] },
      { _id: { gameId: "G1" }, gamescores: [ 33, 31, 1 ] }
   ]
