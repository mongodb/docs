===========================
Authentication and Security
===========================

.. default-domain:: mongodb

As with all software running in a networked environment,
administrators of MongoDB must consider security risks and risk
exposures for a MongoDB deployment. There are no cure-alls for risk
mitigation, and maintaining a secure MongoDB deployment is an ongoing
process. This document takes a *Defense in Depth* approach to securing
MongoDB deployments, and addresses a number of different methods for
managing risk and reducing risk exposure

The intent of *Defense In Depth* approaches is to ensure there are no
exploitable points of failure in your deployment that could allow an
intruder or un-trusted party to access the data stored in the MongoDB
database. The easiest and most effective way to reduce the risk of
exploitation is to run MongoDB in a trusted environment, limit access,
follow a system of least privilege, and follow best development and
deployment practices. See the :ref:`security-reduce-risk` section for
more information.

Strategies for Reducing Risk
----------------------------

The most effective way to reduce risk for MongoDB deployments is to
run your entire MongoDB deployment, including all MongoDB components
(i.e. :program:`mongod`, :program:`mongos` and application instances)
in a *trusted environment*. Trusted environments use the following
strategies to control access:

- network filter (i.e. firewall) rules that block all connections
  from unknown systems to MongoDB components.

- bind :program:`mongod` and :program:`mongos` instances to specific
  interfaces to limit accessibility.

- limit MongoDB programs to non-public local networks, and virtual
  private networks.

You may further reduce risk by: 

- requiring authentication for access to MongoDB instances.

- requiring strong, complex, single purpose authentication credentials.

- deploying a model of least privilege, where all users have *only* the
  amount of access they need to accomplish required tasks, and no
  more.

- following the best application development and deployment practices,
  which includes: validating all inputs, managing sessions, and
  application-level access control.

Continue reading this document for more information on specific
strategies and configurations to help reduce the risk exposure of
your application.

Vulnerability Notification
--------------------------

10gen takes the security of MongoDB and associated products very
seriously. If you discover a vulnerability in MongoDB or another
10gen product, or would like to know more about our vulnerability
reporting and response process, see the
:doc:`/vulnerability-notification` document.

Networking Risk Exposure
------------------------

Port Numbers
~~~~~~~~~~~~

Network Interface Limitation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Firewall
~~~~~~~~

Authentication
--------------

Interfaces
----------

JavaScript
~~~~~~~~~~

HTTP Interface
~~~~~~~~~~~~~~

REST API
~~~~~~~~

Data at Rest
------------
