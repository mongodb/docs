==============================================
Remove Shards from an Existing Sharded Cluster
==============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

To remove a :term:`shard` you must ensure the shard's data is migrated
to the remaining shards in the cluster. This procedure describes how to
safely migrate data and how to remove a shard.

.. include:: /includes/fact-remove-shard-balance-order.rst

This procedure describes how to safely remove a *single* shard. *Do not*
use this procedure to migrate an entire cluster to new hardware. To
migrate an entire shard to new hardware, migrate individual shards as if
they were independent replica sets.

.. DOCS-94 will lead to a tutorial about cluster migrations. In the
   mean time the above section will necessarily lack links.

To remove a shard, first connect to one of the cluster's
:binary:`~bin.mongos` instances using :binary:`~bin.mongo` shell. Then use the
sequence of tasks in this document to remove a shard from the cluster.

Considerations
--------------

.. include:: /includes/extracts/changestream-remove-shard-with-link.rst

.. _remove-shard-ensure-balancer-is-enabled:
.. _remove-shard-ensure-balancer-is-active:

Ensure the Balancer Process is Enabled
--------------------------------------

To successfully migrate data from a shard, the :term:`balancer` process
**must** be enabled. Check the balancer state using the
:method:`sh.getBalancerState()` helper in the :binary:`~bin.mongo` shell.
For more information, see the section on :ref:`balancer operations
<sharding-balancing-disable-temporarily>`.

.. _remove-shard-determine-name-shard:

Determine the Name of the Shard to Remove
-----------------------------------------

To determine the name of the shard, connect to a :binary:`~bin.mongos`
instance with the :binary:`~bin.mongo` shell and either:

- Use the :dbcommand:`listShards` command, as in the following:

  .. code-block:: javascript

     db.adminCommand( { listShards: 1 } )

- Run either the :method:`sh.status()` or the
  :method:`db.printShardingStatus()` method.

The ``shards._id`` field lists the name of each shard.

.. _remove-shard-remove-chunks:

Remove Chunks from the Shard
----------------------------

From the ``admin`` database, run the :dbcommand:`removeShard` command.
This begins "draining" chunks
from the shard you are removing to other shards in the cluster. For
example, for a shard named ``mongodb0``, run:

.. code-block:: javascript

   db.adminCommand( { removeShard: "mongodb0" } )

This operation returns immediately, with the following response:

.. code-block:: javascript

   {
      "msg" : "draining started successfully",
      "state" : "started",
      "shard" : "mongodb0",
      "note" : "you need to drop or movePrimary these databases", 
      "dbsToMove" : [
         "fiz",
         "buzz"
      ],
      "ok" : 1,
      "$clusterTime" : {
         "clusterTime" : Timestamp(1510716515, 1),
         "signature" : {
            "hash" : BinData(0,"B2ViX7XLzFLS5Fl9XEuFXbwKIM4="),
            "keyId" : NumberLong("6488045157173166092")
         }
      },
      "operationTime" : Timestamp(1510716515, 1)
   }

The balancer begins migrating chunks from the shard named ``bristol01``
to other shards in the cluster. These migrations happens slowly to
avoid placing undue load on the overall cluster.
Depending on your network capacity and the amount of data, this
operation can take from a few minutes to several days to complete.

.. note::

   Each database in a sharded cluster has a primary shard. If the shard you
   want to remove is also the primary of one of the cluster's databases,
   :dbcommand:`removeShard` lists the database in the ``dbsToMove`` field.
   To finish removing the shard, you must either move the database
   to a new shard after migrating all data from the shard or drop the
   database, deleting the associated data files.

.. _remove-shard-check-migration-status:

Check the Status of the Migration
---------------------------------

To check the progress of the migration at any stage in the process, run
:dbcommand:`removeShard` from the ``admin`` database again. For example,
for a shard named ``mongodb0``, run:

.. code-block:: javascript

   db.adminCommand( { removeShard: "mongodb0" } )

The command returns output similar to the following:

.. code-block:: javascript

   {
      "msg" : "draining ongoing",
      "state" : "ongoing",
      "remaining" : {
         "chunks" : NumberLong(2),
         "dbs" : NumberLong(2)
      },
      "note" : "you need to drop or movePrimary these databases",
      "dbsToMove" : [
         "fizz",
         "buzz"
      ],
      "ok" : 1,
      "$clusterTime" : {
         "clusterTime" : Timestamp(1510716515, 1),
         "signature" : {
            "hash" : BinData(0,"B2ViX7XLzFLS5Fl9XEuFXbwKIM4="),
            "keyId" : NumberLong("6488045157173166092")
         }
      },
      "operationTime" : Timestamp(1510716515, 1)
   }

In the output, the ``remaining`` document displays the remaining number
of chunks that MongoDB must migrate to other shards and the number of
MongoDB databases that have "primary" status on this shard.

Continue checking the status of the `removeShard` command until the
number of chunks remaining is ``0``. Always run the command on the
``admin`` database. If you are on a database other than ``admin``, you can
use :method:`sh._adminCommand` to run the command on ``admin``.

.. _remove-shard-move-unsharded-databases:

Move Databases to Another Primary Shard
---------------------------------------

If the shard is the :term:`primary shard` for one or more databases in
the cluster, then you must make that database use a different shard
as its primary shard. :dbcommand:`removeShard` lists any databases
that you need to move in the ``dbsToMove`` field in the command output.
If the shard is
not the primary shard for any databases, skip to the next task,
:ref:`remove-shard-finalize-migration`.

To move a database to another shard, use the :dbcommand:`movePrimary`
command. 

.. important::

   To ensure a smooth migration, refer to the :ref:`considerations
   <movePrimary-consideration>` in the :dbcommand:`movePrimary` command
   documentation before running :dbcommand:`movePrimary`.

To migrate the ``fizz`` database from
``mongodb0`` to ``mongodb1``, issue the following command:

.. code-block:: javascript

   db.adminCommand( { movePrimary: "fizz", to: "mongodb1" })

This command does not return until MongoDB completes moving all data. 
The response from this command will
resemble the following:

.. code-block:: javascript

   {
      "primary" : "mongodb1",
      "ok" : 1,
      "$clusterTime" : {
         "clusterTime" : Timestamp(1510767932, 10),
         "signature" : {
            "hash" : BinData(0,"OJyZ0B4/Cp9z+mdrXLbJtNC7iuo="),
            "keyId" : NumberLong("6488693018630029321")
         }
      },
      "operationTime" : Timestamp(1510767932, 10)
   }

.. include:: /includes/warning-movePrimary.rst 

.. _remove-shard-finalize-migration:

Finalize the Migration
----------------------

To clean up all metadata information and finalize the removal, run
:dbcommand:`removeShard` again. For example, for a shard named
``mongodb0``, run:

.. code-block:: javascript

   db.adminCommand( { removeShard: "mongodb0" } )

A success message appears at completion:

.. code-block:: javascript

   {
       "msg" : "removeshard completed successfully",
       "state" : "completed",
       "shard" : "mongodb0",
       "ok" : 1,
       "$clusterTime" : {
          "clusterTime" : Timestamp(1510767995, 1),
         "signature" : {
            "hash" : BinData(0,"Tk0evhgFHA8HgerY5HmKXhIuw3g="),
            "keyId" : NumberLong("6488693018630029321")
         }
       },
       "operationTime" : Timestamp(1510767995, 1)
       
   }

Once the value of the ``state`` field is "completed", you may safely
stop the instances comprising the ``mongodb0`` shard.
