.. _partner-integrations:

====================
Partner Integrations
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

While |service-fullname| integrates with other technologies through
their standard APIs, MongoDB and partners built specific product
integrations to enable |service-fullname| and partner products to
interoperate directly and ensure a seamless experience.

This document lists examples of integrations that MongoDB and 
partners developed to enhance |service| and partner service 
capabilities.

You can explore a collection of the existing integrations and partner 
services in the {+ecosystem+}. Each integration has its own 
page with details about the integration and links to set up the 
integration. To learn more, see :ref:`explore-ecosystem`.

.. _application-platforms:

Application Platforms
---------------------

Vercel
~~~~~~

`Vercel <https://vercel.com/>`__ is a cloud platform for static frontends
and serverless functions. It enables developers to host websites and web
applications that deploy instantly, scale automatically, and require no
supervision. Vercel integrates with the Next.js framework.

You can easily use Vercel with |service|:

- To connect to |service| {+clusters+} from Vercel,
  see :ref:`<vercel>`.

- .. include:: /includes/fact-vercel-serverless-functions.rst

Netlify
~~~~~~~

`Netlify <https://www.netlify.com/>`__ is a serverless application platform
based on `Jamstack <https://jamstack.org/>`__. Netlify hosts tools for
deploying and managing static content and enables you to write serverless
functions that run atop AWS Lambda and that can integrate with an
application's database.

Netlify is JavaScript-centric (although it supports other languages) and
is easy to use with |service|. Applications deployed in Netlify can connect
to |service| clusters using serverless functions that use the
:driver:`MongoDB Node.js driver </node/current/>` or the
`Mongoose ODM library <https://mongoosejs.com/>`__.

Best Practices
``````````````

Since Netlify functions run on AWS Lambda, use
:doc:`best practices for connecting from AWS Lambda 
</manage-connections-aws-lambda>`
when building applications that use serverless Netlify
functions that connect to |service|.

.. _cloud-providers:

Cloud Providers
---------------

|service-fullname| provides multi-cloud clusters on |aws|, |gcp|,
and |azure| to support a flexible, global deployment strategy.

Integrations with these cloud providers allow applications built on
MongoDB to take advantage of each cloud provider's regions and
capabilities.

Amazon Web Services (AWS)
~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`AWS regions supported on Atlas <amazon-aws>`
- :ref:`List of integrations between Atlas and AWS <aws-integrations>`

Google Cloud Platform (GCP)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`GCP regions supported on Atlas <google-gcp>`
- :ref:`List of integrations between Atlas and GCP <gcp-integrations>`

Microsoft Azure
~~~~~~~~~~~~~~~

- :ref:`Azure regions supported on Atlas <microsoft-azure>`
- :ref:`List of integrations between Atlas and Azure <azure-integrations>`


Data Access Frameworks
----------------------

.. _data-access-frameworks:

Prisma
~~~~~~

`Prisma <https://www.prisma.io/>`__ is a next-generation Node.js
and TypeScript Object Relational Mapper (ORM) with a declarative
schema and type-safe database client supporting a number of
databases, including MongoDB.

Prisma provides a server-side library that enables you to build
applications that read and write data to the database in an
intuitive and safe way.

Integration:

- `MongoDB Database Connector 
  <https://www.prisma.io/docs/concepts/database-connectors/mongodb>`__


.. _identity-providers:

Identity Providers
------------------

SAML SSO Providers
~~~~~~~~~~~~~~~~~~

MongoDB supports federated authentication to allow any company
with an |idp| that supports the |saml| standard to federate access
for its employees into all MongoDB web portals, including the |service|
web interface. As a result, employees can use their corporate |sso|
provider to access |service|.

Notable integrations include:

- AWS Single Sign-On (SSO): `How to integrate AWS Single Sign-On
  with MongoDB Atlas <https://aws.amazon.com/blogs/apn/how-to-integrate-aws-single-sign-on-with-mongodb-atlas/>`__
- |azure-ad|: :doc:`Configure Federated Authentication from Microsoft Entra ID </security/federated-auth-azure-ad/>`
- Okta: :doc:`Configure Federated Authentication from Okta </security/federated-auth-okta/>`
- `OneLogin <https://www.onelogin.com/>`__
- `PingOne for Enterprise <https://www.pingidentity.com/en/cloud/pingone-enterprise.html>`__


LDAP Providers
~~~~~~~~~~~~~~

You can manage database user authentication and authorization
from all MongoDB clients using a MongoDB |ldap| over |tls|.

Notable integrations include:

- |azure-ad|: :doc:`/security-ldaps-azure/`
- Okta LDAP Interface: :doc:`security-ldaps-okta/`
- OneLogin: :doc:`/security-ldaps-onelogin/`

.. _monitoring-services:

Monitoring Services
-------------------

You can configure |service| to send :doc:`monitoring data and alerts </monitoring-alerts/>` to:

- Third-party monitoring services, such as `Datadog
  <https://www.datadoghq.com/>`_, `PagerDuty
  <https://www.pagerduty.com/>`_, `Prometheus
  <https://prometheus.io/>`_, and `Splunk On-Call
  <https://www.splunk.com/en_us/investor-relations/acquisitions/splunk-on-call.html>`__. 
- Third-party collaboration services, such as `Slack
  <https://slack.com/>`__. 

To learn more, see :doc:`Integrate with Third-Party Monitoring Services
</tutorial/third-party-service-integrations/>`.

.. _orchestration-tools:

Orchestration Tools
-------------------

HashiCorp Terraform
~~~~~~~~~~~~~~~~~~~

`Terraform <https://www.terraform.io/>`__ by HashiCorp provides a
foundation for cloud infrastructure automation using infrastructure
as code for provisioning and compliance in the cloud operating model.

You can integrate |service| into your continuous delivery workflows
by using the official plugin that is verified and tested by HashiCorp.
Using this plugin makes it easy to provision, manage, and control
|service| configurations as code on any cloud provider. To learn more,
see |service-terraform|.

Integration:

- `HashiCorp Terraform MongoDB Atlas Provider 
  <https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs>`__

.. _security-tools:

Security Tools
--------------

HashiCorp Vault
~~~~~~~~~~~~~~~

`HashiCorp Vault <https://www.vaultproject.io/>`__ is a secrets
management tool by HashiCorp that enables teams to centrally manage
and distribute secrets and other sensitive data through UI, CLI, or API.

Simplify secrets management for your |service| databases by using the
official plugins verified and tested by HashiCorp. Using these plugins,
you can programmatically manage API keys and control access by MongoDB
users in your organization to reduce security risks and increase developer
productivity. To learn more, see |service-vault|.

Integrations:

- MongoDB Atlas Database Users Vault Secrets Engine: `Generate Atlas database credentials dynamically
  <https://www.vaultproject.io/docs/secrets/databases/mongodbatlas>`__
- MongoDB Atlas Secrets Engine: `Generate programmatic API keys on Atlas
  <https://www.vaultproject.io/docs/secrets/mongodbatlas>`__

AI Integrations
---------------

You can integrate {+avs+} with AI technologies to 
build generative AI and AI-powered applications. 
Notable integrations include:

- `LangChain <https://langchain.com/>`__
- `LlamaIndex <https://llamaindex.ai/>`__
- `Semantic Kernel <https://learn.microsoft.com/en-us/semantic-kernel/overview/>`__
- `Haystack <https://haystack.deepset.ai/integrations/mongodb>`__
- `Amazon Bedrock Knowledge Base <https://aws.amazon.com/bedrock/knowledge-bases/>`__

To learn more, see :ref:`vector-search-integrations`.

.. toctree::
   :titlesonly:

   Explore Ecosystem </reference/partner-integrations/explore-ecosystem>
   Vercel </reference/partner-integrations/vercel>
