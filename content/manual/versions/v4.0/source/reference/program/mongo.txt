.. _mongo:

=========
``mongo``
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. only:: html

   .. meta::
      :description: The mongo shell command man page.
      :keywords: mongo, mongodb, man page, mongo process, mongo shell

Description
-----------

.. only:: (not man)

   .. class:: hidden

      .. binary:: mongo

:binary:`~bin.mongo` is an interactive JavaScript shell interface to
MongoDB, which provides a powerful interface for system
administrators as well as a way for developers to test queries and
operations directly with the database. :binary:`~bin.mongo` also provides
a fully functional JavaScript environment for use with a MongoDB.

.. include:: /includes/fact-download-mongo-shell.rst

.. note::

   - .. include:: /includes/extracts/fact-mongoshell-emulation.rst

   - .. include:: /includes/fact-tls-1.0.rst 

Syntax
------

- You can run :binary:`~bin.mongo` shell without any command-line
  options use the default settings:

  .. code-block:: sh

     mongo

- You can run :binary:`~bin.mongo` shell with a :doc:`connection string
  </reference/connection-string>` that specifies the host and port and
  other connection options. For example:

  .. code-block:: sh

     mongo "mongodb://mongodb.example.com:27017/testdb?ssl=true"

  To connect :binary:`~bin.mongo` shell to a replica set, you can
  specify in the :doc:`connection string
  </reference/connection-string>` the replica set members and name:

  .. code-block:: sh

     mongo "mongodb://mongodb0.example.com.local:27017,mongodb1.example.com.local:27017,mongodb2.example.com.local:27017/?replicaSet=replA"

  For more information on the connection string options, see
  :doc:`/reference/connection-string`.

- You can run :binary:`~bin.mongo` shell with various command-line
  options. For example:

  .. code-block:: sh

     mongo --host mongodb.example.com:27017 [additional options]

     mongo --host mongodb.example.com --port 27017 [additional options]

  For more information on the options available, see :ref:`mongo-shell-options`.

.. |binary| replace:: :binary:`~bin.mongo`

.. _mongo-shell-options:

Options
-------

Core Options
~~~~~~~~~~~~

.. program:: mongo

.. option:: --shell

   Enables the shell interface. If you invoke the :program:`mongo` command
   and specify a JavaScript file as an argument, or use :option:`--eval` to
   specify JavaScript on the command line, the :option:`--shell` option
   provides the user with a shell prompt after the file finishes executing.


.. option:: --nodb

   Prevents the shell from connecting to any database instances. Later, to
   connect to a database within the shell, see
   :ref:`mongo-shell-new-connections`.
   


.. option:: --norc

   Prevents the shell from sourcing and evaluating :file:`~/.mongorc.js` on
   start up.
   


.. option:: --quiet

   Silences output from the shell during the connection process.
   


.. option:: --port <port>

   Specifies the port where the :binary:`~bin.mongod` or :binary:`~bin.mongos`
   instance is listening. If :option:`--port` is not specified,
   :program:`mongo` attempts to connect to port ``27017``.


.. option:: --host <hostname>

   Specifies the name of the host machine where the
   :binary:`~bin.mongod` or :binary:`~bin.mongos` is running. If this is not specified,
   :program:`mongo` attempts to connect to a MongoDB process running on
   the localhost.
   
   To connect to a replica set,
      Specify the :setting:`replica set name <~replication.replSetName>`
      and a seed list of set members. Use the following form:
   
      .. code-block:: none
   
         <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   For TLS/SSL connections (``--ssl``),
     .. include:: /includes/extracts/ssl-facts-mongo-ssl-hostname-verification.rst
   
   For `DNS seedlist connections <https://docs.mongodb.com/manual/reference/connection-string/#dns-seedlist-connection-format/>`_, 
      Specify the connection protocol as ``mongodb+srv``, followed by
      the DNS SRV hostname record and any options. The ``authSource``
      and ``replicaSet`` options, if included in the connection string,
      will override any corresponding DNS-configured options set in the
      TXT record. Use of the ``mongodb+srv:`` connection string
      implicitly enables TLS/SSL (normally set with ``ssl=true``) for
      the client connection. The TLS/SSL option can be turned off by
      setting ``ssl=false`` in the query string.
   
      Example:
   
      .. code-block:: none
   
         mongodb+srv://server.example.com/?connectionTimeout=3000ms
   
      .. versionadded:: 3.6


.. option:: --eval <javascript>

   Evaluates a JavaScript expression that is specified as an argument.
   :program:`mongo` does not load its own environment when evaluating code.
   As a result many options of the shell environment are not available.


.. option:: --username <username>, -u <username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--password` and
   :option:`--authenticationDatabase` options.
   


.. option:: --password <password>, -p <password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the :option:`--username`
   and :option:`--authenticationDatabase` options. To force :program:`mongo` to
   prompt for a password, enter the :option:`--password` option as the
   last option and leave out the argument.


.. option:: --help, -h

   Returns information on the options and use of :program:`mongo`.


.. option:: --version

   Returns the :program:`mongo` release number.


.. option:: --verbose

   Increases the verbosity of the output of the shell during the connection
   process.
   


.. option:: --networkMessageCompressors <string>

   
   .. versionadded:: 3.4
   
   Enables network compression for communication between this
   :program:`mongo` shell and:
   
   - a :binary:`~bin.mongod` instance
   
   - a :binary:`~bin.mongos` instance.
   
   You can specify the following compressors:	
   
   - :term:`snappy`
   
   - :term:`zlib` (Available in MongoDB 3.6 or greater)
   
   .. include:: /includes/fact-networkMessageCompressors.rst


.. option:: --ipv6

   Enables IPv6 support. :program:`mongo` disables IPv6 by default.
   
   To connect to a MongoDB cluster via IPv6, you must specify
   both :option:`--ipv6` *and* 
   :option:`--host \<mongod/mongos IPv6 address\> <mongo --host>`
   when starting the :program:`mongo` shell.
   
   :binary:`~bin.mongod` and :binary:`~bin.mongos` disable IPv6 support
   by default. Specifying :option:`--ipv6` when connecting to a
   ``mongod/mongos`` does not enable IPv6 support on the 
   ``mongod/mongos``. For documentation on enabling IPv6 support
   on the ``mongod/mongos``, see :setting:`net.ipv6`.


.. option:: <db name>

   Specifies the name of the database to connect to. For
   example:
   
   .. code-block:: sh
   
      mongo admin
   
   The above command will connect the :program:`mongo` shell to the
   :term:`admin database` of the MongoDB deployment running on the local machine. You may specify a remote
   database instance, with the resolvable hostname or IP address. Separate
   the database name from the hostname using a ``/`` character. See the
   following examples:
   
   .. code-block:: none
   
      mongo mongodb1.example.net/test
      mongo mongodb1/admin
      mongo 10.8.8.10/test
   
   This syntax is the *only* way to connect to a specific database.
   
   To specify alternate hosts and a database, you must use this syntax and cannot
   use :option:`--host` or :option:`--port`.


.. option:: --enableJavaScriptJIT

   .. versionadded:: 4.0
   
   Enable the JavaScript engine's JIT compiler.
   


.. option:: --disableJavaScriptJIT

   .. versionchanged:: 4.0
   
      .. include:: /includes/fact-jit-disabled.rst
   
   Disables the JavaScript engine's JIT compiler.
   


.. option:: --disableJavaScriptProtection

   .. versionadded:: 3.4
   
   Allows fields of type :ref:`javascript<bson-types>` and
   :ref:`javascriptWithScope<bson-types>` to be automatically
   marshalled to JavaScript functions in the :binary:`~bin.mongo`
   shell.
   
   With the ``--disableJavaScriptProtection`` flag set, it is possible
   to immediately execute JavaScript functions contained in documents.
   The following example demonstrates this behavior within the shell:
   
   .. code-block:: javascript
   
      > db.test.insert({ _id: 1, jsFunc: function(){ print("hello") } } )
      WriteResult({ "nInserted" : 1 })
      > var doc = db.test.findOne({ _id: 1 })
      > doc
      { "_id" : 1, "jsFunc" : function (){ print ("hello") } }
      > typeof doc.jsFunc
      function
      > doc.jsFunc()
      hello
   
   The default behavior (when :binary:`~bin.mongo` starts *without* the
   ``--disableJavaScriptProtection`` flag) is to convert embedded
   JavaScript functions to the non-executable MongoDB shell type
   ``Code``. The following example demonstrates the default behavior
   within the shell:
   
   .. code-block:: javascript
   
      > db.test.insert({ _id: 1, jsFunc: function(){ print("hello") } } )
      WriteResult({ "nInserted" : 1 })
      > var doc = db.test.findOne({ _id: 1 })
      > doc
      { "_id" : 1, "jsFunc" : { "code" : "function (){print(\"hello\")}" } }
      > typeof doc.func
      object
      > doc.func instanceof Code
      true
      > doc.jsFunc()
      2016-11-09T12:30:36.808-0800 E QUERY    [thread1] TypeError: doc.jsFunc is
      not a function :
      @(shell):1:1
   


.. _mongo-shell-file:

.. option:: <file.js>

   Specifies a JavaScript file to run and then exit. Generally this should
   be the last option specified.
   
   .. optional:: To specify a JavaScript file to execute *and* allow
      :program:`mongo` to prompt you for a password using
      :option:`--password`, pass the filename as the first parameter with
      :option:`--username` and :option:`--password` as the last options, as
      in the following:
   
      .. code-block:: sh
   
         mongo file.js --username username --password
   
   Use the :option:`--shell` option to return to a shell after the file
   finishes running.


.. _mongo-shell-authentication-options:

Authentication Options
~~~~~~~~~~~~~~~~~~~~~~

.. option:: --authenticationDatabase <dbname>

   
   Specifies the authentication database where the specified :option:`--username` has been created.
   See :ref:`user-authentication-database`.
   

   If you do not specify a value for :option:`--authenticationDatabase`, :program:`mongo` uses the database
   specified in the connection string.


.. _mongo-shell-authentication-mechanisms:

.. option:: --authenticationMechanism <name>

   *Default*: SCRAM-SHA-1

   Specifies the authentication mechanism the :program:`mongo` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.
   
   .. versionchanged:: 4.0
   
      MongoDB removes support for the deprecated MongoDB
      Challenge-Response (``MONGODB-CR``) authentication mechanism.
   
      MongoDB adds support for SCRAM mechanism using the SHA-256 hash
      function (``SCRAM-SHA-256``).
   
   .. include:: /includes/list-table-auth-mechanisms.rst


.. option:: --gssapiHostName

   .. versionadded:: 2.6
   
   Specify the hostname of a service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiServiceName

   .. versionadded:: 2.6
   
   Specify the name of the service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. _mongo-shell-ssl:

TLS/SSL Options
~~~~~~~~~~~~~~~

.. option:: --ssl

   
   .. versionchanged:: 3.2.6
   
   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   .. include:: /includes/extracts/ssl-facts-mongo-shell-ca.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslPEMKeyFile <filename>

   
   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the ``--ssl`` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.allowConnectionsWithoutCertificates`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslPEMKeyPassword <value>

   
   Specifies the password to de-crypt the certificate-key file (i.e.
   ``--sslPEMKeyFile``). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongo` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not
   specify the :option:`--sslPEMKeyPassword` option, the :program:`mongo` will prompt for a
   passphrase. See :ref:`ssl-certificate-password`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslCAFile <filename>

   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-mongo-shell-ca.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslCertificateSelector <parameter>=<value>

   
   .. versionadded:: 4.0
   
      Available on Windows and macOS as an alternative to :option:`--sslPEMKeyFile`.
      
      :option:`--sslPEMKeyFile` and :option:`--sslCertificateSelector` options are mutually exclusive. You can only
      specify one.
   
   Specifies a certificate property in order to select a matching
   certificate from the operating system's certificate store.
   
   :option:`--sslCertificateSelector` accepts an argument of the format ``<property>=<value>``
   where the property can be one of the following:
   
   .. include:: /includes/extracts/ssl-facts-certificate-selector-properties.rst
   
   .. include:: /includes/extracts/ssl-facts-certificate-selector-revocation.rst  


.. option:: --sslCRLFile <filename>

   
   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslFIPSMode

   .. versionadded:: 2.6
   
   Directs the :program:`mongo` to use the FIPS mode of the TLS/SSL  
   library. Your system must have a FIPS compliant library to use
   the :option:`--sslFIPSMode` option.
   
   .. include:: /includes/note-fips-is-enterprise-only.rst


.. option:: --sslAllowInvalidCertificates

   
   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates to connect.
   
   .. note::
      
      .. include:: /includes/extracts/ssl-facts-x509-invalid-certificate.rst
   
   .. include:: /includes/extracts/ssl-facts-invalid-cert-warning-clients.rst
   
   When using the :setting:`~net.ssl.allowInvalidCertificates` setting,
   MongoDB logs as a warning the use of the invalid certificate.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. option:: --sslAllowInvalidHostnames

   .. versionadded:: 3.0
   
   Disables the validation of the hostnames in TLS/SSL certificates. Allows
   :program:`mongo` to connect to MongoDB instances even if the hostname in their
   certificates do not match the specified hostname.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. option:: --sslDisabledProtocols <string>

   
   Disables the specified TLS protocols. The option recognizes the
   following protocols: ``TLS1_0``, ``TLS1_1``, ``TLS1_2``, and
   starting in version 4.0.4 (and 3.6.9 and 3.4.24), ``TLS1_3``.
   
   - On macOS, you cannot disable ``TLS1_1`` and leave both ``TLS1_0`` and
     ``TLS1_2`` enabled. You must also disable at least one of the other
     two; for example, ``TLS1_0,TLS1_1``.
   
   - To list multiple protocols, specify as a comma separated list of
     protocols. For example ``TLS1_0,TLS1_1``.
   
   - The specified disabled protocols overrides any default disabled
     protocols.
   
   Starting in version 4.0, MongoDB disables the use of TLS 1.0 if TLS
   1.1+ is available on the system. To enable the
   disabled TLS 1.0, specify ``none`` to :option:`--sslDisabledProtocols`.  See :ref:`4.0-disable-tls`.
   
   .. versionadded:: 3.6.5


Sessions
~~~~~~~~

.. option:: --retryWrites

   
   .. versionadded:: 3.6
   
   Enables retryable writes as the default for sessions in the
   :binary:`~bin.mongo` shell.
   
   For more information on sessions, see :ref:`sessions`.
   


Files
-----

.. _mongo-dbshell-file:

:file:`~/.dbshell`
   :binary:`~bin.mongo` maintains a history of commands in the :file:`.dbshell`
   file.

   .. note::

      :binary:`~bin.mongo` does not record interaction related to
      authentication in the history file, including
      :dbcommand:`authenticate` and :method:`db.createUser()`.

.. _mongo-mongorc-file:

:file:`~/.mongorc.js`
   :binary:`~bin.mongo` will read the ``.mongorc.js`` file from the home
   directory of the user invoking :binary:`~bin.mongo`. In the file, users
   can define variables, customize the :binary:`~bin.mongo` shell prompt,
   or update information that they would like updated every time they
   launch a shell. If you use the shell to evaluate a JavaScript file
   or expression either on the command line with :option:`mongo --eval` or
   by specifying :ref:`a .js file to mongo <mongo-shell-file>`,
   :binary:`~bin.mongo` will read the ``.mongorc.js`` file *after* the
   JavaScript has finished processing.

   Specify the :option:`--norc <mongo --norc>` option to disable
   reading ``.mongorc.js``.

.. _mongo-global-mongorc-file:

:file:`/etc/mongorc.js`
   Global ``mongorc.js`` file which the :binary:`~bin.mongo` shell
   evaluates upon start-up. If a user also has a :file:`.mongorc.js`
   file located in the :envvar:`HOME` directory, the :binary:`~bin.mongo`
   shell evaluates the global :file:`/etc/mongorc.js` file *before*
   evaluating the user's :file:`.mongorc.js` file.

   :file:`/etc/mongorc.js` must have read permission for the user
   running the shell. The :option:`--norc <mongo --norc>` option for :binary:`~bin.mongo`
   suppresses only the user's :file:`.mongorc.js` file.

   On Windows, the global :file:`mongorc.js </etc/mongorc.js>` exists
   in the :file:`%ProgramData%\\MongoDB` directory.

:file:`/tmp/mongo_edit{<time_t>}.js`
   Created by :binary:`~bin.mongo` when editing a file. If the file exists,
   :binary:`~bin.mongo` will append an integer from ``1`` to ``10`` to the
   time value to attempt to create a unique file.

:file:`%TEMP%\mongo_edit{<time_t>}.js`
   Created by :binary:`~bin.mongo.exe` on Windows when editing a file. If
   the file exists, :binary:`~bin.mongo` will append an integer from ``1``
   to ``10`` to the time value to attempt to create a unique file.


Environment
-----------

.. envvar:: EDITOR

   Specifies the path to an editor to use with the ``edit`` shell
   command.  A JavaScript variable ``EDITOR`` will override the value of
   :envvar:`EDITOR`.

.. envvar:: HOME

   Specifies the path to the home directory where :binary:`~bin.mongo` will
   read the :file:`.mongorc.js` file and write the :file:`.dbshell`
   file.

.. envvar:: HOMEDRIVE

   On Windows systems, :envvar:`HOMEDRIVE` specifies the path the
   directory where :binary:`~bin.mongo` will read the :file:`.mongorc.js`
   file and write the :file:`.dbshell` file.

.. envvar:: HOMEPATH

   Specifies the Windows path to the home directory where
   :binary:`~bin.mongo` will read the :file:`.mongorc.js` file and write
   the :file:`.dbshell` file.

.. _mongo-keyboard-shortcuts:

Keyboard Shortcuts
------------------

The :binary:`~bin.mongo` shell supports the following keyboard shortcuts:
[#multiple-bindings]_

.. list-table::
   :header-rows: 1

   * - **Keybinding**
     - **Function**

   * - Up arrow
     - Retrieve previous command from history

   * - Down-arrow
     - Retrieve next command from history

   * - Home
     - Go to beginning of the line

   * - End
     - Go to end of the line

   * - Tab
     - Autocomplete method/command

   * - Left-arrow
     - Go backward one character

   * - Right-arrow
     - Go forward one character

   * - Ctrl-left-arrow
     - Go backward one word

   * - Ctrl-right-arrow
     - Go forward one word

   * - Meta-left-arrow
     - Go backward one word

   * - Meta-right-arrow
     - Go forward one word

   * - Ctrl-A
     - Go to the beginning of the line

   * - Ctrl-B
     - Go backward one character

   * - Ctrl-C
     - Exit the :binary:`~bin.mongo` shell

   * - Ctrl-D
     - Delete a char (or exit the :binary:`~bin.mongo` shell)

   * - Ctrl-E
     - Go to the end of the line

   * - Ctrl-F
     - Go forward one character

   * - Ctrl-G
     - Abort

   * - Ctrl-J
     - Accept/evaluate the line

   * - Ctrl-K
     - Kill/erase the line

   * - Ctrl-L or type ``cls``
     - Clear the screen

   * - Ctrl-M
     - Accept/evaluate the line

   * - Ctrl-N
     - Retrieve next command from history

   * - Ctrl-P
     - Retrieve previous command from history

   * - Ctrl-R
     - Reverse-search command history

   * - Ctrl-S
     - Forward-search command history

   * - Ctrl-T
     - Transpose characters

   * - Ctrl-U
     - Perform Unix line-discard

   * - Ctrl-W
     - Perform Unix word-rubout

   * - Ctrl-Y
     - Yank

   * - Ctrl-Z
     - Suspend (job control works in linux)

   * - Ctrl-H
     - Backward-delete a character

   * - Ctrl-I
     - Complete, same as Tab

   * - Meta-B
     - Go backward one word

   * - Meta-C
     - Capitalize word

   * - Meta-D
     - Kill word

   * - Meta-F
     - Go forward one word

   * - Meta-L
     - Change word to lowercase

   * - Meta-U
     - Change word to uppercase

   * - Meta-Y
     - Yank-pop

   * - Meta-Backspace
     - Backward-kill word

   * - Meta-<
     - Retrieve the first command in command history

   * - Meta->
     - Retrieve the last command in command history

.. [#multiple-bindings] MongoDB accommodates multiple keybinding.
   Since 2.0, :binary:`~bin.mongo` includes support for basic emacs
   keybindings.

.. _mongo-usage-examples:

Use
---

Typically users invoke the shell with the :binary:`~bin.mongo` command at
the system prompt. Consider the following examples for other
scenarios.

Connect to a :binary:`~bin.mongod` Instance with Access Control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to a database on a remote host using authentication and a
non-standard port, use the following form:

.. code-block:: sh

   mongo --username <user> --password <pass> --host <host> --port 28015

Alternatively, consider the following short form:

.. code-block:: sh

   mongo -u <user> -p <pass> --host <host> --port 28015

Replace ``<user>``, ``<pass>``, and ``<host>`` with the appropriate
values for your situation and substitute or omit the :option:`--port <mongo --port>`
as needed.

.. _example-connect-mongo-using-srv:

Connect to a Replica Set Using the DNS Seedlist Connection Format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.6

To connect to a replica set described using the
:ref:`connections-dns-seedlist`, use the :option:`--host <mongo --host>` option
to specify the connection string to the :binary:`~bin.mongo` shell. In
the following example, the DNS configuration resembles:

.. code-block:: none

   Record                            TTL   Class    Priority Weight Port  Target
   _mongodb._tcp.server.example.com. 86400 IN SRV   0        5      27317 mongodb1.example.com.
   _mongodb._tcp.server.example.com. 86400 IN SRV   0        5      27017 mongodb2.example.com.

The TXT record for the DNS entry includes the ``replicaSet`` and ``authSource`` options:

.. code-block:: none

   Record              TTL   Class    Text
   server.example.com. 86400 IN TXT   "replicaSet=rs0&authSource=admin"

The following command then connects the :binary:`~bin.mongo` shell to
the replica set:

.. code-block:: none

   mongo --host "mongodb+srv://server.example.com/?username=allison"

The :binary:`~bin.mongo` shell will automatically prompt you to provide
the password for the user specified in the ``username`` option.

Execute JavaScript Against the :binary:`~bin.mongo` Shell
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To execute a JavaScript file without evaluating the :file:`~/.mongorc.js`
file before starting a shell session, use the following form:

.. code-block:: sh

   mongo --shell --norc alternate-environment.js

To execute a JavaScript file with authentication, with password prompted
rather than provided on the command-line, use the following form:

.. code-block:: sh

   mongo script-file.js -u <user> -p

Use :option:`--eval <mongo --eval>` to Execute JavaScript Code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You may use the :option:`--eval <mongo --eval>` option to execute
JavaScript directly from the command line.

For example, the following operation evaluates a JavaScript string
which queries a collection and prints the results as JSON.

On Linux and macOS, you will need to use single quotes (e.g. ``'``)
to enclose the JavaScript, using the following form:

.. code-block:: sh

   mongo --eval 'db.collection.find().forEach(printjson)'

On Windows, you will need to use double quotes (e.g. ``"``)
to enclose the JavaScript, using the following form:

.. code-block:: sh

   mongo --eval "db.collection.find().forEach(printjson)"

.. seealso::

   - :doc:`/reference/mongo-shell`

   - :doc:`/reference/method`

   - :doc:`/mongo`


