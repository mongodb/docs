==============================================
Operational Segregation in MongoDB Deployments
==============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Operational Overview
--------------------

MongoDB includes a number of features that allow database administrators
and developers to segregate application operations to MongoDB
deployments by functional or geographical groupings.

.. COMMENT

   We will move the content about data center awareness to a separate
   page with more specific examples about geographical segregation of
   operations.

.. END-COMMENT

This capability provides "data center awareness," which allows
applications to target MongoDB deployments with consideration of the
physical location of the :binary:`~bin.mongod` instances. MongoDB supports
segmentation of operations across different dimensions, which may
include multiple data centers and geographical regions in multi-data
center deployments, racks, networks, or power circuits in single
data center deployments.

MongoDB also supports segregation of database operations based on
functional or operational parameters, to ensure that certain
:binary:`~bin.mongod` instances are only used for reporting workloads or
that certain high-frequency portions of a sharded collection only
exist on specific shards.

Specifically, with MongoDB, you can:

- ensure write operations propagate to specific members of a replica
  set, or to specific members of replica sets.

- ensure that specific members of a replica set respond to queries.

- ensure that specific ranges of your :term:`shard key` balance onto and
  reside on specific :term:`shards <shard>`.

- combine the above features in a single distributed deployment, on a
  per-operation (for read and write operations) and collection (for
  chunk distribution in sharded clusters distribution) basis.

For full documentation of these features, see the following
documentation in the MongoDB Manual:

- :doc:`Read Preferences </core/read-preference>`, which controls how drivers
  help applications target read operations to members of a replica set.

- :doc:`Write Concerns </reference/write-concern>`, which controls
  how MongoDB ensures that write operations propagate to members of a
  replica set.

- :ref:`Replica Set Tags <replica-set-configuration-tag-sets>`, which
  control how applications create and interact with custom groupings
  of replica set members to create custom application-specific read
  preferences and write concerns.

- :ref:`Zones <zone-sharding>` in sharded clusters, which allows MongoDB
  administrators to create zones that represent a group of shards and
  associate one or more ranges of :term:`shard key` values to that zone.
  MongoDB routes reads and writes that fall into a zone range only to those
  shards inside of the zone.
  
- :ref:`Zones <zone-sharding>` in sharded clusters, which allows you to create
  :term:`zones <zone>` of sharded data based on the :term:`shard key`. You can
  associate each zone with one or more shards in the cluster. A shard can
  associate with any number of non-conflicting zones. In a balanced cluster,
  MongoDB directs reads and writes covered by a zone only to those shards
  inside the zone.

.. seealso::

   Before adding operational segregation features to your application
   and MongoDB deployment, become familiar with all documentation of
   :doc:`replication </replication>`, and :doc:`sharding </sharding>`.

.. TODO uncomment this section when we can write content for it:

   Examples of Operational Segregation
   -----------------------------------

   Increase Data Locality in Geographically Distributed Cluster
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Functional Segregation for Reporting and Backups
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Increase Read Locality for Distributed Applications
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Ensure Geographical Redundancy for Write Operations
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
