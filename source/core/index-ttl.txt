

.. _index-feature-ttl:

===========
TTL Indexes
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. note::

   If you are removing documents to save on storage costs, consider
   :atlas:`Online Archive </online-archive/manage-online-archive>` in
   `MongoDB Atlas <https://www.mongodb.com/cloud?tck=docs_server>`__. Online
   Archive automatically archives infrequently accessed data to
   fully-managed S3 buckets for cost-effective data
   tiering.

TTL indexes are special single-field indexes that MongoDB can use to
automatically remove documents from a collection after a certain amount
of time or at a specific clock time. Data expiration is useful for certain types of information
like machine generated event data, logs, and session information that
only need to persist in a database for a finite amount of time.

.. |page-topic| replace:: :ref:`create and manage TTL indexes in the UI <expire-data-atlas-ui>`

.. cta-banner::
   :url: https://www.mongodb.com/docs/manual/tutorial/expire-data/#expire-documents-in-the-mongodb-atlas-ui
   :icon: Cloud

   .. include:: /includes/fact-atlas-compatible.rst

Create a TTL Index
------------------

.. warning::

   After you create a TTL index, it might have a very large number of 
   qualifying documents to delete at once. This large workload might 
   cause performance issues on the server. To avoid these issues, plan 
   to create the index during off hours, or delete qualifying documents 
   in batches before you create the index for future documents.

.. include:: /includes/indexes/create-ttl-indexes.rst

.. include:: includes/expireAfterSeconds-range.rst

For example, to create a TTL index on the ``lastModifiedDate`` field of
the ``eventlog`` collection, with a TTL value of ``3600`` seconds, use
the following operation in :binary:`~bin.mongosh`:

.. code-block:: javascript

   db.eventlog.createIndex( { "lastModifiedDate": 1 }, { expireAfterSeconds: 3600 } )

.. include:: /includes/time-series-ttl-deletes.rst

.. _convert-non-ttl-single-field-index-into-ttl:

Convert a non-TTL single-field Index into a TTL Index
-----------------------------------------------------

Starting in MongoDB 5.1, you can add the ``expireAfterSeconds`` option
to an existing single-field index. To change a non-TTL single-field
index to a TTL index, use the :dbcommand:`collMod` database command:

.. code-block:: javascript

   db.runCommand({
     "collMod": <collName>,
     "index": {
       "keyPattern": <keyPattern>,
       "expireAfterSeconds": <number>
     }
   })

The following example converts a non-TTL single-field index with the
pattern ``{ "lastModifiedDate": 1 }`` into a TTL index:

.. code-block:: javascript

   db.runCommand({
     "collMod": "tickets",
     "index": {
       "keyPattern": { "lastModifiedDate": 1 },
       "expireAfterSeconds": 100
     }
   })

.. _change-ttl-expireafterseconds-value:

Change the ``expireAfterSeconds`` value for a TTL Index
-------------------------------------------------------

To change the ``expireAfterSeconds`` value for a TTL Index, use the
:dbcommand:`collMod` database command:

.. code-block:: javascript

   db.runCommand({
     "collMod": <collName>,
     "index": {
       "keyPattern": <keyPattern>,
       "expireAfterSeconds": <number>
     }
   })

The following example changes the ``expireAfterSeconds`` value for an
index with the pattern ``{ "lastModifiedDate": 1 }`` on the ``tickets``
collection:

.. code-block:: javascript

   db.runCommand({
     "collMod": "tickets",
     "index": {
       "keyPattern": { "lastModifiedDate": 1 },
       "expireAfterSeconds": 100
     }
   })

.. important::

   Consider the following before updating the ``expireAfterSeconds``
   parameter of a TTL index:

   - Changing the ``expireAfterSeconds`` parameter **does not** trigger a 
     complete index rebuild. However, reducing the ``expireAfterSeconds`` 
     value can make many documents eligible for immediate deletion, 
     potentially causing performance issues due to the increased delete 
     operations.

   - The recommended approach is to manually delete documents in 
     small batches before updating the TTL index. This helps control 
     the impact on your cluster.

   - Deleting many documents can fragment storage files, additionally 
     impacting performance. You may need to run the 
     :ref:`compact <compact>` command on your collection or 
     perform a :ref:`replica-set-initial-sync` to reclaim space and 
     optimize storage.

Behavior
--------

Expiration of Data
~~~~~~~~~~~~~~~~~~

TTL indexes expire documents after the specified number of seconds has
passed since the indexed field value. The expiration threshold is
the indexed field value plus the specified number of seconds. 

If the field is an array, and there are multiple date values in the
index, MongoDB uses *lowest* (earliest) date value in the array to
calculate the expiration threshold.

If the indexed field in a document is not a
:ref:`date <document-bson-type-date>` or an array that holds one or
more date values, the document will not expire.

If a document does not contain the indexed field, the document will not
expire.

Delete Operations
~~~~~~~~~~~~~~~~~

A background thread in :binary:`~bin.mongod` reads the values in the index
and removes expired :term:`documents <document>` from the collection.

When the TTL thread is active, you will see delete operations in the
output of :method:`db.currentOp()` or in the data collected by the
:ref:`database profiler <database-profiler>`.


.. include:: /includes/time-series-ttl-deletes.rst

Timing of the Delete Operation
``````````````````````````````

MongoDB begins removing expired documents as soon as the index
finishes building on the :term:`primary`. For more information on the
index build process, see :ref:`index-operations`.

.. include:: /includes/fact-ttl-collection-background-timing.rst

Replica Sets
````````````

On :term:`replica set <replica set>` members, the TTL background thread *only*
deletes documents when a member is in state :term:`primary`. The TTL background
thread is idle when a member is in state :term:`secondary`. :term:`Secondary <secondary>` members replicate
deletion operations from the primary.

Support for Queries
~~~~~~~~~~~~~~~~~~~

A TTL index supports queries in the same way non-TTL indexes do.

Restrictions
------------

- TTL indexes are single-field indexes. :ref:`Compound indexes
  <index-type-compound>` do not support TTL and ignore the
  ``expireAfterSeconds`` option.

- The ``_id`` field does not support TTL indexes.

- You cannot create a TTL index on a :ref:`capped collection
  <manual-capped-collection>`.

- You cannot create a TTL index on a :doc:`time series collection
  </core/timeseries-collections>`. Similar functionality is provided
  through :ref:`automatic removal on time series collections
  <manual-timeseries-automatic-removal>` instead.

- You cannot use :method:`~db.collection.createIndex()` to change the
  value of ``expireAfterSeconds`` of an existing index. Instead use the
  :dbcommand:`collMod` database command. See
  :ref:`change-ttl-expireafterseconds-value`.

- If a non-TTL single-field index already exists for a field, you
  cannot create a TTL index on the same field since you cannot create
  indexes that have the same key specification and differ only by the
  options. To :ref:`change a non-TTL single-field index to a TTL index
  <convert-non-ttl-single-field-index-into-ttl>`, use the
  :dbcommand:`collMod` database command.


.. toctree::
   :titlesonly:
   :hidden:

   Expire Data </tutorial/expire-data>
