.. _qe-reference-encryption-limits:

===========
Limitations
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Preview Specific Limitations
----------------------------

.. note::

   The following limitations apply during the technical preview for {+qe+}.

Contention Factor
+++++++++++++++++

Contention factor is a setting that helps tune performance based on the
number of concurrent connections.

You can set the contention factor only when specifying the field for encryption.
Once you specify a field for encryption, the contention factor is immutable. If
you don't specify the contention factor, it uses the default value of ``4``.

Manual Data Key Creation
++++++++++++++++++++++++

You must manually create a unique {+dek-long+} for each field you
want to encrypt. In a future release, you will be able to omit the ``keyId``
field from your {+efm+} and a {+qe+} compatible driver will create the
{+dek-abbr+} automatically.

Manual Compaction
+++++++++++++++++

You will need to manually run :ref:`index compaction <qe-index-compaction>`
when your metadata collections exceed 1 GB during the technical preview.
In a future release, compaction will be run automatically when the
metadata collections exceed a defined size.

Compaction is a process that decreases the size of the metadata collections
associated with encrypted fields, and improves performance.

{+efm+} Modification
++++++++++++++++++++++++++++++++++++++++++

Do not modify the {+efm+} passed to your ``MongoClient`` during the
technical preview. Doing so can result in unexpected and incorrect
behavior when querying.

..
  {+qe+} encrypts the set of fields in the  :ref:`encryptedFieldsMap <qe-fundamentals-encrypt-query>`
  configuration that you pass to your ``MongoClient`` constructor. If you
  specify a formerly plaintext field in your {+efm+} configuration that
  exists in the collection documents, you can only query on that field for
  documents inserted after you updated your {+efm+} configuration.

  For example, consider a database in which you have inserted documents
  with a plaintext ``streetAddress`` field. Adding this field to {+efm+}
  and performing subsequent inserts will insert the encrypted value of
  ``streetAddress`` into the database. The driver will send future queries
  for a specific ``streetAddress`` as :bsontype:`BinData<data_binary>`. As
  a result, the plaintext values in the original documents will never match
  future queries.



Read and Write Operation Support
--------------------------------

The :binary:`~bin.mongod` only stores encrypted :bsontype:`BinData
<data_binary>` and applies any aggregation expression or query operator
specifying an encrypted field against the ``BinData`` value. While the
expression or operator may support ``BinData`` fields, the resulting
value may be incorrect or unexpected when compared to issuing that same
expression or operator against the decrypted value. The ``mongod``
throws an error if the expression or operator does not support
``BinData`` values.

Topology Support
----------------

- Replica sets and sharded clusters are supported
- Standalone deployments are not supported
- Secondary reads are not supported

Sharding
--------

- Metadata collections must not be sharded
- Shard keys must not be encrypted fields

CRUD
----

- {+qe+} does not support batch operations. The following operations are
  not supported:

  - :method:`db.collection.insertMany()`
  - :method:`db.collection.updateMany()`
  - :method:`db.collection.deleteMany()`

- {+qe+} limits :method:`db.collection.findAndModify()` arguments.

  - ``fields`` is not allowed
  - ``new`` must be false


Collections
-----------

- {+qe+} supports new collections only. You cannot add or remove {+qe+}
  to existing collections.
- You cannot specify ``jsonSchema`` to :method:`db.createCollection()`
  when creating a {+qe+} collection if the ``jsonSchema`` contains the
  ``encrypt`` keyword. You cannot use {+csfle+} with {+qe+} on the same
  collection.
- You can specify both ``encryptedFields`` and ``jsonSchema`` to
  :method:`db.createCollection()` as long as your :ref:`jsonSchema <schema-validation-overview>`
  does not contain validation for encrypted fields.
- {+qe+} does not support automatic migration from an unencrypted collection.
  You must import the documents one-by-one.
- {+qe+} does not support migration from collections encrypted with {+csfle+}.
  You must decrypted your documents and import them one-by-one.
- {+qe+} does not support :ref:`views-landing-page`,
  :ref:`manual-timeseries-collection`, or :ref:`capped collection <manual-capped-collection>`.
- {+qe+} does not support :ref:`index-feature-ttl` or :ref:`index-type-unique`.
- You cannot rename a collection with encrypted fields.
- You cannot disable ``jsonSchema`` validation.

  - Automatic Encryption document validation when ``encryptedFields`` is
    present in the collection information.
  - You cannot set ``validationLevel`` to ``none``.
  - You cannot set ``validationAction`` to ``warn``.

Drop Collection
+++++++++++++++

- Dropping collections from a ``MongoClient`` that is not configured for {+qe+}
  *will not* drop the associated metadata collections.``mongod`` logs a
  warning if you drop a collection with encrypted fields before dropping
  the metadata collections.

.. tip::

   {+qe+} compatible drivers drop the metadata collections when
   dropping the collection when using a ``MongoClient`` configured for {+qe+}.


Create Collection
+++++++++++++++++

You should always explicitly create collections for use with {+qe+}. Using
implicit collection creation will not create necessary indexes and
metadata collections, resulting in poor query performance.

Query Types
-----------

The query type you specify for a field when creating the collection in
{+efm+} is immutable. You cannot add new query types to an existing field,
and you cannot change the existing query type.

Encrypted Field Names
---------------------

Encrypted field names are immutable. For example, if you specify ``ssn``
as a field to encrypt, you cannot :update:`$rename` the field name to
``taxPayerID``.


Views
-----
Applications cannot rely on the automatic encryption
validation to prevent unsupported queries against views on
collections with encrypted fields.

Queries against :ref:`views <views-landing-page>` on collections
containing values encrypted with {+qe+} may return
unexpected or incorrect results if either the underlying view
aggregation pipeline *or* the query references encrypted fields. If
creating a view on a collection containing values encrypted with {+qe+},
avoid operating on encrypted fields to mitigate the
risk of unexpected or incorrect results.

For more information on views, see :ref:`views <views-landing-page>`.

Collation
---------

{+qe+} ignores user-specified collations or collection default collations.
Encryption obscures the field value and prevents normal collation
behavior. Collation-sensitive queries against encrypted fields may
return unexpected or incorrect results.

For more information on collations, see :ref:`collation-document-fields`.

While MongoDB version 6.0 or later compatible drivers configured for automatic
encryption have :ref:`supported operations for automatic encryption
<qe-reference-automatic-encryption-supported-operations>`,
for unsupported read and write operations the underlying support library
cannot introspect the collection catalog to identify the default
collation. Applications therefore cannot rely on the {+qe+}
validation to prevent querying on encrypted fields with
collation defaults.

Unique Indexes
--------------

:ref:`Unique indexes <index-type-unique>` *cannot* guarantee
uniqueness if the index key specifies any
encrypted fields.

{+qe+} *always* produces a different encrypted value given a specific input.
The server considers each encrypted value unique even though the decrypted
value may not be unique. The collection could therefore contain multiple
documents with duplicate plaintext values for fields with an index-enforced
unique constraint.

While MongoDB version 6.0 or later compatible drivers configured for
automatic encryption have :ref:`supported operations for automatic encryption
<qe-reference-automatic-encryption-supported-operations>`
for unsupported read and write operations, the underlying support library
cannot introspect the index catalog to identify a given field as unique.
Applications cannot rely on automatic encryption validation to prevent
unique constraint violations on randomly-encrypted fields.

The _id Field
-------------

You cannot instruct {+qe+} to encrypt the ``_id`` field because it relies on
the value auto-generated by MongoDB.

Read/Write Query Support
------------------------

Automatic encryption supports a subset of commands, query operators,
update operators, aggregation stages, and aggregation expressions. For
complete documentation, see :ref:`Supported Operations for Automatic Encryption <qe-reference-automatic-encryption-supported-operations>`.
