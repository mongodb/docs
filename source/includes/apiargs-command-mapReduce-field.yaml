arg_name: field
description: |
  The name of the collection on which you want to perform map-reduce.
  This collection will be filtered using ``query`` before being processed
  by the ``map`` function.
interface: command
name: mapReduce
operation: mapReduce
optional: false
position: 0
type: collection
---
arg_name: field
description: |
  A JavaScript function that associates or "maps" a ``value`` with a
  ``key`` and emits the ``key`` and value ``pair``.

  See :ref:`mapReduce-map-cmd` for more information.
interface: command
name: map
operation: mapReduce
optional: false
position: 1
type: function
---
arg_name: field
description: |
  A JavaScript function that "reduces" to a single object all the
  ``values`` associated with a particular ``key``.

  See :ref:`mapReduce-reduce-cmd` for more information.
interface: command
name: reduce
operation: mapReduce
optional: false
position: 2
type: function
---
arg_name: field
description: |
  Follows the ``reduce`` method and modifies the output.

  See :ref:`mapReduce-finalize-cmd` for more information.
interface: command
name: finalize
operation: mapReduce
optional: true
position: 7
type: function
---
arg_name: field
description: |
  Specifies where to output the result of the map-reduce operation. You
  can either output to a collection or return the result inline. On a
  :term:`primary` member of a replica set you can output either to a collection
  or inline, but on a :term:`secondary`, only inline output is
  possible.

  See :ref:`mapReduce-out-cmd` for more information.
interface: command
name: out
operation: mapReduce
optional: false
position: 3
type: string or document
---
arg_name: field
description: |
  Specifies the selection criteria using :doc:`query operators
  </reference/operator>` for determining the documents input to the
  ``map`` function.
interface: command
name: query
operation: mapReduce
optional: true
position: 4
type: document
---
arg_name: field
description: |
  Sorts the *input* documents. This option is useful for
  optimization. For example, specify the sort key to be the same as
  the emit key so that there are fewer reduce operations. The sort key
  must be in an existing index for this collection.
interface: command
name: sort
operation: mapReduce
optional: true
position: 5
type: document
---
arg_name: field
description: |
  Specifies a maximum number of documents for the input into the
  ``map`` function.
interface: command
name: limit
operation: mapReduce
optional: true
position: 6
type: number
---
arg_name: field
description: |
  Specifies global variables that are accessible in the ``map``,
  ``reduce`` and ``finalize`` functions.
interface: command
name: scope
operation: mapReduce
optional: true
position: 8
type: document
---
arg_name: field
description: |
  Specifies whether to convert intermediate data into BSON
  format between the execution of the ``map`` and ``reduce``
  functions.

  Defaults to ``false``.

  If ``false``:

  - Internally, MongoDB converts the JavaScript objects emitted
    by the ``map``
    function to BSON objects. These BSON
    objects are then converted back to JavaScript objects when
    calling the ``reduce`` function.

  - The map-reduce operation places the intermediate BSON objects
    in temporary, on-disk storage. This allows the map-reduce
    operation to execute over arbitrarily large data sets.

  If ``true``:

  - Internally, the JavaScript objects emitted during ``map``
    function remain as JavaScript objects. There is no need to
    convert the objects for the ``reduce`` function, which
    can result in faster execution.

  - You can only use ``jsMode`` for result sets with fewer than
    500,000 distinct ``key`` arguments to the mapper's ``emit()``
    function.

interface: command
name: jsMode
operation: mapReduce
optional: true
position: 9
type: boolean
---
arg_name: field
description: |
  Specifies whether to include the ``timing`` information in the
  result information. Set ``verbose`` to ``true`` to include
  the ``timing`` information.

  Defaults to ``false``.

interface: command
name: verbose
operation: mapReduce
optional: true
position: 10
type: boolean
---
name: bypassDocumentValidation
source:
  ref: bypassDocumentValidation
  file: apiargs-dbcommand-insert-field.yaml
operation: mapReduce
interface: command
position: 11
replacement:
  verb: "insert"
post: |
  .. note::

     If the :ref:`output option <mapreduce-out-cmd>` is set to
     ``inline``, no :doc:`document validation
     </core/schema-validation/>` occurs. If the output goes to
     a collection, :dbcommand:`mapReduce` observes any validation 
     rules which the collection has and does not insert any invalid
     documents unless the ``bypassDocumentValidation`` parameter is
     set to true.
---
arg_name: field
operation: mapReduce
source:
  file: apiargs-dbcommand-aggregate-field.yaml
  ref: collation
position: 12
---

name: writeConcern
description: |

  A document that expresses the :doc:`write concern
  </reference/write-concern>` to use when outputing to a collection.
  Omit to use the default write concern.

optional: true
arg_name: field
type: document
interface: dbcommand
operation: mapReduce
position: 13

...