==============================
Configure |service| API Access
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To access the |service| |api|, generate an
:ref:`API key <atlas-prog-api-key>` for your organization.

.. important:: Personal API Key Deprecation

   - You cannot create new Personal |api| Keys.
   - You cannot use your existing Personal |api| Keys to access the
     |api| from March 1, 2021.
   - You must update any existing scripts or tools to use
     :doc:`Programmatic API Keys </reference/api/apiKeys>` instead.

.. note:: Programmatic API Keys can't use the |mms| Console

   Organization |api| keys aren't associated with user credentials and
   can't log in to the |service| console.

Prerequisite
------------

.. _enable-api-access-list:

Enable the API Access List for Your Organization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For |service| users with a non-empty |api| access list, all |api|
access must originate from an IP address on an |api| access list.
Configure your access list entries to include all clients which require
|api| access. An empty |api| access list grants access to all |api|
endpoints except those that explicitly require an |api| access list.

You can configure |service| to require |api| access listing at the
organization level. When this setting is enabled, all |api| calls
within that organization must originate from an entry on each
respective |service| userâ€™s |api| access list. For organizations that
require |api| access listing, |service| users cannot access any |api|
operations until they define at least one |api| access list entry.

To require an |api| access list for an Organization:

.. include:: /includes/steps/require-ip-access-list.rst

For a description of the |service| |api|'s principles and conventions,
see the :doc:`/api`.

.. _atlas-prog-api-key:

Programmatic API Keys
---------------------

To grant programmatic access to an organization or project using only
the :doc:`API </api>`, create an |api| key.

|api| keys have two parts: a Public Key and a Private Key. You can't
use an |api| key to log into |service| through the user interface.

All |api| keys belong to the organization, but can be given access to
a project.

To create and manage |api| keys, use the :guilabel:`Access Manager`.

When you create a new |api| key, |service| grants key the following
permissions:

.. list-table::
   :widths: 40 60
   :stub-columns: 1

   * - Organization
     - :authrole:`Organization Member`
   * - Project
     -
       - :authrole:`Project Read Only`
       - :authrole:`Organization Member`

You can add more permissions to the new |api| key when you create it.

To add the new |api| key created in an organization,
:ref:`invite the API key to the project <invite-org-app-api-keys>`.

.. _about-org-app-api-keys:

Manage Programmatic Access to One Organization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: Required Permissions

   To perform any of the following actions, you must have the
   :authrole:`Organization Owner` role.

.. _create-org-app-api-key:

Create One API Key in One Organization
``````````````````````````````````````

.. include:: /includes/steps/app-api-key-create-in-org.rst

.. _view-org-app-api-key:

View the Details of One API Key in One Organization
```````````````````````````````````````````````````

.. include:: /includes/steps/app-api-key-view-details-in-org.rst

.. _change-org-app-api-key-roles:

Change One API Key in One Organization
``````````````````````````````````````

You can change the roles, description, or access list of an |api| Key
in an Organization.

.. include:: /includes/steps/app-api-key-change-in-org.rst

.. _delete-org-app-api-key:

Delete an API Key from One Organization
```````````````````````````````````````

.. include:: /includes/steps/app-api-key-delete-from-org.rst

.. _about-project-app-api-keys:

Manage Programmatic Access to One Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: Required Permissions

   To perform any of the following actions, you must have the
   :authrole:`Project Owner` role.

.. _create-project-app-api-key:

Create One API Key for One Project
``````````````````````````````````

.. include:: /includes/steps/app-api-key-create-in-project.rst

.. _invite-org-app-api-keys:

Invite One Organization API Key to One Project
``````````````````````````````````````````````

.. include:: /includes/steps/app-api-key-invite-to-project.rst

.. _view-project-app-api-key:

View the Details of One API Key in One Project
``````````````````````````````````````````````

.. include:: /includes/steps/app-api-key-view-details-in-project.rst

.. _change-project-app-api-key-roles:

Change One API Key's Permissions in One Project
```````````````````````````````````````````````

.. include:: /includes/steps/app-api-key-change-roles-in-project.rst

.. _change-project-app-api-edit-access-list:

Edit One |api| Key's Access List
````````````````````````````````

.. note:: Required Permissions

   To edit a project |api| key's access list, you must have the
   :authrole:`Organization Owner` permission. Changing an |api| key's
   access list might impact multiple projects.

.. include:: /includes/steps/app-api-key-edit-access-list-in-project.rst

.. _delete-project-app-api-key:

Delete One API Key from One Project
```````````````````````````````````

.. include:: /includes/steps/app-api-key-delete-from-project.rst

.. _atlas-personal-api-key:

Personal API Keys (Deprecated)
------------------------------

.. include:: /includes/fact-personal-apikeys-deprecated-ui.rst

You can no longer create Personal |api| Keys. You can manage any
Personal |api| Keys that you have currently.

To manage any existing personal |api| keys:

.. include:: /includes/steps/view-personal-api-keys.rst

When accessing |service| through the |api|, you have the same level of
access as you do through the |service| interface. Your |service|
permissions apply to both the interface and the |api|.

Limit API Operations to Permitted IP Addresses
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To access |api| operations limited to an |api| access list:

- Configure your :ref:`API access list <enable-api-access-list>`
  with the |ipaddr| addresses from which you will issue the whitelisted
  commands.

- Grant your |api| key the :authrole:`Organization Owner` permission to
  issue whitelisted commands.

Address-based access lists protect |api| operations. Only client
requests that originate from a whitelisted |ipaddr| address are
permitted to perform the operations.

Users have their own access lists and own |api| keys. When you issue an
|api| call, you must use an |api| key from your user account and must
issue the command from an address on your user account's access list.
You cannot use your key to issue a whitelisted |api| request from an
address on another user's access list, unless, of course, you've added
that address to your own access list.

On the :doc:`resources </reference/api-resources>` pages in this guide,
whitelisted operations are marked as such.

.. _add-personal-api-key-whitelist:

Add an IPv4 Address to the API Whitelist
````````````````````````````````````````

.. include:: /includes/steps/add-personal-api-key-whitelist.rst

.. _delete-personal-api-key-access-list:

Delete an IPv4 Address from the API Whitelist
`````````````````````````````````````````````

.. include:: /includes/steps/delete-personal-api-key-whitelist.rst
