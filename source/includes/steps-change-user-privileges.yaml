stepnum: 1
source:
  file: steps-connect-with-admin-privileges.yaml
  ref: connect
---
stepnum: 2
source:
  file: steps-connect-with-admin-privileges.yaml
  ref: verify-privileges
---
title: Identify the user's roles and privileges.
stepnum: 3
ref: identify-privileges
pre: |
  To display the roles and privileges of the user to be modified, use the
  :method:`db.getUser()` and :method:`db.getRole()` methods, as described in
  :doc:`/tutorial/verify-user-privileges`.
action:
  pre: |
    For example, to view roles for ``accountUser01`` on the current database, issue:
  code: |
    db.getUser("accountUser01")
  language: javascript
action:
  pre: |
    To display the privileges granted by ``siteRole01`` on the current database, issue:
  code: |
    db.getRole( "siteRole01", { showPrivileges: true } )
  language: javascript
---
title: Identify the privileges to grant or revoke.
stepnum: 4
ref: select-roles-to-modify
pre: |
  Determine which role contains the privileges *and only those privileges*. If
  such a role does not exist, then to grant the privileges will require
  :doc:`creating a new role </tutorial/define-roles>` with the specific set of
  privileges. To revoke a subset of privileges provided by an existing role:
  revoke the original role, :doc:`create a new role </tutorial/define-roles>`
  that contains the privileges *to keep*, and then grant that role to the
  user.
---
title: Modify the user's access.
stepnum: 5
ref: user-modification
action:
  - heading: Revoke a Role
    pre: |
      Revoke a role with the :method:`db.revokeRolesFromUser()` method. Access
      revocations apply as soon as the user tries to run a command. On a
      :program:`mongos` revocations are instant on the :program:`mongos` on
      which the command ran, but there is up to a 10-minute delay before the user
      cache is updated on the other :program:`mongos` instances in the
      cluster. The following example operation removes the
      :authrole:`readWrite` role on the ``accounts`` database from the
      ``accountUser01`` user's existing roles:
    language: javascript
    code: |
      use accounts
      db.revokeRolesFromUser(
          "accountUser01",
          [
            { role: "readWrite", db: "accounts" }
          ]
      )
  - heading: Grant a Role
    pre: |
      Grant a role using the :method:`db.grantRolesToUser()`
      method. For example, the following operation grants the
      ``accountUser01`` user the :authrole:`read` role on the
      ``records`` database:
    language: javascript
    code: |
      use accounts
      db.grantRolesToUser(
          "accountUser01",
          [
            { role: "read", db: "records" }
          ]
      )
...
