========================
db.revokeRolesFromUser()
========================

.. default-domain:: mongodb

Definition
----------

.. method:: db.revokeRolesFromUser (  )

   Removes a one or more roles from a user on the database where the roles
   exist. The :method:`db.revokeRolesFromUser()` method uses the following
   syntax:

   .. code-block:: javascript

      db.revokeRolesFromUser( "<username>", [ <roles> ], { <writeConcern> } )

   The :method:`revokeRolesFromUser` method takes the following arguments:

   .. include:: /reference/method/db.revokeRolesFromUser-param.rst

   .. |local-cmd-name| replace:: :method:`db.revokeRolesFromUser()`
   .. include:: /includes/fact-roles-array-contents.rst

   The :method:`db.revokeRolesFromUser()` method wraps the
   :dbcommand:`revokeRolesFromUser` command.

Required Access
---------------

.. include:: /includes/access-revoke-roles.rst

Example
-------

The ``accountUser01`` user in the ``products`` database has the following
roles:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       },
       { "role" : "read",
         "db" : "stock"
       },
       { "role" : "readWrite",
         "db" : "products"
       }
   ]

The following :method:`db.revokeRolesFromUser()` method removes the two of
the user's roles: the :authrole:`read` role on the ``stock`` database and
the :authrole:`readWrite` role on the ``products`` database, which is also
the database on which the method runs:

.. code-block:: javascript

   use products
   db.revokeRolesFromUser( "accountUser01",
                           [ { role: "read", db: "stock" }, "readWrite" ],
                           { w: "majority" }
                         )

The user ``accountUser01`` user in the ``products`` database now has only
one remaining role:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       }
   ]
