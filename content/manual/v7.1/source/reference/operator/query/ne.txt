===
$ne
===

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. query:: $ne

   :query:`$ne` selects the documents where the value of the
   specified field is not equal to the specified value.
   This includes documents that do not contain the specified field. 

   .. include:: /includes/fact-comparison-order.rst

Compatibility
-------------

.. |operator-method| replace:: ``$ne``

.. include:: /includes/fact-compatibility.rst

Syntax
------

The :query:`$ne` operator has the following form:

.. code-block:: javascript

   { field: { $ne: value } }

Examples
--------

The following examples use the ``inventory`` collection. Create the
collection:

.. include:: /includes/examples-create-inventory.rst

Match Document Fields
~~~~~~~~~~~~~~~~~~~~~

Select all documents in the ``inventory`` collection where ``quantity``
is not equal to ``20``:

.. code-block:: javascript

    db.inventory.find( { quantity: { $ne: 20 } } )

The query will also select documents that do not have the ``quantity``
field.

Example output:

.. code-block:: javascript

   {
     _id: ObjectId("61ba667dfe687fce2f042420"),
     item: 'nuts',
     quantity: 30,
     carrier: { name: 'Shipit', fee: 3 }
   },
   {
     _id: ObjectId("61ba667dfe687fce2f042421"),
     item: 'bolts',
     quantity: 50,
     carrier: { name: 'Shipit', fee: 4 }
   },
   {
     _id: ObjectId("61ba667dfe687fce2f042422"),
     item: 'washers',
     quantity: 10,
     carrier: { name: 'Shipit', fee: 1 }
   }

Perform an Update Based on Embedded Document Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example sets the ``price`` field based on a :query:`$ne`
comparison against a field in an embedded document.

.. code-block:: javascript

   db.inventory.updateMany( { "carrier.fee": { $ne: 1 } }, { $set: { "price": 9.99 } } )

Example output:

.. code-block:: javascript

   {
     _id: ObjectId("61ba66e2fe687fce2f042423"),
     item: 'nuts',
     quantity: 30,
     carrier: { name: 'Shipit', fee: 3 },
     price: 9.99
   },
   {
     _id: ObjectId("61ba66e2fe687fce2f042424"),
     item: 'bolts',
     quantity: 50,
     carrier: { name: 'Shipit', fee: 4 },
     price: 9.99
   },
   {
     _id: ObjectId("61ba66e2fe687fce2f042425"),
     item: 'washers',
     quantity: 10,
     carrier: { name: 'Shipit', fee: 1 }
   }

This :method:`~db.collection.updateMany()` operation searches for an
embedded document, ``carrier``, with a subfield named ``fee``. It sets
``{ price: 9.99 }`` in each document where ``fee`` has a value that
does not equal 1 or where the ``fee`` subfield does not exist.

.. include:: /includes/extracts/ne_operators_selectivity.rst

.. seealso::

   - :method:`~db.collection.find()`
   - :update:`$set`

