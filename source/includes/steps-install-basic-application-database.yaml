title: Create a data directory on each server.
stepnum: 1
ref: data-directories
action:
  pre: |
   The :ref:`mms-application-database` uses **server 1** for the primary,
   **server 2** for the arbiter, and **server 3** for the secondary.
   Create a data directory on each server and set ``mongod`` as the
   directory's owner. For example:
  language: sh
  code: |
    sudo mkdir -p /data/appdb
    sudo chown mongod:mongod /data /data/appdb
---
title: Start each MongoDB instance.
stepnum: 2
ref: start-mongod-instance
pre: |
  For each replica set member, start the :program:`mongod` daemon and specify
  "``mongod``" as the user. Start each instance on its own dedicated port number
  and with the data directory you created in the previous step. Specify the
  same replica set for all three members.
action:
  pre: |
    The following command starts a MongoDB instance as part of a
    replica set named ``appdb`` and specifies the ``/data/appdb``
    data directory.
  language: sh
  code: |
    sudo -u mongod mongod --port 27017 --dbpath /data/appdb --replSet appdb --logpath /data/appdb/mongodb.log --fork
post: |
  After you complete this step, you should have :program:`mongod` instances
  running on **server1**, **server2**, and **server3**.
---
title: "Connect to the MongoDB instance that will host the database's primary."
stepnum: 3
ref: connect
action:
  pre: |
    Connect to the MongoDB instance running on **server 1**, which is the
    server that hosts the |application| Database's primary. For example, the
    following command connects on port ``27017`` to a MongoDB instance running
    on ``mongodb1.example.net``:
  language: none
  code: |
    mongo --host mongodb1.example.net --port 27017
post: |
  Once you are connected, your command prompt changes to ``>``.
---
title: Initiate the replica set.
stepnum: 4
ref: initiate
action:
  - pre: |
      Issue the following command, which returns ``1`` when the replica set
      successfully initiates:
    language: none
    code: |
      rs.initiate()
  - pre: |
      MongoDB returns ``1`` and creates a replica set with the current member
      as the initial member. The command prompt displays the current state of
      the member. When the member becomes primary, prompt displays
      ``PRIMARY>``.
---
title: Add the remaining members to the replica set.
stepnum: 5
ref: add-members
action:
  pre: |
    Add the :program:`mongod` instances running on **server 3** and **server
    2** as a secondary and an arbiter, respectively. Add the secondary first.
    For example, the following two commands add MongoDB instances running on
    ``mongodb3.example.net`` and on ``mongodb2.example.net``:
  language: javascript
  code: |
    rs.add('mongodb3.example.net:27017')
    rs.addArb('mongodb2.example.net:27017')
---
title: Verify the replica set configuration.
stepnum: 6
ref: verify
action:
  - pre: |
      To verify that the configuration includes the three members, issue
      :manual:`rs.conf() </reference/method/rs.conf>`:
    language: javascript
    code: |
      rs.conf()
  - pre: |
      The method returns output similiar to the following.
    language: javascript
    code: |
      {
          "_id" : "appdb",
          "version" : 3,
          "members" : [
              {
                  "_id" : 0,
                  "host" : "mongodb1.example.net:27017"
              },
              {
                  "_id" : 1,
                  "host" : "mongodb3.example.net:27017"
              },
              {
                  "_id" : 2,
                  "host" : "mongodb2.example.net:27017",
                  "arbiterOnly" : true
              }
          ]
      }
  - pre: |
      Optionally, connect to the MongoDB instances running on the other two
      servers and verify that **server 3** has the ``SECONDARY>`` prompt and
      **server 2** has the ``ARBITER>`` prompt.
post: |
  For more information on deploying replica sets, see :manual:`Deploy a
  Replica Set </tutorial/deploy-replica-set>` in the MongoDB manual.
...
