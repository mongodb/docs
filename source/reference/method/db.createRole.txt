===============
db.createRole()
===============

.. default-domain:: mongodb

Definition
----------

.. method:: db.createRole ( role, writeConcern )

   Creates a role and specifies its :ref:`privileges <privileges>`.
   The role applies to the
   database on which you run the method. The :method:`db.createRole()`
   method returns a *duplicate role* error if the role already exists in the
   database.

   The :method:`db.createRole()` method takes the following arguments:

   .. include:: /reference/method/db.createRole-param.rst

   The ``role`` document has the following form:

   .. code-block:: javascript

      { role: "<name>",
        privileges: [ 
           { resource: { <resource> }, actions: [ "<action>", ... ] },
           ...
        ],
        roles: [ 
           { role: "<role>", db: "<database>" } | "<role>", 
            ...
        ]
      }

   The ``role`` document has the following fields:

   .. include:: /reference/method/db.createRole-role-field.rst

   .. |local-cmd-name| replace:: :method:`db.createRole()`
   .. include:: /includes/fact-roles-array-contents.rst

   The :method:`db.createRole()` method wraps the :dbcommand:`createRole`
   command.

Behavior
--------

A role's privileges apply to the database where the role is created. The
role can inherit privileges from other roles in its database. A role
created on the ``admin`` database can include privileges that apply to all
databases or to the :ref:`cluster <resource-cluster>` and can inherit
privileges from roles in other databases.

Required Access
---------------

.. include:: /includes/access-create-role.rst

Example
-------

The following :method:`db.createRole()` method creates the
``myClusterwideAdmin`` role on the ``admin`` database:

.. code-block:: javascript

   use admin
   db.createRole({ role: "myClusterwideAdmin",
     privileges: [
       { resource: { cluster: true }, actions: [ "addShard" ] },
       { resource: { db: "config", collection: "" }, actions: [ "find", "update", "insert", "remove" ] },
       { resource: { db: "users", collection: "usersCollection" }, actions: [ "update", "insert", "remove" ] },
       { resource: { db: "", collection: "" }, actions: [ "find" ] }
     ],
     roles: [
       { role: "read", db: "admin" }
     ],
     writeConcern: { w: "majority" , wtimeout: 5000 }
   })
