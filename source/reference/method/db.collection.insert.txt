======================
db.collection.insert()
======================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.insert(document|array)

   Inserts a document or an array of documents into a collection.

   .. versionchanged:: 2.2
      The :method:`insert() <db.collection.insert()>` method can accept
      an array of documents to perform a bulk insert of the
      documents into the collection.

   .. include:: /reference/method/db.collection.insert-param.rst

   The :method:`insert() <db.collection.insert()>` method has the
   following behaviors:

   - If the collection does not exist, then the :method:`insert()
     <db.collection.insert()>` method will create the collection.

   - If the document does not specify an :term:`_id` field, then MongoDB
     will add the ``_id`` field and assign a unique :term:`ObjectId` for
     the document before inserting. Most drivers create an ObjectId and
     insert the ``_id`` field, but the :program:`mongod` will create and
     populate the ``_id`` if the driver or application does not.

   - If the document specifies a new field, then the :method:`insert()
     <db.collection.insert()>` method inserts the document with the new
     field. This requires no changes to the data model for the
     collection or the existing documents.

Examples
--------

The following are examples of the :method:`insert()
<db.collection.insert()>` method.

Insert a Document
~~~~~~~~~~~~~~~~~

In the following examples, the document passed to the :method:`insert()
<db.collection.insert()>` method omits the ``_id`` field, which lets
MongoDB generate a unique ``ObjectId`` for ``_id``:

The first example creates a document in the ``products`` collection:

.. code-block:: javascript

   db.products.insert( { item: "card", qty: 15 } )

This creates a new document with an ``_id`` field set to a unique
``ObjectId``:

.. code-block:: javascript

   { "_id" : ObjectId("5063114bd386d8fadbd6b004"), "item" : "card", "qty" : 15 }

The second example inserts a document in the
:doc:`/reference/bios-example-collection`. If the ``bios`` collection
does not exist, the :method:`~db.collection.insert()` method creates the
collection:

.. code-block:: javascript

   db.bios.insert(
      {
        name: { first: 'John', last: 'McCarthy' },
        birth: new Date('Sep 04, 1927'),
        death: new Date('Dec 24, 2011'),
        contribs: [ 'Lisp', 'Artificial Intelligence', 'ALGOL' ],
        awards: [
                  {
                    award: 'Turing Award',
                    year: 1971,
                    by: 'ACM'
                  },
                  {
                    award: 'Kyoto Prize',
                    year: 1988,
                    by: 'Inamori Foundation'
                  },
                  {
                    award: 'National Medal of Science',
                    year: 1990,
                    by: 'National Science Foundation'
                  }
                ]
      }
   )

To verify the inserted document, query the ``bios`` collection:

.. code-block:: javascript

   db.bios.find( { name: { first: 'John', last: 'McCarthy' } } )

The returned document contains an ``_id`` field with the generated
``ObjectId`` value:

.. code-block:: javascript

   {
     "_id" : ObjectId("50a1880488d113a4ae94a94a"),
     "name" : { "first" : "John", "last" : "McCarthy" },
     "birth" : ISODate("1927-09-04T04:00:00Z"),
     "death" : ISODate("2011-12-24T05:00:00Z"),
     "contribs" : [ "Lisp", "Artificial Intelligence", "ALGOL" ],
     "awards" : [
                  {
                    "award" : "Turing Award",
                    "year" : 1971,
                    "by" : "ACM"
                  },
                  {
                    "award" : "Kyoto Prize",
                    "year" :1988,
                    "by" : "Inamori Foundation"
                  },
                  {
                    "award" : "National Medal of Science",
                    "year" : 1990,
                    "by" : "National Science Foundation"
                  }
                ]
   }

.. include:: /includes/note-insert-id-field.rst

Insert a Document with a Custom ID
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following examples, the document passed to the :method:`insert()
<db.collection.insert()>` method includes a unique value for the ``_id``
field. The value of ``_id`` must be unique within the collection.

The first example creates a document with an ``_id`` value of ``10``,
which is unique value for ``_id`` within the ``products`` collection. If
the value were not unique, the insert would fail:

.. code-block:: javascript

   db.products.insert( { _id: 10, item: "box", qty: 20 } )

The insert operation creates the following document:

.. code-block:: javascript

   { "_id" : 10, "item" : "box", "qty" : 20 }

The second example inserts a document in the
:doc:`/reference/bios-example-collection` and gives it an ``_id`` value
of ``1``. If the ``bios`` collection does not exist, the
:method:`~db.collection.insert()` method creates the collection
[#show-collection]_:

.. code-block:: javascript

   db.bios.insert(
      {
        _id: 1,
        name: { first: 'John', last: 'Backus' },
        birth: new Date('Dec 03, 1924'),
        death: new Date('Mar 17, 2007'),
        contribs: [ 'Fortran', 'ALGOL', 'Backus-Naur Form', 'FP' ],
        awards: [
                  {
                    award: 'W.W. McDowell Award',
                    year: 1967,
                    by: 'IEEE Computer Society'
                  },
                  {
                    award: 'National Medal of Science',
                    year: 1975,
                    by: 'National Science Foundation'
                  },
                  {
                    award: 'Turing Award',
                    year: 1977,
                    by: 'ACM'
                  },
                  {
                    award: 'Draper Prize',
                    year: 1993,
                    by: 'National Academy of Engineering'
                  }
                ]
      }
   )

To confirm the insert, :doc:`query </core/read>` the ``bios``
collection:

.. code-block:: javascript

   db.bios.find()

If the ``bios`` collection contains only the document you just inserted,
the query returns only the one document:

.. code-block:: javascript

   {
     "_id" : 1,
     "name" : { "first" : "John", "last" : "Backus" },
     "birth" : ISODate("1924-12-03T05:00:00Z"),
     "death" : ISODate("2007-03-17T04:00:00Z"),
     "contribs" : [ "Fortran", "ALGOL", "Backus-Naur Form", "FP" ],
     "awards" : [
                  {
                    "award" : "W.W. McDowell Award",
                    "year" : 1967,
                    "by" : "IEEE Computer Society"
                  },
                  {
                    "award" : "National Medal of Science",
                    "year" : 1975,
                    "by" : "National Science Foundation"
                  },
                  {
                    "award" : "Turing Award",
                    "year" : 1977,
                    "by" : "ACM"
                  },
                  { "award" : "Draper Prize",
                    "year" : 1993,
                    "by" : "National Academy of Engineering"
                  }
                ]
   }

.. include:: /includes/note-insert-id-field.rst

Insert Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

The following examples insert multiple documents by passing an array of
documents to the :method:`insert() <db.collection.insert()>` method.
Such inserts are called *bulk inserts*.

The first example creates three documents in the ``products``
collection, one with a custom ``_id``:

.. code-block:: javascript

   db.products.insert( [ { _id: 11, item: "pencil", qty: 50, type: "no.2" },
                         {          item: "pen", qty: 20 },
                         {          item: "eraser", qty: 25 }
                       ] )

The operation creates the following three documents. The ``ObjectId``
values are specific to the machine and time when the operation is run:

.. code-block:: javascript

   { "_id" : 11, "item" : "pencil", "qty" : 50, "type" : "no.2" }
   { "_id" : ObjectId("51e0373c6f35bd826f47e9a0"), "item" : "pen", "qty" : 20 }
   { "_id" : ObjectId("51e0373c6f35bd826f47e9a1"), "item" : "eraser", "qty" : 25 }

The second example creates three documents in the
:doc:`/reference/bios-example-collection`. The example illustrates the
*dynamic schema* characteristic of MongoDB. The document with ``_id: 3``
contains a field named ``title`` that does not appear in the other
documents. MongoDB does not require the other documents to contain this
field:

.. code-block:: javascript

   db.bios.insert(
      [
        {
          _id: 3,
          name: { first: 'Grace', last: 'Hopper' },
          title: 'Rear Admiral',
          birth: new Date('Dec 09, 1906'),
          death: new Date('Jan 01, 1992'),
          contribs: [ 'UNIVAC', 'compiler', 'FLOW-MATIC', 'COBOL' ],
          awards: [
                    {
                      award: 'Computer Sciences Man of the Year',
                      year: 1969,
                      by: 'Data Processing Management Association'
                    },
                    {
                      award: 'Distinguished Fellow',
                      year: 1973,
                      by: ' British Computer Society'
                    },
                    {
                      award: 'W. W. McDowell Award',
                      year: 1976,
                      by: 'IEEE Computer Society'
                    },
                    {
                      award: 'National Medal of Technology',
                      year: 1991,
                      by: 'United States'
                    }
                  ]
        },
        {
          _id: 4,
          name: { first: 'Kristen', last: 'Nygaard' },
          birth: new Date('Aug 27, 1926'),
          death: new Date('Aug 10, 2002'),
          contribs: [ 'OOP', 'Simula' ],
          awards: [
                    {
                      award: 'Rosing Prize',
                      year: 1999,
                      by: 'Norwegian Data Association'
                    },
                    {
                      award: 'Turing Award',
                      year: 2001,
                      by: 'ACM'
                    },
                    {
                      award: 'IEEE John von Neumann Medal',
                      year: 2001,
                      by: 'IEEE'
                    }
                  ]
        },
        {
          _id: 5,
          name: { first: 'Ole-Johan', last: 'Dahl' },
          birth: new Date('Oct 12, 1931'),
          death: new Date('Jun 29, 2002'),
          contribs: [ 'OOP', 'Simula' ],
          awards: [
                    {
                      award: 'Rosing Prize',
                      year: 1999,
                      by: 'Norwegian Data Association'
                    },
                    {
                      award: 'Turing Award',
                      year: 2001,
                      by: 'ACM'
                    },
                    {
                      award: 'IEEE John von Neumann Medal',
                      year: 2001,
                      by: 'IEEE'
                    }
                  ]
        }
      ]
   )

.. [#show-collection] You can also view a list of the existing
   collections in the database using the ``show collections``
   operation in the :program:`mongo` shell.
