===============
shardCollection
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: shardCollection

   :doc:`Shards </sharding>` a collection to distribute its documents
   across shards. You must run :dbcommand:`enableSharding` on a
   database before running the :dbcommand:`shardCollection` command.
   The :dbcommand:`shardCollection` command must be run against the
   ``admin`` database.

   .. |command| replace:: :dbcommand:`shardCollection`

   .. include:: /includes/fact-dbcommand.rst

   :dbcommand:`shardCollection` has the following form:

   .. code-block:: javascript

      {
         shardCollection: "<database>.<collection>",
         key: { <field1>: <1|"hashed">, ... },
         unique: <boolean>,
         numInitialChunks: <integer>,
         presplitHashedZones: <boolean>,
         collation: { locale: "simple" }
      }

   :dbcommand:`shardCollection` has the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``shardCollection``
   
        - string
   
        - The :term:`namespace` of the collection to shard in the form
          ``<database>.<collection>``.
          
          
   
      * - ``key``
   
        - document
   
        - The document that specifies the field or fields to use as the
          :doc:`shard key </core/sharding-shard-key/>`.

          ``{ <field1>: <1|"hashed">, ... }``

          Set the field values to either:
          
          - ``1`` for :doc:`ranged based sharding </core/ranged-sharding>`
          
          - ``"hashed"`` to specify a
            :ref:`hashed shard key <hashed-shard-keys>`.
          
          :doc:`shard key </core/sharding-shard-key/>` must be
          supported by an index. Unless the collection is empty, the
          index must exist prior to the :dbcommand:`shardCollection`
          command. If the collection is empty, MongoDB creates the
          index prior to sharding the collection if the index that can
          support the shard key does not already exist.
          
          See also :ref:`sharding-shard-key-indexes`
          
          
   
      * - ``unique``
   
        - boolean
   
        - Specify ``true`` to ensure that the underlying index
          enforces a unique constraint. Defaults to ``false``. 

          You cannot specify ``true`` when using :ref:`hashed shard keys 
          <sharding-hashed>`.

      * - ``numInitialChunks``
   
        - integer
   
        - Specifies the initial number of chunks to create across all shards in 
          the cluster when sharding an *empty* collection with a
          :ref:`hashed shard key <sharding-hashed-sharding>`. MongoDB
          will then create and balance chunks across the cluster. The
          ``numInitialChunks`` must result in less than ``8192`` per shard.
          
          If the collection is not empty or the shard key does not
          contain a hashed field, the operation returns an error.

          - If sharding with :ref:`presplitHashedZones: true
            <cmd-shard-collection-presplitHashedZones>`,
            MongoDB attempts to evenly distribute the specified
            number of chunks across the zones in the cluster.

          - If sharding with :ref:`presplitHashedZones: false
            <cmd-shard-collection-presplitHashedZones>` or omitted and
            no zones and zone ranges are defined for the empty
            collection, MongoDB attempts to evenly distributed the
            specified number of chunks across the shards in the cluster.

          - If sharding with :ref:`presplitHashedZones: false
            <cmd-shard-collection-presplitHashedZones>` or omitted and
            zones and zone ranges have been defined for the empty
            collection, ``numInitChunks`` has no effect.

          .. versionchanged:: 4.4
          
   
      * - ``collation``
   
        - document
   
        - Optional. If the collection specified to ``shardCollection``
          has a default :doc:`collation </reference/collation>`,
          you *must* include a collation document with
          ``{ locale : "simple" }``, or
          the ``shardCollection`` command fails. At least one of the indexes
          whose fields support the shard key pattern must have the simple
          collation.
          
          
      * - :ref:`presplitHashedZones 
          <cmd-shard-collection-presplitHashedZones>`

        - boolean

        - .. _cmd-shard-collection-presplitHashedZones:
        
          Optional. Specify ``true`` to perform initial chunk creation
          and distribution for an empty or non-existing collection based
          on the defined zones and zone ranges for the collection. For
          :ref:`hashed sharding <sharding-hashed>` only.

          ``shardCollection`` with ``presplitHashedZones: true`` returns
          an error if any of the following are true:

          - The shard key does not contain a hashed field 
            (i.e. is not a :ref:`single field hashed index 
            <index-hashed-index>` or :ref:`compound hashed index
            <index-type-compound-hashed>`).

          - The collection has no defined zones or zone ranges.

          - The defined zone range or ranges do not meet the 
            :ref:`requirements 
            <shardCollection-zones>`.

          .. versionadded:: 4.4


Considerations
--------------

Use
~~~

You can only shard a collection once.

Do **not** run more than one :dbcommand:`shardCollection` command on
the same collection at the same time.

.. include:: /includes/fact-cannot-unshard-collection.rst

Shard Keys
~~~~~~~~~~

Choosing the best shard key to effectively distribute load among your
shards requires some planning. 

- Starting in MongoDB 4.4, you can refine a collection's shard key by
  adding a suffix field or fields to the existing key.
  
- Starting in MongoDB 4.2, you can update a document's shard key value
  (unless the shard key field is the immutable ``_id`` field).

For more information, see :ref:`sharding-shard-key`.

.. _hashed-shard-keys:

Hashed Shard Keys
~~~~~~~~~~~~~~~~~

:ref:`Hashed shard keys <sharding-hashed-sharding>` use a
:doc:`hashed index </core/index-hashed>` or a
:ref:`compound hashed index <index-type-compound-hashed>`
as the shard key.

Use the form ``field: "hashed"`` to specify a hashed shard key field.

.. include:: /includes/note-hashed-shard-key-during-chunk-migration.rst

.. seealso:: :doc:`/core/hashed-sharding`

.. _shardCollection-zones:

Zone Sharding and Initial Chunk Distribution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/zoned-sharding-shard-operation-chunk-distribution-with-links.rst

See :ref:`pre-define-zone-range-example` for an example. If sharding a
collection using a ranged or single-field hashed shard key, the
``numInitialChunks`` option has no effect if zones and zone ranges have
been defined for the empty collection.

To shard a collection using a :ref:`compound hashed index
<index-type-compound-hashed>`, see
:ref:`shardCollection-zones-compound-hashed`.

.. _shardCollection-zones-compound-hashed:

Zone Sharding and Compound Hashed Indexes
`````````````````````````````````````````

.. include:: /includes/extracts/zoned-sharding-shard-operation-chunk-distribution-hashed-short.rst

The ``numInitialChunks`` option has no effect if zones and zone ranges
have been defined for the empty collection *and*
:ref:`presplitHashedZones <cmd-shard-collection-presplitHashedZones>` is
``false``.

See :ref:`pre-define-zone-range-hashed-example` for an example.

.. seealso:: 

   - :ref:`initial-chunks`
   
   - :dbcommand:`balancerCollectionStatus`
 

Uniqueness
~~~~~~~~~~

If specifying ``unique: true``:

.. include:: /includes/extracts/shard-collection-unique-restriction-command.rst

See also :ref:`Sharded Collection and Unique Indexes
<sharding-shard-key-unique>`

.. include:: /includes/fact-shardCollection-collation.rst

Write Concern
~~~~~~~~~~~~~

.. include:: /includes/extracts/mongos-operations-wc-shard-collection.rst

Example
-------

The following operation enables sharding for the ``people`` collection
in the ``records`` database and uses the ``zipcode`` field as the
:ref:`shard key <shard-key>`:

.. code-block:: javascript

   db.adminCommand( { shardCollection: "records.people", key: { zipcode: 1 } } )

.. seealso::

   - :dbcommand:`refineCollectionShardKey`

   - :method:`sh.balancerCollectionStatus()`

   - :method:`sh.shardCollection()`

   - :doc:`/sharding`

