.. _arch-center-auth:

=========================================================
Guidance for {+service+} Authorization and Authentication
=========================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta:   
   :description: Learn about the different authorization and authentication mechanisms that Atlas supports.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: onecol

Authentication is the process of verifying the identity of a user.
|service| requires all users to authenticate themselves in order 
to determine their access. 

Although authentication and authorization are closely connected,
authentication is distinct from authorization: 

- Authentication verifies the identity of a user.

  |service| provides robust authentication mechanisms that seamlessly
  integrate with your existing identity systems, providing secure access
  to the UI, database, and |api|\s through strong identity federation.
  You can manage access to |service-fullname| {+clusters+} by
  configuring authentication. 

- Authorization determines the verified user's access to resources and
  operations. 

  |service| provides Role-Based Access Control (RBAC) to govern access to
  |service|. You must grant a user one or more roles that determine the
  user's access to database resources and operations. Outside of role
  assignments, the user has no access to the system.

Features for {+service+} Authentication
---------------------------------------

|service-fullname| supports a variety of authentication methods to
ensure robust security.   

- The best practice for user authentication is utilizing |service|'s 
  seamless integration with identity providers using federated authentication 
  through OpenID Connect (OIDC) or SAML 2.0, and enhancing security with Multi-Factor
  Authentication (MFA) to ensure a modern authentication and security posture. 
- For workload authentication, |service| supports OAuth2.0, allowing
  seamless compatibility with authorization services and integration 
  into your federated :abbr:`IdP (Identity Provider)`.

|service| requires all users to authenticate to access {+atlas-ui+}, 
|service| database, and {+atlas-admin-api+}. The following
authentication methods for each |service| resource ensure that
authentication is both secure and adaptable. |service| provides the
following authentication mechanisms:

.. _arch-center-authentication-recs:

Recommendations for {+service+} Authentication
----------------------------------------------

{+atlas-ui+} Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend federated authentication for {+atlas-ui+} access. To
configure federated authentication, you must create {+service+}
credentials or log in with Google or Github. 

For {+service+} credentials,
we recommend that you use a strong password accompanied by a
phishing-resistant :abbr:`MFA (Multi-Factor Authentication)`, such as
biometrics. We highly recommend that you set up a secondary 
:abbr:`MFA (Multi-Factor Authentication)` factor
to avoid account lock-outs. To ensure 
:abbr:`MFA (Multi-Factor Authentication)` access for {+service+} 
credentials, turn on :abbr:`MFA (Multi-Factor Authentication)`
enforcement in the Organization Settings. After you set up federation
for your domain, you should use {+service+} credentials to
authenticate only in the emergency break-glass scenarios when federated
authentication is broken.

Federated Authentication
````````````````````````

Federated authentication allows you to manage all authentication to
the {+atlas-ui+} across multiple systems and applications through a
central identity provider. For UI access, |service| supports workforce
identity federation using :abbr:`SAML (Security Assertion Markup
Language)` 2.0. You can use any :abbr:`SAML (Security Assertion
Markup Language)` compatible identity provider such as Okta, Microsoft
Entra ID, or Ping Identity to enforce security policies such as password 
complexity, credential rotation, and :abbr:`MFA (Multi-Factor
Authentication)` within your identity provider. 

You must configure the IP access list in the {+atlas-ui+} to allow only connections 
from IP ranges that include your users and application servers.

To learn more, see :ref:`atlas-federated-authentication`.

Multi-Factor Authentication 
```````````````````````````

For any human user that has access to the |service| control plane, we recommend
that you require :abbr:`MFA (Multi-Factor Authentication)` for enhanced security.
When :abbr:`MFA (Multi-Factor Authentication)` is enabled, |service| requires 
two forms of identification: 

- The user's credentials 
- One of the following recommended factors: 

  - Security keys
  - Biometrics
  - OTP authenticators 
  - Push notifications
  - SMS (not recommended as primary factor)
  - Email (not recommended as primary factor)

To learn more, see :ref:`atlas-enable-mfa`.

|service| Database Authentication 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| supports various database authentication mechanisms.

To configure workforce (human user) access to your |service| 
database via tools such as {+mongodbsh+} and Compass, 
use :ref:`Workforce Identity Federation <oidc-authentication-workforce>` with {+oidc+}. 

To configure workload (application) access to your |service|
database using MongoDB drivers, use :ref:`Workload Identity Federation <oidc-authentication-workload>`, 
AWS-IAM authentication, or X.509 certificate authentication. We recommend :manual:`SCRAM </core/security-scram>` 
password authentication for use only in development or testing environments. 

|service| also supports: 

- :ref:`Creating temporary database users <arch-center-just-in-time>`
  with just-in-time database access 
- :ref:`Third-party secrets manangement <arch-center-secrets>`

Workforce Identity Federation
`````````````````````````````

Workforce Identity Federation allows you to manage all authentication to 
the |service| database through your identity provider. For database
access, we recommend {+oidc+}-compatible identity
providers such as Okta, Microsoft Entra ID, or Ping Identity to enforce
security policies such as password complexity, credential rotation, and
:abbr:`MFA (Multi-Factor Authentication)` within your identity provider. 

To learn more, see :ref:`oidc-authentication-workforce`.

Workload Identity Federation and AWS IAM Role Authentication
````````````````````````````````````````````````````````````

Workload Identity Federation enables applications running in cloud
environments like |azure| and Google Cloud to authenticate with
|service| without the need to manage separate database user credentials.
With Workload Identity Federation, you can manage |service| database
users using |azure| Managed Identities, Google Service Accounts, or any
OAuth 2.0-compliant service. These authentication mechanisms simplify
management and enhance security by allowing for passwordless access to
the |service| database. 

We recommend Workload Identity Federation for all applications running in 
production. You shouldn't allow human users to connect except in the most 
extreme break-glass emergency scenarios.

You can also authenticate
through |aws| |iam| roles.

To learn more, see the following: 

- :ref:`oidc-authentication-workload`
- :ref:`set-up-pwdless-auth`

X.509 Client Certificates and SCRAM 
```````````````````````````````````

We recommend that you use Workforce or Workload Identity Federation 
through an identity provider for security and ease of access to all aspects of the 
|service| control and data plane. 

If you don't have an identity provider for federation,
|service| {+clusters+} also support X.509 client certificates for 
user authentication. X.509 certificates provide the security of mutual TLS, 
making them suitable for staging and production environments, and you
can bring your own certificate authority for use with X.509.
The disadvantage of X.509 is that you must manage certificates and
the security of these certificates on the application side, while
Workload Identity Federation allows for passwordless access and easier
application security.

|service| {+clusters+} also support SCRAM password authentication for user authentication, 
but we recommend SCRAM only for use in development and test environments. 

If you leverage X.509 or SCRAM authentication, we recommend that you use 
third-party secrets manager like
`HashiCorp Vault <https://developer.hashicorp.com/vault/docs/secrets/databases/mongodbatlas>`__
or |aws| Secrets Manager to generate and store complex database credentials. 

To learn more, see the following manual pages: 

- :manual:`X.509 </core/security-x.509/>`
- :manual:`SCRAM </core/security-scram/>`

.. _arch-center-just-in-time:

Just-in-Time Access 
```````````````````

|service| also supports creating temporary database users
that automatically expire after the predefined times. A user can be
created for the following periods: 

- 6 hours
- 1 day
- 1 week

To learn more, see :ref:`mongodb-users`. 

.. _arch-center-secrets:

Secrets Management
``````````````````

We recommend using a third-party secrets manager like `HashiCorp Vault
<https://developer.hashicorp.com/vault/docs/secrets/databases/mongodbatlas>`__
or |aws| Secrets Manager to generate and store complex database credentials.
A secrets manager can generate database credentials dynamically based on configured
roles for |service| databases. 

To learn more, see the blog :website:`Manage
MongoDB Atlas Database Secrets in HashiCorp Vault 
</blog/post/manage-atlas-database-secrets-hashicorp-vault>`.

.. _arch-center-admin-api-recs:

{+atlas-admin-api+} Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

|service| provides two ways to authenticate to the {+atlas-admin-api+}:

- :atlas:`Service accounts </api/service-accounts-overview/>`
- |api| keys

Service Accounts
````````````````

Service accounts use industry-standard OAuth2.0 to securely authenticate with {+service+}
through the {+atlas-admin-api+}. We recommend that you use service accounts instead of
|api| keys when possible because they provide added security through short-lived
access tokens and required credential rotations.

You can manage programmatic access for service accounts only through the {+atlas-ui+} or
the {+atlas-admin-api+}. You can't manage programmatic access for service accounts through
the {+atlas-cli+} or Terraform.

To learn more, see :atlas:`Service Accounts Overview </api/service-accounts-overview/>`.

API Keys
````````

If you don't use service accounts, you can use |api| key-based authentication to securely manage
programmatic access. |api| key-based authentication uses |http| Digest authentication to protect requests.
The |api| public key functions as the username, and the corresponding
private key serves as the password. 
You should store these keys in a third party secrets management system, 
such as |aws| Secrets Manager or {+vault+}. To learn how to securely store these 
keys in Vault, see the blog 
`Manage MongoDB Atlas Database Secrets in HashiCorp Vault <https://www.mongodb.com/blog/post/manage-atlas-database-secrets-hashicorp-vault>`__.

To further enhance security and
minimize the risk of unauthorized access:

- Follow best practices for
  rotating |api| keys regularly. To learn how to rotate these keys with 
  {+vault+}, for example, see `the Hashicorp documentation <https://developer.hashicorp.com/vault/docs/secrets/mongodbatlas>`__.

- Use the IP access list for your API keys. To learn more, see
  :atlas:`Require an IP Access List for the {+atlas-admin-api+} </configure-api-access/#optional--require-an-ip-access-list-for-the-atlas-administration-api>`.

To learn more, see :ref:`api-authentication`.

Deployments 
~~~~~~~~~~~

To learn our recommendations for deployments, which relate to authentication, see :ref:`arch-center-hierarchy`.

.. _arch-center-authorization-recs:

Recommendations for {+service+} Authorization 
---------------------------------------------

You must implement |service|'s robust Role-Based Access Control (RBAC) 
to effectively manage access across all resources. |service| includes 
built-in roles that provide different levels of access commonly needed 
for managing the |service| control plane. For connecting to |service| 
{+clusters+} in the data plane, we recommend using database 
fine-grained custom roles to provide granular scoping based on the access 
to the data access required for the role to perform its function.
This approach enables you to follow the principle of least privilege.

Additionally, by integrating |service| with a federated identity provider, 
you can use just-in-time provisioning by mapping identity provider groups to |service| roles. 
This streamlines access management and ensures secure and organized role 
assignments throughout the platform. You can grant access programmatically 
based on the provisioning process of your orchestration layer.

In general, it is a best practice to always restrict access to upper 
environments  to only programmatic service accounts with scripts that 
are tested for security and deterministic outcomes. Human access should 
only be allowed in lower environments during development and testing.

{+atlas-ui+} and {+atlas-admin-api+} (Control Plane) Authorization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can assign users, service accounts, and API keys to predefined
roles, specifying the
actions they can perform within |service| organizations, projects, or
both. Use Identity Federation to manage access by linking your identity
provider groups to |service| roles through group-role mappings.  

We recommend that you use a modern federated Identity Provider (IdP) that 
provides SSO with SAML such as Azure Entra ID, Okta, or Ping Identity
as this makes the authorization process more secure and supports the 
flexibility needed to programmatically assign :abbr:`IdP (Identity Provider)` 
groups to |service| roles. You should restrict your company's domain from 
preventing users from logging into |service| when they are not authorized 
for access, which you can do by following the procedure in
:atlas:`Manage Domain Mapping for Federated Authentication 
</security/manage-domain-mapping/>`. From here,  we recommend that
you map your :abbr:`IdP (Identity Provider)` groups to |service| roles
as shown in :atlas:`Role Mapping Process
</security/manage-role-mapping/#role-mapping-process>`.   

If you have followed the standard |service| hierarchy of a single billing 
organization with a linked organization for each {+BU+} or department, then 
you should restrict organization users to the operations or platform team admins.
In contrast, you should assign project roles to the development or product teams 
responsible for building applications. Only programmatic access should be 
allowed in upper environments. The following recommendations for the most 
commonly used roles can serve as a general guideline:

* The ``Organization Owner`` role should be heavily restricted and not assigned
  to a human, as it has the ability to change organization-wide settings and delete 
  configurations. This role should be assigned to a service account which you use 
  only to initially set up and configure the organization. Minimize configuration 
  changes after the initial creation. To avoid account lockouts, you
  can create the following items: 
  
  - SAML Organization Owner group with
    :ref:`arch-center-just-in-time`. 
  - API key with the Organization Owner role. Keep it in a
    secure place with strong access management for break-glass
    emergency scenarios.

* The ``Organization Member`` role should be for admins on the operations and 
  platform team that can view settings and configuration for the organization.

* The ``Organization Project Creator`` role should be a programmatic service 
  account used to create projects on behalf of new applications for development 
  and product teams.

* The ``Organization Billing Admin`` role should be a programmatic service 
  account used to pull invoices programmatically from the Billing API 
  and feed them into your FinOps tool. This same service account should have 
  access to all linked organizations for which it is responsible for reporting usage. 

* The ``Project Owner`` role should be used for governance enforced by the 
  operations and provisioning team. Assign this role to a programmatic service 
  account, as it has the ability to create and delete {+clusters+}. For sandbox 
  environments, you may consider granting a user ``Project Owner`` access to 
  enable them to quickly provision {+clusters+} for testing code and use cases 
  without going through the orchestration deployment pipeline.

* In lower environments, use the ``Project Data Access Admin`` role to 
  grant access to the development team building the application so they can 
  access the query and performance metrics of the {+cluster+} during 
  development and testing. This access allows them to debug data issues 
  with the Data Explorer. 
  Don't allow this role in production environments. It has the 
  ability to view and edit data, including creating and dropping databases, 
  collections, and indexes on the {+cluster+}, which is useful for rapid 
  experimentation and development. 
  If you are not comfortable giving development teams this level of access in the development environment, you 
  can grant them read-only access to the {+cluster+}\'s data and performance 
  statistics with the ``Project Data Access Read Only`` role.

  To grant read-only access to the {+cluster+}'s 
  data in production environments, use the ``Project Observability Viewer`` role. 

To learn more, see :ref:`user-roles`.

Database Authorization
~~~~~~~~~~~~~~~~~~~~~~

Workforce and workload users can be assigned fine-grained database
roles, predefined or custom, with permissions tailored to specific
projects or individual {+clusters+}. In staging and production
environments, we recommend using Identity Federation to streamline 
access management by linking your Identity Provider (IdP) to |service| 
for a more modern and streamlined authentication and authorization flow
for data access.  

By configuring :atlas:`Group Membership </workforce-oidc/>` in your :abbr:`IdP (Identity
Provider)`, you can map groups to database users, simplifying access
control within the :abbr:`IdP (Identity Provider)`. However, for
workload identities, we recommend assigning roles directly using the
``users`` claim instead of ``groups``. In development and test environments,
you can default to the predefined ``readWriteAny`` role to simplify the
development and testing process. When moving the application to higher
environments, you should build a custom role to restrict the access that
the application server has based on the principle of least privilege.

To learn more, see the following: 

- :ref:`mongodb-users-roles-and-privileges`
- :ref:`mongodb-roles`

Automation Examples: {+service+} Authentication and Authorization
-----------------------------------------------------------------

.. include:: /includes/complete-examples.rst

The following examples configure authentication and custom roles using
|service| :ref:`tools for automation <arch-center-automation>`.

.. tabs::

   .. tab:: Dev and Test Environments
      :tabid: devtest

      .. tabs::

         .. tab:: CLI
            :tabid: cli

            Run the following command to create a user authentication
            with IAM credentials to a specified {+cluster+}. 
            
            .. include:: /includes/examples/cli-example-auth-aws-iam-devtest.rst

            Run the following command to create a temporary user with
            SCRAM authentication.

            .. include:: /includes/examples/cli-example-auth-temp-user-devtest.rst

            Run the following command to configure Workforce Identity
            Federation with OIDC. 

            .. include:: /includes/examples/cli-example-auth-oid-devtest.rst

         .. tab:: Terraform
            :tabid: Terraform

            The following examples demonstrate how to configure
            authentication and authorization. Before you can create
            resources with Terraform, you must: 

            - :ref:`Create your paying organization
              <configure-paying-org>` and :ref:`create an API key
              <atlas-admin-api-access>` for the paying organization.
              Store your API key as environment variables by running the
              following command in the terminal: 

              .. code-block::

                 export MONGODB_ATLAS_PUBLIC_KEY="<insert your public key here>"
                 export MONGODB_ATLAS_PRIVATE_KEY="<insert your private key here>"

            - `Install Terraform <https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli>`__

            Common Files 
            ~~~~~~~~~~~~

            You must create the following files for each example. Place
            the files for each example in their own directory. Change
            the IDs and names to use your values. Then run the commands
            to initialize Terraform, view the Terraform plan, and apply
            the changes. 

            azure.tf 
            ````````

            .. include:: /includes/examples/tf-example-auth-tfazure.rst

            variables.tf 
            ````````````

            .. include:: /includes/examples/tf-example-auth-variables-devtest.rst

            terraform.tfvars 
            ````````````````

            .. include:: /includes/examples/tf-example-auth-tfvars-devtest.rst


            Authentication Example 
            ~~~~~~~~~~~~~~~~~~~~~~

            Use the following to create an |service| user with username
            and password authentication.

            main.tf 
            ```````

            .. include:: /includes/examples/tf-example-auth-scram-devtest.rst

            Use the following example to set up an :abbr:`OIDC (OpenID Connect)`
            federated identity provider in |service|, for using it with
            |azure| and then create an :abbr:`OIDC (OpenID Connect)`
            federated authentication user. It uses OIDC tokens issued by |azure| Active Directory to allow access. 

            main.tf 
            ```````

            .. include:: /includes/examples/tf-example-auth-oidc-devtest.rst 

            outputs.tf 
            ``````````

            .. include:: /includes/examples/tf-example-auth-tfoutputs-devtest.rst

            Authorization Example 
            ~~~~~~~~~~~~~~~~~~~~~
            
            Use the following to grant users admin rights on the
            {+cluster+} and project member rights for the projects in the
            {+cluster+}. 

            main.tf 
            ```````

            .. include:: /includes/examples/tf-example-auth-grant-roles-devtest.rst  

   .. tab:: Staging and Prod Environments
      :tabid: stagingprod

      .. tabs::

         .. tab:: CLI
            :tabid: cli

            Run the following command to create a database user from a specific
            group in the Identity Provider. You can manage the user
            authentication and authorization through the identity provider,
            Okta. The command also grants the users in the identity provider
            group ``dbAdmin`` and ``readWrite`` privileges on the |service|
            {+cluster+}. 

            .. include:: /includes/examples/cli-example-auth-okta-stagingprod.rst 

            Run the following command to create an :abbr:`OIDC (OpenID
            Connect)`-compatible identity providers from your federation
            settings.  

            .. include:: /includes/examples/cli-example-auth-oidc-stagingprod.rst 

         .. tab:: Terraform
            :tabid: Terraform

            The following examples demonstrate how to configure
            authentication and authorization. Before you can create
            resources with Terraform, you must: 

            - :ref:`Create your paying organization
              <configure-paying-org>` and :ref:`create an API key
              <atlas-admin-api-access>` for the paying organization.
              Store your API key as environment variables by running the
              following command in the terminal: 

              .. code-block::

                 export MONGODB_ATLAS_PUBLIC_KEY="<insert your public key here>"
                 export MONGODB_ATLAS_PRIVATE_KEY="<insert your private key here>"

            - `Install Terraform <https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli>`__

            Common Files 
            ~~~~~~~~~~~~

            You must create the following files for each example. Place
            the files for each example in their own directory. Change
            the IDs and names to use your values. Then run the commands
            to initialize Terraform, view the Terraform plan, and apply
            the changes. 

            azure.tf 
            ````````

            .. include:: /includes/examples/tf-example-auth-tfazure.rst

            variables.tf 
            ````````````

            .. include:: /includes/examples/tf-example-auth-variables-stagingprod.rst

            terraform.tfvars 
            ````````````````
            .. include:: /includes/examples/tf-example-auth-tfvars-stagingprod.rst

            outputs.tf 
            ``````````

            .. include:: /includes/examples/tf-example-auth-tfoutputs-stagingprod.rst

            Configure Federated Settings for Identity Provider 
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

            Use the following to set up an :abbr:`OIDC (OpenID Connect)`
            federated identity provider in |service|, for using it with
            |azure|. It allows access by using OIDC tokens issued by |azure|
            Active Directory. 

            .. include:: /includes/examples/tf-example-auth-oidc-stagingprod.rst

            Use the following to create an :abbr:`OIDC (OpenID Connect)`
            federated authentication user. 

            .. include:: /includes/examples/tf-example-auth-create-oidc-user-stagingprod.rst

            Configure Custom Role 
            ~~~~~~~~~~~~~~~~~~~~~

            Use the following to create a custom role named ``my_custom_role``
            which allows update, add, and delete operations on any collection
            in the database named ``myDb``.

            .. include:: /includes/examples/tf-example-auth-create-custom-role-stagingprod.rst

For an example of an |service| project with the |service| role assigned
to a specific group, see :ref:`Examples <arch-center-hierarchy>`.
