.. _query-perf:

=================
Query Performance
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _query-operators-and-complexity:

Query Operators and Query Complexity
------------------------------------

The complexity level of |fts| queries and the type of :ref:`operators
<fts-operators>` used can affect database performance. Highly
complex queries with :ref:`multiple clauses <compound-ref>` are
resource-intensive, as are queries which use the :ref:`regex
<term-ref>` (regular expression) operator.

|fts| queries are ranked by :ref:`score <scoring-ref>`. Queries that
return a large number of results are more computationally intensive
because they must keep track of all the scores for the result set.

.. _query-performance-monitoring:

Performance Monitoring
----------------------

You can :ref:`monitor <monitor-cluster-metrics>` your |service|
cluster and view charts with performance statistics on the |service|
:guilabel:`Metrics` tab. These metrics can help you see how |fts|
queries and index building affect your cluster's performance. To learn 
more, see :ref:`view-atlas-search-metrics`.

|service| might trigger some |service| :ref:`alerts <alerts>` when:

- |fts| queries your {+database-deployments+}, which can impact
  |service| performance metrics, such as the :ref:`query targeting 
  <query-targeting-resolution>` metrics.

- |fts| replicates data from MongoDB, which contributes to the 
  :ref:`metrics <monitor-cluster-metrics>` measured in |service|, such 
  as the number of :guilabel:`getmore` operations.

.. note::

   If your cluster's resources are stretched or near the
   limits of acceptable performance, consider :doc:`upgrading
   </scale-cluster>` to a larger cluster tier before implementing
   |fts| functionality.

.. _query-match-agg-stage:

``$match`` Aggregation Stage Usage
----------------------------------

Using a :manual:`$match </reference/operator/aggregation/match/>`
aggregation pipeline stage after a :ref:`$search <query-syntax-ref>`
stage can drastically slow down query results. If possible, design
your ``$search`` query so that all necessary filtering occurs in the
``$search`` stage to remove the need for a ``$match`` stage. The
:ref:`$compound <compound-ref>` |fts| operator is helpful for queries
that require multiple filtering operations.

.. _query-sort-agg-stage:

``$sort`` Aggregation Stage Usage 
---------------------------------

Using a :manual:`$sort </reference/operator/aggregation/sort/>`
aggregation pipeline stage after a :ref:`$search <query-syntax-ref>` 
stage can drastically slow down query results. If possible, design
your ``$search`` query so that all necessary sorting occurs in the 
``$search`` stage to remove the need for a ``$sort`` stage. In 
general, the |fts| :ref:`$compound <compound-ref>` operator is helpful 
for queries that require multiple sorting operations. To sort 
documents based on a numeric, date, or geo field, consider using 
the |fts| :ref:`$near <near-ref>` operator. 
