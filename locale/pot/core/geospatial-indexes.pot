# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/geospatial-indexes.txt:3
# 8577f85cfe224c25a83a1b313b5910fa
msgid "``2d`` Index Internals"
msgstr ""

#: ../source/core/geospatial-indexes.txt:7
# a5fae12c92054a2abc08a056e6096395
msgid "This document provides a more in-depth explanation of the internals of MongoDB's ``2d`` geospatial indexes. This material is not necessary for normal operations or application development but may be useful for troubleshooting and for further understanding."
msgstr ""

#: ../source/core/geospatial-indexes.txt:15
# 686a3989d72b4ee38c86d0b2554b3f07
msgid "Calculation of Geohash Values for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:17
# a5159818212648fabfe40805a5b6bc46
msgid "When you create a geospatial index on :term:`legacy coordinate pairs <legacy coordinate pairs>`, MongoDB computes :term:`geohash` values for the coordinate pairs within the specified :ref:`location range <geospatial-indexes-range>` and then indexes the geohash values."
msgstr ""

#: ../source/core/geospatial-indexes.txt:22
# 0ee9750da35e4801a67f6f7d29857101
msgid "To calculate a geohash value, recursively divide a two-dimensional map into quadrants. Then assign each quadrant a two-bit value. For example, a two-bit representation of four quadrants would be:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:32
# 6a373aa0088b4e04b5235b44e41757f5
msgid "These two-bit values (``00``, ``01``, ``10``, and ``11``) represent each of the quadrants and all points within each quadrant. For a geohash with two bits of resolution, all points in the bottom left quadrant would have a geohash of ``00``. The top left quadrant would have the geohash of ``01``. The bottom right and top right would have a geohash of ``10`` and ``11``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:39
# 348da7f305374c6fb0f4c8169f927759
msgid "To provide additional precision, continue dividing each quadrant into sub-quadrants. Each sub-quadrant would have the geohash value of the containing quadrant concatenated with the value of the sub-quadrant. The geohash for the upper-right quadrant is ``11``, and the geohash for the sub-quadrants would be (clockwise from the top left): ``1101``, ``1111``, ``1110``, and ``1100``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:56
# 19f9fb2905104525bf387c421ce437c0
msgid "Multi-location Documents for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:58
# 1bae31e071604e9faecd91b860c6b4ac
msgid "Support for multiple locations in a document."
msgstr ""

#: ../source/core/geospatial-indexes.txt:61
# 5a93768112fb44dcbc23abf18986be1f
msgid "While ``2d`` geospatial indexes do not support more than one set of coordinates in a document, you can use a :ref:`multi-key index <index-type-multi-key>` to index multiple coordinate pairs in a single document. In the simplest example you may have a field (e.g. ``locs``) that holds an array of coordinates, as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:76
# 4533feaa8a6e4b368260c99569ea0e3a
msgid "The values of the array may be either arrays, as in ``[ 55.5, 42.3 ]``, or embedded documents, as in ``{ lng : 55.5 , lat : 42.3 }``."
msgstr ""

#: ../source/core/geospatial-indexes.txt:79
# 2ae3d840e71c4a4cb7e9df1db6cce39f
msgid "You could then create a geospatial index on the ``locs`` field, as in the following:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:86
# f47e6f534c114fa08c476dce019c795b
msgid "You may also model the location data as a field inside of an embedded document. In this case, the document would contain a field (e.g. ``addresses``) that holds an array of documents where each document has a field (e.g. ``loc:``) that holds location coordinates. For example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:107
# b2676706e8e64e54ae3d641c259b75ae
msgid "You could then create the geospatial index on the ``addresses.loc`` field as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:114
# cd0a253f927d4eb2be84ea46bff1e037
msgid "To include the location field with the distance field in multi-location document queries, specify ``includeLocs: true`` in the :dbcommand:`geoNear` command."
msgstr ""

