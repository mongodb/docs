.. meta::
   :robots: noindex, nosnippet

.. _java-authenticate-users:
.. _java-authenticate:

=============================
Authenticate Users - Java SDK
=============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm provides an API for authenticating users using any enabled
authentication provider. Instantiate a ``Credentials`` object and pass
it to either of the  ``app.login()`` or ``app.loginAsync()`` methods to
authenticate a user login and create a ``User`` object. Each
authentication provider corresponds to a static helper method used to
instantiate ``Credentials`` objects using that authentication provider.

.. _java-login:

Log In
------

You can authenticate users with either the ``app.login()`` or
``app.loginAsync()`` methods of your application's instance of the
``io.realm.mongodb.App`` class. While the ``app.login()`` method blocks
code execution in the calling thread until the supplied credentials have
either succeeded or failed to authenticate a user, the
``app.loginAsync()`` method allows execution to continue, handling
success or failure with a callback function that is guaranteed to
execute on the same thread that called ``app.loginAsync()``.

If successful, the ``app.login()`` method returns a ``User`` object.
In the event of a failure, the ``app.login()`` method throws an
exception of type ``ObjectServerError``.

Pass a callback to the ``app.loginAsync()`` method to handle success or
failure. This callback accepts a single parameter of type
``App.Result``. The ``isSuccess()`` method of the ``App.Result`` object
passed to the callback returns a boolean that indicates whether the
operation succeeded. In the event of a failure,  you can view the
error that caused the failure using the ``getError()`` method.

.. _java-anonymous-login:
.. _java-login-anonymous:

Anonymous User
~~~~~~~~~~~~~~

The :ref:`anonymous authentication provider <anonymous-authentication>`
enables users to log in to your application with short-term accounts
that store no persistent personal information. To log in with anonymous
authentication, create an anonymous credential by calling
``Credentials.anonymous()`` and then pass the generated credential to
``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.anonymous.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.anonymous.kt
         :language: kotlin
         :copyable: false

.. _java-email-password-login:
.. _java-login-email-password:

Email/Password User
~~~~~~~~~~~~~~~~~~~

The :ref:`Email/Password authentication provider <email-password-authentication>`
enables users to log in to your application with an email username and
a password. To log in with email/password authentication, create an
email/password credential by calling ``Credentials.emailPassword()``
with the user's email and password. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.email-password.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.email-password.kt
         :language: kotlin
         :copyable: false

.. _java-api-key-login:
.. _java-login-api-key:

API Key User
~~~~~~~~~~~~

The :ref:`API Key authentication provider <api-key-authentication>`
enables users to log in to your application with an API Key generated
automatically in the client SDK. To log in with API Key authentication, create an
API Key credential by calling ``Credentials.apiKey()``
with an API Key. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.api-key.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.api-key.kt
         :language: kotlin
         :copyable: false

.. _java-custom-jwt-login:
.. _java-login-custom-jwt:

Custom JWT User
~~~~~~~~~~~~~~~

The :ref:`Custom JWT authentication provider <custom-jwt-authentication>`
enables users to log in to your application with a custom JSON Web Token.
To log in with custom JWT authentication, create a
custom JWT credential by calling ``Credentials.jwt()``
with your custom JWT. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.custom-jwt.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.custom-jwt.kt
         :language: kotlin
         :copyable: false

.. _java-custom-function-login:
.. _java-login-custom-function:

Custom Function User
~~~~~~~~~~~~~~~~~~~~

The :ref:`Custom Function authentication provider <custom-function-authentication>`
enables users to log in to your application using a
:ref:`Realm Function <functions>` defined in your App. To log in with custom 
function authentication, create a credential by calling 
``Credentials.customFunction()``. The :java-sdk:`customFunction()
<io/realm/mongodb/Credentials.html#customFunction-Document->` method expects a 
Document that contains the properties and values used by the Realm auth function. 
For example, suppose the backend function expects the input parameter to include 
a field named ``username``, like this:

.. code-block:: js
   :copyable: false
   
   exports = async function(loginPayload) {
      const { username } = loginPayload;
      ...
   }

The document you pass to ``Credentials.customFunction()`` might look like this:

.. code-block:: java
   :copyable: false
   
   Document("username", "bob")

You then pass the generated credential to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.custom-function.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.custom-function.kt
         :language: kotlin
         :copyable: false

.. _java-facebook-login:
.. _java-login-facebook:

Facebook User
~~~~~~~~~~~~~

The :ref:`Facebook <facebook-authentication>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account.

.. include:: /includes/note-enable-facebook-auth.rst

.. include:: /includes/note-facebook-profile-picture-url.rst

Follow the official :facebook:`Facebook Login for Android Quickstart
<docs/facebook-login/android>` to set up the authentication flow for your
application. In the login completion handler, get the logged in user's access
token from the Facebook :facebook:`LoginResult
<docs/reference/android/current/class/LoginResult>`. Use the access token to
create a Realm Facebook credential and then log the user into your
Realm app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.facebook.java
         :language: java
         :emphasize-lines: 10-17
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.facebook.kt
         :language: kotlin
         :emphasize-lines: 10-21
         :copyable: false

.. _java-google-login:
.. _java-login-google:

Google User
~~~~~~~~~~~

.. important::
   
   To log a user in with their existing Google account, you must configure and
   enable the :ref:`Google authentication provider <google-authentication>` for
   your application.

To set up your application for Google User authentication:

1. In the `Google Cloud Platform console
   <https://console.cloud.google.com/apis/credentials>`__, create an
   OAuth 2.0 client ID of type "Web application".

#. Configure your backend App to use that client ID and the associated
   client secret.

#. Enable OpenID Connect on the backend.

Use Google's official :google:`Sign-In for Android <identity/sign-in/android>` to authenticate Google
users in your Android application:

.. note:: Code Example Below

   For an implementation of these instructions, check out the code block
   below.

1. Add the Google Sign-In for Android dependency to the ``dependencies``
   block of your application level ``build.gradle``:

   .. code-block:: groovy
      :copyable: false

      com.google.android.gms:play-services-auth:19.2.0

#. Create a :google:`GoogleSignInOptions
   <android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions>`
   with the following builder options:

   - :google:`default sign in
     <android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions.Builder#public-builder-googlesigninoptions-googlesigninoptions>`
   - an :google:`ID token request
     <android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions.Builder#public-googlesigninoptions.builder-requestidtoken-string-serverclientid>`
     -- pass your OAuth 2.0 client ID as the ``serverClientId``.

#. Use the ``GoogleSignInOptions`` to create a ``GoogleSignInClient``
   with :google:`GoogleSignIn.getClient()
   <android/reference/com/google/android/gms/auth/api/signin/GoogleSignIn#getClient(android.content.Context,%20com.google.android.gms.auth.api.signin.GoogleSignInOptions)>`

#. Use the ``GoogleSignInClient`` to create an ``Intent`` capable of
   triggering Google Sign-In.

#. Use :android:`registerForActivityResult()
   <reference/androidx/activity/result/ActivityResultCaller#registerForActivityResult(androidx.activity.result.contract.ActivityResultContract%3CI,O%3E,androidx.activity.result.ActivityResultCallback%3CO%3E)>`
   to configure a callback. Your callback should use :google:`GoogleSignIn.getSignedInAccountFromIntent()
   <android/reference/com/google/android/gms/auth/api/signin/GoogleSignIn#getSignedInAccountFromIntent(android.content.Intent)>`
   to access the result of Google Sign-In: a ``Task<GoogleSignInAccount>``.

#. Use the :android:`launch()
   <reference/androidx/activity/result/ActivityResultLauncher#launch(I)>`
   method of the :android:`ActivityResultLauncher
   <reference/androidx/activity/result/ActivityResultLauncher>`
   returned in the previous step to start Google Sign-In. Pass the
   ``launch()`` method your Google Sign-In ``Intent``.

#. Use ``isSuccessful()`` to handle Google Sign-In errors.

#. Access the result of the task (a :google:`GoogleSignInAccount
   <android/reference/com/google/android/gms/auth/api/signin/GoogleSignInAccount>`)
   with ``getResult()``.

#. Access the ID token for the ``GoogleSignInAccount`` with ``getIdToken()``.

#. Create a Realm ``Credentials`` object with :java-sdk:`Credentials.google()
   <io/realm/mongodb/Credentials.html#google-java.lang.String-io.realm.mongodb.auth.GoogleAuthType->`.
   Pass the ID token as the first parameter, and :java-sdk:`GoogleAuthType.ID_TOKEN
   <io/realm/mongodb/auth/GoogleAuthType.html#ID_TOKEN>` as the second parameter.

#. Use the :java-sdk:`app.loginAsync()
   <io/realm/mongodb/App.html#loginAsync-io.realm.mongodb.Credentials-io.realm.mongodb.App.Callback->`
   or :java-sdk:`app.login() <io/realm/mongodb/App.html#login-io.realm.mongodb.Credentials->`
   methods to authenticate with the Atlas App Services backend using the token.

The following code implements this flow, starting with a method call to
``loginWithGoogle()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthActivity.snippet.google.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthActivity.snippet.google.kt
         :language: kotlin
         :copyable: false

.. seealso::

   To learn more about Google Sign-In for Android, check out the
   official :google:`Google Sign-In for Android Integration Guide
   <identity/sign-in/android/start-integrating>`.

.. _java-apple-login:
.. _java-login-apple:

Apple User
~~~~~~~~~~

The :ref:`Sign-in with Apple authentication provider <apple-id-authentication>`
enables users to log in to your application with a custom token provided
by Apple. To log in with Sign-in with Apple authentication, create a
Sign-in with Apple credential by calling ``Credentials.apple()``
with the token provided by Apple. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.apple.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.apple.kt
         :language: kotlin
         :copyable: false

.. include:: /includes/authorization-appleidcredential-string.rst

Offline Login
-------------

App Services manages sessions with access tokens and refresh tokens. Client
SDKs supply the logic to manage tokens, and provide them with requests.

The SDK stores these tokens in 
`Shared Preferences <https://developer.android.com/guide/topics/data/data-storage.html#pref>`_.

.. seealso:: 

   :ref:`<user-sessions>`

.. include:: /includes/offline-login.rst

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.offline.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.offline.kt
         :language: kotlin
         :copyable: false

.. _java-get-user-access-token:

Get a User Access Token
-----------------------

.. include:: /includes/user-access-token.rst

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.get-valid-access-token.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.get-valid-access-token.kt
         :language: kotlin
         :copyable: false

.. _java-logout:

Log a User Out
--------------

You can log out any user, regardless of the authentication provider used
to log in, using the ``user.logOut()`` or ``user.logOutAsync()``
methods. Both methods:

- delete locally stored user credentials from the device

- immediately halt any synchronization to and from the user's realms

Because logging out halts synchronization, you should only log out after
all local Realm updates have uploaded to the server.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.log-out.java
         :language: java
         :copyable: false
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/sync/AuthenticationTest.snippet.log-out.kt
         :language: kotlin
         :copyable: false
