.. index:: mongos
.. _sharded-cluster-query-routing:
.. _sharding-read-operations:

=================================
Query Routing in Sharded Clusters
=================================

.. default-domain:: mongodb

MongoDB provides the :program:`mongos` program to handle query routing
in a sharded cluster.

.. _sharding-mongos:
.. _sharding-query-routing:

``mongos`` Operational Overview
-------------------------------

The :program:`mongos` program provides a single unified interface to a
sharded cluster. An application does not access shards (i.e. the
:program:`mongod` instances) directly but instead accesses the
:program:`mongos`. The :program:`mongos` routes queries and returns
results.

The :program:`mongos` keeps track of what data is on which shard by
caching that information as metadata on the :ref:`config servers
<sharding-config-server>`. The :program:`mongos` uses the metadata to
route operations from applications and clients to the :program:`mongod`
instances. A :program:`mongos` has no *persistent* state and consume
minimal system resources.

The most common practice is to run :program:`mongos` instances on the
same systems as your application servers, but you can maintain
:program:`mongos` instances on the shards or on other dedicated
resources.

.. note::

   .. versionchanged:: 2.1

   Some aggregation operations using the :dbcommand:`aggregate`
   command (i.e. :method:`db.collection.aggregate()`,) will cause
   :program:`mongos` instances to require more CPU resources than in
   previous versions. This modified performance profile may dictate
   alternate architecture decisions if you use the :term:`aggregation
   framework` extensively in a sharded environment.

Broadcast Operations vs Targeted Operations
-------------------------------------------

In general, operations in a sharded environment are either:

- Broadcast to all shards in the cluster that hold documents in a
  collection

- Targeted at a single shard or a limited group of shards, based on
  the shard key

For best performance, use targeted operations whenever possible. While
some operations must broadcast to all shards, you can ensure MongoDB
uses targeted operations whenever possible by always including the shard
key.

Broadcast Operations
~~~~~~~~~~~~~~~~~~~~

A query operation is broadcast to all shards [#namespace-exception]_
**unless** the :program:`mongos` can determine which shard or shard
stores this data.

Multi-update operations are always broadcast operations.

The :method:`remove() <db.collection.remove()>` operation is always a
broadcast operation, unless the operation specifies the shard key in
full.

.. [#namespace-exception] If a shard does not store chunks from a
   given collection, queries for documents in that collection are not
   broadcast to that shard.

Targeted Operations
~~~~~~~~~~~~~~~~~~~

All :method:`insert() <db.collection.insert()>` operations target to one
shard.

All single :method:`update() <db.collection.update()>` operations target
to one shard. This includes :term:`upsert` operations.

For queries that include the shard key, :program:`mongos` can target the
query at a specific shard or set of shards. This is the case only if the
portion of the shard key included in the query is a *prefix* of the
shard key. For example, if the shard key is:

.. code-block:: javascript

   { a: 1, b: 1, c: 1 }

The :program:`mongos` program *can* route queries that include the full
shard key or either of the following shard key prefixes at a
specific shard or set of shards:

.. code-block:: javascript

   { a: 1 }
   { a: 1, b: 1 }

Depending on the distribution of data in the cluster and the
selectivity of the query, :program:`mongos` may still have to
contact multiple shards [#possible-all]_ to fulfill these queries.

.. [#possible-all] :program:`mongos` will route some queries, even
   some that include the shard key, to all shards, if needed.

``mongos`` Query Routing
------------------------

A :program:`mongos` instance uses the following process to route a query
to a :term:`cluster <sharded cluster>`. The :program:`mongos`:

1. Determines the list of :term:`shards <shard>` that must receive the
   query.

#. Establishes a cursor on all targeted shards.

The following topics describe the process in more detail.

``mongos`` Determines which Shards Receive a Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In some cases, when the :term:`shard key` or a prefix of the shard
key is a part of the query, the :program:`mongos` can route the
query to a subset of the shards. Otherwise, the :program:`mongos`
must direct the query to *all* shards that hold documents for that
collection.

.. example::

   Given the following shard key:

   .. code-block:: javascript

      { zipcode: 1, u_id: 1, c_date: 1 }

   Depending on the distribution of chunks in the cluster, the
   :program:`mongos` may be able to target the query at a subset of
   shards, if the query contains the following fields:

   .. code-block:: javascript

      { zipcode: 1 }
      { zipcode: 1, u_id: 1 }
      { zipcode: 1, u_id: 1, c_date: 1 }

``mongos`` Establishes a Cursor on Targeted Shards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When the first batch of results returns from the cursors:

For query with sorted results (i.e. using
:method:`cursor.sort()`) the :program:`mongos` instance performs a merge
sort of all queries.

For a query with unsorted results, the :program:`mongos` instance returns
a result cursor that "round robins" results from all cursors on
the shards.

.. versionchanged:: 2.0.5
   Before 2.0.5, the :program:`mongos` exhausted each cursor,
   one by one.
