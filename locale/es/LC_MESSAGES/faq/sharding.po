# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 16:25+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 65806b6efc224ef2a139baa62fd61d57
#: ../source/faq/sharding.txt:3
msgid "FAQ: Sharding with MongoDB"
msgstr ""

# e562dbb8aaa44482a307012381bae6cb
#: ../source/faq/sharding.txt
msgid "On this page"
msgstr ""

# 6380bdcfbfa04d04a10d4982890fa628
#: ../source/faq/sharding.txt:13
msgid ""
"This document answers common questions about :doc:`/sharding`. See also "
"the :doc:`/sharding` section in the manual, which provides an "
":doc:`overview of sharding </sharding>`, including details on:"
msgstr ""

# 03902e83a5b54d6f99d421fabe0ce87f
#: ../source/faq/sharding.txt:17
msgid ""
":doc:`Shard Keys and Considerations for Shard Key Selection </core"
"/sharding-shard-key>`"
msgstr ""

# 753e6e72bf6d4d8ea465e41804c49452
#: ../source/faq/sharding.txt:20
msgid ":doc:`Query Routing </core/sharded-cluster-query-router/>`"
msgstr ""

# c558cd2c60ac43a189be205ae2a3cc09
#: ../source/faq/sharding.txt:22
msgid ":ref:`sharding-availability`"
msgstr ""

# c3b8ec9951ad487f849e1b7ae253b55d
#: ../source/faq/sharding.txt:24
msgid ""
":doc:`/core/sharding-data-partitioning` and :doc:`Chunk Migration Process"
" </core/sharding-balancer-administration>`"
msgstr ""

# a63f5328868f4c7bb2902102a44a56d5
#: ../source/faq/sharding.txt:27
msgid ":doc:`/tutorial/troubleshoot-sharded-clusters`"
msgstr ""

# 5e6155bbd42345c69b86fe6dbf43ee69
#: ../source/faq/sharding.txt:30
msgid "Is sharding appropriate for a new deployment?"
msgstr ""

# f4a61e49b9284791a2bb369372479a3f
#: ../source/faq/sharding.txt:32
msgid ""
"Sometimes. However, if your data set fits on a single server, you should "
"begin with an unsharded deployment as sharding while your data set is "
"small provides *little advantage* ."
msgstr ""

# 0da2a73229e14730ba17d24965ca4bce
#: ../source/faq/sharding.txt:39
msgid "Can I change the shard key after sharding a collection?"
msgstr ""

# 56daa667eae84c78931880c0beb73eee
#: ../source/faq/sharding.txt:41
msgid "No."
msgstr ""

# a405bcbe5aa84d41b54f9259c194f8dd
#: ../source/faq/sharding.txt:43
msgid ""
"There is no automatic support in MongoDB for changing a shard key after "
"sharding a collection. This reality underscores the importance of "
"choosing a good :ref:`shard key <shard-key>`. If you *must* change a "
"shard key after sharding a collection, the best option is to:"
msgstr ""

# 39b89c1c524b49388494d60021887efd
#: ../source/faq/sharding.txt:48
msgid "dump all data from MongoDB into an external format."
msgstr ""

# e9c0a2ff232d4e7a9dfd0bf8b94c9a14
#: ../source/faq/sharding.txt:50
msgid "drop the original sharded collection."
msgstr ""

# 595f0b39d6d2438192a1a5edc6a7e81f
#: ../source/faq/sharding.txt:52
msgid "configure sharding using a more ideal shard key."
msgstr ""

# fdedc4c5bd9d4d2aa9b62eda7decbc92
#: ../source/faq/sharding.txt:54
msgid ""
":doc:`pre-split </tutorial/create-chunks-in-sharded-cluster>` the shard "
"key range to ensure initial even distribution."
msgstr ""

# f43bc949946b482b805e784b8e794022
#: ../source/faq/sharding.txt:57
msgid "restore the dumped data into MongoDB."
msgstr ""

# 46b6c788e2ca42b4a2765964ab810f1d
#: ../source/faq/sharding.txt:59
msgid ":doc:`/core/sharding-shard-key`"
msgstr ""

# bf69380cf31a4db18794c0b02ed9cd5d
#: ../source/faq/sharding.txt:62
msgid "Why are my documents not distributed across the shards?"
msgstr ""

# c0cee1e3c8aa469c92663aa9d03e2072
#: ../source/faq/sharding.txt:64
msgid ""
"The balancer starts distributing data across the shards once the "
"distribution of chunks has reached certain thresholds. See :ref"
":`sharding-migration-thresholds`."
msgstr ""

# d0ae171b9ebc4991ae211b677bbee492
#: ../source/faq/sharding.txt:68
msgid ""
"In addition, MongoDB cannot move a chunk if the number of documents in "
"the chunk exceeds a certain number. See :ref:`migration-chunk-size-limit`"
" and :ref:`jumbo-chunk`."
msgstr ""

# 2b1bca6e60e149ed8810f2dc636c6173
#: ../source/faq/sharding.txt:73
msgid "How does ``mongos`` detect changes in the sharded cluster configuration?"
msgstr ""

# aaded192e0914728aa52f1cce829efb1
#: ../source/faq/sharding.txt:75
msgid ""
":program:`mongos` instances maintain a cache of the :term:`config "
"database` that holds the metadata for the :term:`sharded cluster`."
msgstr ""

# 59f649ac596b443ab3d00021809ebbd2
#: ../source/faq/sharding.txt:78
msgid ""
":program:`mongos` updates its cache lazily by issuing a request to a "
"shard and discovering that its metadata is out of date. To force the "
":program:`mongos` to reload its cache, you can run the "
":dbcommand:`flushRouterConfig` command against each :program:`mongos` "
"directly."
msgstr ""

# 8c1f786dea884255ac4dd1ed6519304c
#: ../source/faq/sharding.txt:87
msgid "What does ``writebacklisten`` in the log mean?"
msgstr ""

# c132dd40efd241a09428077d6313ca0c
#: ../source/faq/sharding.txt:89
msgid ""
"The writeback listener is a process that opens a long poll to relay "
"writes back from a :program:`mongod` or :program:`mongos` after "
"migrations to make sure they have not gone to the wrong server.  The "
"writeback listener sends writes back to the correct server if necessary."
msgstr ""

# da4fd8c3bed04b508f570ec830cd5607
#: ../source/faq/sharding.txt:95
msgid ""
"These messages are a key part of the sharding infrastructure and should "
"not cause concern."
msgstr ""

# 149844a00ea44192b36a86bf216ef9fe
#: ../source/faq/sharding.txt:99
msgid "How does ``mongos`` use connections?"
msgstr ""

# e9349f7debdf46ccbc4834694a5f9f57
#: ../source/faq/sharding.txt:101
msgid ""
"Each :program:`mongos` instance maintains a pool of connections to the "
"members of the sharded cluster. Client requests use these connections one"
" at a time; i.e. requests are not multiplexed or pipelined."
msgstr ""

# 56714ce19e3248d383ad824104a04139
#: ../source/faq/sharding.txt:105
msgid ""
"When client requests complete, the :program:`mongos` returns the "
"connection to the pool. These pools do not shrink when the number of "
"clients decreases. This can lead to an unused :program:`mongos` with a "
"large number of open connections. If the :program:`mongos` is no longer "
"in use, it is safe to restart the process to close existing connections."
msgstr ""

# bed1520965cb4e1bb835883f936e4ba1
#: ../source/faq/sharding.txt:111
msgid ""
"To return aggregated statistics related to all of the outgoing connection"
" pools used by the :program:`mongos`, connect a :program:`mongo` shell to"
" the :program:`mongos` with , and run the :dbcommand:`connPoolStats` "
"command:"
msgstr ""

# 8c16f12c3b7349c5abe9f806413b04e1
#: ../source/faq/sharding.txt:120
msgid ""
"See the :ref:`System Resource Utilization <system-resource-utilization>` "
"section of the :doc:`/reference/ulimit` document."
msgstr ""

# cd8bf264873c441faac11f84629948bd
#~ msgid ""
#~ "This document answers common questions "
#~ "about horizontal scaling using MongoDB's "
#~ ":term:`sharding`."
#~ msgstr ""

# 215421ef47624b56920f98c52472cfb8
#~ msgid ""
#~ "If you don't find the answer "
#~ "you're looking for, check the "
#~ ":doc:`complete list of FAQs </faq>` or"
#~ " post your question to the `MongoDB"
#~ " User Mailing List "
#~ "<https://groups.google.com/forum/?fromgroups#!forum/mongodb-"
#~ "user>`_."
#~ msgstr ""

# 2c0920491c2e4358b2301d91587c37d9
#~ msgid "Sometimes."
#~ msgstr ""

# 6901510982064c3fb2dbf17086216716
#~ msgid ""
#~ "If your data set fits on a "
#~ "single server, you should begin with "
#~ "an unsharded deployment."
#~ msgstr ""

# 6327d6fb1ae248319e98ae5e07aa0b1d
#~ msgid ""
#~ "Converting an unsharded database to a"
#~ " :term:`sharded cluster` is easy and "
#~ "seamless, so there is *little advantage*"
#~ " in configuring sharding while your "
#~ "data set is small."
#~ msgstr ""

# fec0699a3565478ea0618e5fbacaf24f
#~ msgid ""
#~ "Still, all production deployments should "
#~ "use :term:`replica sets <replication>` to "
#~ "provide high availability and disaster "
#~ "recovery."
#~ msgstr ""

# c049951849fd4d1faa784e6ade602b5e
#~ msgid "How does sharding work with replication?"
#~ msgstr ""

# 6e0c5ef347bf4e3d95c3b58c6cc92396
#~ msgid ""
#~ "To use replication with sharding, deploy"
#~ " each :term:`shard` as a :term:`replica "
#~ "set`."
#~ msgstr ""

# 42ebb08a93714a1e860a258db08579e6
#~ msgid ""
#~ "See :dbcommand:`shardCollection`, "
#~ ":method:`sh.shardCollection()`, the :ref:`Shard Key"
#~ " <sharding-internals-shard-keys>`, "
#~ ":doc:`/tutorial/deploy-shard-cluster`, and "
#~ ":issue:`SERVER-4000` for more information."
#~ msgstr ""

# 54acdc55222d4cae8128da4b0aa93a1f
#~ msgid "What happens to unsharded collections in sharded databases?"
#~ msgstr ""

# b5c5eacc271642b09b1052a5b7bb2968
#~ msgid ""
#~ "In the current implementation, all "
#~ "databases in a :term:`sharded cluster` "
#~ "have a \"primary :term:`shard`.\" All "
#~ "unsharded collection within that database "
#~ "will reside on the same shard."
#~ msgstr ""

# 44b4acedb35f48e99cadf2ad5f6ebaa9
#~ msgid "How does MongoDB distribute data across shards?"
#~ msgstr ""

# 8def3622671c44f6853121ed27a2a158
#~ msgid ""
#~ "Sharding must be specifically enabled on"
#~ " a collection. After enabling sharding "
#~ "on the collection, MongoDB will assign"
#~ " various ranges of collection data to"
#~ " the different shards in the cluster."
#~ " The cluster automatically corrects "
#~ "imbalances between shards by migrating "
#~ "ranges of data from one shard to"
#~ " another."
#~ msgstr ""

# ad6899e3988a47e09b455455678574cc
#~ msgid ""
#~ "What happens if a client updates a"
#~ " document in a chunk during a "
#~ "migration?"
#~ msgstr ""

# 1ebcf4cdc9ca45a6a27619cf33a00331
#~ msgid ""
#~ "The :program:`mongos` routes the operation "
#~ "to the \"old\" shard, where it "
#~ "will succeed immediately. Then the "
#~ ":term:`shard` :program:`mongod` instances will "
#~ "replicate the modification to the "
#~ "\"new\" shard before the :term:`sharded "
#~ "cluster` updates that chunk's \"ownership,\""
#~ " which effectively finalizes the migration"
#~ " process."
#~ msgstr ""

# eb189a7007354655957f31af0b2f1656
#~ msgid "What happens to queries if a shard is inaccessible or slow?"
#~ msgstr ""

# dca8f2e4794d40a28b882d44284446c8
#~ msgid ""
#~ "If a :term:`shard` is inaccessible or"
#~ " unavailable, queries will return with "
#~ "an error."
#~ msgstr ""

# 7fae6fc4cce14973b208c1136e918fcf
#~ msgid ""
#~ "However, a client may set the "
#~ "``partial`` query bit, which will then"
#~ " return results from all available "
#~ "shards, regardless of whether a given"
#~ " shard is unavailable."
#~ msgstr ""

# 215a9053fe52418fa4778cf9ac6aa002
#~ msgid ""
#~ "If a shard is responding slowly, "
#~ ":program:`mongos` will merely wait for "
#~ "the shard to return results."
#~ msgstr ""

# 90e49579e0ad490aa41f4f2904970565
#~ msgid "How does MongoDB distribute queries among shards?"
#~ msgstr ""

# 7790ece8e9d8439aa342c86b45b9bcc2
#~ msgid ""
#~ "The exact method for distributing "
#~ "queries to :term:`shards <shard>` in a"
#~ " :term:`cluster <sharded cluster>` depends "
#~ "on the nature of the query and "
#~ "the configuration of the sharded "
#~ "cluster. Consider a sharded collection, "
#~ "using the :term:`shard key` ``user_id``, "
#~ "that has ``last_login`` and ``email`` "
#~ "attributes:"
#~ msgstr ""

# 130f8e9221124ef393e032c0f73cca50
#~ msgid "For a query that selects one or more values for the ``user_id`` key:"
#~ msgstr ""

# f08563782583451e89322308ab9c0b96
#~ msgid ""
#~ ":program:`mongos` determines which shard or"
#~ " shards contains the relevant data, "
#~ "based on the cluster metadata, and "
#~ "directs a query to the required "
#~ "shard or shards, and returns those "
#~ "results to the client."
#~ msgstr ""

# 31264b697c49473e88a7f2561ef3d696
#~ msgid "For a query that selects ``user_id`` and also performs a sort:"
#~ msgstr ""

# be3f173c5bd7475e97a92f4836eb4079
#~ msgid ""
#~ ":program:`mongos` can make a straightforward"
#~ " translation of this operation into a"
#~ " number of queries against the "
#~ "relevant shards, ordered by ``user_id``. "
#~ "When the sorted queries return from "
#~ "all shards, the :program:`mongos` merges "
#~ "the sorted results and returns the "
#~ "complete result to the client."
#~ msgstr ""

# 5a5083fe20d4444389e91afe5968a646
#~ msgid "For queries that select on ``last_login``:"
#~ msgstr ""

# 7b9303d8099c4798b3cdeec9bdac1e5b
#~ msgid ""
#~ "These queries must run on all "
#~ "shards: :program:`mongos` must parallelize the"
#~ " query over the shards and perform"
#~ " a merge-sort on the ``email`` "
#~ "of the documents found."
#~ msgstr ""

# fb792e90d8144177b85a93ffe17b788c
#~ msgid "How does MongoDB sort queries in sharded environments?"
#~ msgstr ""

# 6e69ef0325ac4504b7dee38486afd0c9
#~ msgid ""
#~ "If you call the :method:`cursor.sort()` "
#~ "method on a query in a sharded "
#~ "environment, the :program:`mongod` for each"
#~ " shard will sort its results, and "
#~ "the :program:`mongos` merges each shard's "
#~ "results before returning them to the "
#~ "client."
#~ msgstr ""

# 591c713a7e0e4f01aa7f0af0a070ad72
#~ msgid ""
#~ "How does MongoDB ensure unique ``_id``"
#~ " field values when using a shard "
#~ "key *other* than ``_id``?"
#~ msgstr ""

# 4422866925d54118a3fef35411a0a7d8
#~ msgid ""
#~ "If you do not use ``_id`` as "
#~ "the shard key, then your "
#~ "application/client layer must be responsible"
#~ " for keeping the ``_id`` field "
#~ "unique. It is problematic for "
#~ "collections to have duplicate ``_id`` "
#~ "values."
#~ msgstr ""

# 7897d958322a40d2a007d0f54743d295
#~ msgid ""
#~ "If you're not sharding your collection"
#~ " by the ``_id`` field, then you "
#~ "should be sure to store a globally"
#~ " unique identifier in that field. The"
#~ " default :doc:`BSON ObjectId </reference"
#~ "/object-id>` works well in this case."
#~ msgstr ""

# 51e128016a3a451aa9b5815e529a204f
#~ msgid ""
#~ "I've enabled sharding and added a "
#~ "second shard, but all the data is"
#~ " still on one server. Why?"
#~ msgstr ""

# 2cb12392d7cb498690d7595eec16ece9
#~ msgid ""
#~ "First, ensure that you've declared a "
#~ ":term:`shard key` for your collection. "
#~ "Until you have configured the shard "
#~ "key, MongoDB will not create "
#~ ":term:`chunks <chunk>`, and :term:`sharding` "
#~ "will not occur."
#~ msgstr ""

# 223aebc29b2b470e81561fd957e3e07f
#~ msgid ""
#~ "Next, keep in mind that the "
#~ "default chunk size is 64 MB. As"
#~ " a result, in most situations, the"
#~ " collection needs to have at least"
#~ " 64 MB of data before a "
#~ "migration will occur."
#~ msgstr ""

# a0a7d3b9c76546068f0ff2ae4460dbd7
#~ msgid ""
#~ "Additionally, the system which balances "
#~ "chunks among the servers attempts to "
#~ "avoid superfluous migrations. Depending on "
#~ "the number of shards, your shard "
#~ "key, and the amount of data, "
#~ "systems often require at least 10 "
#~ "chunks of data to trigger migrations."
#~ msgstr ""

# ac3e8fbd283d4c02952f714d133cfdf8
#~ msgid ""
#~ "You can run :method:`db.printShardingStatus()` "
#~ "to see all the chunks present in"
#~ " your cluster."
#~ msgstr ""

# 81de1936dfef4af4868163b075c6303c
#~ msgid "Is it safe to remove old files in the ``moveChunk`` directory?"
#~ msgstr ""

# c626d8ce160e43368405ebeccacec641
#~ msgid ""
#~ "Yes. :program:`mongod` creates these files "
#~ "as backups during normal :term:`shard` "
#~ "balancing operations."
#~ msgstr ""

# 8920e93b5446432bbeb784d03cf3a615
#~ msgid "Once these migrations are complete, you may delete these files."
#~ msgstr ""

# d65ed838d8e34239afb97ca8cc2b18fb
#~ msgid ""
#~ "Each client maintains a connection to"
#~ " a :program:`mongos` instance. Each "
#~ ":program:`mongos` instance maintains a pool"
#~ " of connections to the members of "
#~ "a replica set supporting the sharded "
#~ "cluster.  Clients use connections between "
#~ ":program:`mongos` and :program:`mongod` instances"
#~ " one at a time. Requests are "
#~ "not multiplexed or pipelined. When "
#~ "client requests complete, the "
#~ ":program:`mongos` returns the connection to"
#~ " the pool."
#~ msgstr ""

# 628ba7302ef04763b97a41efff660fe2
#~ msgid "Why does ``mongos`` hold connections open?"
#~ msgstr ""

# 5f76d3b9fe2943abb84532ab22a425e4
#~ msgid ""
#~ ":program:`mongos` uses a set of "
#~ "connection pools to communicate with "
#~ "each :term:`shard`.  These pools do not"
#~ " shrink when the number of clients"
#~ " decreases."
#~ msgstr ""

# c24690ca1c454def8e7152b5685ed880
#~ msgid ""
#~ "This can lead to an unused "
#~ ":program:`mongos` with a large number of"
#~ " open connections. If the :program:`mongos`"
#~ " is no longer in use, it is "
#~ "safe to restart the process to "
#~ "close existing connections."
#~ msgstr ""

# a7751b0cbe3449febf9bb9687c7cb9c4
#~ msgid "Where does MongoDB report on connections used by ``mongos``?"
#~ msgstr ""

# bd2aae9e0bdc40699e9b4a352ee0affe
#~ msgid ""
#~ "Connect to the :program:`mongos` with "
#~ "the :program:`mongo` shell, and run the"
#~ " following command:"
#~ msgstr ""

# 2cef0c1ada4f4226b4535ed8591d18c0
#~ msgid "How should administrators deal with failed migrations?"
#~ msgstr ""

# dacbe6edf68d4b838a09d396522ffd43
#~ msgid ""
#~ "Failed migrations require no administrative"
#~ " intervention. Chunk migrations always "
#~ "preserve a consistent state. If a "
#~ "migration fails to complete for some "
#~ "reason, the :term:`cluster` retries the "
#~ "operation. When the migration completes "
#~ "successfully, the data resides only on"
#~ " the new shard."
#~ msgstr ""

# 7b95509dc0e24b03b334ae8530af1c9c
#~ msgid ""
#~ "What is the process for moving, "
#~ "renaming, or changing the number of "
#~ "config servers?"
#~ msgstr ""

# 436acc090717487f8cefc2d6146b9bc9
#~ msgid ""
#~ "See :doc:`/administration/sharded-clusters` for "
#~ "information on migrating and replacing "
#~ "config servers."
#~ msgstr ""

# 293b39822ed042d196b070544f3ad199
#~ msgid "When do the ``mongos`` servers detect config server changes?"
#~ msgstr ""

# 64c7fddfef1d463eaf6ce47e72dc12ff
#~ msgid ""
#~ ":program:`mongos` instances maintain a cache"
#~ " of the :term:`config database` that "
#~ "holds the metadata for the "
#~ ":term:`sharded cluster`. This metadata "
#~ "includes the mapping of :term:`chunks "
#~ "<chunk>` to :term:`shards <shard>`."
#~ msgstr ""

# dc664267496d4a72b16b09c5f984df6d
#~ msgid ""
#~ ":program:`mongos` updates its cache lazily "
#~ "by issuing a request to a shard"
#~ " and discovering that its metadata is"
#~ " out of date.  There is no way"
#~ " to control this behavior from the"
#~ " client, but you can run the "
#~ ":dbcommand:`flushRouterConfig` command against any"
#~ " :program:`mongos` to force it to "
#~ "refresh its cache."
#~ msgstr ""

# f1e515ada96d49a9aaca0ab52dda2cd5
#~ msgid ""
#~ "Is it possible to quickly update "
#~ "``mongos`` servers after updating a "
#~ "replica set configuration?"
#~ msgstr ""

# 1f0de8ff4aed4caa8c600e8d99ec9a0c
#~ msgid ""
#~ "The :program:`mongos` instances will detect"
#~ " these changes without intervention over"
#~ " time. However, if you want to "
#~ "force the :program:`mongos` to reload "
#~ "its configuration, run the "
#~ ":dbcommand:`flushRouterConfig` command against to"
#~ " each :program:`mongos` directly."
#~ msgstr ""

# 93629c99583e4e7fa2a444388e0a9d93
#~ msgid "What does the ``maxConns`` setting on ``mongos`` do?"
#~ msgstr ""

# d93f2812b7b54b24a93f7eaed818f03f
#~ msgid ""
#~ "The :setting:`~net.maxIncomingConnections` option "
#~ "limits the number of connections "
#~ "accepted by :program:`mongos`."
#~ msgstr ""

# c64a46b0663b41108e7df2c8fff15728
#~ msgid ""
#~ "If your client driver or application "
#~ "creates a large number of connections"
#~ " but allows them to time out "
#~ "rather than closing them explicitly, "
#~ "then it might make sense to limit"
#~ " the number of connections at the "
#~ ":program:`mongos` layer."
#~ msgstr ""

# d2b797f6c9ef424c9f9b2b37ce153d97
#~ msgid ""
#~ "Set :setting:`~net.maxIncomingConnections` to a "
#~ "value slightly higher than the maximum"
#~ " number of connections that the "
#~ "client creates, or the maximum size "
#~ "of the connection pool. This setting "
#~ "prevents the :program:`mongos` from causing"
#~ " connection spikes on the individual "
#~ ":term:`shards <shard>`. Spikes like these "
#~ "may disrupt the operation and memory "
#~ "allocation of the :term:`sharded cluster`."
#~ msgstr ""

# 5ca439030eb24ca39b787a8abf36eb7d
#~ msgid "How do indexes impact queries in sharded systems?"
#~ msgstr ""

# 15a543c5aa2b4aa3bf8f532b9ebe20aa
#~ msgid ""
#~ "If the query does not include the"
#~ " :term:`shard key`, the :program:`mongos` "
#~ "must send the query to all shards"
#~ " as a \"scatter/gather\" operation. Each"
#~ " shard will, in turn, use *either*"
#~ " the shard key index or another "
#~ "more efficient index to fulfill the "
#~ "query."
#~ msgstr ""

# 3c8eb0ed477b4742a094e2e2658c6fe6
#~ msgid ""
#~ "If the query includes multiple sub-"
#~ "expressions that reference the fields "
#~ "indexed by the shard key *and* the"
#~ " secondary index, the :program:`mongos` can"
#~ " route the queries to a specific "
#~ "shard and the shard will use the"
#~ " index that will allow it to "
#~ "fulfill most efficiently. See `this "
#~ "presentation <http://www.slideshare.net/mongodb/how-"
#~ "queries-work-with-sharding>`_ for more "
#~ "information."
#~ msgstr ""

# 07353afc04e740048896d0a81630e920
#~ msgid "Can shard keys be randomly generated?"
#~ msgstr ""

# 0f09c4fa9154459b8768ba8102af103f
#~ msgid ""
#~ ":term:`Shard keys <shard key>` can be"
#~ " random. Random keys ensure optimal "
#~ "distribution of data across the cluster."
#~ msgstr ""

# eea4989fa87c4a32b30559aaa82b2f3f
#~ msgid ""
#~ ":term:`Sharded clusters <sharded cluster>`, "
#~ "attempt to route queries to *specific*"
#~ " shards when queries include the "
#~ "shard key as a parameter, because "
#~ "these directed queries are more "
#~ "efficient. In many cases, random keys"
#~ " can make it difficult to direct "
#~ "queries to specific shards."
#~ msgstr ""

# eb251d9c12334d62a1d3c3626104f3af
#~ msgid "Can shard keys have a non-uniform distribution of values?"
#~ msgstr ""

# 4580c85da39b4ea692280d2176837245
#~ msgid ""
#~ "Yes. There is no requirement that "
#~ "documents be evenly distributed by the"
#~ " shard key."
#~ msgstr ""

# 23a8377dd226423f8fb35054ec1fef97
#~ msgid ""
#~ "However, documents that have the same"
#~ " shard key *must* reside in the "
#~ "same *chunk* and therefore on the "
#~ "same server. If your sharded data "
#~ "set has too many documents with "
#~ "the exact same shard key you will"
#~ " not be able to distribute *those*"
#~ " documents across your sharded cluster."
#~ msgstr ""

# 5597cf042201424abb93be4438f3bbed
#~ msgid "Can you shard on the ``_id`` field?"
#~ msgstr ""

# 4011e63e165a4256b1f117c21b3a17ea
#~ msgid ""
#~ "You can use any field for the "
#~ "shard key. The ``_id`` field is a"
#~ " common shard key."
#~ msgstr ""

# 15260f5a3a7a4a82ab20c08bef82e054
#~ msgid ""
#~ "Be aware that ``ObjectId()`` values, "
#~ "which are the default value of the"
#~ " ``_id`` field, increment as a "
#~ "timestamp. As a result, when used "
#~ "as a shard key, all new documents"
#~ " inserted into the collection will "
#~ "initially belong to the same chunk "
#~ "on a single shard. Although the "
#~ "system will eventually divide this chunk"
#~ " and migrate its contents to "
#~ "distribute data more evenly, at any "
#~ "moment the cluster can only direct "
#~ "insert operations at a single shard. "
#~ "This can limit the throughput of "
#~ "inserts. If most of your write "
#~ "operations are updates, this limitation "
#~ "should not impact your performance. "
#~ "However, if you have a high insert"
#~ " volume, this may be a limitation."
#~ msgstr ""

# ba8fcb3af36a4c0ea046bf97a710de4d
#~ msgid ""
#~ "To address this issue, MongoDB 2.4 "
#~ "provides :ref:`hashed shard keys <sharding-"
#~ "hashed-sharding>`."
#~ msgstr ""

# 3388be62bd4b44d38fc193f53e3b4a72
#~ msgid "What do ``moveChunk commit failed`` errors mean?"
#~ msgstr ""

# 4cc9520ca99d436c9374634e9d86e891
#~ msgid ""
#~ "At the end of a :ref:`chunk "
#~ "migration <sharding-chunk-migration>`, the "
#~ ":term:`shard` must connect to the "
#~ ":term:`config database` to update the "
#~ "chunk's record in the cluster metadata."
#~ " If the :term:`shard` fails to "
#~ "connect to the :term:`config database`, "
#~ "MongoDB reports the following error:"
#~ msgstr ""

# ffc8781804644037bfc2f23a1a8da20e
#~ msgid ""
#~ "When this happens, the :term:`primary` "
#~ "member of the shard's replica set "
#~ "then terminates to protect data "
#~ "consistency. If a :term:`secondary` member "
#~ "can access the config database, data "
#~ "on the shard becomes accessible again"
#~ " after an election."
#~ msgstr ""

# 750f14dd92214168a05ad4826c800ffc
#~ msgid ""
#~ "The user will need to resolve the"
#~ " chunk migration failure independently. If"
#~ " you encounter this issue, contact "
#~ "the `MongoDB User Group "
#~ "<http://groups.google.com/group/mongodb-user>`_ or "
#~ ":about:`MongoDB Support </support>` to address"
#~ " this issue."
#~ msgstr ""

# f43e13f2538b4ccd96d4e7f575886706
#~ msgid ""
#~ "How does draining a shard affect "
#~ "the balancing of uneven chunk "
#~ "distribution?"
#~ msgstr ""

# 8c789d501ac241d79a6badb7e710189f
#~ msgid ""
#~ "The sharded cluster balancing process "
#~ "controls both migrating chunks from "
#~ "decommissioned shards (i.e. draining) and "
#~ "normal cluster balancing activities. Consider"
#~ " the following behaviors for different "
#~ "versions of MongoDB in situations where"
#~ " you remove a shard in a "
#~ "cluster with an uneven chunk "
#~ "distribution:"
#~ msgstr ""

# bd57129b7cf94e39a4bf13c9cf93c1c0
#~ msgid ""
#~ "After MongoDB 2.2, the balancer first"
#~ " removes the chunks from the draining"
#~ " shard and then balances the "
#~ "remaining uneven chunk distribution."
#~ msgstr ""

# f1089c14640a461a93affa68fb67dd8e
#~ msgid ""
#~ "Before MongoDB 2.2, the balancer handles"
#~ " the uneven chunk distribution and "
#~ "*then* removes the chunks from the "
#~ "draining shard."
#~ msgstr ""

