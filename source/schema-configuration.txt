.. _schema-configuration-ref:

=================================
Map Relational Schemas to MongoDB
=================================

.. meta::
   :description: Map relational schemas to MongoDB using BI Connector, which provides methods for creating and managing relational schemas for business intelligence tools.

.. default-domain:: mongodb

Business intelligence tools connect to a data source and, given a fixed
tabular schema, allow users to visually explore their data.
MongoDB uses a :manual:`flexible schema </data-modeling>`, so some
business intelligence tools cannot use MongoDB as a native data source.

To use MongoDB with a relational business intelligence tool such as
:doc:`Tableau </connect/tableau>`, you must define a relational
mapping for your MongoDB data. |bi| provides several methods for
creating and managing a relational schema.

For complete documentation on |bi-short|'s schema management options,
see the :binary:`~bin.mongosqld` reference documentation.

:ref:`bi-cached-sampling`
-------------------------------------------

The default sampling mode which :binary:`~bin.mongosqld` uses to
analyze your collections and derive a static schema. In this mode,
:binary:`~bin.mongosqld` derives the schema on startup and holds the
schema in memory.

:ref:`bi-persistent-schema`
---------------------------------------------------------

:binary:`~bin.mongosqld` samples your MongoDB collections and
creates a schema at the time of startup and writes it to a
MongoDB collection. Available via the :option:`--schemaSource
<mongosqld --schemaSource>` option.

:ref:`Use MongoDB Views <schema-with-views>`
--------------------------------------------

:manual:`MongoDB views </core/views/>` allow you to control the
display of information from a collection by restricting access
to certain fields, renaming fields, sorting data, and other
techniques. |bi-short| can read data from a view just as it does
from a standard collection.

:ref:`Load a Schema from a DRDL File <schema-with-drdl-file>`
-------------------------------------------------------------

You can generate a text schema for :binary:`~bin.mongosqld` to use
with the :binary:`~bin.mongodrdl` program. You can edit a text
schema manually to suit your particular data needs.

:ref:`Resample Schema Data with "FLUSH SAMPLE" <resample-schema-data>`
----------------------------------------------------------------------

If the data in your MongoDB instance changes shape significantly
with new fields or collections, you may wish to regenerate the
schema |bi-short| uses. You can regenerate the schema either by
restarting :binary:`~bin.mongosqld` or by issuing the "FLUSH
SAMPLE" command from within the MySQL shell.

:ref:`Geospatial Data <geospatial-data>`
----------------------------------------

|bi-short| handles collections which contain a ``2d`` or ``2dsphere``
:manual:`geospatial index </applications/geospatial-indexes>` such
that longitude and latitude data are represented within a single
table along with other collection data.

:ref:`type-conflict-resolution`
-------------------------------

Relational databases don't allow dynamically typed columns. When
the |bi-short| samples data from MongoDB to generate a schema, type
conversion conflicts may occur. To learn more about how the |bi-short|
resolves these conflicts and displays data when conflicts are present,
see the following sections.


.. toctree::
   :titlesonly:

   /schema/cached-sampling
   /schema/persist-schema
   /schema/use-views
   /schema/load-schema-from-drdl
   /schema/resample-schema
   /schema/geospatial-data
   /schema/type-conflicts
   /schema/schema-management-changes
