=====================
startRecordingTraffic
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: startRecordingTraffic

   .. versionadded:: 4.2

   Starts the MongoDB traffic recorder on the :binary:`~bin.mongod` or
   :binary:`~bin.mongos` instance. The recorder captures all incoming
   wire protocol traffic to the instance (and the corresponding
   responses) and outputs to a specified file.

   .. important::

      To enable ``startRecordingTraffic``, the
      :parameter:`trafficRecordingDirectory` parameter must be set on
      start-up.

   .. warning::

      The recording file contains **unencrypted** user traffic
      information. If possible, limit the retention of this file.

   The command has the following form:

   .. code-block:: javascript

      db.runCommand( { startRecordingTraffic: 1, filename: <string>, bufferSize: <int64>, maxFileSize: <int64>} )

   The :dbcommand:`startRecordingTraffic` command can take the following
   optional fields:

   .. list-table::
      :header-rows: 1
      :widths: 20 20 80

      * - Field

        - Type

        - Description

      * - ``filename``

        - string

        - The name of the output file for the recorder. The file is
          located in the :parameter:`trafficRecordingDirectory`.

          .. warning::

             The recording file contains **unencrypted** user traffic
             information. If possible, limit the retention of this file.

          If a file with the same name exists in the
          :parameter:`trafficRecordingDirectory`, the recorder
          overwrites the file.

      * - ``bufferSize``

        - long

        - Optional. The maximum size of the in-memory buffer for
          traffic records in bytes.

          The default size is 128MiB.

      * - ``maxFileSize``

        - long

        - Optional. The maximum size of the output file in bytes.

          The default size is 4GiB.

   To stop the traffic recorder, use the
   :dbcommand:`stopRecordingTraffic` command.

.. _startRecordingTraffic-behavior:

Behavior
--------


The recorder may encounter errors when running. For example:

- If the recorder exceeded the maximum size for the output file.

- If the recorder exceeded the maximum size of the in-memory buffer for
  traffic records.

- If the recorder encountered an I/O error.

However, these errors will not be reported until
:dbcommand:`stopRecordingTraffic` stops the recorder. The
:dbcommand:`stopRecordingTraffic` stops the recorder and reports on
errors that may have occurred during the recording.

To view statistics on the traffic recorder, run
:method:`db.serverStatus()` while the recorder is running to see
:serverstatus:`trafficRecording` metrics.

Required Access
---------------

When running with access control, the user must have the
:authaction:`trafficRecord` privilege action on the cluster resource.
That is, the user must have a :ref:`role <roles>` that grants the
following :ref:`privilege <privileges>`:

.. code-block:: javascript

   { resource: { cluster: true }, actions: [ "trafficRecord" ] }

The built-in :authrole:`hostManager` role provides the required
privileges.

.. _startrecording-example:

Example
-------


The following example begins recording all traffic to the
:binary:`~bin.mongod`/:binary:`~bin.mongos` instance as well as the
instance's responses to that traffic.

.. code-block:: javascript

   db.runCommand( { startRecordingTraffic: 1, filename: "output.txt" } )

.. warning::

   The recording file contains **unencrypted** user traffic
   information. If possible, limit the retention of this file.

To stop recording, run the :dbcommand:`stopRecordingTraffic` command:

.. code-block:: javascript

   db.runCommand( { stopRecordingTraffic: 1 } )
