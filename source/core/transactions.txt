============
Transactions
============

.. default-domain:: mongodb



.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. meta::
   :description: For situations that require atomicity of reads and writes to multiple documents (in a single or multiple collections), MongoDB supports multi-document transactions.
   :keywords: MongoDB, transactions, distributed transactions, MongoDB multi-document transactions, MongoDB multi-statement transactions, java transaction examples, python transaction examples, node transaction examples, php transaction examples, scala transaction examples, csharp transaction examples, perl transaction examples, ruby transaction examples

In MongoDB, an operation on a single document is atomic. Because you can
use embedded documents and arrays to capture relationships between data
in a single document structure instead of normalizing across multiple
documents and collections, this single-document atomicity obviates the
need for multi-document transactions for many practical use cases.

For situations that require atomicity of reads and writes to multiple
documents (in a single or multiple collections), MongoDB supports
multi-document transactions. With distributed transactions,
transactions can be used across multiple operations, collections,
databases, documents, and shards.

Transactions API
----------------

The following example highlights the key components
of the transactions API:


.. tabs-pillstrip:: languages

.. tabs-drivers::
   
   .. tab::
      :tabid: python

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API also incorporates retry logic for
      ``TransientTransactionError`` or
      ``UnknownTransactionCommitResult`` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/test_examples.py
         :language: python
         :dedent: 8
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1

   .. tab::
      :tabid: java-sync

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API also incorporates retry logic for
      ``TransientTransactionError`` or
      ``UnknownTransactionCommitResult`` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. code-block:: java
          
         /*
           For a replica set, include the replica set name and a seedlist of the members in the URI string; e.g.
           String uri = "mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017/admin?replicaSet=myRepl";
           For a sharded cluster, connect to the mongos instances; e.g.
           String uri = "mongodb://mongos0.example.com:27017,mongos1.example.com:27017:27017/admin";
          */
          
         final MongoClient client = MongoClients.create(uri);
          
         /*
             Create collections.
          */
          
         client.getDatabase("mydb1").getCollection("foo")
                 .withWriteConcern(WriteConcern.MAJORITY).insertOne(new Document("abc", 0));
         client.getDatabase("mydb2").getCollection("bar")
                 .withWriteConcern(WriteConcern.MAJORITY).insertOne(new Document("xyz", 0));
          
         /* Step 1: Start a client session. */
          
         final ClientSession clientSession = client.startSession();
          
         /* Step 2: Optional. Define options to use for the transaction. */
          
         TransactionOptions txnOptions = TransactionOptions.builder()
                 .readPreference(ReadPreference.primary())
                 .readConcern(ReadConcern.LOCAL)
                 .writeConcern(WriteConcern.MAJORITY)
                 .build();
          
         /* Step 3: Define the sequence of operations to perform inside the transactions. */
          
         TransactionBody txnBody = new TransactionBody<String>() {
             public String execute() {
                 MongoCollection<Document> coll1 = client.getDatabase("mydb1").getCollection("foo");
                 MongoCollection<Document> coll2 = client.getDatabase("mydb2").getCollection("bar");
          
                 /*
                    Important:: You must pass the session to the operations.
                  */
                 coll1.insertOne(clientSession, new Document("abc", 1));
                 coll2.insertOne(clientSession, new Document("xyz", 999));
                 return "Inserted into collections in different databases";
             }
         };
         try {
             /* 
                Step 4: Use .withTransaction() to start a transaction, 
                execute the callback, and commit (or abort on error).
             */
          
             clientSession.withTransaction(txnBody, txnOptions);
         } catch (RuntimeException e) {
             // some error handling
         } finally {
             clientSession.close();
         }

   .. tab::
      :tabid: nodejs

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API also incorporates retry logic for
      ``TransientTransactionError`` or
      ``UnknownTransactionCommitResult`` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/node_transactions.js
         :language: javascript
         :dedent: 4
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1

   .. tab::
      :tabid: php

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API also incorporates retry logic for
      ``TransientTransactionError`` or
      ``UnknownTransactionCommitResult`` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
         :language: php
         :dedent: 8
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1

   .. tab::
      :tabid: csharp

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API also incorporates retry logic for
      ``TransientTransactionError`` or
      ``UnknownTransactionCommitResult`` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/withTxnExample1.cs
         :language: c#
         :dedent: 12
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1

   .. tab::
      :tabid: c

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API also incorporates retry logic for
      ``TransientTransactionError`` or
      ``UnknownTransactionCommitResult`` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c
         :language: c
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1

   .. tab::
      :tabid: cpp

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API also incorporates retry logic for
      ``TransientTransactionError`` or
      ``UnknownTransactionCommitResult`` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/cpp-with-transaction.cpp
         :language: cpp
         :dedent: 4
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1

   .. tab::
      :tabid: motor
       
      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API incorporates retry logic for
      :ref:`transient-transaction-error` or
      :ref:`unknown-transaction-commit-result` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/test_examples_motor.py
         :language: python
         :dedent: 8
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1

   .. tab::
      :tabid: ruby

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API incorporates retry logic for
      :ref:`transient-transaction-error` or
      :ref:`unknown-transaction-commit-result` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/with_transactions_examples_spec.rb
         :language: ruby
         :dedent: 4
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1


   .. tab::
      :tabid: go

      The example uses the new callback API for working with
      transactions, which starts a transaction, executes the
      specified operations, and commits (or aborts on error). The
      new callback API incorporates retry logic for
      :ref:`transient-transaction-error` or
      :ref:`unknown-transaction-commit-result` commit errors.

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/go_examples.go
         :language: go
         :start-after: Start Transactions withTxn API Example 1
         :end-before: End Transactions withTxn API Example 1

   .. tab::
      :tabid: perl
 
      This example uses the :ref:`core API <txn-core-api>`. Because the
      core API does not incorporate retry logic for
      :ref:`transient-transaction-error` or
      :ref:`unknown-transaction-commit-result` commit errors, the
      example includes explicit logic to retry the transaction for these
      errors:

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/perl-transactions-examples.t
         :language: perl
         :start-after: Start Transactions Retry Example 3
         :end-before: End Transactions Retry Example 3

   .. tab::
      :tabid: scala

      This example uses the :ref:`core API <txn-core-api>`. Because the
      core API does not incorporate retry logic for
      :ref:`transient-transaction-error` or
      :ref:`unknown-transaction-commit-result` commit errors, the
      example includes explicit logic to retry the transaction for
      these errors:

      .. include:: /includes/extracts/transactions-example-note.rst

      .. literalinclude:: /driver-examples/DocumentationTransactionsExampleSpec.scala
         :language: scala
         :lines: 50-


.. seealso::

   For an example in :binary:`~bin.mongo` shell, see :ref:`txn-mongo-shell-example`.

.. _transactions-atomicity:

Transactions and Atomicity
--------------------------

.. topic:: Distributed Transactions and Multi-Document Transactions

   Starting in MongoDB 4.2, the two terms are synonymous. Distributed
   transactions refer to multi-document transactions on sharded
   clusters and replica sets. Multi-document transactions (whether on
   sharded clusters or replica sets) are also known as distributed
   transactions starting in MongoDB 4.2.

For situations that require atomicity of reads and writes to multiple
documents (in a single or multiple collections), MongoDB supports
multi-document transactions:

- **In version 4.0**, MongoDB supports multi-document transactions on
  replica sets.

- **In version 4.2**, MongoDB introduces distributed transactions,
  which adds support for multi-document transactions on sharded
  clusters and incorporates the existing support for
  multi-document transactions on replica sets.

  To use transactions on MongoDB 4.2 deployments(replica sets and
  sharded clusters), clients :red:`must` use MongoDB drivers updated for
  MongoDB 4.2.

Multi-document transactions are atomic (i.e. provide an
"all-or-nothing" proposition):

- When a transaction commits, all data changes made in the transaction
  are saved and visible outside the transaction. That is, a transaction
  will not commit some of its changes while rolling back others.

  .. include:: /includes/extracts/transactions-committed-visibility.rst

- When a transaction aborts, all data changes made in the transaction
  are discarded without ever becoming visible. For example, if any
  operation in the transaction fails, the transaction aborts and all
  data changes made in the transaction are discarded without ever
  becoming visible.

.. include:: /includes/extracts/transactions-usage.rst

.. seealso:: :ref:`transactions-prod-consideration-outside-reads`

.. _transactions-operations:

Transactions and Operations
---------------------------

Distributed transactions can be used across multiple operations,
collections, databases, documents, and, starting in MongoDB 4.2, shards.

For transactions:

.. include:: /includes/extracts/transactions-operations-crud.rst

For a list of operations not supported in transactions, see
:ref:`transactions-ops-restricted`.

.. include:: /includes/extracts/transactions-operations-catalog-tip.rst

.. seealso::

   - :doc:`Transactions and Operations Reference </core/transactions-operations>`

.. _transactions-create-collections-indexes:

Create Collections and Indexes In a Transaction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.4 with :ref:`feature compatibility version (fcv)
<view-fcv>` ``"4.4"``, you can create collections and indexes inside a
:doc:`multi-document transaction </core/transactions>` unless the
transaction is a cross-shard write transaction. With ``"4.2"`` or less,
operations that affect the database catalog, such as creating or
dropping a collection or an index, are :red:`disallowed` in transactions.

When creating a collection inside a transaction:

- You can :ref:`implicitly create a collection
  <transactions-operations-ddl-implicit>`, such as with:

  - an :ref:`insert operation <transactions-operations-ddl-implicit>`
    against a non-existing collection, or

  - an :ref:`update/findAndModify operation
    <transactions-operations-ddl-implicit>` with ``upsert: true``
    against a non-existing collection.

- You can :ref:`explicitly create a collection
  <transactions-operations-ddl-explicit>` using the :dbcommand:`create`
  command or its helper :method:`db.createCollection()`.

When :ref:`creating an index inside a transaction
<transactions-operations-ddl-explicit>` [#create-existing-index]_, the
index to create must be on either:

- a non-existing collection. The collection is created as part of the
  operation.

- a new empty collection created earlier in the same transaction.

.. [#create-existing-index]

   You can also run :method:`db.collection.createIndex()` and
   :method:`db.collection.createIndexes()` on existing indexes to check
   for existence. These operations return successfully without creating
   the index.

Restrictions
````````````

- .. include:: /includes/extracts/transactions-cross-shard-collection-restriction.rst

- For explicit creation of a collection or an index inside a
  transaction, the transaction read concern level must be
  :readconcern:`"local"`. Explicit creation is through:

  .. list-table::
     :header-rows: 1

     * - Command
       - Method

     * - :dbcommand:`create`
       - :method:`db.createCollection()`

     * - :dbcommand:`createIndexes`

       - | :method:`db.collection.createIndex()`
         | :method:`db.collection.createIndexes()`

- The parameter
  :parameter:`shouldMultiDocTxnCreateCollectionAndIndexes` must be
  ``true`` (the default). When setting the parameter for a sharded
  cluster, set the parameter on all shards.

.. seealso::

   :ref:`transactions-ops-restricted`

.. _transactions-ops-count:

Count Operation
~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-count.rst

.. _transactions-ops-distinct:

Distinct Operation
~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-distinct.rst

.. _transactions-ops-info:

Informational Operations
~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-operations-restrictions-info.rst

.. _transactions-ops-restricted:

Restricted Operations
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-operations-restrictions.rst

.. seealso::

   - :ref:`txn-prod-considerations-ddl`

   - :doc:`Transactions and Operations Reference </core/transactions-operations>`

Transactions and Sessions
-------------------------

- Transactions are associated with a session; i.e. you start a
  transaction for a session.

- At any given time, you can have at most one open transaction for a
  session.

- When using the drivers, each operation in the transaction must be
  associated with the session. Refer to your driver specific
  documentation for details.

- If a session ends and it has an open transaction, the transaction
  aborts.

.. _transaction-options:

Read Concern/Write Concern/Read Preference
------------------------------------------

.. _transactions-read-preference:

Transactions and Read Preference
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operations in a transaction use the transaction-level :ref:`read
preference <replica-set-read-preference>`.

Using the drivers, you can set the transaction-level :ref:`read
preference <replica-set-read-preference>` at the transaction start:

- If the transaction-level read preference is unset, the transaction
  uses the session-level read preference.

- If transaction-level and the session-level read preference are unset,
  the transaction uses the client-level read preference. By default,
  the client-level read preference is :readmode:`primary`.

.. include:: /includes/extracts/transactions-read-pref.rst

.. _transactions-read-concern:

Transactions and Read Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operations in a transaction use the transaction-level :doc:`read
concern </reference/read-concern>`. That is, any read concern set at
the collection and database level is ignored inside the transaction.

You can set the transaction-level :doc:`read concern
</reference/read-concern>` at the transaction start.

- If the transaction-level read concern is unset, the transaction-level
  read concern defaults to the session-level read concern.

- If transaction-level and the session-level read concern are unset,
  the transaction-level read concern defaults to the client-level read
  concern. By default, client-level read concern is
  :readconcern:`"local"` for reads against the primary. See also:

  - :ref:`transactions-read-preference`
  - :doc:`/reference/mongodb-defaults`

Transactions support the following read concern levels:

``"local"``
```````````

- Read concern :readconcern:`"local"` returns the most recent data
  available from the node but can be rolled back.

- For transactions on sharded cluster, :readconcern:`"local"` read
  concern cannot guarantee that the data is from the same snapshot
  view across the shards. If snapshot isolation is required, use
  :ref:`transactions-read-concern-snapshot` read concern.

- .. include:: /includes/extracts/transactions-create-collections-read-concern.rst

``"majority"``
``````````````

- Read concern :readconcern:`"majority"` returns data that has been
  acknowledged by a majority of the replica set members (i.e. data
  cannot be rolled back) **if** the transaction commits with
  :ref:`write concern "majority" <transactions-write-concern>`.

- If the transaction does not use :ref:`write concern "majority"
  <transactions-write-concern>` for the commit, the
  :readconcern:`"majority"` read concern provides **no** guarantees that
  read operations read majority-committed data.

- For transactions on sharded cluster, :readconcern:`"majority"` read
  concern cannot guarantee that the data is from the same snapshot
  view across the shards. If snapshot isolation is required, use
  :ref:`transactions-read-concern-snapshot` read concern.

.. _transactions-read-concern-snapshot:

``"snapshot"``
``````````````

- Read concern :readconcern:`"snapshot"` returns data from a
  snapshot of majority committed data **if** the transaction commits
  with :ref:`write concern "majority" <transactions-write-concern>`.

- If the transaction does not use :ref:`write concern "majority"
  <transactions-write-concern>` for the commit, the
  :readconcern:`"snapshot"` read concern provides **no** guarantee that
  read operations used a snapshot of majority-committed data.

- For transactions on sharded clusters, the
  :readconcern:`"snapshot"` view of the data **is** synchronized
  across shards.

.. _transactions-write-concern:

Transactions and Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Transactions use the transaction-level :doc:`write concern
</reference/write-concern>` to commit the write operations. Write
operations inside transactions must be issued without explicit write
concern specification and use the default write concern. At commit
time, the writes are then commited using the transaction-level write
concern.

.. tip::

   Do not explicitly set the write concern for the individual write
   operations inside a transaction. Setting write concerns for the
   individual write operations inside a transaction results in an error.

You can set the transaction-level :doc:`write concern
</reference/write-concern>` at the transaction start:

- If the transaction-level write concern is unset, the
  transaction-level write concern defaults to the session-level write
  concern for the commit.

- If the transaction-level write concern and the session-level write
  concern are unset, transaction-level write concern defaults to the
  client-level write concern. By default, client-level write concern is
  :writeconcern:`w: 1 <\<number\>>`. See also
  :doc:`/reference/mongodb-defaults`.
  

Transactions support all write concern :ref:`w <wc-w>`
values, including:

``w: 1``
````````

- Write concern :writeconcern:`w: 1 <\<number\>>` returns
  acknowledgement after the commit has been applied to the primary.

  .. important::

     When you commit with :writeconcern:`w: 1 <\<number\>>`, your
     transaction can be :doc:`rolled back if there is a failover
     </core/replica-set-rollbacks>`.

- When you commit with :writeconcern:`w: 1 <\<number\>>` write
  concern, transaction-level :readconcern:`"majority"` read concern
  provides **no** guarantees that read operations in the transaction
  read majority-committed data.

- When you commit with :writeconcern:`w: 1 <\<number\>>` write
  concern, transaction-level :readconcern:`"snapshot"` read concern
  provides **no** guarantee that read operations in the transaction
  used a snapshot of majority-committed data.

``w: "majority"``
`````````````````

- Write concern :writeconcern:`w: "majority" <"majority">` returns
  acknowledgement after the commit has been applied to a majority
  (M) of voting members; i.e. the commit has been applied to the
  primary and (M-1) voting secondaries.

- When you commit with :writeconcern:`w: "majority" <"majority">`
  write concern, transaction-level :readconcern:`"majority"` read
  concern guarantees that operations have read majority-committed
  data. For transactions on sharded clusters, this view of the
  majority-committed data is not synchronized across shards.

- When you commit with :writeconcern:`w: "majority" <"majority">`
  write concern, transaction-level :readconcern:`"snapshot"` read
  concern guarantees that operations have from a synchronized
  snapshot of majority-committed data.

.. note::

   .. include:: /includes/extracts/transactions-sharded-clusters-commit-writeconcern.rst
   
General Information
-------------------

Production Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~

For various production considerations with using transactions, see
:doc:`/core/transactions-production-consideration`. In addition, or sharded
clusters, see also :doc:`/core/transactions-sharded-clusters`.

Arbiters
~~~~~~~~

.. include:: /includes/extracts/transactions-arbiters.rst

.. |disabledrcmaj| replace:: :ref:`transactions-disabled-rc-majority`

.. _transactions-disabled-rc-majority:

Disabled Read Concern Majority
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A 3-member PSA (Primary-Secondary-Arbiter) replica set or a sharded
cluster with 3-member PSA shards may have disabled read concern
majority (:option:`--enableMajorityReadConcern false <mongod
--enableMajorityReadConcern>` or
:setting:`replication.enableMajorityReadConcern: false
<replication.enableMajorityReadConcern>`)

.. include:: /includes/extracts/transactions-read-concern-majority-sharded-clusters.rst

.. include:: /includes/extracts/transactions-read-concern-majority-replica-set.rst

.. tip::

   To check if read concern "majority" is disabled, You can run
   :method:`db.serverStatus()` on the :binary:`~bin.mongod` instances
   and check the :serverstatus:`storageEngine.supportsCommittedReads`
   field. If ``false``, read concern "majority" is disabled.
 
For more information, see :ref:`transactions-psa` and
:ref:`transactions-sharded-clusters-psa`.

.. _transactions-wcmajority-disabled:

Shard Configuration Restriction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-shards-wcmajority-disabled.rst

.. note::

   .. include:: /includes/extracts/transactions-sharded-clusters-commit-writeconcern.rst

Diagnostics
~~~~~~~~~~~

MongoDB provides various transactions metrics:

.. list-table::
   :widths: 40 60
   :header-rows: 1

   * - Via
     - 

   * - | :method:`db.serverStatus()` method
       | :dbcommand:`serverStatus` command
   
     - Returns :ref:`server-status-transactions` metrics.
  
   * - :pipeline:`$currentOp` aggregation pipeline
   
     - Returns:
     
       - :data:`$currentOp.transaction` if an operation is part of a
         transaction.
        
       - Information on :ref:`inactive sessions
         <currentOp-stage-idleSessions>` that are holding locks as part
         of a transaction.

       - :data:`$currentOp.twoPhaseCommitCoordinator` metrics for
         sharded transactions that involes writes to multiple shards.

   * - | :method:`db.currentOp()` method
       | :dbcommand:`currentOp` command

     - Returns:
     
       - :data:`currentOp.transaction` if an operation is part of a
         transaction.
         
       - :data:`currentOp.twoPhaseCommitCoordinator` metrics for
         sharded transactions that involes writes to multiple shards.

   * - :binary:`~bin.mongod` and :binary:`~bin.mongos` log messages

     - Includes information on slow transactions (i.e. transactions
       that exceed the :setting:`operationProfiling.slowOpThresholdMs`
       threshhold) under the :data:`TXN` log component.

..  _transactions-fcv:

Feature Compatibility Version (FCV)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use transactions, the :ref:`featureCompatibilityVersion <view-fcv>`
for all members of the deployment must be at least:

.. list-table::
   :header-rows: 1

   * - Deployment
     - Minimum ``featureCompatibilityVersion``

   * - Replica Set
     - ``4.0``

   * - Sharded Cluster
     - ``4.2``

To check the fCV for a member, connect to the member and run the
following command:

.. code-block:: javascript

   db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

For more information, see the
:dbcommand:`setFeatureCompatibilityVersion` reference page.

.. _transactions-storage-engines:

Storage Engines
~~~~~~~~~~~~~~~

.. include:: /includes/extracts/transactions-inmemory-txn-page.rst

Additional Transactions Topics
------------------------------

- :doc:`/core/transactions-in-applications`
- :doc:`/core/transactions-production-consideration`
- :doc:`/core/transactions-sharded-clusters`
- :doc:`/core/transactions-operations`
- .. include:: /includes/extracts/mongodb-live-2020-transactions.rst
   
.. toctree::
   :titlesonly:
   :hidden:
   
   /core/transactions-in-applications
   /core/transactions-production-consideration
   /core/transactions-sharded-clusters
   /core/transactions-operations
