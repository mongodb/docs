arg_name: field
description: |-
  The name of the collection.
interface: dbcommand
name: planCacheSetFilter
operation: planCacheSetFilter
optional: false
position: 1
type: string
---
arg_name: field
description: |
  The query predicate associated with the index filter. Together with
  the ``sort`` and the ``projection``, the ``query`` predicate make up
  the :term:`query shape` for the specified index filter.

  Only the structure of the predicate, including the field names, are
  significant; the values in the query predicate are
  insignificant. As such, query predicates cover similar queries that
  differ only in the values.
interface: dbcommand
name: query
operation: planCacheSetFilter
optional: false
position: 1
type: document
---
arg_name: field
description: |
  The sort associated with the filter. Together with
  the ``query`` and the ``projection``, the ``sort``  make up
  the :term:`query shape` for the specified index filter.
interface: dbcommand
name: sort
operation: planCacheSetFilter
optional: true
position: 1
type: document
---
arg_name: field
description: |
  The projection associated with the filter.  Together with
  the ``query`` and the ``sort``, the ``projection``  make up
  the :term:`query shape` for the specified index filter.
interface: dbcommand
name: projection
operation: planCacheSetFilter
optional: true
position: 1
type: document
---
arg_name: field
description: |
  An array of index filters for the specified :term:`query shape`.

  Specify the index filters as either: 
  - an array of index specification documents, e.g. ``[ { x : 1 }, ... ]``
  - an array of index names, e.g. ``[ "x_1", ... ]``

  Because the :doc:`query optimizer </core/query-plans>` chooses among 
  the collection scan and these indexes, if the indexes are non-existent,
  the optimizer will choose the collection scan.

  In cases of multiple indexes with the same key pattern, you must 
  specify the index by name.
interface: dbcommand
name: indexes
operation: planCacheSetFilter
optional: false
position: 1
type: array
...
