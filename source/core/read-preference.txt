.. index:: read preference
.. index:: slaveOk
.. index:: read preference; background
.. _replica-set-read-preference:
.. _replica-set-read-preference-background:

===============
Read Preference
===============

.. default-domain:: mongodb

.. include:: /includes/introduction-read-preference.rst

.. important:: You must exercise care when specifying read preferences:
   modes other than :readmode:`primary` can *and will* return stale data
   because the secondary queries will not include the most recent write
   operations to the replica set's :term:`primary`.

.. include:: /images/replica-set-read-preference.rst

Use Cases
---------

Indications
~~~~~~~~~~~

The following are common use cases for using non-:readmode:`primary`
read preference modes:

- Running systems operations that do not affect the front-end
  application.

  Issuing reads to secondaries helps distribute load and prevent
  operations from affecting the main workload of the primary. This can
  be a good choice for reporting and analytics workloads, for example.

  .. note::

     Read preferences aren't relevant to direct connections to
     a single :program:`mongod` instance. However, in order to perform
     read operations on a direct connection to a secondary member of a
     replica set, you must set a read preference, such as
     :term:`secondary`.

- Providing local reads for geographically distributed applications.

  If you have application servers in multiple data centers, you may
  consider having a :ref:`geographically distributed replica set
  <replica-set-geographical-distribution>` and using a non primary read
  preference or the :readmode:`nearest`. This allows the client to read
  from the lowest-latency members, rather than always reading from the
  primary.

- Maintaining availability during a failover.

  Use :readmode:`primaryPreferred` if you want an application to
  read from the primary under normal circumstances, but to
  allow stale reads from secondaries in an emergency. This provides a
  "read-only mode" for your application during a failover.

Counter-Indications
~~~~~~~~~~~~~~~~~~~

In general, do *not* use :readmode:`secondary` and
:readmode:`secondaryPreferred` to provide extra capacity for
reads. Specifically:

- All members of a replica have roughly equivalent write traffic, as a
  result secondaries will service reads at roughly the same rate as
  the primary.

- Because replication is asynchronous and there is some amount of
  delay between a successful write operation and its replication to
  secondaries, reading from a secondary will can return out-of-date data.

- Distributing read operations to secondaries can compromise availability
  if *any* members of the set are unavailable because the remaining
  members of the set will need to be able to handle all application
  requests.

- For queries of sharded collections that *do not* include the shard
  key, secondaries may return stale results with missing or duplicated
  data because of incomplete or terminated migrations.

:doc:`Sharding </sharding>` increases read and write capacity by
distributing read and write operations across a group of machines,
and is often a better strategy for adding capacity.

See :doc:`/core/read-preference-mechanics` for more information
about the internal application of read preferences.

Read Preference Modes
---------------------

.. versionadded:: 2.2

.. important::

   All read preference modes except :readmode:`primary` may return
   stale data because :term:`secondaries <secondary>` replicate operations
   from the primary with some delay. Ensure that your application can
   tolerate stale data if you choose to use a non-:readmode:`primary`
   mode.

MongoDB :doc:`drivers </applications/drivers>` support five
read preference modes.

.. include:: /includes/read-preference-modes-table.rst

The syntax for specifying
the read preference mode is :api:`specific to the driver and to the
idioms of the host language <>`.

Read preference modes are also available to clients connecting to a
:term:`sharded cluster` through a :program:`mongos`. The
:program:`mongos` instance obeys specified read preferences when
connecting to the :term:`replica set` that provides each :term:`shard`
in the cluster.

In the :program:`mongo` shell, the :method:`~cursor.readPref()` cursor
method provides access to read preferences.

For more information, see :ref:`read preference background
<replica-set-read-preference-background>` and :ref:`read preference
behavior <replica-set-read-preference-behavior>`. See also the
:api:`documentation for your driver <>`.

.. index:: tag sets
.. index:: read preference; tag sets
.. _replica-set-read-preference-tag-sets:

Tag Sets
--------

Tag sets allow you to target read operations to specific members of a
replica set.

Custom read preferences and write concerns evaluate tags sets in
different ways. Read preferences consider the value of a tag when
selecting a member to read from. Write concerns ignore the value
of a tag to when selecting a member, *except* to consider whether or not
the value is unique.

You can specify tag sets with the following read preference modes:

- :readmode:`primaryPreferred`
- :readmode:`secondary`
- :readmode:`secondaryPreferred`
- :readmode:`nearest`

Tags are not compatible with mode :readmode:`primary` and, in general, only
apply when :ref:`selecting <replica-set-read-preference-behavior-member-selection>`
a :term:`secondary` member of a set for a read operation. However, the
:readmode:`nearest` read mode, when combined with a tag set, selects
the matching member with the lowest network latency. This member may be a
primary or secondary.

All interfaces use the same :ref:`member selection logic
<replica-set-read-preference-behavior-member-selection>` to choose the
member to which to direct read operations, basing the choice on read
preference mode and tag sets.

For information on configuring tag sets, see the
:doc:`/tutorial/configure-replica-set-tag-sets` tutorial.

For more information on how read preference :ref:`modes
<replica-set-read-preference-modes>` interact with tag sets, see the
:doc:`documentation for each read preference mode </reference/read-preference>`.
