=====================
db.collection.watch()
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. method:: db.collection.watch( pipeline, options )

   Opens a :ref:`change stream cursor <changeStreams>` on the 
   collection. 

   .. include:: /includes/apiargs/method-db.collection.watch-param.rst

   The ``options`` document can contain the following fields and values:

   .. include:: /includes/apiargs/method-db.collection.watch-options.rst

   :returns:
      A :term:`cursor` that remains open as long as a connection to the
      MongoDB deployment remains open *and* the collection exists.
      See :doc:`/reference/change-events` for examples of change
      event documents.

   .. seealso::  :method:`db.watch()` and :method:`Mongo.watch()`

Behavior
--------

- :method:`db.collection.watch()` only notifies on data changes that have
  persisted to a majority of data-bearing members.

- .. include:: /includes/extracts/changestream-cursor-open.rst

- You can only use :method:`db.collection.watch()` with the :ref:`Wired
  Tiger storage engine <storage-wiredtiger>`.

- :method:`db.collection.watch()` is available for replica sets and
  sharded clusters:

  - For a replica set, you can issue :method:`db.watch()` on any
    data-bearing member.

  - For a sharded cluster, you must issue :method:`db.watch()` on a
    :binary:`~bin.mongos` instance.


Resumability
~~~~~~~~~~~~

.. include:: /includes/extracts/changestream-resume.rst

.. include:: /includes/extracts/changestream-resume-token-change.rst

.. include:: /includes/extracts/changestream-resume-token-compatibility.rst

.. |watchmethod| replace:: :method:`db.collection.watch()`


Full Document Lookup of Update Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/changestream-full-document-lookup.rst

Access Control
--------------

When running with access control, the user must have the
:authaction:`find` and :authaction:`changeStream` privilege actions on
the :ref:`collection resource <resource-document>`. That is, a user must
have a :ref:`role <roles>` that grants the following :ref:`privilege
<privileges>`:

.. code-block:: javascript

   { resource: { db: <dbname>, collection: <collection> }, actions: [ "find", "changeStream" ] }


The built-in :authrole:`read` role provides the appropriate
privileges.

Examples
--------

Open a Change Stream
~~~~~~~~~~~~~~~~~~~~

The following operation opens a change stream cursor against the 
``data.sensors`` collection:

.. code-block:: javascript

   watchCursor = db.getSiblingDB("data").sensors.watch()

Iterate the cursor to check for new events. Use the
:method:`cursor.isExhausted()` method to ensure the loop only exits
if the change stream cursor is closed *and* there are no objects
remaining in the latest batch:

.. code-block:: javascript

   while (!watchCursor.isExhausted()){
      if (watchCursor.hasNext()){
         printjson(watchCursor.next());
      }
   }

For complete documentation on change stream output, see
:ref:`change-stream-output`.

Change Stream with Full Document Update Lookup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Set the ``fullDocument`` option to ``"updateLookup"`` to direct the
change stream cursor to lookup the most current majority-committed
version of the document associated to an update change stream event.

The following operation opens a change stream cursor against
the ``data.sensors`` collection using the 
``fullDocument : "updateLookup"`` option.

.. code-block:: javascript

   watchCursor = db.getSiblingDB("data").sensors.watch(
      [],
      { fullDocument : "updateLookup" }
   )

Iterate the cursor to check for new events. Use the
:method:`cursor.isExhausted()` method to ensure the loop only exits
if the change stream cursor is closed *and* there are no objects
remaining in the latest batch:

.. code-block:: javascript

   while (!watchCursor.isExhausted()){
      if (watchCursor.hasNext()){
         printjson(watchCursor.next());
      }
   }

For any update operation, the change event returns the result of the
document lookup in the ``fullDocument`` field.

For an example of the full document update output, see  :ref:`change
stream update event <change-streams-update-event>`.

For complete documentation on change stream output, see
:ref:`change-stream-output`.

Change Stream with Aggregation Pipeline Filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation opens a change stream cursor against the 
``data.sensors`` collection using an aggregation pipeline to
filter only ``insert`` events:

.. code-block:: javascript

   watchCursor = db.getSiblingDB("data").sensors.watch(
      [
         { $match : {"operationType" : "insert" } }
      ]
   )

Iterate the cursor to check for new events. Use the
:method:`cursor.isExhausted()` method to ensure the loop only exits
if the change stream cursor is closed *and* there are no objects
remaining in the latest batch:

.. code-block:: javascript

   while (!watchCursor.isExhausted()){
      if (watchCursor.hasNext()){
         printjson(watchCursor.next());
      }
   }

The change stream cursor only returns change events where the 
``operationType`` is ``insert``. For complete documentation on
change stream output, see :ref:`change-stream-output`. 

Resuming a Change Stream
~~~~~~~~~~~~~~~~~~~~~~~~

Every  document returned by a change stream cursor includes a resume
token as the ``_id`` field. To resume a change stream, pass the entire
``_id`` document of the change event you want to resume from to
the ``resumeAfter`` option of :method:`~db.collection.watch()`. 

The following operation resumes a change stream cursor against the 
``data.sensors`` collection using a resume token. This
assumes that the operation that generated the resume token has not
rolled off the cluster's oplog. 

.. code-block:: javascript

   let watchCursor = db.getSiblingDB("data").sensors.watch();
   let firstChange;

   while (!watchCursor.isExhausted()) {
      if (watchCursor.hasNext()) {
        firstChange = watchCursor.next();
        break;
      }
   }

   watchCursor.close();

   let resumeToken = firstChange._id;

   resumedWatchCursor = db.getSiblingDB("data").sensors.watch(
   [],
      { resumeAfter : resumeToken }
   )

Iterate the cursor to check for new events. Use the
:method:`cursor.isExhausted()` method to ensure the loop only exits
if the change stream cursor is closed *and* there are no objects
remaining in the latest batch:

.. code-block:: javascript

   while (!resumedWatchCursor.isExhausted()){
      if (resumedWatchCursor.hasNext()){
         printjson(watchCursor.next());
      }
   }

See :ref:`change-stream-resume` for complete documentation on
resuming a change stream.

