.. _rm-mapping-rules:

=============
Data Modeling
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To model your data in Relational Migrator, design a MongoDB schema
and create **mapping rules**. Mapping rules specify how relational 
table columns are mapped to MongoDB documents. You can create mapping rules 
in a project after you have provided a valid relational 
database connection string and credentials.

MongoDB Schema Design Patterns
------------------------------

Schema design patterns in MongoDB shape how your data is organized. 
Good schema design practices ensure efficient storage, retrieval, and 
manipulation of your data. These design decisions can improve the 
performance and scalability of your MongoDB deployment. Relational 
Migrator allows you to make key schema design decisions such as 
combining multiple tables into a single collection or embedding data 
in your documents.

For an overview of schema design best practices, review the following 
documentation:

- :ref:`data-modeling-patterns`.

- `Building with Patterns
  <https://www.mongodb.com/blog/post/building-with-patterns-a-summary>`__.

- `Summary of Schema Design Anti-Patterns and How to Spot Them
  <https://www.mongodb.com/developer/products/mongodb/schema-design-anti-pattern-summary/>`__.


Details
-------

Relationships
~~~~~~~~~~~~~

Mapping rules help define a ``one-to-one``, ``one-to-many``, or ``many-to-many`` 
relationship between your tables and collections.

You can define mapping rules for the following configurations: 

- A single table that maps to a single MongoDB collection. 

- A single table that maps to multiple MongoDB collections. 

- Multiple tables that map into a single collection.

Default Rules
~~~~~~~~~~~~~

{+rel-mig+} automatically creates a :ref:`New Documents mapping rule <rm-new-documents>`
for each source table. This initial rule produces a MongoDB schema that
is identical to the relational database. You can edit the initial rule 
before running any data migration jobs.

Data Type Detection
~~~~~~~~~~~~~~~~~~~

{+rel-mig+} automatically selects the best MongoDB data type for each 
source column.

For example, SQL Server source data of types ``text``, ``varchar``,
``nvarchar`` or ``char`` become the MongoDB ``string`` data type. 

Mapping Direction Preference
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can create a mapping rule based on a source :ref:`relational model <create-rule-relational>`
or based on a destination :ref:`MongoDB model <create-rule-mongodb>`.

You can modify your MongoDB model as you create mapping rules, but 
Relational Migrator treats your relational model as static and unchanging. If 
your relational database schema changes, you must refresh the relational model. 
For more information, see :ref:`<rm-manage-relational-model>`.

Row Mapping Options
~~~~~~~~~~~~~~~~~~~

You can define mapping rules with the following ``Migrate as`` options:

.. list-table::
   :header-rows: 1

   * - Option
     - Behavior

   * - :ref:`Migrate rows as New Documents <rm-new-documents>`
     - Translates each relational database row to a new document.

   * - :ref:`Migrate rows as Embedded array <rm-embedded-array>`
     - Translates each row into an array element within a parent document identified by a foreign key   
       relationship.

   * - :ref:`Migrate rows as Embedded documents <rm-embedded-documents>`
     - Translates each row as a set of fields or an embedded object in a child document identified by a foreign key relationship.

Custom Fields and Filters
~~~~~~~~~~~~~~~~~~~~~~~~~

You can create mapping rules with :ref:`custom fields <rm-field-customizations>`. 
Relational Migrator also supports :ref:`table filters <rm-table-filters>` to limit 
data migrated from relational tables.

Manually Add Synthetic Foreign Keys
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your database does not have foreign key constraints, you can manually add foreign keys 
as :ref:`synthetic foreign keys <rm-synthetic-foreign-keys>`. All foreign keys are translated 
to MongoDB :ref:`document references <data-modeling-referencing>` when Relational 
Migrator transforms your source relational data into MongoDB collections. For more information, 
see :ref:`<rm-synthetic-foreign-keys>`.

Preview Mapping Rules
---------------------

.. include:: /includes/mapping-options-preview.rst

Learn More
----------

- :ref:`<rm-schema-mapping>`
- :ref:`<rm-mapping-rule-options>`
- :ref:`rm-diagrams`

.. toctree::
   :titlesonly:
   :hidden:

   Manage the Relational Model </projects/manage-relational-connection>
   Schema Mapping </mapping-rules/schema-mapping>
   Create Rules </mapping-rules/create-rules>
   Use Suggested Mappings </mapping-rules/new-rules-suggested-mappings>
   Table Filters </table-filters>
   Rule Options </mapping-rules/mapping-rule-options/introduction>
   Custom Fields </mapping-rules/fields/field-customizations>
   Manage Rules </mapping-rules/manage-rules>
   Synthetic Foreign Keys </mapping-rules/synthetic-foreign-key/synthetic-foreign-keys>
   Diagrams & Entities </diagrams>
   Example: Insurance Data Models </mapping-rules/example-insurance-data>
