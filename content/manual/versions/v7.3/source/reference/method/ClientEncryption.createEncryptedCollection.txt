============================================
ClientEncryption.createEncryptedCollection()
============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionadded:: 7.0

.. method:: ClientEncryption.createEncryptedCollection(dbName, collName, clientEncOpts)

   ``ClientEncryption.createEncryptedCollection`` creates an 
   encrypted collection specified by ``collName`` on the database 
   specified by ``dbName``.

Syntax
------

``ClientEncryption.createEncryptedCollection`` has the 
following syntax:

.. code-block:: javascript

   clientEncryption = db.getMongo().getClientEncryption()

   clientEncryption.createEncryptedCollection(
     dbName,
     collName,
     {
       provider: kmsProviderName,
       createCollectionOptions: encryptedFieldsMap,
       masterKey: customerMasterKeyCredentials
     }
   )

Command Fields
--------------

``createEncryptedCollection`` takes these fields:

.. list-table::
  :header-rows: 1
  :widths: 20 20 20 80

  * - Field
    - Type
    - Necessity
    - Description

  * - ``dbName``
    - string
    - Required
    - Name of the database to encrypt.

  * - ``collName``
    - string
    - Required
    - Name of the collection to encrypt.

  * - ``clientEncOpts``
    - document
    - Required
    - Options to configure the encrypted collection.

  * - ``clientEncOpts.provider``
    - string
    - Required
    - KMS you are using to store your {+cmk-long+}.

  * - ``clientEncOpts.createCollectionOptions``
    - document
    - Required
    - Fields to encrypt. See :ref:`qe-specify-fields-for-encryption`
      for details on how to configure the ``encryptedFieldsMap`` object.

  * - ``clientEncOpts.masterKey``
    - document
    - Optional
    - How to get the master key when the KMS Provider is AWS, GCP, or 
      Azure.

Behavior
--------

.. include:: /includes/create-an-encrypted-db-conn.rst 

Example
-------

The following example uses a locally managed KMS for the 
Queryable Encryption configuration.

.. procedure::
   :style: normal

   .. step:: Create Your Encrypted Connection

      .. include:: /includes/csfle-connection-boilerplate-example-2.rst

   .. step:: Specify which Fields to Encrypt

      Create an ``encryptedFieldsMaps`` to specify which fields to encrypt:

      .. code-block:: javascript

         const encryptedFieldsMap = {
           encryptedFields: {
             fields: [
               {
                 path: "secretField",
                 bsonType: "string",
                 queries: { queryType: "equality" },
               },
             ],
           },
         };

   .. step:: Create Your Encrypted Collection

      Create an encrypted ``enc.users`` collection:

      .. code-block:: javascript

         clientEncryption = encryptedClient.getClientEncryption();

         var result = clientEncryption.createEncryptedCollection(
           "enc", 
           "users",
           {
             provider: "local",
             createCollectionOptions: encryptedFieldsMap,
             masterKey: {} // masterKey is optional when provider is local
           }
         )

   .. step:: Check Your Result Object

      ``createEncryptedCollection`` returns a large result object with many 
      fields. Check the value of ``result.collection`` to confirm the 
      collection was created in the desired location.

      .. code-block:: javascript
         :copyable: false

         enc> result.collection
         enc.users

Learn More
----------

- For complete documentation on initiating MongoDB connections with
  client-side field level encryption enabled, see :method:`Mongo()`.

- For a complete example of how to create and query an encrypted 
  collection, see :ref:`qe-quick-start`. 
