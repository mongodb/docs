collection: "restaurants"
options:
  show_title: False
  show_collection: False
edition:
  - shell
  - python
  - node
  - cpp
  - java
  - csharp
ref: collection-base
---
edition: shell
source:
  file: examples-insert-base.yaml
  ref: _insert-a-document
ref: insert-a-document
operation:
  language: javascript
  code: |
      db.restaurants.insert(
         {
            "address" : {
               "street" : "2 Avenue",
               "zipcode" : "10075",
               "building" : "1480",
               "coord" : [ -73.9557413, 40.7720266 ],
            },
            "borough" : "Manhattan",
            "cuisine" : "Italian",
            "grades" : [
               {
                  "date" : ISODate("2014-10-01T00:00:00Z"),
                  "grade" : "A",
                  "score" : 11
               },
               {
                  "date" : ISODate("2014-01-16T00:00:00Z"),
                  "grade" : "B",
                  "score" : 17
               }
            ],
            "name" : "Vella",
            "restaurant_id" : "41704620"
         }
      )
post: |
  The method returns a :method:`WriteResult` object with the
  status of the operation.
results: |
   WriteResult({ "nInserted" : 1 })
replacement:
  insertMethod: :method:`~db.collection.insert()`
  clientName: the :program:`mongo` shell
---
edition: python
source:
  file: examples-insert-base.yaml
  ref: _insert-a-document
ref: py-insert-a-document
operation:
  - language: python
    code: |
      from datetime import datetime
      result = db.restaurants.insert_one(
          {
              "address": {
                  "street": "2 Avenue",
                  "zipcode": "10075",
                  "building": "1480",
                  "coord": [-73.9557413, 40.7720266]
              },
              "borough": "Manhattan",
              "cuisine": "Italian",
              "grades": [
                  {
                      "date": datetime.strptime("2014-10-01", "%Y-%m-%d"),
                      "grade": "A",
                      "score": 11
                  },
                  {
                      "date": datetime.strptime("2014-01-16", "%Y-%m-%d"),
                      "grade": "B",
                      "score": 17
                  }
              ],
              "name": "Vella",
              "restaurant_id": "41704620"
          }
      )
  - pre: |
      The operation returns an
      :py:class:`~pymongo.results.InsertOneResult` object, which
      includes an attribute
      :py:attr:`~pymongo.results.InsertOneResult.inserted_id` that
      contains the ``_id`` of the inserted document. Access the
      :py:attr:`~pymongo.results.InsertOneResult.inserted_id` attribute:
    language: python
    code: |

      result.inserted_id
    post: |
      The :manual:`ObjectId </reference/object-id>` of your inserted
      document will differ from the one shown.
results: |
  ObjectId("54c1478ec2341ddf130f62b7")
replacement:
  insertMethod: :py:meth:`~pymongo.collection.Collection.insert_one`
  clientName: :py:class:`~pymongo.mongo_client.MongoClient`
---
edition: node
source:
  file: examples-insert-base.yaml
  ref: _insert-a-document
ref: node-insert-a-document
operation:
  - pre: |
      Defines a function ``insertDocument``:
    language: javascript
    code: |
      var insertDocument = function(db, callback) {
         db.collection('restaurants').insertOne( {
            "address" : {
               "street" : "2 Avenue",
               "zipcode" : "10075",
               "building" : "1480",
               "coord" : [ -73.9557413, 40.7720266 ],
            },
            "borough" : "Manhattan",
            "cuisine" : "Italian",
            "grades" : [
               {
                  "date" : new Date("2014-10-01T00:00:00Z"),
                  "grade" : "A",
                  "score" : 11
               },
               {
                  "date" : new Date("2014-01-16T00:00:00Z"),
                  "grade" : "B",
                  "score" : 17
               }
            ],
            "name" : "Vella",
            "restaurant_id" : "41704620"
         }, function(err, result) {
          assert.equal(err, null);
          console.log("Inserted a document into the restaurants collection.");
          callback(result);
        });
      };
  - pre: |
      Call the ``insertDocument`` function.
    language: javascript
    code: | 
      MongoClient.connect(url, function(err, db) {
        assert.equal(null, err);
        insertDocument(db, function() {
            db.close();
        });
      });
  - pre: |
       A successful insert should print out the following line:
    language: sh
    code:
       Inserted a document into the restaurants collection.
    post: |
       During a successful insert, the ``callback`` function is called with
       a ``result`` object. The ``result`` object includes an
       ``insertedId`` property that contains the ``_id`` of the inserted
       document.
replacement:
  insertMethod: "insertOne_"
  clientName: the driver
---
edition: cpp
source:
  file: examples-insert-base.yaml
  ref: _insert-a-document
ref: cpp-insert-a-document
operation:
  literalinclude: includes/example-cpp-insert-a-document.cpp
  language: cpp
replacement:
  clientName: the driver
  insertMethod: "insert_one_"
---
edition: java
source:
  file: examples-insert-base.yaml
  ref: _insert-a-document
ref: java-insert-a-document
operation:
  - pre: |
       To specify a document, use the org.bson.Document_ class.
  - literalinclude: includes/example-java-insert-a-document.java
    language: java
  - post: |
      .. include:: includes/example-java-insert-a-document-post.rst
replacement:
  clientName: the driver
  insertMethod: "insertOne_"
---
edition: csharp
source:
  file: examples-insert-base.yaml
  ref: _insert-a-document
ref: csharp-insert-a-document
operation:
  - literalinclude: includes/example-csharp-insert-a-document.cs
    language: csharp
  - post: |
      .. include:: includes/example-csharp-insert-a-document-post.rst
replacement:
  clientName: the driver
  insertMethod: "InsertOneAsync_"
...
