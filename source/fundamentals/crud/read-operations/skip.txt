.. _golang-skip:

=====================
Skip Returned Results
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to skip a specified number of returned
results from read operations. 

Sample Data
~~~~~~~~~~~

The examples in this guide use the following ``Course`` struct as a model for documents
in the ``courses`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/skip.go
   :start-after: start-course-struct
   :end-before: end-course-struct
   :language: go
   :dedent:

To run the examples in this guide, load these documents into the
``db.courses`` collection with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/skip.go
   :language: go
   :dedent:
   :start-after: begin insertDocs
   :end-before: end insertDocs

.. include:: /includes/fundamentals/automatic-db-coll-creation.rst

Each document contains a description of a university course that
includes the course title and maximum enrollment, corresponding to
the ``title`` and ``enrollment`` fields.

Skip
----

To skip a specified number of returned results from a query, pass the
number of documents you want to skip to the ``SetSkip()`` method of
the read operation's options.

The following read operations take an options object as a parameter:

- ``Find()``
- ``FindOne()``
- ``CountDocuments()``
- ``gridfs.Bucket.Find()``

If the number of documents exceeds the number of matched documents for a
query, that query returns no documents.

.. tip::

   Passing in a negative number to the ``SetSkip()`` method results
   in a runtime error.

Find operations return documents in a natural order that is not sorted
on any field. To avoid skipping random documents, use the ``SetSort()``
method to sort documents on a field with unique values before setting a
skip option.

Example
~~~~~~~

The following example performs a ``Find()`` operation with the following
behavior:

- Sorts the results in ascending order on the ``enrollment`` field
- Skips the first two documents

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      opts := options.Find().SetSort(bson.D{{"enrollment", 1}}).SetSkip(2)
      
      cursor, err := coll.Find(context.TODO(), bson.D{}, opts)
      
      var results []Course
      if err = cursor.All(context.TODO(), &results); err != nil {
          panic(err)
      }
      for _, result := range results {
          res, _ := bson.MarshalExtJSON(result, false, false)
          fmt.Println(string(res))
      }

   .. output::
      :language: none
      :visible: false

      {"title":"Plate Tectonics","enrollment":45}
      {"title":"Abstract Algebra","enrollment":60}

.. _golang-skip-aggregation:

Aggregation
-----------

You can also include the :manual:`$skip </reference/operator/aggregation/skip/>`
stage in an aggregation pipeline to skip documents.

Example
~~~~~~~

The following example performs an ``Aggregate()`` operation with the following
behavior:

- Sorts the results in descending order on the ``enrollment`` field
- Skips the first document

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      sortStage := bson.D{{"$sort", bson.D{{"enrollment", -1}}}}
      skipStage := bson.D{{"$skip", 1}}
      
      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{sortStage, skipStage})
      if err != nil {
          panic(err)
      }
      
      var results []Course
      if err = cursor.All(context.TODO(), &results); err != nil {
          panic(err)
      }
      for _, result := range results {
          res, _ := bson.MarshalExtJSON(result, false, false)
          fmt.Println(string(res))
      }

   .. output::
      :language: none
      :visible: false

      {"title":"Plate Tectonics","enrollment":45}
      {"title":"World Fiction","enrollment":35}
      {"title":"Modern Poetry","enrollment":12}

Additional Information
----------------------

To learn more about the operations mentioned, see the following
guides:

- :ref:`golang-query-document`
- :ref:`golang-retrieve`
- :ref:`golang-sort-results`
- :ref:`golang-aggregation`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `Find() <{+api+}/mongo#Collection.Find>`__
- `FindOptions.SetSkip() <{+api+}/mongo/options#FindOptions.SetSkip>`__
- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__
- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__
- `gridfs.Bucket.Find() <{+api+}/mongo/gridfs#Bucket.Find>`__
