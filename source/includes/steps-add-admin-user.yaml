title: Connect with the Privileges to Create Users and Grant Roles
stepnum: 1
ref: connect-as-admin
pre: |
  Connect to the :program:`mongod` or :program:`mongos` as a user with the
  :authaction:`createUser` *and* :authaction:`grantRole` actions on the
  ``admin`` database.
action:
  pre: |
    The following example operation connects to the MongoDB instance as a user
    name ``accountManager``:
  language: javascript
  code: |
    mongo --port 27017 -u accountManager -p 12345678 --authenticationDatabase admin
---
title: Verify Your Privileges
stepnum: 2
ref: check-your-privileges
pre: |
  Verify that the user you are connected as has the :authaction:`createUser`
  and :authaction:`grantRole` actions on the ``admin`` database.
action:
  pre: |
    The following example operation checks privileges for the user connected
    as ``accountManager``:
    language: javascript
    code: |
      db.runCommand(
         {
           usersInfo:"accountManager",
           showPrivileges:true
         }
      )
  post: |
    The resulting ``users`` document displays the privileges granted to the user.
---
title: Create the Admin User
stepnum: 3
ref: create-admin-user
pre: |
  In the ``admin`` database, create a new user using the
  :method:`db.createUser()` method. Give the user the system-defined
  :authrole:`root` role.
pre: |
  For example:
action:
  language: javascript
  code: |
    use admin
    db.createUser(
        {
          user: "superuser",
          pwd: "12345678",
          roles: [ "root" ]
        }
    )
post: |
  To authenticate as the new user, authenticate against the ``admin``
  database using the :option:`--authenticationDatabase` option.
...
