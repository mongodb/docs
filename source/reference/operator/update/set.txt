====
$set
====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. topic:: Disambiguation

   The following page refers to the update operator :update:`$set`.
   For the aggregation stage :pipeline:`$set`, available starting in
   MongoDB 4.2, see :pipeline:`$set`.

.. update:: $set

   The :update:`$set` operator replaces the value of a field with the
   specified value.

   The :update:`$set` operator expression has the following form:

   .. code-block:: javascript

      { $set: { <field1>: <value1>, ... } }

   .. include:: /includes/use-dot-notation.rst



Behavior
--------

If the field does not exist, :update:`$set` will add a new field with the
specified value, provided that the new field does not violate a type
constraint.
If you specify a dotted path for a non-existent field,
:update:`$set` will create the embedded documents *as needed* to
fulfill the dotted path to the field.

If you specify multiple field-value pairs, :update:`$set` will update
or create each field.

Examples
--------

Consider a collection ``products`` with the following document:

.. code-block:: javascript

   {
     _id: 100,
     sku: "abc123",
     quantity: 250,
     instock: true,
     reorder: false,
     details: { model: "14Q2", make: "xyz" },
     tags: [ "apparel", "clothing" ],
     ratings: [ { by: "ijk", rating: 4 } ]
   }

Set Top-Level Fields
~~~~~~~~~~~~~~~~~~~~

For the document matching the criteria ``_id`` equal to ``100``, the
following operation uses the :update:`$set` operator to update the
value of the ``quantity`` field, ``details`` field, and the ``tags``
field.

.. code-block:: javascript

   db.products.update(
      { _id: 100 },
      { $set:
         {
           quantity: 500,
           details: { model: "14Q3", make: "xyz" },
           tags: [ "coats", "outerwear", "clothing" ]
         }
      }
   )

The operation replaces the value of: ``quantity`` to ``500``; the
``details`` field to a new embedded document, and the ``tags`` field to
a new array.

Set Fields in Embedded Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/use-dot-notation.rst

For the document matching the criteria ``_id`` equal to ``100``, the
following operation updates the ``make`` field in the ``details``
document:

.. code-block:: javascript

   db.products.update(
      { _id: 100 },
      { $set: { "details.make": "zzz" } }
   )

Set Elements in Arrays
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/use-dot-notation.rst

For the document matching the criteria ``_id`` equal to ``100``, the
following operation updates the value second element (array index of
``1``) in the ``tags`` field and the ``rating`` field in the first
element (array index of ``0``) of the ``ratings`` array.

.. code-block:: javascript

   db.products.update(
      { _id: 100 },
      { $set:
         {
           "tags.1": "rain gear",
           "ratings.0.rating": 2
         }
      }
   )

For additional update operators for arrays, see
:doc:`/reference/operator/update-array`.

.. seealso::

   :method:`db.collection.update()`,

   :method:`db.collection.findAndModify()`
