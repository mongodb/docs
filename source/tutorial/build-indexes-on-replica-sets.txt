.. index:: index; replica set
.. index:: replica set; index
.. _index-build-on-replica-sets:
.. _index-building-replica-sets:

=============================
Build Indexes on Replica Sets
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

To minimize the impact of building an index on replica sets and sharded
clusters with replica set shards, use the following procedure to build
indexes in a rolling fashion.

This procedure *does* take one member out of the replica set at a time.
However, this procedure will only affect one member of the set at a
time rather than *all* secondaries at the same time.

Considerations
--------------

Unique Indexes
~~~~~~~~~~~~~~

To create :ref:`unique indexes <index-type-unique>` using the following
procedure, you must stop all writes to the collection during this
procedure.

If you cannot stop all writes to the collection during this procedure,
do not use the procedure on this page. Instead, build your unique index
on the collection by:

- issuing :method:`db.collection.createIndex()` on the primary for a
  replica set, or

- issuing :method:`db.collection.createIndex()` on the
  :binary:`~bin.mongos` for a sharded cluster.

Oplog Size
~~~~~~~~~~

Ensure that your :term:`oplog` is large enough to permit the indexing
or re-indexing operation to complete without falling too far behind to
catch up. See the :ref:`oplog sizing <replica-set-oplog-sizing>`
documentation for additional information.


Procedure
---------

.. note::

   If you need to build an index in a :term:`sharded cluster`, repeat
   the following procedure for each replica set that provides each
   :term:`shard`.

   To create :ref:`unique indexes <index-type-unique>` using the
   following procedure, you must stop all writes to the collection
   during the index build. Otherwise, you may end up with inconsistent
   data across the replica set members. If you cannot stop all writes to
   the collection, do not use the following procedure to create unique
   indexes.

.. _tutorial-index-on-replica-sets-stop-one-member:

Stop One Secondary and Restart as a Standalone
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Stop the :binary:`~bin.mongod` process on one secondary. Restart the
:binary:`~bin.mongod` process, making the following modifications to the 
configuration file.

- Comment out the :setting:`replication.replSetName` option.
- For :term:`shard` or :term:`config server` replica sets, comment out
  the :setting:`sharding.clusterRole` option.
- Change the :setting:`net.port` to a different port. Make a note
  of the original port setting as a comment. [#different-port]_

If using command line options, modify :option:`--port <mongod --port>` 
and remove the :option:`--replSetName <mongod --replSet>`, 
:option:`--shardsvr <mongod --shardsvr>`, and
:option:`--configsvr <mongod --configsvr>` options.
  
.. include:: /includes/warning-bind-ip-security-considerations.rst

This instance is now in "standalone" mode.

For example, if your :binary:`~bin.mongod` *normally* runs with on the
default port of ``27017`` with the :option:`--replSet
<mongod --replSet>` option you would use the following invocation:

.. code-block:: sh

   mongod --port 47017

.. [#different-port] By running the :binary:`~bin.mongod` on a different
   port, you ensure that the other members of the replica set and all
   clients will not contact the member while you are building the
   index.

.. _tutorial-index-on-replica-sets-build-index:

Build the Index
~~~~~~~~~~~~~~~

Create the new index using the :method:`~db.collection.createIndex()`
in the :binary:`~bin.mongo` shell, or comparable method in your
driver. This operation will create or rebuild the index on this
:binary:`~bin.mongod` instance

For example, to create an ascending index on the ``username`` field of
the ``records`` collection, use the following :binary:`~bin.mongo` shell
operation:

.. code-block:: sh

   db.records.createIndex( { username: 1 } )

.. _tutorial-index-on-replica-sets-restart-mongod:

Restart the Program ``mongod`` as a Replica Set Member
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When the index build completes, restart the :binary:`~bin.mongod`
instance as a member of the replica set using its normal
configuration file or command-line arguments.

For example:

.. code-block:: sh

   mongod --port 27017 --replSet rs0

Allow replication to catch up on this member.

Repeat the Procedure for the Remaining Secondaries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once the member catches up with the other members of the set, repeat
the procedure one member at a time for the remaining secondary members:

#. :ref:`tutorial-index-on-replica-sets-stop-one-member`

#. :ref:`tutorial-index-on-replica-sets-build-index`

#. :ref:`tutorial-index-on-replica-sets-restart-mongod`

Build the Index on the Primary
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When all the secondaries have the new index, step down the primary,
restart it as a standalone using the procedure described above, 
and build the index on the former primary:

#. Use the :method:`rs.stepDown()` method in the :binary:`~bin.mongo` shell
   to step down the primary. Upon successful stepdown, the current primary
   becomes a secondary and the replica set members elect a new primary.

#. :ref:`tutorial-index-on-replica-sets-stop-one-member`

#. :ref:`tutorial-index-on-replica-sets-build-index`

#. :ref:`tutorial-index-on-replica-sets-restart-mongod`

