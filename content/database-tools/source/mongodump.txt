.. _mongodump:

=============
``mongodump``
=============

.. default-domain:: mongodb

.. binary:: mongodump

.. program:: mongodump

.. meta:: 
  :description: mongodump is a MongoDB database tool that creates a binary export of a database's contents to backup your data or migrate to a new deployment
 
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: programming_language
   :values: shell

.. facet::
   :name: genre
   :values: reference

.. |arrow| unicode:: U+27A4
.. |tool-binary| replace:: ``mongodump``
.. |mongodb-aws-example| replace:: :ref:`mongodump-example-connect-using-aws-iam`

Definition
----------

``mongodump`` is a utility that creates a binary export of
a database's contents. ``mongodump`` can export data from:

- Standalone deployments
- Replica sets
- Sharded clusters
- Flex clusters

.. include:: /includes/fact-migrate-atlas.rst

``mongodump`` can connect to :binary:`~bin.mongod` and
:binary:`~bin.mongos` instances.

.. include:: /includes/mongodump-restore-version-link.rst

Run ``mongodump`` from the system command line, not the
:binary:`~bin.mongo` shell.

.. seealso::

   :binary:`~bin.mongorestore`, which allows you to import data that was
   exported from ``mongodump``.

.. include:: /includes/fact-online-archive-callout.rst

``mongodump`` dumps:

- Collection documents, metadata, and options.
- Index definitions.
- Writes that occur during the export, if run with the ``mongodump``
  :option:`--oplog <mongodump --oplog>` option.

``mongodump`` dumps data to a directory or a binary archive file.

.. important:: 

   You can't use ``mongodump`` with a collection that uses {+qe+}.

Dump Data to a Directory
~~~~~~~~~~~~~~~~~~~~~~~~

Example ``mongodump`` directory dump structure and files:

.. code-block:: none

   dump
   ├── easternSalesDatabase
   │    ├── sales.bson
   │    ├── sales.metadata.json
   │    └── salesByMonthView.metadata.json 
   ├── westernSalesDatabase
   │    ├── sales.bson
   │    ├── sales.metadata.json
   │    └── salesByMonthView.metadata.json
   └── oplog.bson

For a directory dump, ``mongodump`` creates:

- A root directory with the default name ``dump``. You can set the name
  with the ``mongodump`` :option:`--out <mongodump --out>` option.
- A subdirectory in the root directory for each database. For example,
  if a database name is ``easternSalesDatabase``, the subdirectory name
  is also ``easternSalesDatabase``.
- A BSON file with documents for each collection. For example, if a
  collection name is ``sales``, the BSON file is ``sales.bson``.
- A metadata JSON file for each collection in each database directory.
  For example, a metadata ``sales.metadata.json`` file. The file
  contains a document with the exported collection metadata, options,
  and indexes.
- A metadata JSON file for each view. For example, a metadata
  ``salesByMonthView.metadata.json`` file. A view doesn't have a BSON
  file.
- An optional :term:`oplog` ``oplog.bson`` file, located in the root
  directory, which contains write operations that occurred during the
  ``mongodump`` run. To output an ``oplog.bson`` file, use the
  ``mongodump`` :option:`--oplog <mongodump --oplog>` option.

If you use the ``mongodump`` :option:`--gzip <mongodump --gzip>` option,
the BSON files and JSON metadata files are compressed. The compressed
exported files have ``bson.gz`` and ``metadata.json.gz`` at the end of
the names.

Dump Data to a Binary Archive File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To dump data to a binary archive file, use the ``mongodump``
:option:`--archive <mongodump --archive>` option. ``mongodump`` creates
a binary file that contains the archived data.

Syntax
------

``mongodump`` syntax:

.. code-block:: sh

   mongodump <options> <connection-string>

.. tabs::

   .. tab:: Connect to an Instance
      :tabid: connect-to-an-instance

      To connect to a local MongoDB instance running on port 27017 and
      use the default settings to export the content, run ``mongodump``
      without any command-line options:

      .. code-block:: sh

         mongodump

      To specify a host and/or port of the MongoDB instance, you can:

      - Specify the hostname and port in the :option:`--uri connection string
        <mongodump --uri>` option:

        .. code-block:: sh

           mongodump --uri="mongodb://mongodb0.example.com:27017" [additional options]

      - Specify the hostname and port in the :option:`--host <mongodump
        --host>` option:

        .. code-block:: sh

           mongodump --host="mongodb0.example.com:27017"  [additional options]
         
      - Specify the hostname and port in the :option:`--host <mongodump
        --host>` and :option:`--port <mongodump --port>` options:

        .. code-block:: sh

           mongodump --host="mongodb0.example.com" --port=27017 [additional options]

   .. tab:: Connect to a Replica Set
      :tabid: connect-to-a-replica-set

      To connect to a replica set to export its data, you can:

      - Specify the replica set name and members in the
        :option:`--uri connection string <mongodump --uri>` option:

        .. code-block:: sh
      
           mongodump --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?replicaSet=myReplicaSetName" [additional options]

      - Specify the replica set name and members in the
        :option:`--host <mongodump --host>` option:

        .. code-block:: sh

           mongodump --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com" [additional options]

      By default, ``mongodump`` reads from the primary of the
      replica set. To override the default, you can specify the :ref:`read
      preference <replica-set-read-preference>`:

      - You can specify the read preference in the
        :option:`--uri connection string <mongodump --uri>` option:

        .. code-block:: sh

           mongodump --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?replicaSet=myReplicaSetName&readPreference=secondary" [additional options]

        If specifying the read preference tags, include the
        :urioption:`readPreferenceTags` option:

        .. code-block:: sh

           mongodump --uri="mongodb://mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017/?replicaSet=myReplicaSetName&readPreference=secondary&readPreferenceTags=region:east" [additional options]

      - You can specify the read preference using the
        ``--readPreference`` command-line
        option. The command-line option takes a string if specifying only the read preference mode:

        .. code-block:: sh

           mongodump --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017" --readPreference=secondary [additional options]

        Or, the command-line option can take a quote-enclosed document 
        ``'{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds:<num>}'`` 
        to specify the mode, the optional :ref:`read preference tag
        sets <configure-read-pref-tags>`, and the optional
        :ref:`maxStalenessSeconds
        <replica-set-read-preference-max-staleness>`:
      
        .. code-block:: sh

           mongodump --host="myReplicaSetName/mongodb0.example.com:27017,mongodb1.example.com:27017,mongodb2.example.com:27017" --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ]}' [additional options]

   .. tab:: Connect to a Sharded Cluster
      :tabid: connect-to-a-sharded-cluster

      .. note::

         To avoid data inconsistencies, pause the following actions on your
         sharded cluster when you run ``mongodump``:
         
         - Cross-shard transactions
         - Data definition language operations (operations that create and modify
           collections)
         - Chunk balancing 

         To stop the balancer, use the :method:`sh.stopBalancer()` method. 

      To connect to a sharded cluster to export its data, you can:

      - Specify the hostname of the ``mongos`` instance in the
        :option:`--uri connection string <mongodump --uri>` option:

        .. code-block:: sh
      
           mongodump --uri="mongodb://mongos0.example.com:27017" [additional options]

      - Specify the hostname and port of the ``mongos``
        instance in the :option:`--host <mongodump --host>` option:

        .. code-block:: sh

           mongodump --host="mongos0.example.com:27017" [additional options]
           
      By default, ``mongodump`` reads from the primary of the
      shard replica set. To override the default, you can specify the :ref:`read
      preference <replica-set-read-preference>`:

      - You can specify the read preference in the
        :option:`--uri connection string <mongodump --uri>` option:

        .. code-block:: sh
      
           mongodump --uri="mongodb://mongos0.example.com:27017/?readPreference=secondary" [additional options]

        If specifying the read preference tags, include the
        :urioption:`readPreferenceTags` option:

        .. code-block:: sh
      
           mongodump --uri="mongodb://mongos0.example.com:27017/?readPreference=secondary&readPreferenceTags=region:east" [additional options]

      - You can specify the read preference using the
        :option:`--readPreference <mongodump --readPreference>` command-line
        option. The command-line option takes a string if specifying only the read preference mode:

        .. code-block:: sh
      
           mongodump --host="mongos0.example.com:27017" --readPreference=secondary [additional options]

        Or, the command-line option can take a quote-enclosed document 
        ``'{ mode: <mode>, tagSets: [ <tag1>, ... ], maxStalenessSeconds: <num>}'`` 
        to specify the mode, the optional :ref:`read preference tag
        sets <configure-read-pref-tags>`, and the optional
        :ref:`maxStalenessSeconds
        <replica-set-read-preference-max-staleness>`:

        .. code-block:: sh

           mongodump --host="mongos0.example.com:27017" --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ]}' [additional options]

.. _mongodump-options:

Options
-------

.. option:: --help

   Returns information on the options and use of ``mongodump``.

.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times. For example: ``-vvvvv``.

.. option:: --quiet

   Runs ``mongodump`` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - Output from :term:`database commands <database command>`
   
   - Replication activity
   
   - Connection accepted and closed events

   - All logs, including error messages, except for those that occur when
     parsing options

.. option:: --version

   Returns the ``mongodump`` release number.

.. option:: --config=<filename>

   .. versionadded:: 100.3.0

   .. include:: /includes/fact-config-file-option.rst

.. option:: --uri=<connectionString>
   
   Specifies the resolvable :manual:`URI connection string
   </reference/connection-string/>` of the MongoDB deployment, enclosed
   in quotes:
   
   .. code-block:: none
   
      --uri="mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]"

   .. include:: /includes/extracts/uri-positional-mongodump.rst

   For information on the components of the connection string, see
   the :manual:`Connection String URI Format
   </reference/connection-string/>` documentation. 

   .. include:: /includes/fact-uri-with-conflicting-info.rst

   .. include:: /includes/fact-ubuntu-dns-error.rst

   .. include:: /includes/fact-warning-uri-config.rst

.. option:: --host=<hostname><:port>, -h=<hostname><:port>

   *Default*: localhost:27017

   Specifies the resolvable hostname of the MongoDB deployment. By
   default, ``mongodump`` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the
   :setting:`~replication.replSetName` and a seed list of set members, as in
   the following:
   
   .. code-block:: none
   
      --host=<replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   When specifying the replica set list format, ``mongodump`` always connects to
   the :term:`primary <Primary>`. 
   
   You can also connect to any single member of the replica set by specifying
   the host and port of only that member:
   
   .. code-block:: none
   
      --host=<hostname1><:port>

   If you use IPv6 and use the ``<address>:<port>`` format, you must
   enclose the portion of an address and port combination in
   brackets. For example: ``[<address>]``.

   .. include:: /includes/extracts/uri-used-with-host.rst

.. option:: --port=<port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   
   .. include:: /includes/extracts/uri-used-with-port.rst

.. option:: --ssl

   Enables a connection to a ``mongod`` or ``mongos`` that has
   TLS/SSL support enabled.

   .. include:: /includes/extracts/uri-used-with-ssl.rst

.. option:: --sslCAFile=<filename>

   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   ``.pem`` file using relative or absolute paths.

   .. include:: /includes/extracts/uri-used-with-sslcafile.rst

.. option:: --sslPEMKeyFile=<filename>

   Specifies the ``.pem`` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the ``.pem`` file using relative
   or absolute paths.
   
   This option is required when using the ``--ssl`` option to connect
   to a ``mongod`` or ``mongos`` that has
   :setting:`~net.tls.CAFile` enabled *without*
   :setting:`~net.tls.allowConnectionsWithoutCertificates`.

   .. include:: /includes/extracts/uri-used-with-sslpemkeyfile.rst

.. option:: --sslPEMKeyPassword=<value>

   Specifies the password to de-crypt the certificate-key file (i.e.
   ``--sslPEMKeyFile``). Use the ```--sslPEMKeyPassword`` option only if the
   certificate-key file is encrypted. In all cases, ``mongodump`` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not
   specify the ``--sslPEMKeyPassword`` option, ``mongodump`` will
   prompt for a passphrase. See :ref:`ssl-certificate-password`.

   .. include:: /includes/extracts/uri-used-with-sslpemkeypassword.rst

   .. include:: /includes/fact-warning-sslpemkeypassword-config.rst

.. option:: --sslCRLFile=<filename>

   Specifies the ``.pem`` file that contains the Certificate
   Revocation List. Specify the file name of the ``.pem`` file using
   relative or absolute paths.

.. option:: --sslAllowInvalidCertificates

   Bypasses the validation checks for server certificates and allows the
   use of invalid certificates. When using the
   :setting:`~net.tls.allowInvalidCertificates` setting, MongoDB logs as
   a warning the use of the invalid certificate.
   
   .. include:: /includes/extracts/ssl-facts-invalid-cert-warning-clients.rst

   .. include:: /includes/extracts/uri-used-with-sslallowinvalidcertificates.rst
   
.. option:: --sslAllowInvalidHostnames

   Disables the validation of the hostnames in TLS/SSL certificates.
   Allows ``mongodump`` to connect to MongoDB instances even if the
   hostname in their certificates do not match the specified hostname.

   .. include:: /includes/extracts/uri-used-with-sslallowinvalidhostnames.rst

.. option:: --username=<username>, -u=<username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--password
   <mongodump --password>`` and ``--authenticationDatabase <mongodump
   --authenticationDatabase>`` options.

   .. include:: /includes/extracts/uri-used-with-username.rst

   .. include:: /includes/extracts/mongodb-aws-username-mongodump.rst

.. option:: --password=<password>, -p=<password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--username
   <mongodump --username>`` and ``--authenticationDatabase <mongodump
   --authenticationDatabase>`` options.

   To prompt the user for the password, pass the ``--username <mongodump
   --username>`` option without ``--password <mongodump --password>`` or
   specify an empty string as the ``--password <mongodump --password>``
   value, as in ``--password ""`` .

   .. include:: /includes/extracts/uri-used-with-password.rst

   .. include:: /includes/extracts/mongodb-aws-password-mongodump.rst

   .. include:: /includes/fact-warning-password-config.rst

.. option:: --awsSessionToken=<AWS Session Token>

   .. include:: /includes/extracts/mongodb-aws-session-token-mongodump.rst

.. option:: --authenticationDatabase=<dbname>

   Specifies the authentication database where the specified
   ``--username <mongodump --username>`` has been created. See
   :ref:`user-authentication-database`.

   If you do not specify an authentication database, ``mongodump``
   assumes that the database specified to export holds the user's credentials.

   If you do not specify an authentication database or a database to
   export, ``mongodump`` assumes the ``admin`` database holds the user's
   credentials.

   .. include:: /includes/fact-auth-database-use-external.rst

   .. include:: /includes/extracts/uri-used-with-authenticationDatabase.rst

.. option:: --authenticationMechanism=<name>

   *Default*: SCRAM-SHA-1

   Specifies the authentication mechanism the ``mongodump`` instance uses to
   authenticate to the ``mongod`` or ``mongos``.

   .. versionchanged:: 100.1.0
   
      Starting in version ``100.1.0``, ``mongodump`` adds support for
      the ``MONGODB-AWS`` authentication mechanism when connecting
      to a :atlas:`MongoDB Atlas <?tck=docs_server>` cluster.

   .. include:: /includes/list-table-auth-mechanisms.rst
   
   .. include:: /includes/extracts/uri-used-with-authenticationMechanism.rst

.. option:: --gssapiServiceName

   Specify the name of the service using :manual:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.

   .. include:: /includes/extracts/uri-used-with-gssapiservicename.rst

.. option:: --gssapiHostName

   Specify the hostname of a service using ``GSSAPI/Kerberos
   </core/kerberos>``. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   
.. option:: --db=<database>, -d=<database>

   Specifies a database to backup. If you do not specify a database,
   ``mongodump`` copies all databases in this instance into the dump
   files.
   
   .. include:: /includes/extracts/uri-used-with-db.rst

.. option:: --collection=<collection>, -c=<collection>

   Specifies a collection to backup. If you do not specify a collection,
   this option copies all collections in the specified database or instance
   to the dump files.

.. option:: --query=<json>, -q=<json>

   Provides a :term:`JSON document` as a query that optionally limits
   the documents included in the output of ``mongodump``. To
   use the ``--query`` option, you must also specify the
   ``--collection <mongodump --collection>`` option.

   .. include:: /includes/fact-quote-command-line-query.rst

   The query :red:`must` be in :manual:`Extended JSON v2 format
   (either relaxed or canonical/strict mode)
   </reference/mongodb-extended-json>`, including enclosing the field
   names and operators in quotes. For example:

   .. code-block:: sh

      mongodump -d=test -c=records -q='{ "a": { "$gte": 3 }, "date": { "$lt": { "$date": "2016-01-01T00:00:00.000Z" } } }'

   To use :query:`$regex` with ``mongodump``, use the following syntax: 

   .. code-block:: sh 

      mongodump -d=sample_mflix -c=movies -q='{ "year": { "$regex": "20" } }'

   .. note::

      When you use the ``--query`` option on a :ref:`time series
      collection <manual-timeseries-collection>`, you can only query the
      field specified as the ``metaField``.

.. option:: --queryFile=<path>

   Specifies the path to a file containing a JSON document as a query
   filter that limits the documents included in the output of
   ``mongodump``. ``--queryFile`` enables you to create
   query filters that are too large to fit in your terminal's buffer.

   .. note::

      When you use the ``--queryFile`` option on a time series
      collection, you can only query the
      field specified as the ``metaField``.

.. option:: --readPreference=<string|document>

   *Default*: :readmode:`primary`

   Specifies the :ref:`read preference <replica-set-read-preference>` for
   ``mongodump``. The ``--readPreference`` option can take:
   
   - A string if specifying only the read preference mode:
   
     .. code-block:: sh
   
        --readPreference=secondary
   
   - A quote-enclosed document to specify the mode, the optional
     :ref:`read preference tag sets <configure-read-pref-tags>`, and the
     optional :ref:`maxStalenessSeconds
     <replica-set-read-preference-max-staleness>`:
   
     .. code-block:: sh
   
        --readPreference='{mode: "secondary", tagSets: [ { "region": "east" } ], maxStalenessSeconds: 120}'
   
     If specifying the :ref:`maxStalenessSeconds
     <replica-set-read-preference-max-staleness>`, the value must be greater than or equal to 90.
   
   ``mongodump`` defaults to ``primary``
   read preference.
   
   If the read preference is also included in the
   ``--uri connection string <--uri>``, the command-line
   ``--readPreference`` overrides the read preference specified in
   the URI string.

.. option:: --gzip
   
   Compresses the output. If ``mongodump`` outputs to the dump
   directory, the new feature compresses the individual files. The files
   have the suffix ``.gz``.
   
   If ``mongodump`` outputs to an archive file or the standard
   out stream, the new feature compresses the archive file or the data
   output to the stream.
   
.. option:: --out=<path>, -o=<path>

   Specifies the directory where ``mongodump`` will write
   :term:`BSON` files for the dumped databases. By default,
   ``mongodump`` saves output files in a directory named
   ``dump`` in the current working directory.
   
   To send the database dump to standard output, specify "``-``" instead of
   a path. Write to standard output if you want process the output before
   saving it, such as to use ``gzip`` to compress the dump. When writing
   standard output, ``mongodump`` does not write the metadata that
   writes in a ``<dbname>.metadata.json`` file when writing to files
   directly.
   
   You cannot use the ``--archive`` option with the
   ``--out`` option.
   
.. option:: --archive=<file>
   
   Writes the output to a specified archive file or, if the archive
   file is unspecified, writes to the standard output (``stdout``). An
   archive file is a single-file alternative to multiple BSON files. 
   
   - To output the dump to an archive file, run
     ``mongodump`` with the ``--archive <mongodump
     --archive>`` option and the archive filename.

     .. code-block:: javascript

        mongodump --archive=<file>

   - To output the dump to the standard output stream in order to pipe
     to another process, run ``mongodump`` with the
     ``--archive <mongodump --archive>`` option but *omit* the
     filename.
   
     .. code-block:: javascript

        mongodump --archive

   You cannot use the ``--archive <mongodump --archive>`` option
   with the ``--out <mongodump --out>`` option.

   .. note::

      If :binary:`~bin.mongodump` writes to an archive file,
      ``mongodump`` performance can improve. For more information on
      ``mongodump`` performance impacts, see :ref:`Output Format
      Considerations <considerations-output-format>`. 

.. option:: --oplog

   Creates a file named :file:`oplog.bson` as part of the ``mongodump``
   output. The ``oplog.bson`` file, located in the top level of the
   output directory, contains oplog entries that occur during the
   ``mongodump`` operation.
   
   To apply oplog entries from the ``oplog.bson`` file in the restore
   operation, use :option:`mongorestore --oplogReplay`. You can use
   ``mongodump --oplog`` together with ``mongorestore --oplogReplay`` to
   ensure the data is current and has all the writes that occurred
   during the dump.

   Without ``--oplog``, if there are write operations during the dump
   operation, the dump will not reflect a single moment in time. Changes
   made to the database during the update process can affect the output of
   the backup.

   To back up individual replica sets while still accepting writes, use
   ``--oplog``.

   .. important::
      
      A ``mongodump`` running with ``--oplog`` fails if
      a client issues any of the listed operations during the dump
      process.

      - :dbcommand:`renameCollection`
      - :method:`db.collection.renameCollection()`
      - :method:`db.collection.aggregate()` with :pipeline:`$out`

   ``--oplog`` has no effect when running ``mongodump`` on a ``mongos``
   instance to dump the entire contents of a sharded cluster.

   ``--oplog`` only works against nodes that maintain an
   :term:`oplog`. This includes all members of a replica set.
   
   ``--oplog`` does not dump the oplog collection.

   You can't run ``mongodump`` with ``--oplog`` on a sharded cluster. To back up 
   sharded clusters with ``mongodump``, see :ref:`backup-sharded-dumps`.
   
   .. note::
   
      To use ``mongodump`` with ``--oplog``, you must create a full dump of
      a :term:`replica set` member. ``mongodump`` with  ``--oplog`` fails
      if you use any of the following options to limit the data to be dumped:
   
      - ``--db``
      - ``--collection``
      - ``--dumpDbUsersAndRoles``
      - ``--query``
   
   .. seealso:: 
   
      :option:`mongorestore --oplogReplay`

.. option:: --dumpDbUsersAndRoles

   Includes user and role definitions in the database's dump directory
   when performing ``mongodump`` on a specific database. This
   option applies only when you specify a database in the
   ``--db`` option. MongoDB always includes user and role
   definitions when ``mongodump`` applies to an entire instance
   and not just a specific database.
   
.. option:: --excludeCollection=<string>

   Excludes the specified collection from the ``mongodump`` output.
   To exclude multiple collections, specify the ``--excludeCollection`` multiple times.
   
   To use the ``--excludeCollection`` option, you must specify a database. You can specify
   a database with the :option:`--db <mongodump --db>` option or in the
   :option:`--uri <mongodump --uri>` connection string.

.. option:: --excludeCollectionsWithPrefix=<string>

   Excludes all collections with a specified prefix from the ``mongodump``
   outputs. To specify multiple prefixes, specify the ``--excludeCollectionsWithPrefix`` multiple
   times.

   To use the ``--excludeCollectionsWithPrefix`` option, you must specify a database. You can specify
   a database with the :option:`--db <mongodump --db>` option or in the 
   :option:`--uri <mongodump --uri>` connection string.

.. option:: --numParallelCollections=<int>, -j=<int>

   *Default*: 4

   Number of collections ``mongodump`` should export
   in parallel.

.. option:: --viewsAsCollections

   When specified, ``mongodump`` exports :ref:`views
   <views-landing-page>` as collections.
   
   .. note::
   
      Only views are exported. By default, ``mongodump`` only
      exports a view's metadata. To export the documents in a view, use
      the ``--viewsAsCollections`` option.
   
   For each view, ``mongodump`` creates a BSON file containing
   the documents in the view. If you use ``mongorestore``
   with a BSON file created by ``mongodump``, the view is
   restored as a collection.
   
   If you do *not* include ``--viewsAsCollections``,
   ``mongodump`` captures each view's metadata. If you include a
   view's metadata file in a ``mongorestore`` operation, the view
   is recreated.

.. option:: --compressors=<string>

   .. include:: /includes/fact-compressors-option-desc.rst

Learn More
----------

For more information about ``mongodump``, see:

- :ref:`mongodump-compatibility-and-installation`
- :ref:`mongodump-behavior`
- :ref:`mongodump-examples`

For a tutorial, see :ref:`backup-sharded-dumps`.

.. include:: /includes/extracts/ssl-facts-see-more.rst

.. toctree::
   :maxdepth: 1
   :hidden:

   Compatibility & Installation </mongodump/mongodump-compatibility-and-installation>
   Behavior </mongodump/mongodump-behavior>
   Examples </mongodump/mongodump-examples>
