====
$set
====

.. default-domain:: mongodb

.. update:: $set

   *Syntax*: ``{ $set: { <field1>: <value1>, ... } }``

   Use the :update:`$set` operator to replace the value of a field to
   the specified value. If the field does not exist, the
   :update:`$set` operator will add the field with the specified
   value.

   The following example uses the :update:`$set` operator to update
   the value of the ``quantity`` field to ``500`` and the ``instock``
   field to ``true`` for the *first* document where the field ``sku``
   has the value ``abc123``:

   .. code-block:: javascript

      db.products.update( { sku: "abc123" },
                          { $set: {
                                    quantity: 500,
                                    instock: true
                                  }
                          }
                        )

   To update all matching documents in the collection, specify ``multi:
   true`` option in the :method:`~db.collection.update()` method, as in
   the following example which sets the value of the field ``instock``
   to ``true`` for all documents in the ``products`` collection where
   the ``quantity`` field is greater than (i.e. :query:`$gt`) ``0`` :

   .. code-block:: javascript

      db.products.update( { quantity: { $gt: 0 } },
                          { $set: { instock: true } },
                          { multi: true }
                        )

   ``<field>`` above can not only be a top-level property, but can
   specify an inner property as well using dot notation. The dot 
   notation can even be used for array elements:
   
   .. code-block:: javascript

      db.products.update( { _id: id },
                          { $set: { 
                            "manufacturer.name": "Bob Incorporated",
                            "manufacturer.location": "London, England",
                            "keywords.0": "kitchen"
                          } }
                        )
