.. meta::
   :robots: noindex, nosnippet

.. _react-native-client-quick-start-local:
.. _react-native-client-quick-start:

==============================
Quick Start - React Native SDK
==============================

.. facet::
  :name: genre
  :values: tutorial

.. meta::
   :description: Get started using the Atlas Device SDK for React Native.
   :keywords: code example

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page demonstrates how to use Realm using the React Native SDK.

Before you begin, :ref:`install the Realm React Native SDK <react-native-install>`.

About the @realm/react Package
------------------------------

:github:`@realm/react </realm/realm-js/tree/master/packages/realm-react>` is a
package used in the React Native SDK. It provides state-aware React hooks for
Realm data. The hooks watch the Realm data and re-render components as needed.

The React Native SDK documentation uses the ``@realm/react``
npm package for examples and describing concepts.

Refer to these pages for more details:

- :ref:`AppProvider (@realm/react) <react-native-app-provider>`
- :ref:`UserProvider (@realm/react) <react-native-user-provider>`
- :ref:`RealmProvider (@realm/react) <react-native-realm-provider>`

Set Up Your Realm App
---------------------

After installing the ``realm`` and ``@realm/react`` packages, there are a
few more things to set up before you can access your realm and work with local
data:

- Define your object models
- Configure a realm by creating a realm context object, extracting hooks, and 
  setting up providers

.. _react-native-quickstart-local-define-an-object-model:

Define Object Models
~~~~~~~~~~~~~~~~~~~~

Your application's :ref:`object models <react-native-object-schemas>` define the data
types that you can store within a realm. Each object model becomes a Realm
object type.

**To define a Realm object model:**

#. Create a class that extends :js-sdk:`Realm.Object <Realm.Object.html>`.
#. Add a ``schema`` field.
#. For the ``schema`` value, create an object that contains ``properties`` and 
   ``name`` properties. The name value must be unique among object types in your 
   realm.

.. include:: /examples/generated/react-native/v12/models.snippet.qs-define-model.ts.rst

To learn more, refer to
:ref:`Define a Realm Object Model <react-native-define-a-realm-object-model>`.

.. _react-native-quickstart-local-import-realm:
.. _react-native-quickstart-local-open-a-realm:

Configure a Realm
~~~~~~~~~~~~~~~~~

Before you can work with data, you need to configure a realm. This means you need
to set up context and providers from ``@realm/react``. To learn more, refer to 
:ref:`Configure a Realm <react-native-configure-realm>`.

**To configure and access a local realm:** 

#. Import ``RealmProvider`` from ``@realm/react``.
#. Pass your object models to the ``schema`` prop.
#. Add other :realm-react-sdk:`Configuration object <types/Realm.BaseConfiguration.html>` 
   properties as props to ``RealmProvider``.

.. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.qs-realm-provider.tsx.rst

Work With Realm Objects
-----------------------

After you have a data model and a configured realm, you can create, read, update, or 
delete Realm objects.

You must nest components that perform these operations inside of
``RealmProvider``. The ``useRealm()``, ``useQuery()``, and ``useObject()`` hooks 
enable you to perform read and write operations in your realm.

For detailed descriptions of ``RealmProvider`` and its hooks, refer to
:ref:`RealmProvider (@realm/react) <react-native-realm-provider>`

.. _react-native-quickstart-local-find-sort-and-filter-objects:
.. _react-native-quickstart-local-watch-a-collection:

Read, Sort, and Filter Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``@realm/react`` provides hooks to help you find a collection of Realm objects
or a single Realm object.

- :ref:`useQuery() <react-native-use-query-hook>`
- :ref:`useObject() <react-native-use-object-hook>`

As part of ``useQuery()``, you can filter or sort the results using 
:ref:`Realm Query Language (RQL) <rql>`.
   
.. include:: /examples/generated/react-native/v12/Read.snippet.qs-find-sort-filter.tsx.rst

To learn more, refer to :ref:`CRUD - Read <react-native-query-data>` and
:ref:`Query Data <react-native-query-data>`.

Read Operations Outside of hooks
````````````````````````````````

Sometimes, you may need to use Realm read operations, but not at the top level
of your React Native component. Because hooks only work at the top level of
components, you can't use the ``@realm/react`` hooks in these situations.

Instead, you can use :js-sdk:`Realm.objects <classes/Realm-1.html#objects>` for
collections or :js-sdk:`Realm.objectForPrimaryKey 
<classes/Realm-1.html#objectForPrimaryKey>` a single object.

.. _react-native-quickstart-local-create-realm-objects:
.. _react-native-quickstart-local-modify-an-object:
.. _react-native-quickstart-local-delete-an-object:

Create, Update, and Delete Realm Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After accessing the realm with ``useRealm()``, you can create, update,
and delete objects inside of the realm. All operations must be in a 
:realm-react-sdk:`Realm.write() <classes/Realm-1.html#write>` transaction block.

To learn more, refer to :ref:`Write Transactions <react-native-write-transactions>`.

Create Objects
``````````````

To create a new Realm object, specify the object type, pass in the object's
initial values, and add it to the realm in a write transaction block.

.. include:: /examples/generated/react-native/v12/Create.snippet.qs-create.tsx.rst

To learn more, refer to :ref:`CRUD - Create <react-native-create-objects>`.

Update Objects
``````````````

To update a Realm object, update its properties in a write transaction block.

.. include:: /examples/generated/react-native/v12/Update.snippet.qs-update.tsx.rst

To learn more, refer to :ref:`CRUD - Update <react-native-update-objects>`.

Delete Objects
``````````````

To delete a Realm object, pass the object to :realm-react-sdk:`Realm.delete() 
<classes/Realm-1.html#delete>` within a write transaction block.

.. include:: /examples/generated/react-native/v12/Delete.snippet.qs-delete.tsx.rst

To learn more, refer to :ref:`CRUD - Delete <react-native-delete-objects>`.

.. _react-native-quickstart-local-close-a-realm:

Add Atlas Device Sync (Optional)
--------------------------------

After getting your non-sync realm running, you can add Atlas Device Sync.
This enables your realm data to sync with a MongoDB Atlas cluster and other
client devices.

To use Device Sync, you need to set up a couple more things:

- Create a backend in Atlas App Services (see the prerequisites below)
- Configure a Flexible Sync realm instead of a non-sync realm

Prerequisites
~~~~~~~~~~~~~

- :ref:`An App Services App <create-a-realm-app>`
- :ref:`Anonymous authentication <anonymous-authentication>` enabled in the App 
  Services UI
- :ref:`Flexible Sync <enable-flexible-sync>` enabled with 
  :ref:`Development Mode <development-mode>` on

Configure and Access a Synced Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use a Device Sync, you need to configure three ``@realm/react`` providers:

- :ref:`AppProvider (@realm/react) <react-native-app-provider>`
- :ref:`UserProvider (@realm/react) <react-native-user-provider>`
- :ref:`RealmProvider (@realm/react) <react-native-realm-provider>`

After you initialize your App, authenticate a user, and define your
object model, you can configure a synced realm. This is similar to configuring
a local realm. However, you need to add some additional props to the
``RealmProvider``.

Add the ``sync`` prop to ``RealmProvider`` and pass it a
:realm-react-sdk:`FlexibleSyncConfiguration <types/Realm.FlexibleSyncConfiguration.html>`
object. This sync object must contain ``flexible: true`` You should also add
:ref:`initial subscriptions <react-native-sync-bootstrap-initial-subscriptions>`.
You must have at least one sync subscription before you can read or write synced
data.

**To configure and access a synced realm:** 

#. Initialize the App using ``AppProvider``. You can 
   :ref:`find your App ID <find-your-app-id>` in the App Services UI.
#. Authenticate a User with ``UserProvider``
#. Configure a synced realm with ``RealmProvider``

.. include:: /examples/generated/react-native/v12/RealmWrapperSync.snippet.qs-realm-sync.tsx.rst

The syntax to create, read, update, and delete objects in a synced realm is
identical to the syntax for non-synced realms. While you work with local data, a
background thread efficiently integrates, uploads, and downloads changesets.

To learn more, refer to :ref:`Configure a Synced Realm <react-native-synced-realm>`.

Next: Check out the Template Apps and Tutorial
----------------------------------------------

If you are interested in a guided experience, you can read our
:ref:`Realm React Native SDK tutorial <react-native-tutorial>`. This tutorial
implements and expands on a base React Native app
built with Realm and Device Sync.

You could also use the template app to experiment with the React Native SDK on 
your own. To set up the template app, refer to :ref:`template-apps`
in the Atlas App Services documentation.
