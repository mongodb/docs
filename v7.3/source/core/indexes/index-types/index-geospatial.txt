.. _geospatial-index:

==================
Geospatial Indexes
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Geospatial indexes support queries on data stored as :ref:`GeoJSON
<geospatial-geojson>` objects or :ref:`legacy coordinate pairs
<geospatial-legacy>`. You can use geospatial indexes to improve
performance for queries on geospatial data or to run certain 
geospatial queries.

MongoDB provides two types of geospatial indexes:

- :ref:`2dsphere-index`, which support queries that interpret 
  geometry on a sphere.

- :ref:`2d-index`, which support queries that interpret geometry 
  on a flat surface.

To learn more about geospatial data and query operations, 
see :doc:`/geospatial-queries`.

Use Cases
---------

If your application frequently queries a field that contains 
geospatial data, you can create a geospatial index to improve 
performance for those queries.

Certain query operations require a geospatial index.
If you want to query with the :query:`$near` or :query:`$nearSphere` 
operators or the :pipeline:`$geoNear` aggregation stage, you must create 
a geospatial index. For details, see :ref:`geospatial-operators` and 
:ref:`geospatial-aggregation`.

For example, consider a ``subway`` collection with documents containing
a ``location`` field, which specifies the coordinates of subway stations 
in a city. You often run queries with the :query:`$geoWithin` operator 
to return a list of stations within a specific area. To improve 
performance for this query, you can create a geospatial index 
on the ``location`` field. After creating the index, you can query 
using the :query:`$near` operator to return a list of nearby stations, 
sorted from nearest to farthest.

Get Started
-----------

To create a geospatial index and run geospatial queries, see:

- :ref:`2dsphere-index-create`
- :ref:`2dsphere-index-query`
- :ref:`2d-index-create`
- :ref:`2d-index-query`

Details
-------

This section describes details about geospatial indexes.

Sharded Collections
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/geospatial-index-shard-key-restriction-general.rst

You can use geospatial :ref:`query operators <geospatial-operators>` 
and :ref:`aggregation stages <geospatial-aggregation>` to query for 
geospatial data on sharded collections.

.. |geo-operation| replace:: :query:`$near` and :query:`$nearSphere`

Covered Queries
~~~~~~~~~~~~~~~

.. include:: /includes/fact-geospatial-index-covered-query.rst

Spherical Queries
~~~~~~~~~~~~~~~~~~

.. include::  /includes/extracts/geospatial-queries-longitude-values.rst

However, you can use the ``2dsphere`` index for both spherical queries 
*and* two-dimensional queries. For two-dimensional queries, the 
``2dsphere`` index converts data stored as legacy coordinate pairs to 
the :ref:`GeoJSON Point <geojson-point>` type.

Learn More
----------

For sample geospatial query operations, see 
:ref:`Geospatial Query Examples <geospatial-query-examples>`.

.. toctree::
   :titlesonly:
   :hidden:

   2dsphere </core/indexes/index-types/geospatial/2dsphere>
   2d </core/indexes/index-types/geospatial/2d>
   Restrictions </core/indexes/index-types/geospatial/restrictions>
