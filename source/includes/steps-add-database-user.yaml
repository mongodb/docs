---
title: "Create the service binding that corresponds to the |service| user."
level: 4
stepnum: 1
ref: create-user-resource
content: |
  a. Copy the following resource definition example.

     This is a |yaml| file that you can modify to meet your desired
     configuration.

     .. literalinclude:: /reference/k8s/example-user.yaml
        :language: yaml
        :emphasize-lines: 4-5,8

  #. Open your preferred text editor and paste the resource definition
     into a new text file.
---
title: "Configure the required settings."
level: 4
stepnum: 2
ref: change-k8s-user-configmap
content: |

  The highlighted settings are required to create a database user:

  .. list-table::
   :widths: 20 60 20
   :header-rows: 1

   * - Key
     - Description
     - Example

   * - ``metadata.name``
     - The name of the service binding resource in |k8s|.
     - ``atlas-user-1``

   * - ``metadata.namespace``
     - The |k8s| |k8s-ns| where the service binding resource is
       created.
     - ``atlas``

   * - ``spec.intanceRef.name``
     - The name of the ``ServiceInstance`` resource in |k8s| that
       corresponds to your |service| cluster.
     - ``my-atlas-cluster``

  When you create a database user, the {+osb+} randomly generates an
  |service| username and password for the user. The Service Catalog
  automatically stores the users's |service| username, password, and
  connection URI in a |k8s| secret.

  If you do not specify additional settings, the
  database user is created with the following default attributes:

  - ``SCRAM-SHA`` authentication on the ``admin`` database
  - ``readWriteAnyDatabase`` permissions on the ``admin`` database

---
title: "Add any additional settings for the user."
level: 4
stepnum: 3
ref: add-additional-roles-k8s-user
content: |
  You can configure additional settings for the user under the
  ``spec.parameters.user`` key. These settings correspond to the
  :atlas:`request body parameters <reference/api/database-users-create-a-user/#request-body-parameters>`
  of the :atlas:`Create a Database User
  <reference/api/database-users-create-a-user>` Public API method.

  .. important::

     The following |api| parameters are overwritten by the required
     {+osb+} settings from the previous step and should not be
     specified:

     - ``databaseName``
     - ``groupId``
     - ``password``
     - ``username``

  .. example::

     This example resource definition creates:

     1. a |k8s| resource called ``atlas-user-1`` in the ``atlas``
        namespace and
     2. an |service| database user with the following
        configuration:

        - ``SCRAM-SHA`` authentication on the ``admin`` database with
          randomly generated username and password
        - ``readWrite`` permissions to the ``listingsAndReviews``
          collection on the ``sample_airbnb`` database
        - ``dbAdmin`` permissions to the ``sample_geospatial`` database

     .. code-block:: yaml

        apiVersion: servicecatalog.k8s.io/v1beta1
        kind: ServiceBinding
        metadata:
          name: atlas-user-1
          namespace: atlas
        spec:
          instanceRef:
            name: my-atlas-cluster
          parameters:
            user:
              roles:
              - databaseName: sample_airbnb
                collectionName: listingsAndReviews
                roleName: readWrite
              - databaseName: sample_geospatial
                roleName: dbAdmin

---
title: "Save this file as ``atlas-user-1.yaml``."
stepnum: 4
level: 4
ref: save-resource-definition
---
title: "Create the user."
level: 4
stepnum: 5
ref: create-k8s-user
content: |

  Invoke the following |k8s| command to create your database user:

  .. code-block:: sh

     kubectl apply -f atlas-user-1.yaml
---
title: "View the status of the new user."
level: 4
stepnum: 6
ref: view-k8s-user
content: |

  To view the status of the new user within the |k8s| cluster, pass the
  ``metadata.name`` from ``replica-set.yaml`` into the following
  command:

  .. code-block:: sh

     svcat describe instance <METADATA.NAME> -n <METADATA.NAMESPACE>

  The status of the user appears under ``Bindings``.

  .. example::

     .. code-block:: sh
        :copyable: false

        Bindings:
              NAME        STATUS
        +---------------+--------+
          atlas-user-1     Ready

  To see a detailed view of the user, pass the ``metadata.name`` from
  ``atlas-user-1.yaml`` into the following command:

  .. code-block:: sh

     svcat describe binding <METADATA.NAME> -n <METADATA.NAMESPACE>

  The command returns the details of the user.

  .. example::

     .. code-block:: sh
        :copyable: false

        Name:        atlas-user-1
        Namespace:   atlas
        Status:      Ready - Injected bind result @ 2019-08-24 20:57:43 +0000 UTC
        Secret:      atlas-user-1
        Instance:    my-replica-set

        Parameters:
          user:
            roles:
            - collectionName: listingsAndReviews
              databaseName: sample_airbnb
              roleName: readWrite
            - databaseName: sample_geospatial
              roleName: dbAdmin

        Secret Data:
          password   44 bytes
          uri        58 bytes
          username   36 bytes
---
title: "Retrieve the |service| connection details of the new user."
level: 4
stepnum: 7
ref: decode-user-secret
content: |

  The connection details for the user are stored in a secret that has
  the same name and namespace as the ``ServiceBinding`` resource. The
  secret is base64-encoded by |k8s| and contains the |service|
  username, password, and URI of the user.

  a. Pass ``metadata.name`` and ``metadata.namespace`` from
     ``atlas-user-1.yaml`` into the following command to retrieve the
     |k8s| secret for the user:

     .. code-block:: sh

        kubectl get secret <METADATA.NAME> -n <METADATA.NAMESPACE> -o yaml

     The command returns the base64-encoded |service| password, URI,
     and username of the user:

     .. example::

        .. literalinclude:: /reference/k8s/example-secret-connection-details.yaml
           :language: yaml
           :emphasize-lines: 3-5
           :copyable: false

  #. Pass ``data.username`` from the secret into the following command
     to decode the user's |service| username:

     .. code-block:: sh

        echo '<DATA.USERNAME>' | base64 --decode

     The command returns the decoded |service| username:

     .. example::

       .. code-block:: sh
          :copyable: false

          52c35e67-c7a3-11e9-8d20-0374ac110007

     Repeat the command with ``data.password`` and ``data.uri`` to
     decode the user's |service| password and URI.

     .. code-block:: sh

        echo '<DATA.PASSWORD>' | base64 --decode

     .. code-block:: sh

        echo '<DATA.URI>' | base64 --decode

  .. admonition:: Connecting to your |service| cluster
     :class: tip

     To connect to your deployment, pass the decoded |service| URI and
     username into the following command:

     .. code-block:: sh

        mongo <DECODED_URI>  --username <DECODED_USERNAME>

     When you are prompted for the password, enter the user's decoded
     |service| password.
...
