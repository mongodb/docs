title:
  text: Remove documents with ``cust_id`` equal to ``"xyz321"``.
  character: "`"
stepnum: 1
pre: |
  Call :method:`~db.collection.remove` on the ``orders`` collection, specifying
  ``{ cust_id: "xyz321" }`` as the remove condition.
ref: ""
action:
  language: javascript
  code: |
     db.orders.remove( { cust_id: "xyz321" } )
---
title:
  text: Review the returned object.
  character: "`"
stepnum: 2
ref: ""
pre: |
  The remove operation returns a :method:`WriteResult` object which
  contains the status of the operation. Successful operation should
  return the following document.
action:
  language: javascript
  code: |
     WriteResult({ "nRemoved" : 3 })
post: |
  The :data:`~WriteResult.nRemoved` field specifies the number of
  documents removed, in this case ``3``.

  If the operation encounters an error, the
  :method:`WriteResult` object will contain the error information.
---
title:
  text: Limit removal to a single document using ``justOne`` option.
  character: "`"
stepnum: 3
pre: |
  Use the ``justOne`` option to limit the remove operation to only one
  of the matching documents.

  For example, multiple documents have ``cust_id`` equal to
  ``"abc123"``. You can query the collection to see that there are
  ``5`` documents that match. The following operation only removes a
  single document even though multiple documents match.
ref: ""
action:
  language: javascript
  code: |
     db.orders.remove( { cust_id: "abc123" },  { justOne: true } )
---
title:
  text: Review the returned object.
  character: "`"
stepnum: 4
ref: ""
pre: |
  The remove operation returns a :method:`WriteResult` object which
  contains the status of the operation. Successful operation should
  return the following document.
action:
  language: javascript
  code: |
     WriteResult({ "nRemoved" : 1 })
post: |
  The :data:`~WriteResult.nRemoved` field specifies the number of
  documents removed, in this case ``1``.

  A query of the ``orders`` collection shows that ``4`` documents with
  ``cust_id`` equal to ``"abc123"`` still remain.
---
title:
  text: Remove all documents.
  character: "`"
stepnum: 5
pre: |
  To remove all documents from a collection, pass an empty conditions
  document ``{}`` to the :method:`~db.collection.remove()` method.

  The following removes all documents from the ``orders`` collection.
ref: ""
action:
  language: javascript
  code: |
     db.orders.remove( { } )
---
title:
  text: Review the returned object.
  character: "`"
stepnum: 6
ref: ""
pre: |
  The remove operation returns a :method:`WriteResult` object which
  contains the status of the operation. Successful operation should
  return the following document.
action:
  language: javascript
  code: |
     WriteResult({ "nRemoved" : 13 })
post: |
  The :data:`~WriteResult.nRemoved` field specifies the number of
  documents removed, in this case ``13``.

  If the operation encounters an error, the
  :method:`WriteResult` object will contain the error information.
---
title:
  text: Verify the operation.
  character: "`"
stepnum: 7
ref: ""
pre: |
  Query the ``orders`` collection to verify the deletion of the
  documents.
action:
  language: javascript
  code: |
     db.orders.find()
post: |
  The query should match no documents.
...