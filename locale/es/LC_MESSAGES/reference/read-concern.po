# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 733f5507ffbf4af490af7233296a460d
# fd4d408f1f4f4422b15aae2a75a1e7a3
#: ../source/reference/read-concern.txt:5
#: ../source/reference/read-concern.txt:95
msgid "Read Concern"
msgstr ""

# 2bbbb40e65fd411b8d924d3da940f1a3
#: ../source/reference/read-concern.txt
msgid "On this page"
msgstr ""

# e7ecb26e6236425580de5cf9f0a8d1da
#: ../source/reference/read-concern.txt:17
msgid ""
"The ``readConcern`` query option for replica sets and replica set shards "
"determines which data to return from a query."
msgstr ""

# 78e9f47553584ac69081e98b2c9d4f91
#: ../source/reference/read-concern.txt:23
msgid "Read Concern Levels"
msgstr ""

# 47e771af1b524f36982b227b4d2b9cfd
#: ../source/reference/read-concern.txt:27
msgid "Adds support for :readconcern:`\"linearizable\"` read concern."
msgstr ""

# 0678c90424494a3399539333abbb46ab
#: ../source/reference/read-concern.txt:29
msgid "The following read concern levels are available:"
msgstr ""

# 1124779d209b426e859203f25ec10a14
#: ../source/reference/read-concern.txt:35
msgid "``level``"
msgstr ""

# 9aff179d681c4c0188c03bbdf0ae8298
#: ../source/reference/read-concern.txt:36
msgid "Description"
msgstr ""

# d5c539e596f041568b5ec0ca408d573f
#: ../source/reference/read-concern.txt:40
msgid ""
"Default. The query returns the instance's most recent data. Provides no "
"guarantee that the data has been written to a majority of the replica set"
" members (i.e. may be rolled back)."
msgstr ""

# 48af58781a35420bbd9c199e47a3cb53
#: ../source/reference/read-concern.txt:46
msgid ""
"The query returns the instance's most recent data acknowledged as having "
"been written to a majority of members in the replica set."
msgstr ""

# 5534dc5b8c224d8e8fa5abb8ee74b261
#: ../source/includes/fact-enable-majority-readConcern.rst:1
msgid "To use :term:`read concern` level of :readconcern:`\"majority\"`,"
msgstr ""

# e4d5421af3f14418aa508cc7ad0ce701
#: ../source/includes/fact-enable-majority-readConcern.rst:3
msgid ""
"you must start the :program:`mongod` instances with the "
":option:`--enableMajorityReadConcern` command line option (or the "
":setting:`replication.enableMajorityReadConcern` set to ``true`` if using"
" a configuration file)."
msgstr ""

# f67cd7ba10124efeb58fb74a3fe60e7a
#: ../source/includes/fact-enable-majority-readConcern.rst:8
msgid ""
"replica sets must use :ref:`WiredTiger storage engine <storage-"
"wiredtiger>` and election :rsconf:`protocol version 1 <protocolVersion>`."
msgstr ""

# f8437bee6c8445d6af04dc08824781c1
#: ../source/reference/read-concern.txt:54
msgid ""
"The query returns data that reflects all successful writes issued with a "
"write concern of :writeconcern:`\"majority\"` *and* acknowledged prior to"
" the start of the read operation. For replica sets that run with "
":rsconf:`writeConcernMajorityJournalDefault` set to true, linearizable "
"read concern returns data that will never be rolled back."
msgstr ""

# da54ea5ff1fa464e9e12f5a0580b2a56
#: ../source/includes/extracts/no-journaling-rollback.rst:1
msgid ""
"With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, "
"MongoDB will not wait for :writeconcern:`w: \"majority\" <\"majority\">` "
"writes to be durable before acknowledging the writes. As such, "
":writeconcern:`\"majority\"` write operations could possibly roll back in"
" the event of a loss of a replica set member."
msgstr ""

# 6a38563490044ccca53f31c0f1cc8670
#: ../source/reference/read-concern.txt:64
msgid ""
"You can specify linearizable read concern for read operations on the "
":replstate:`primary <PRIMARY>` only."
msgstr ""

# c3adacdd7b4c45c29cc98215372775b0
#: ../source/reference/read-concern.txt:67
msgid ""
"Linearizable read concern guarantees only apply if read operations "
"specify a query filter that uniquely identifies a single document."
msgstr ""

# 5c801321fe8f454682eb3501dc1e7c9b
# 656ffbcfabce4ddf9701c7714870c86c
#: ../source/reference/read-concern.txt
msgid "Tip"
msgstr ""

# a94a8f5d35bc44af8161941ccf2fc2cb
# e0282b5e22f44f51bd61b1c31d40c937
#: ../source/reference/read-concern.txt:73
#: ../source/reference/read-concern.txt:181
msgid ""
"Always use ``maxTimeMS`` with linearizable read concern in case a "
"majority of data bearing members are unavailable. ``maxTimeMS`` ensures "
"that the operation does not block indefinitely and instead ensures that "
"the operation returns an error if the read concern cannot be fulfilled."
msgstr ""

# 1ddc6d045183446da4b77d4353a1bb1f
#: ../source/reference/read-concern.txt:79
msgid ""
"Lineariable read concern is available for both MMAPv1 and WiredTiger. See"
" :ref:`read-concern-storage-engine-drivers`."
msgstr ""

# bb9af8bdfd0d468daaeb567174aae41a
#: ../source/includes/fact-readConcern-most-recent-data-in-node.rst:1
msgid ""
"Regardless of the :term:`read concern` level, the most recent data on a "
"node may not reflect the most recent version of the data in the system."
msgstr ""

# f43bef679ccc4cc0be90e93c78b5a030
#: ../source/reference/read-concern.txt:89
msgid "Storage Engine and Drivers Support"
msgstr ""

# 69661cf22510415ea3418a861d4c0b79
#: ../source/reference/read-concern.txt:96
msgid "WiredTiger"
msgstr ""

# 0c9c650f67ec48fb803b67a8cc472422
#: ../source/reference/read-concern.txt:97
msgid "MMAPv1"
msgstr ""

# fab7d24891864467996b089b09cd4b5e
#: ../source/reference/read-concern.txt:99
msgid ":readconcern:`\"local\"`"
msgstr ""

# cda5909d7dbd471183e66b7a329a3601
# 4574fcd2f591486780d67aa62aa226ad
# 28c176470c32418fbdaf9343304e5b98
# ee3e86541057452fb2750ebb8dc870ad
# 9291d4ad82f44494859dabd1e9595549
#: ../source/reference/read-concern.txt:100
#: ../source/reference/read-concern.txt:101
#: ../source/reference/read-concern.txt:104
#: ../source/reference/read-concern.txt:108
#: ../source/reference/read-concern.txt:109
msgid "|checkmark|"
msgstr ""

# 906d5c0c7e9b461680bdec1b0a2b4a48
#: ../source/reference/read-concern.txt:103
msgid ":readconcern:`\"majority\"`"
msgstr ""

# 42512e31a1504d2cb8bee70441453561
#: ../source/reference/read-concern.txt:107
msgid ":readconcern:`\"linearizable\"`"
msgstr ""

# 39bd8a3ca0234a3695de25f6ab76df43
#: ../source/reference/read-concern.txt:113
msgid ""
"The :dbcommand:`serverStatus` command returns the "
":serverstatus:`storageEngine.supportsCommittedReads` field which "
"indicates whether the storage engine supports ``\"majority\"`` read "
"concern."
msgstr ""

# 43d48ad2f4944aea9f429dc4e2f37eac
#: ../source/reference/read-concern.txt:118
msgid ""
"MongoDB drivers updated for 3.2 and later versions support specifying a "
"read concern option."
msgstr ""

# 1a35baed0f8a430f990c9a093a782782
#: ../source/reference/read-concern.txt:124
msgid "``readConcern`` Option"
msgstr ""

# c5d6e06e94d74ccf86d0ec38d8400b17
#: ../source/reference/read-concern.txt:126
msgid "Use the ``readConcern`` option to specify the read concern level."
msgstr ""

# e2aeb695e77343a38d77fe1e3585c63e
#: ../source/reference/read-concern.txt:132
msgid "The ``readConcern`` option is available for the following operations:"
msgstr ""

# 418d0587530f4860a0c6d6f30d19345d
#: ../source/reference/read-concern.txt:134
msgid ":dbcommand:`find` command"
msgstr ""

# ef20d0f256db478fb049f3efd080304f
#: ../source/reference/read-concern.txt:136
msgid ""
":dbcommand:`aggregate` command and the "
":method:`db.collection.aggregate()` method"
msgstr ""

# 42eed80f1ce547baa0a4a4f8a7e953ad
#: ../source/reference/read-concern.txt:139
msgid ":dbcommand:`distinct` command"
msgstr ""

# 57e3e23813a4406a86512e3c7ce65c82
#: ../source/reference/read-concern.txt:141
msgid ":dbcommand:`count` command"
msgstr ""

# e7841b46ce0b41c985adcb975b8bc4db
#: ../source/reference/read-concern.txt:143
msgid ":dbcommand:`parallelCollectionScan` command"
msgstr ""

# 2a5dd169f1204996baf224c74aec5729
#: ../source/reference/read-concern.txt:145
msgid ":dbcommand:`geoNear` command"
msgstr ""

# 36bdaac09fdd4ebcaa91dc70855c57d5
#: ../source/reference/read-concern.txt:147
msgid ":dbcommand:`geoSearch` command"
msgstr ""

# 959b39b8dc4f4f35a58441cab3ae63d2
#: ../source/reference/read-concern.txt:149
msgid ""
"To specify the read concern for the :program:`mongo` shell method "
":method:`db.collection.find()`, use the :method:`cursor.readConcern()` "
"method."
msgstr ""

# 9af6a15fda3048549eccb762d4becafb
#: ../source/reference/read-concern.txt:154
msgid "Considerations"
msgstr ""

# 1eea07ea949644799d3ec417e090ffee
#: ../source/reference/read-concern.txt:157
msgid "Read Your Own Writes"
msgstr ""

# 6c4201b7dc6d4fa7abb6b6fd5a779fbd
#: ../source/includes/fact-read-own-writes.rst:1
msgid ""
"If using :readconcern:`\"majority\"` or :readconcern:`\"linearizable\"` "
"read concern for read operations, use :writeconcern:`{ w: \"majority\" } "
"<\"majority\">` write concern for write operations on the primary to "
"ensure that a single thread can read its own writes."
msgstr ""

# 93428ac06ccc4763b8a212031e89ce40
#: ../source/reference/read-concern.txt:162
msgid "Real Time Order"
msgstr ""

# 8f67dca7659f43c0995acd2600911ca9
#: ../source/reference/read-concern.txt:164
msgid ""
"Combined with :writeconcern:`\"majority\"` write concern, "
":readconcern:`\"linearizable\"` read concern enables multiple threads to "
"perform reads and writes on a single document as if a single thread "
"performed these operations in real time; that is, the corresponding "
"schedule for these reads and writes is considered linearizable."
msgstr ""

# f179c0670b9945ce9f9652bbf58a7715
#: ../source/reference/read-concern.txt:171
msgid "Performance Comparisons"
msgstr ""

# c0cb5551b98941209780e5f42c6523ab
#: ../source/reference/read-concern.txt:173
msgid ""
"Unlike :readconcern:`\"majority\"`, :readconcern:`\"linearizable\"` read "
"concern confirms with secondary members that the read operation is "
"reading from a primary that is capable of confirming writes with "
":writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. [#edge-"
"cases-2-primaries]_ As such, reads with linearizable read concern may be "
"significantly slower than reads with :readconcern:`\"majority\"` or "
":readconcern:`\"local\"` read concerns."
msgstr ""

# 9a1f90c196684a0e81fb6ea6ffd08a16
#: ../source/reference/read-concern.txt:186
msgid "For example:"
msgstr ""

# 8d57e3fe2ea548c1b491e6bcf4471d34
#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may"
" *transiently* believe that they are the primary, but at most, one of "
"them will be able to complete writes with :writeconcern:`{ w: "
"\"majority\" } <\"majority\">` write concern. The node that can complete "
":writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current "
"primary, and the other node is a former primary that has not yet "
"recognized its demotion, typically due to a :term:`network partition`. "
"When this occurs, clients that connect to the former primary may observe "
"stale data despite having requested read preference :readmode:`primary`, "
"and new writes to the former primary will eventually roll back."
msgstr ""

