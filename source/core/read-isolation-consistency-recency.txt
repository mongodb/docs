========================================
Read Isolation, Consistency, and Recency
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol



Isolation Guarantees
--------------------

Read Uncommitted
~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-read-uncommitted.rst

Read uncommitted is the default isolation level and applies to
:binary:`~bin.mongod` standalone instances as well as to replica sets and
sharded clusters.

Read Uncommitted And Single Document Atomicity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-single-document-write.rst


Read Uncommitted And Multiple Document Write
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-multi-document-writes.rst

.. include:: /includes/extracts/transactions-usage.rst

Without isolating the multi-document write operations, MongoDB exhibits
the following behavior:

.. include:: /includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst


.. _faq-developers-isolate-cursors:

Cursor Snapshot
~~~~~~~~~~~~~~~

.. include:: /includes/extracts/isolate-cursor-snapshot.rst


Monotonic Writes
----------------

.. include:: /includes/extracts/monotonic-writes.rst

.. _consistency-linearizable-reads:

Real Time Order
---------------

.. versionadded:: 3.4

For read and write operations on the primary, issuing read operations
with :readconcern:`"linearizable"` read concern and write operations
with :writeconcern:`"majority"` write concern enables multiple threads
to perform reads and writes on a single document as if a single thread
performed these operations in real time; that is, the corresponding
schedule for these reads and writes is considered linearizable.

.. seealso::

   :ref:`causal-consistency`

.. _causal-consistency:

Causal Consistency
------------------

.. versionadded:: 3.6

If an operation logically depends on a preceding operation, there is a
causal relationship between the operations. For example, a write
operation that deletes all documents based on a specified condition and
a subsequent read operation that verifies the delete operation have a
causal relationship.

With causally consistent sessions, MongoDB executes causal operations
in an order that respect their causal relationships, and clients
observe results that are consistent with the causal relationships.

.. _sessions:

Client Sessions and Causal Consistency Guarantees
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To provide causal consistency, MongoDB 3.6 enables causal consistency
in client sessions. A causally consistent session denotes that the
associated sequence of read operations with :readconcern:`"majority"`
read concern and write operations with :writeconcern:`"majority"` write
concern have a causal relationship that is reflected by their ordering.
:red:`Applications must ensure that only one thread at a time executes these
operations in a client session.`

For causally related operations:

#. A client starts a client session.

   .. important::

      Client sessions only guarantee causal consistency for:

      - Read operations with :readconcern:`"majority"`; i.e. the return
        data has been acknowledged by a majority of the replica set
        members and is durable.

      - Write operations with :writeconcern:`"majority"` write concern;
        i.e. the write operations that request acknowledgement that the
        operation has been applied to a majority of the replica set's
        voting members.

      For more information on causal consistency and various read and
      write concerns, see
      :doc:`/core/causal-consistency-read-write-concerns`.

#. As the client issues a sequence of read with
   :readconcern:`"majority"` read concern and write operations (with
   :writeconcern:`"majority"` write concern), the client includes the
   session information with each operation.

#. For each read operation with :readconcern:`"majority"` read concern
   and write operation with :writeconcern:`"majority"` write concern
   associated with the session, MongoDB returns the operation time and
   the cluster time, even if the operation errors. The client session
   keeps track of the operation time and the cluster time.

   .. note::

      MongoDB does not return the operation time and the cluster time
      for *unacknowledged* (``w: 0``) write operations. Unacknowledged
      writes do not imply any causal relationship.

      Although, MongoDB returns the operation time and the cluster time
      for read operations and acknowledged write operations in a client
      session, only the read operations with
      :readconcern:`"majority"` read concern and write operations with
      :writeconcern:`"majority"` write concern can guarantee causal
      consistency. For details, see
      :doc:`/core/causal-consistency-read-write-concerns`.

#. The associated client session tracks these two time fields.

   .. note::

      Operations can be causally consistent across different sessions.
      MongoDB drivers and the :binary:`~bin.mongo` shell provide the
      methods to advance the operation time and the cluster time for a
      client session. So, a client can advance the cluster time and the
      operation time of one client session to be consistent with the
      operations of another client session.

.. _causal-consistency-guarantees:

Causal Consistency Guarantees
`````````````````````````````

The following table lists the causal consistency guarantees provided by
causally consistent sessions for read operations with
:readconcern:`"majority"` read concern and 
write operations with :writeconcern:`"majority"` write concern.

.. list-table::
   :header-rows: 1
   :widths: 22 78


   * - Guarantees
     - Description

   * - Read your writes

     - Read operations reflect the results of write
       operations that precede them.

   * - Monotonic reads

     - Read operations do not return results that correspond to an
       earlier state of the data than a preceding read operation.

       For example, if in a session:

       - write\ :sub:`1` precedes write\ :sub:`2`,

       - read\ :sub:`1` precedes read\ :sub:`2`, and 

       - read\ :sub:`1` returns results that reflect write\ :sub:`2`

       then read\ :sub:`2` cannot return results of write\ :sub:`1`.

   * - Monotonic writes

     - Write operations that must precede other writes are executed
       before those other writes.

       For example, if write\ :sub:`1` must precede write\ :sub:`2` in
       a session, the state of the data at the time of write\ :sub:`2`
       must reflect the state of the data post write\ :sub:`1`. Other
       writes can interleave between write\ :sub:`1` and write write\
       :sub:`2`, but write\ :sub:`2` cannot occur before write\
       :sub:`1`.

   * - Writes follow reads

     - Write operations that must occur after read operations are
       executed after those read operations. That is, the state of the
       data at the time of the write must incorporate the state of the
       data of the preceding read operations.

Read Preference
```````````````

These guarantees hold across all members of the MongoDB deployment. For
example, if, in a causally consistent session, you issue a write with
:writeconcern:`"majority"` write concern followed by a read that reads
from a secondary (i.e. read preference :readmode:`secondary`) with
:readconcern:`"majority"` read concern, the read operation will reflect
the state of the database after the write operation.

Isolation
`````````

Operations within a causally consistent session are not isolated from
operations outside the session. If a concurrent write operation
interleaves between the session's write and read operations, the
session's read operation may return results that reflect a write
operation that occurred *after* the session's write operation.

MongoDB Drivers
~~~~~~~~~~~~~~~

.. tip::

   Applications must ensure that only one thread at a time executes
   these operations in a client session.

Clients require MongoDB drivers updated for MongoDB 3.6 or later:

.. include:: /includes/3.6-drivers.rst


.. _causal-consistency-examples:

Examples
~~~~~~~~

.. important::

   Causally consistent
   sessions can only guarantee causal consistency for reads with
   :readconcern:`"majority"` read concern and writes with
   :writeconcern:`"majority"` write concern.

Consider a collection ``items`` that maintains the current and
historical data for various items. Only the historical data has a
non-null ``end`` date. If the ``sku`` value for an item changes, the
document with the old ``sku`` value needs to be updated with the
``end`` date, after which the new document is inserted with the current
``sku`` value. The client can use a causally consistent session to
ensure that the update occurs before the insert.

.. tabs-pillstrip:: languages

.. tabs-drivers::

   tabs:
     - id: python
       content: |

         .. literalinclude:: /driver-examples/test_examples.py
            :language: python
            :dedent: 8
            :start-after: Start Causal Consistency Example 1
            :end-before:  End Causal Consistency Example 1

     - id: java-sync
       content: |

          .. literalinclude:: /driver-examples/CausalConsistencyExamples.java
             :language: java
             :dedent: 8
             :start-after: Start Causal Consistency Example 1
             :end-before:  End Causal Consistency Example 1

     - id: php
       content: |

         .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
            :language: php
            :dedent: 8
            :start-after: Start Causal Consistency Example 1
            :end-before:  End Causal Consistency Example 1

     - id: csharp
       content: |

         .. literalinclude:: /driver-examples/CausalConsistencyExamples.cs
            :language: csharp
            :dedent: 12
            :start-after: Start Causal Consistency Example 1
            :end-before:  End Causal Consistency Example 1


     - id: perl
       content: |

         .. literalinclude:: /driver-examples/driver-examples.t
            :language: perl
            :dedent: 4
            :start-after: Start Causal Consistency Example 1
            :end-before:  End Causal Consistency Example 1

     - id: c
       content: |

         .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c 
            :language: c
            :dedent: 2
            :start-after: Start Causal Consistency Example 1
            :end-before:  End Causal Consistency Example 1

     - id: motor
       content: |

         .. literalinclude:: /driver-examples/test_examples_motor.py
            :language: python
            :dedent: 6
            :start-after: Start Causal Consistency Example 1
            :end-before:  End Causal Consistency Example 1

     - id: swift-sync
       content: |

          .. literalinclude:: /driver-examples/swiftSync.swift
             :language: swift
             :dedent: 4
             :start-after: Start Causal Consistency Example 1
             :end-before:  End Causal Consistency Example 1

     - id: swift-async
       content: |
       
          .. literalinclude:: /driver-examples/swiftAsync.swift
             :language: swift
             :dedent: 4
             :start-after: Start Causal Consistency Example 1
             :end-before:  End Causal Consistency Example 1
                

If another client needs to read all current ``sku`` values, you can
advance the cluster time and the operation time to that of the other
session to ensure that this client is causally consistent with the
other session and read after the two writes:

.. tabs-drivers::

   tabs:
     - id: python
       content: |

         .. literalinclude:: /driver-examples/test_examples.py
            :language: python
            :dedent: 8
            :start-after: Start Causal Consistency Example 2
            :end-before:  End Causal Consistency Example 2

     - id: java-sync
       content: |

          .. literalinclude:: /driver-examples/CausalConsistencyExamples.java
             :language: java
             :dedent: 8
             :start-after: Start Causal Consistency Example 2
             :end-before:  End Causal Consistency Example 2

     - id: php
       content: |

         .. literalinclude:: /driver-examples/DocumentationExamplesTest.php
            :language: php
            :dedent: 8
            :start-after: Start Causal Consistency Example 2
            :end-before:  End Causal Consistency Example 2

     - id: csharp
       content: |

         .. literalinclude:: /driver-examples/CausalConsistencyExamples.cs
            :language: c#
            :dedent: 16
            :start-after: Start Causal Consistency Example 2
            :end-before:  End Causal Consistency Example 2

     - id: perl
       content: |

         .. literalinclude:: /driver-examples/driver-examples.t
            :language: perl
            :dedent: 4
            :start-after: Start Causal Consistency Example 2
            :end-before:  End Causal Consistency Example 2

     - id: c
       content: |

         .. literalinclude:: /driver-examples/test-mongoc-sample-commands.c 
            :language: c
            :dedent: 2
            :start-after: Start Causal Consistency Example 2
            :end-before:  End Causal Consistency Example 2

     - id: motor
       content: |

         .. literalinclude:: /driver-examples/test_examples_motor.py
            :language: python
            :dedent: 6
            :start-after: Start Causal Consistency Example 2
            :end-before:  End Causal Consistency Example 2

     - id: swift-sync
       content: |

          .. literalinclude:: /driver-examples/swiftSync.swift
             :language: swift
             :dedent: 4
             :start-after: Start Causal Consistency Example 2
             :end-before:  End Causal Consistency Example 2

     - id: swift-async
       content: |

          .. literalinclude:: /driver-examples/swiftAsync.swift
             :language: swift
             :dedent: 4
             :start-after: Start Causal Consistency Example 2
             :end-before:  End Causal Consistency Example 2

.. _causal-consistency-limitations:

Limitations
~~~~~~~~~~~

The following operations that build in-memory structures are not
causally consistent:

.. list-table::
   :header-rows: 1

   * - Operation
     - Notes

   * - :dbcommand:`collStats`

     - 

   * - :pipeline:`$collStats` with ``latencyStats`` option.

     - 

   * - :pipeline:`$currentOp`

     - Returns an error if the operation is associated with a causally
       consistent client session.

   * - :dbcommand:`createIndexes`

     - 

   * - :dbcommand:`dbHash`

     - Starting in MongoDB 4.2


   * - :dbcommand:`dbStats`

     - 

   * - :dbcommand:`getMore`

     - Returns an error if the operation is associated with a causally
       consistent client session.

   * - :pipeline:`$indexStats`

     - 

   * - :dbcommand:`mapReduce`

     - Starting in MongoDB 4.2

   * - :dbcommand:`ping`

     - Returns an error if the operation is associated with a causally
       consistent client session.

   * - :dbcommand:`serverStatus`

     - Returns an error if the operation is associated with a causally
       consistent client session.


   * - :dbcommand:`validate`

     - Starting in MongoDB 4.2

.. toctree::
   :hidden:
   :titlesonly:

   /core/causal-consistency-read-write-concerns
