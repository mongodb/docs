.. _kotlin-sync-compound-index:

================
Compound Indexes
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: index, query, optimization, efficiency

Overview
--------

:manual:`Compound indexes </core/index-compound/>` hold references to multiple
fields within a collection's documents, improving query and sort performance.

When creating a compound index, you must specify the following:

- The fields on which to create the index
- The sort order for each field (ascending or descending)

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``movies`` collection in the ``sample_mflix``
database from the :atlas:`Atlas sample datasets </sample-data>`. To learn how to create a
free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

The following {+language+} data class models the documents in this collection:

.. literalinclude:: /includes/indexes/indexes.kt
   :start-after: start-movie-class
   :end-before: end-movie-class
   :language: kotlin
   :copyable:

Create a Compound Index
-----------------------

The following example creates a compound index on the ``type`` and ``genre`` fields, with
both fields indexed in ascending order:

.. literalinclude:: /includes/indexes/indexes.kt
   :start-after: start-index-compound
   :end-before: end-index-compound
   :language: kotlin
   :copyable:
   :dedent:

The following is an example of a query that uses the index created in
the preceding code sample:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/indexes.kt
      :start-after: start-index-compound-query
      :end-before: end-index-compound-query
      :language: kotlin
      :dedent:
   
   .. output::
      :visible: false

      Movie(id=573a1392f29313caabcda755, title=China Seas, type=movie, genres=[Action, Drama, Adventure], ...)
      Movie(id=573a1392f29313caabcd9ca6, title=Scarface, type=movie, genres=[Action, Crime, Drama], ... )
      Movie(id=573a1392f29313caabcdb258, title=The Hurricane, type=movie, genres=[Action, Drama, Romance], ...)
      Movie(id=573a1391f29313caabcd820b, title=Beau Geste, type=movie, genres=[Action, Adventure, Drama], ...)
      ...

Additional Information
----------------------

To learn more about compound indexes, see :manual:`Compound Indexes </core/index-compound>`
in the {+mdb-server+} manual.

To learn about effective indexing strategies using compound indexes, see
:manual:`The ESR Rule </tutorial/equality-sort-range-rule>` in the {+mdb-server+} manual.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods discussed in this guide, see the following API
documentation:

- `find() <{+api+}/com.mongodb.kotlin.client/-mongo-collection/find.html>`__
- `filter() <{+api+}/com.mongodb.kotlin.client/-find-iterable/filter.html>`__
- `sort() <{+api+}/com.mongodb.kotlin.client/-find-iterable/sort.html>`__