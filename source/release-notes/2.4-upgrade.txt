==========================
Upgrade MongoDB 2.2 to 2.4
==========================

.. default-domain:: mongodb

Only upgrade sharded clusters to 2.4 if all members of the cluster are
currently running instances of 2.2. The only supported upgrade path
for sharded clusters running 2.0 is via 2.2.

Rolling Upgrade Limitation for 2.2.0 Deployments Running with ``auth`` Enabled
------------------------------------------------------------------------------

MongoDB *cannot* support deployments that mix 2.2.0 and 2.4.0, or
greater, components. MongoDB version 2.2.1 and later processes *can*
exist in mixed deployments with 2.4-series processes. Therefore you
cannot perform a rolling upgrade from MongoDB 2.2.0 to MongoDB
2.4.0. To upgrade a cluster with 2.2.0 components, use one of the
following procedures.

1. Perform a rolling upgrade of all 2.2.0 processes to the latest
   2.2-series release (e.g. 2.2.3) so that there are no processes in
   the deployment that predate 2.2.1. When there are no 2.2.0
   processes in the deployment, perform a rolling upgrade to 2.4.0.

2. Stop all processes in the cluster. Upgrade all processes to a
   2.4-series release of MongoDB, and start all processes at the same
   2.time.

.. _upgrade-cluster-upgrade:

Upgrade a Sharded Cluster from MongoDB 2.2 to MongoDB 2.4
---------------------------------------------------------

Upgrading a :term:`sharded cluster` from MongoDB version 2.2 to 2.4
(or 2.3) requires that you run a 2.4 :program:`mongos`
with the :option:`--upgrade <mongos --upgrade>` option, described in
this procedure. The upgrade process does not require downtime.

The upgrade to MongoDB 2.4 adds epochs to the metadata for all
collections and chunks in the existing cluster. MongoDB 2.2 processes
are capable of handling epochs, even though 2.2 did not require them.

This procedure applies only to upgrades from version 2.2. Earlier
versions of MongoDB do not correctly handle epochs.

While the upgrade is in progress, you cannot make changes to the
collection metadata. For example, you cannot perform operations that
add shards, drop databases, or drop collections, or modify the
metadata in any other way.

.. warning::

   Once you upgrade to 2.4 and complete the upgrade procedure **do
   not** use 2.0 :program:`mongod` and :program:`mongos` processes in
   your cluster. 2.0 process may re-introduce old metadata formats
   into cluster metadata.

   Also ensure you have sufficient space available on your config server before
   starting the upgrade process.  The information added during upgrade 
   will be only a fraction of the current config data size, but preallocation
   of data files may cause suprising effects. See :ref:`what-tools-can-i-use-to-investigate-storage-use-in-mongodb`.

Sharded Cluster Upgrade Procedure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Do not perform operations that modify metadata while performing this
procedure.

1. Turn off the :ref:`balancer <sharding-balancing-internals>` in the
   :term:`sharded cluster`, as described in`:ref:`sharding-balancing-disable-temporally`.

#. Ensure there are no version 2.0 :program:`mongod` or
   :program:`mongos` processes still active in the sharded
   cluster. The automated upgrade process checks for 2.0 processes,
   but network availability can prevent a definitive check. Wait 5
   minutes after stopping or upgrading version 2.0 :program:`mongos`
   processes to confirm that none are still active.

#. Start a single 2.4 :program:`mongos` process with
   :setting:`configdb` pointing to the sharded cluster's :ref:`config
   servers <sharding-config-server>` and with the :option:`--upgrade
   <mongos --upgrade>` option. You can upgrade an existing
   :program:`mongos` instance to 2.4 or you can start a new `mongos`
   instance that can reach all config servers if you need to avoid
   reconfiguring a production :program:`mongos`.

   Start the :program:`mongos` with a command that resembles the
   following:

   .. code-block:: sh

      mongos --configdb <config server> --upgrade

   Without the :option:`--upgrade <mongos --upgrade>` option 2.4
   :program:`mongos` processes will fail to start until the upgrade
   process is complete.

   The upgrade will prevent any chunk moves or splits from occurring
   during the upgrade process. If there are very many sharded
   collections, acquiring the locks for all collections may take
   seconds or minutes. See the log for progress updates.

#. When the :program:`mongos` process starts successfully, the upgrade is
   complete. If the :program:`mongos` process fails to start, check the
   log for more information.

   If a network interruption occurred and prevented changes, see
   :ref:`upgrade-cluster-resync`.

#. :ref:`Re-enable the balancer
   <sharding-balancing-disable-temporally>`. You can now perform
   operations that modify cluster metadata.

#. Upgrade and restart other :program:`mongos` processes in the
   sharded cluster, without the :option:`--upgrade <mongos --upgrade>`
   option.

Once you have upgraded, *do not* introduce version 2.0 MongoDB
processes into the sharded cluster. This can reintroduce old metadata
formats into the config servers. The metadata change made by this
upgrade process will help prevent errors caused by cross-version
incompatibilities in future versions of MongoDB.

.. _upgrade-cluster-resync:

Resync after a Network Interruption
-----------------------------------

During the short critical section of the upgrade that applies changes
to the metadata, it is unlikely but possible that a network
interruption can prevent all three config servers from verifying or
modifying data. If this occurs, the :ref:`config servers
<sharding-config-server>` must be re-synced, and there may be problems
starting new :program:`mongos` processes. The :term:`sharded cluster`
will remain accessible, but avoid all cluster metadata changes until
you resync the config servers. Operations that change metadata include:
adding shards, dropping databases, and dropping collections.

To resync the config servers:

1. Turn off the :ref:`balancer <sharding-balancing-internals>` in the
   sharded cluster and stop all metadata operations. If you are in the
   middle of an upgrade process (:ref:`upgrade-cluster-upgrade`), you
   have already disabled the balancer.  .

#. Shut down two of the three config servers, preferably the last two listed
   in the :setting:`configdb` string. For example, if your :setting:`configdb`
   string is ``configA:27019,configB:27019,configC:27019``, shut down
   ``configB`` and ``configC``. Shutting down the last two config servers
   ensures that most :program:`mongos` instances will have
   uninterrupted access to cluster metadata.

#. :program:`mongodump` the data files of the active config server
   (``configA``).

#. Move the data files of the deactivated config servers (``configB``
   and ``configC``) to a backup location.

#. Create new, empty :term:`data directories <dbpath>`.

#. Restart the disabled config servers with :option:`--dbpath <mongod --dbpath>`
   pointing to the now-empty data directory and :option:`--port <mongod --port>`
   pointing to an alternate port (e.g. ``27020``).

#. Use :program:`mongorestore` to repopulate the data files on the
   disabled documents from the active
   config server (``configA``) to the restarted config servers on the new
   port (``configB:27020,configC:27020``). These config servers are now
   re-synced.

#. Restart the restored config servers on the old port, resetting the
   port back to the old settings (``configB:27019`` and ``configC:27019``).

#. In some cases connection pooling may cause spurious failures, as
   the :program:`mongos` disables old connections only after attempted
   use. 2.4 fixes this problem, but to avoid this issue in version
   2.2, you can restart all :program:`mongos` instances (one-by-one,
   to avoid downtime) and use the :method:`rs.stepDown()` method
   before restarting each of the shard :term:`replica set`\
   :term:`primaries <primary>`.

#. The sharded cluster is now fully resynced; however before you
   attempt the upgrade process again, you must manually reset the
   upgrade state using a version 2.2 :program:`mongos`. Begin by
   connecting to the 2.2 :program:`mongos` with the :program:`mongo`
   shell:

   .. code-block:: sh

      mongo <2.2 mongos port>

   Then, use the following operation to reset the upgrade process:

   .. code-block:: javascript

      db.getMongo().getCollection("config.version").update({ _id : 1 }, { $unset : { upgradeState : 1 } })

#. Finally retry the upgrade process, as in
   :ref:`upgrade-cluster-upgrade`.
