.. index:: sharding; requirements
.. _sharding-requirements:

============================
Sharded Cluster Requirements
============================

.. default-domain:: mongodb

This page includes the following:

- :ref:`sharding-requirements-when-to-use-sharding`

- :ref:`sharding-requirements-infrastructure`

- :ref:`sharding-requirements-data`

- :ref:`sharding-localhost`

.. _sharding-requirements-when-to-use-sharding:

When to Use Sharding
--------------------

While sharding is a powerful and compelling feature, it comes with
significant :ref:`sharding-requirements-infrastructure`
and some limited complexity costs. As a result, use
sharding only as necessary, and when indicated by actual operational
requirements. Consider the following overview of indications it may be
time to consider sharding.

You should consider deploying a :term:`sharded cluster`, if:

- your data set approaches or exceeds the storage capacity of a single
  node in your system.

- the size of your system's active :term:`working set` *will soon*
  exceed the capacity of the *maximum* amount of RAM for your system.

- your system has a large amount of write activity, a single
  MongoDB instance cannot write data fast enough to meet demand, and
  all other approaches have not reduced contention.

If these attributes are not present in your system, sharding will only
add additional complexity to your system without providing much
benefit. When designing your data model, if you will eventually need a
sharded cluster, consider which collections you will want to shard and
the corresponding shard keys.

.. _sharding-capacity-planning:

.. warning::

   It takes time and resources to deploy sharding, and if your system
   has *already* reached or exceeded its capacity, you will have a
   difficult time deploying sharding without impacting your
   application.

   As a result, if you think you will need to partition your database
   in the future, **do not** wait until your system is overcapacity to
   enable sharding.

.. _sharding-requirements-infrastructure:

Infrastructure Requirements
---------------------------

A :term:`sharded cluster` has the following components:

- Three :term:`config servers <config database>`.

  These special :program:`mongod` instances store the metadata for the
  cluster. The :program:`mongos` instances cache this data and use it
  to determine which :term:`shard` is responsible for which
  :term:`chunk`.

  For development and testing purposes you may deploy a cluster with a single
  configuration server process, but always use exactly three config
  servers for redundancy and safety in production.

- Two or more shards. Each shard consists of one or more :program:`mongod`
  instances that store the data for the shard.

  These "normal" :program:`mongod` instances hold all of the
  actual data for the cluster.

  Typically each shard is a :term:`replica sets <replica set>`. Each
  replica set consists of multiple :program:`mongod` instances. The members
  of the replica set provide redundancy and high available for the data in each shard.

  .. warning::

     MongoDB enables data :term:`partitioning <partition>`, or
     sharding, on a *per collection* basis. You *must* access all data
     in a sharded cluster via the :program:`mongos` instances as below.
     If you connect directly to a :program:`mongod` in a sharded cluster
     you will see its fraction of the cluster's data. The data on any
     given shard may be somewhat random: MongoDB provides no guarantee
     that any two contiguous chunks will reside on a single shard.

- One or more :program:`mongos` instances.

  These instance direct queries from the application layer to the
  shards that hold the data. The :program:`mongos` instances have no
  persistent state or data files and only cache metadata in RAM from
  the config servers.

  .. note::

     In most situations :program:`mongos` instances use minimal
     resources, and you can run them on your application servers
     without impacting application performance. However, if you use
     the :term:`aggregation framework` some processing may occur on
     the :program:`mongos` instances, causing that :program:`mongos`
     to require more system resources.

.. _sharding-requirements-data:

Data Requirements
-----------------

Your cluster must manage a significant quantity of data for sharding
to have an effect on your collection. The default :term:`chunk` size
is 64 megabytes, and the :ref:`balancer
<sharding-balancing>` will not begin moving data until the imbalance
of chunks in the cluster exceeds the :ref:`migration threshold
<sharding-migration-thresholds>`.

Practically, this means that unless your cluster has many hundreds of
megabytes of data, chunks will remain on a single shard.

While there are some exceptional situations where you may need to
shard a small collection of data, most of the time the additional
complexity added by sharding the small collection is not worth the additional
complexity and overhead unless
you need additional concurrency or capacity for some reason. If you
have a small data set, usually a properly configured
single MongoDB instance or replica set will be more than sufficient
for your persistence layer needs.

:term:`Chunk <chunk>` size is :option:`user configurable <mongos --chunkSize>`.
However, the default value is of 64 megabytes is ideal
for most deployments. See the :ref:`sharding-chunk-size` section in the
:doc:`sharding-internals` document for more information.

.. index:: sharding; localhost
.. _sharding-localhost:

Restrictions on the Use of "localhost"
--------------------------------------

Because all components of a :term:`sharded cluster` must communicate
with each other over the network, there are special restrictions
regarding the use of localhost addresses:

If you use either "localhost" or "``127.0.0.1``" as the host
identifier, then you must use "localhost" or "``127.0.0.1``" for *all*
host settings for any MongoDB instances in the cluster.  This applies
to both the ``host`` argument to :dbcommand:`addShard` and the value
to the :option:`mongos --configdb` run time option. If you mix
localhost addresses with remote host address, MongoDB will produce
errors.
