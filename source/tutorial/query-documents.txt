.. _read-operations-query-document:
.. _read-operations-queries:

===============
Query Documents
===============

.. default-domain:: mongodb

.. meta::
   :description: MongoDB  Manual. How do I query documents, query top level fields, perform equality match, query with query operators, specify compound query conditions.
   :keywords: query, select from collection, select all, select conditions, filters, select where, criteria, greater than, less than, MongoDB Manual

This page provides examples of query operations using the
``db.collection.find()`` method in the :program:`mongo` shell. The
examples on this page use the ``inventory`` collection. To populate the
``inventory`` collection, run the following in the :program:`mongo`
shell:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.insertMany([
      { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
      { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
      { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
      { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
      { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
   ]);

.. only:: website

   You can run the operation in the web shell below:

   .. include:: /includes/fact-mws.rst

Select All Documents in a Collection
------------------------------------

To select all documents in the collection, pass an empty document
``{}`` as the query filter parameter to the
:method:`db.collection.find()` method. The query filter parameter
determines the select criteria:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( {} )

Omitting a query filter parameter is equivalent to specifying an empty
query document. As such, the following operation is equivalent to the
previous operation:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find()

These operations correspond to the following SQL statement:

.. code-block:: sql

   SELECT * FROM inventory

For more information on the syntax of the method, see
:method:`db.collection.find()`.

.. _read-operations-query-argument:

Specify Equality Condition
--------------------------

.. include:: /includes/extracts/filter-equality.rst

The following example selects from the ``inventory`` collection all
documents where the ``status`` equals ``"D"``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: "D" } )

This operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT * FROM inventory WHERE status = "D"

Specify Conditions Using Query Operators
----------------------------------------

.. include:: /includes/extracts/filter-query-operators.rst

The following example retrieves all documents from the ``inventory``
collection where ``status`` equals either ``"A"`` or
``"D"``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: { $in: [ "A", "D" ] } } )

Although you can express this query using the :query:`$or` operator,
use the :query:`$in` operator rather than the :query:`$or`
operator when performing equality checks on the same field.

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT * FROM inventory WHERE status in ("A", "D")

Refer to the :doc:`/reference/operator/query` document for the complete
list of MongoDB query operators.

Specify ``AND`` Conditions
--------------------------

A compound query can specify conditions for more than one field in the
collection's documents. Implicitly, a logical ``AND`` conjunction
connects the clauses of a compound query so that the query selects the
documents in the collection that match all the conditions.

The following example retrieves all documents in the ``inventory``
collection where the ``status`` equals ``"A"`` **and** ``qty``
is less than (:query:`$lt`) ``30``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { status: "A", qty: { $lt: 30 } } )

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT * FROM inventory WHERE status = "A" AND qty < 30

See :ref:`comparison operators <query-selectors-comparison>` for other
MongoDB comparison operators.

Specify ``OR`` Conditions
--------------------------

Using the :query:`$or` operator, you can specify a compound query
that joins each clause with a logical ``OR`` conjunction so that the
query selects the documents in the collection that match at least one
condition.

The following example retrieves all documents in the collection where
the ``status`` equals ``"A"`` **or** ``qty`` is less than
(:query:`$lt`) ``30``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT * FROM inventory WHERE status = "A" OR qty < 30

.. note::
   Queries which use :ref:`comparison operators <query-selectors-comparison>`
   are subject to :ref:`type-bracketing`.

Specify ``AND`` as well as ``OR`` Conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, the compound query document selects all
documents in the collection where the ``status`` equals ``"A"``
**and** *either* ``qty`` is less than (:query:`$lt`) ``30`` *or*
``item`` starts with the character ``p``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.find( {
        status: "A",
        $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
   } )

The operation corresponds to the following SQL statement:

.. code-block:: sql

   SELECT * FROM inventory WHERE status = "A" AND ( qty < 30 OR item LIKE "p%")

.. note::

   MongoDB supports regular expressions :query:`$regex` queries to
   perform string pattern matches.

Additional Query Tutorials
--------------------------

For additional query examples, see:

- :doc:`/tutorial/query-embedded-documents`

- :doc:`/tutorial/query-arrays`

- :doc:`/tutorial/query-array-of-documents`

- :doc:`/tutorial/project-fields-from-query-results`

- :doc:`/tutorial/query-for-null-fields`

Behavior
--------

Cursor
~~~~~~

The :method:`db.collection.find()` method
returns a :doc:`cursor </tutorial/iterate-a-cursor>` to the matching
documents.

Read Isolation
~~~~~~~~~~~~~~

.. versionadded:: 3.2

For reads to :doc:`replica sets </replication>` and replica set
:doc:`shards </sharding>`, read concern allows clients to choose a
level of isolation for their reads. For more information, see
:doc:`/reference/read-concern`.

.. class:: hidden

   .. toctree::
      :titlesonly:

      /tutorial/query-embedded-documents
      /tutorial/query-arrays
      /tutorial/query-array-of-documents
      /tutorial/project-fields-from-query-results
      /tutorial/query-for-null-fields
      /tutorial/iterate-a-cursor/

Additional Methods
------------------

The following methods can also read documents from a collection:

- :method:`db.collection.findOne` [#findOne]_

- In :doc:`aggregation pipeline </core/aggregation-pipeline>`, the
  :pipeline:`$match` pipeline stage provides access to MongoDB
  queries.

.. [#findOne]
   The :method:`db.collection.findOne()` method also performs a read
   operation to return a single document. Internally, the
   :method:`db.collection.findOne()` method is the
   :method:`db.collection.find()` method with a limit of 1.
