.. meta::
   :robots: noindex, nosnippet

.. _cpp-authenticate-users:

============================
Authenticate Users - C++ SDK
============================

.. meta:: 
  :keywords: code example

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Log In
------

.. _cpp-login-anonymous:

Anonymous User
~~~~~~~~~~~~~~

If you have enabled :ref:`Anonymous authentication <anonymous-authentication>`
in the App Services UI, users can immediately log into your app without providing any
identifying information.

.. literalinclude:: /examples/generated/cpp/authentication.snippet.anonymous-login.cpp
   :language: cpp

.. _cpp-login-email-password:

Email/Password User
~~~~~~~~~~~~~~~~~~~

If you have enabled :ref:`Email/Password authentication <email-password-authentication>`,
and have :ref:`registered an email/password user <cpp-register-email-password-user>`, 
you can log that user in.

.. literalinclude:: /examples/generated/cpp/authentication.snippet.log-user-in.cpp
   :language: cpp

.. _cpp-login-api-key:

API Key User
~~~~~~~~~~~~

If you have enabled :ref:`API Key authentication <api-key-authentication>`,
you can log in using a user API key.

.. literalinclude:: /examples/generated/cpp/authentication.snippet.api-key.cpp
   :language: cpp

.. _cpp-login-custom-function:

Custom Function User
~~~~~~~~~~~~~~~~~~~~

If you have enabled the :ref:`Custom Function authentication provider
<custom-function-authentication>`, you can log in using a custom function.

.. literalinclude:: /examples/generated/cpp/authentication.snippet.custom-function.cpp
   :language: cpp

.. _cpp-login-custom-jwt:

Custom JWT User
~~~~~~~~~~~~~~~

If you have enabled the :ref:`Custom JWT authentication provider
<custom-jwt-authentication>`, you can log in using a custom JWT.

.. literalinclude:: /examples/generated/cpp/authentication.snippet.custom-jwt.cpp
   :language: cpp

.. _cpp-login-facebook:

Facebook User
~~~~~~~~~~~~~

The :ref:`Facebook <facebook-authentication>` authentication provider allows you
to authenticate users through a Facebook app using their existing Facebook
account.

.. include:: /includes/note-enable-facebook-auth.rst

.. include:: /includes/note-facebook-profile-picture-url.rst

.. literalinclude:: /examples/generated/cpp/authentication.snippet.facebook.cpp
   :language: cpp

.. _cpp-login-google:

Google User
~~~~~~~~~~~

If you have configured the :ref:`Google authentication provider <google-authentication>`,
you can log in using an existing Google account.

To log in with a Google authentication code, pass a Google authentication code to
:cpp-sdk:`credentials::google_auth_code() <structrealm_1_1App_1_1credentials.html>`.

.. literalinclude:: /examples/generated/cpp/authentication.snippet.google-auth-code.cpp
   :language: cpp

To log in with a Google ID token, pass a Google ID token to
:cpp-sdk:`credentials::google_id_token() <structrealm_1_1App_1_1credentials.html>`.

.. literalinclude:: /examples/generated/cpp/authentication.snippet.google-id-token.cpp
   :language: cpp

.. _cpp-login-apple:

Apple User
~~~~~~~~~~

If you have enabled :ref:`Sign-in with Apple authentication
<apple-id-authentication>`, you can log a user in using an Apple ID token.

.. literalinclude:: /examples/generated/cpp/authentication.snippet.apple.cpp
   :language: cpp

.. _cpp-get-a-user-access-token:

Get a User Access Token
-----------------------

The Realm SDK automatically manages access tokens, refreshes them when they 
expire, and includes a valid access token for the current user with each 
request. 

If you send requests outside of the SDK then you must include the user's access
token with each request. In this scenario, you must manually refresh the token when 
it expires. Access tokens expire after 30 minutes.

You can call :cpp-sdk:`.refresh_custom_user_data() 
<structrealm_1_1user.html#a6e08623890de4003a00a351e939a0a9f>`
on a logged-in user to refresh the user's auth session. Then, get the 
:cpp-sdk:`.access_token() <structrealm_1_1user.html#ac059073ce64f125553e5bd395bd17cd6>` 
as a string you can use in your code. You might use code similar to this to 
fetch an access token:

.. literalinclude:: /examples/generated/cpp/authentication.snippet.get-user-access-token.cpp
   :language: cpp

Refresh Token Expiration
------------------------

.. include:: /includes/refresh-token-expiry.rst

.. _cpp-logout:

Log Out
-------

Once logged in, you can log out.

.. include:: /includes/log-out-queries-in-progress.rst

.. literalinclude:: /examples/generated/cpp/authentication.snippet.log-user-out.cpp
   :language: cpp

.. _cpp-get-current-user:

Get the Current User
--------------------

You can get the current user with ``app::get_current_user()``:

.. literalinclude:: /examples/generated/cpp/authentication.snippet.get-current-user.cpp
   :language: cpp

.. _cpp-confirm-user-is-logged-in:

Confirm a User is Logged In
---------------------------

You can confirm a user is logged in with ``user::is_logged_in()``:

.. literalinclude:: /examples/generated/cpp/authentication.snippet.check-user-is-logged-in.cpp
   :language: cpp
