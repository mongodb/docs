:noprevnext:

.. _fts-top-ref:
.. _atlas-search:

=======================
{+fts+} Overview 
=======================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: advanced search capabilities, search architecture, apache lucene
   :description: Learn about MongoDB Search.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _what-is-fts:

What is |fts|? 
---------------

|fts| is an embedded full-text search that gives you a seamless,
scalable experience for building relevance-based app features
and eliminates the need to run a separate search system
alongside your database.

You can use |fts| for fine-grained text indexing and querying of data on your
{+cluster+}. |fts| provides several kinds of :ref:`text analyzers <analyzers-ref>`, 
a rich :ref:`query language <query-syntax-ref>` to create complex search logic,
customizable score-based results ranking, and advanced search features for your
applications like autocomplete, pagination, and faceting.

.. button:: Get Started with |fts|
   :uri: https://www.mongodb.com/docs/atlas/atlas-search/tutorial/

Use Cases
---------

|fts| supports diverse use cases including the following:

- **Search-as-you-type:** To predict words with increasing accuracy as users
  enter characters in your application's search field, you can use the |fts|
  :ref:`autocomplete <autocomplete-ref>` operator to predict and return results for
  partial words. To learn more, see :ref:`partial-match-tutorial`.
- **Faceted Search:** To enable users of your application to narrow down
  search results through the use of filters, you can use
  the |fts| :ref:`fts-facet-ref` collector to build facets that group
  results by values or ranges in the faceted fields. To learn more, see
  :ref:`facet-tutorial`. 
- **Paginated Results:** To group pages of results and implement functions like
  "Next Page" and "Previous Page", you can use the |fts|
  ``searchSequenceToken`` with ``searchAfter`` and ``searchBefore``
  options to traverse pages in-order and jump across pages. To learn
  more, see :ref:`How to Paginate the Results <fts-paginate-results>`.

Key Concepts
------------

The following concepts form the basis of |fts| and are essential to
optimize your application. 

What are search queries? 
~~~~~~~~~~~~~~~~~~~~~~~~

Search queries consult a search index to return a set of results. Search
queries are different than traditional database queries, as they are
intended to meet more general information needs. Where a database query
must follow a strict syntax, search queries can be used for simple text
matching, but can also look for similar phrases, number or date ranges,
or use regular expressions or wildcards. 

|fts| queries take the form of an :manual:`aggregation pipeline stage 
</aggregation>`. |fts| provides :pipeline:`$search` and 
:pipeline:`$searchMeta` stages, which can be used in conjunction with
other :manual:`aggregation pipeline stages </aggregation>` in your query
pipeline. |fts| provides query :ref:`operators <operators-ref>` and 
:ref:`collectors <collectors-ref>` that you can use inside these
aggregation pipeline stages.

To learn more, see :ref:`fts-about-queries`.

What is a search index? 
~~~~~~~~~~~~~~~~~~~~~~~

In the context of search, an *index* is a data structure that
categorizes data in an easily searchable format. Search indexes enable
faster retrieval of documents that contain a given term without having
to scan the entire collection. While both |fts| indexes and
:manual:`MongoDB Indexes </indexes>` make data retrieval faster, note
that they are not the same. Like the index in the back of a book, a
search index is a mapping between terms and the documents that contain
those terms. Search indexes also contain other relevant metadata, such
as the positions of terms in documents. 

You can create an |fts| index on a single field or on multiple fields by
using :ref:`static mappings <static-dynamic-mappings>`. Alternatively,
you can enable :ref:`dynamic mappings <static-dynamic-mappings>` to
automatically index all the dynamically indexable fields in your
documents. You can create |fts| indexes on polymorphic data and embedded
documents, or for specific use-cases like search-as-you-type or faceted
search.

To learn more, see :ref:`fts-manage-indexes`.

What are search analyzers and tokens?  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When creating a search index, data must first be transformed into a
sequence of *tokens* or *terms*. An *analyzer* facilitates this process
through steps including: 

- *Tokenization*: Breaking up words in a string into indexable tokens.
  For example, dividing a sentence by whitespace and punctuation.
- *Normalization*: Organizing data so that it is consistently
  represented and easier to analyze. For example, transforming text to
  lower case or removing unwanted words called *stop words*. 
- *Stemming*: Reducing words to their root form. For example, ignoring
  suffixes, prefixes, and plural word forms. 

The specifics of tokenization are language-specific and can require
making additional choices. Which analyzer to use depends on your data
and application. 

|fts| provides some built-in :ref:`analyzers <analyzers-ref>`. You can
also create your own :ref:`custom analyzer <custom-analyzers>`. You can
specify alternate analyzers using :ref:`multi <ref-multi-analyzers>`
analyzer. 

To learn more, see :ref:`analyzers-ref`.

What is a search score? 
~~~~~~~~~~~~~~~~~~~~~~~

Each document in the query results receives a relevancy score that
enables query results to be returned in order from the highest relevance
to the lowest. In the simplest form of scoring, documents score higher
if the query term appears frequently in a document and lower if the
query term appears across many documents in the collection. Scoring can
also be customized. Tailoring search to a specific domain often means
customizing the relevance-based default score by boosting, decaying, or
modifying it in other ways.

To learn more, see :ref:`Score Documents <scoring-ref>`.

Next Steps
----------

For a hands-on experience creating |fts| indexes and running |fts|
queries against sample data, try the :ref:`fts-tutorial-ref`.

.. toctree::
   :titlesonly:

   Quick Start </atlas-search/tutorial>
   Queries & Indexes </atlas-search/searching>
   Improve Accuracy </atlas-search/accuracy>
   Improve Performance </atlas-search/performance>
   Deployment Options </atlas-search/about/deployment-options>
   Monitor {+fts+} </atlas-search/monitoring>
   Design Search for Your Data Model </atlas-search/design-patterns>
   Compatibility & Limitations </atlas-search/about/feature-compatibility>
   Changelog </atlas-search/changelog>
