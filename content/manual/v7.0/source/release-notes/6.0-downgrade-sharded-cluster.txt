.. _6.0-downgrade-sharded-cluster:

======================================================
Downgrade |newversion| Sharded Cluster to |oldversion|
======================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/6.0-upgrade-replacements.rst

Before you attempt a downgrade, familiarize yourself with the content
in this page.

Downgrade Path
--------------

.. important::

   Before you upgrade or downgrade a sharded cluster, ensure all sharded
   cluster members are running. If you do not, the upgrade or downgrade
   will not complete until all members are started.

.. include:: /includes/downgrade/latest-patch-release.rst

.. include:: /includes/downgrade/single-version-support.rst

.. |downgrading| replace:: downgrading

Prerequisites
-------------

Before you begin the downgrade procedure, you must complete the following
prerequisite steps.

.. procedure::
   :style: normal
    
   .. step:: Create Backup

      *Optional but Recommended.*  Create a backup of your database.
      
      To learn how to create a backup, see :ref:`backup-methods`.

   .. step:: Remove Backward-Incompatible Features

      To downgrade from |newversion| to |oldversion|, you must remove
      |newversion| features that are incompatible with |oldversion|. For a
      list of incompatible features and how to remove them, see
      :ref:`6.0-downgrade-considerations`.

   .. step:: Ensure No Resharding Operations are in Progress

      Ensure that any :ref:`resharding operations <sharding-resharding>` have
      successfully completed. If a recent resharding operation has failed due
      to a primary failover, you must first run the
      :dbcommand:`cleanupReshardCollection` command before downgrading the
      ``featureCompatibilityVersion`` of your sharded cluster.
      
      If a resharding operation is still running while you downgrade the
      ``featureCompatibilityVersion`` of your sharded cluster, the resharding
      operation will not complete.
      
      .. |target| replace:: :binary:`~bin.mongos` instance


   .. step:: Downgrade Feature Compatibility Version (FCV)

      .. _5.0-downgrade-feature-compatibility-sharded-cluster:
      
      To downgrade the :abbr:`FCV (feature compatibility version)` of your
      sharded cluster:
      
      a. Ensure that no initial sync is in progress. Running the
         :dbcommand:`setFeatureCompatibilityVersion` command while an initial
         sync is in progress causes the initial sync to restart.
      
      #. Ensure that no nodes have a ``newlyAdded`` field in their
         :doc:`replica set configuration </reference/replica-configuration>`.
         Run the following command on each node in your replica set to
         verify this:
      
         .. code-block:: javascript
      
            use local
            db.system.replset.find( { "members.newlyAdded" : { $exists : true } } );
         
         The ``newlyAdded`` field only appears in a node's replica set
         configuration document during and shortly after an initial sync.
      
      #. Ensure that no replica set member is in the :replstate:`ROLLBACK` or
         :replstate:`RECOVERING` state.
      
      #. Use :binary:`mongosh` to connect to your |target|.
      
      #. .. include:: /includes/6.0-downgrade-fcv.rst
      
         .. note:: Troubleshooting
      
            - While :dbcommand:`setFeatureCompatibilityVersion` is running on
              the sharded cluster, chunk migrations, splits, and merges can
              fail with ``ConflictingOperationInProgress``.
      
            - If :dbcommand:`setFeatureCompatibilityVersion` fails with a
              ``ManualInterventionRequired`` error, and the cluster has
              recently undergone a resharding operation that had failed due to
              an election, you must run the ``cleanupReshardCollection``
              command before you attempt to run
              :dbcommand:`setFeatureCompatibilityVersion` again.
      
      #. To ensure that all members of the replica set have the updated
         ``featureCompatibilityVersion``, connect to each replica set member
         and check the ``featureCompatibilityVersion``:
      
         .. code-block:: javascript
      
            db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )
            
         .. tip:: Access Control
      
            For a sharded cluster that has access control enabled, to run the
            ``adminCommand`` on a shard replica set member, you must connect
            to the member as a :ref:`shard local user <shard-local-users>`.
      
         All members should return a result that includes:
      
         .. code-block:: javascript
      
            "featureCompatibilityVersion" : { "version" : "5.0" }
      
         If any member returns a ``featureCompatibilityVersion`` of |newfcv|,
         wait for the member to return version |oldfcv| before proceeding.
      
      For more information on the returned ``featureCompatibilityVersion``
      value, see :ref:`view-fcv`.
      
      .. |binary| replace:: any :binary:`mongod` / :binary:`mongos` instance

Downgrade Procedure
-------------------

.. warning::

   Before proceeding with the downgrade procedure, ensure that all
   sharded cluster members, including delayed replica set members, have
   the prerequisite changes. To do that, check the
   ``featureCompatibilityVersion`` and the remove the incompatible
   features for each node before downgrading.

.. procedure::
   :style: normal

   .. step:: Download the latest |oldversion| binaries.

      Using either a package manager or a manual download, get the latest
      release in the |oldversion| series. If using a package manager, add a new
      repository for the |oldversion| binaries, then perform the actual downgrade
      process.

      .. include:: /includes/downgrade-path.rst

   .. step:: Replace the |newversion| binaries with the downloaded |oldversion| binaries.

      Ensure that the |oldversion| binaries are in your System PATH. To
      confirm your binary version, run the following command:

      .. code-block:: shell

         mongod --version

      The command output should indicate a 5.0-series release.

   .. step:: Disable the Balancer.

      To disable the balancer, connect :binary:`~bin.mongosh` to a
      :binary:`~bin.mongos` instance in the sharded cluster, and run the
      following command:

      .. code-block:: javascript

        sh.stopBalancer()

      .. note::

        If a migration is in progress, MongoDB completes the in-progress
        migration before stopping the balancer. To check the balancer's
        current state, run :method:`sh.isBalancerRunning()`.

      To verify that the balancer is disabled, run the following
      command:

      .. code-block:: javascript

        sh.getBalancerState()

      :method:`sh.getBalancerState()` returns ``false`` if the balancer
      is disabled.
      
      For more information on disabling the balancer, see
      :ref:`sharding-balancing-disable-temporarily`.

   .. step:: Downgrade ``mongos``.

      a. To stop ``mongos``, run the following command:

         .. code-block:: javascript
         
            db.shutdownServer()

      #. Restart ``mongos`` with the |oldversion| binary.

   .. step:: Downgrade each shard, one at a time.

      a. Downgrade the shard's secondary members, one at a time.

         i. Shut down the member.
          
            To shut down the :binary:`~bin.mongod` process, use
            :binary:`~bin.mongosh` to connect to the deployment
            and run the following command:
                  
            .. code-block:: javascript

               db.adminCommand( { shutdown: 1 } )

         #. Restart the member.

            To start a ``mongod`` process, run the following command:

            .. code-block:: javascript

               mongod --dbpath </path-to-data-folder>

         #. Wait for the member to enter the ``SECONDARY`` state.
          
            Before downgrading the next secondary, wait for the
            member to recover to the ``SECONDARY`` state. To check
            the member's state, use the :method:`rs.status()`
            method in :binary:`~bin.mongosh`.

         #. Repeat the previous steps to downgrade each secondary member.

      #. Downgrade the shard arbiter, if any.

         Skip this step if the replica set does not include an
         arbiter.
            
         Downgrade the :ref:`arbiter
         <replica-set-arbiter-configuration>` member of the sharded
         cluster:

         i. Shut down the member.
                
            To shut down the arbiter, use
            :binary:`~bin.mongosh` to connect to the arbiter and run
            the following command:

            .. code-block:: javascript

               db.adminCommand( { shutdown: 1 } )

         #. Delete the contents of the arbiter data directory.
            
            To find the data directory of the arbiter
            :binary:`~bin.mongod`, check either the
            :setting:`storage.dbPath` configuration setting or
            :option:`--dbpath <mongod --dbpath>` command line option.

            Run the following command:

            .. code-block:: bash

               rm -rf /path/to/mongodb/datafiles/*

         #. Restart the arbiter.

            To start a ``mongod`` process, run the following command:

            .. code-block:: javascript

               mongod --dbpath </path-to-mongodb-datafiles>

         #. Wait for the member to enter the ``ARBITER`` state.
                
            Before downgrading the primary, wait for the member
            to recover to the ``ARBITER`` state. To check the
            member's state, use the :method:`rs.status()` method
            in :binary:`~bin.mongosh`.
         
      #. Downgrade the shard primary.

         i. Step down the primary.

            In :binary:`~bin.mongosh`, use :method:`rs.stepDown()`
            to :term:`step down` the primary and start an election
            for a new primary:

            .. code-block:: javascript

               rs.stepDown()

         #. Verify that the primary has stepped down.

            Run the following command:

            .. code-block::

               rs.status()

            Verify that the primary has stepped down and another
            member has assumed the ``PRIMARY`` state.

         #. Shut down the former primary member.
                     
            To shut down the former primary, connect to the
            deployment using :binary:`mongosh` and run the
            following command:

            .. code-block:: javascript

               db.adminCommand( { shutdown: 1 } )

         #. Restart the :binary:`~bin.mongod` with the |oldversion| binary.

            To start a ``mongod`` process, run the following command:

            .. code-block:: javascript

               mongod --dbpath </path-to-mongodb-datafiles>

         #. Repeat for the remaining shards.

   .. step:: Downgrade the config servers.

      a. Downgrade the shard's secondary members of the config servers 
         replica set (CSRS) one at a time:

         i. Shut down the secondary.
                
            Connect to the secondary and run the following command:

            .. code-block:: javascript

               db.adminCommand( { shutdown: 1 } )

         #. Restart the member.

            To start a ``mongod`` process, run the following command:

            .. code-block:: javascript

               mongod --dbpath </path-to-data-folder>

         #. Wait for the member to enter the ``SECONDARY`` state.
          
            Before downgrading the next secondary, wait for the
            member to recover to the ``SECONDARY`` state. To check
            the member's state, use the :method:`rs.status()`
            method in :binary:`~bin.mongosh`.
         
         #. Repeat the previous steps to downgrade each secondary member.

      #. Downgrade the config server primary.

         i. Step down the primary.

            In :binary:`~bin.mongosh`, run :method:`rs.stepDown()`
            to :term:`step down` the primary and start an election
            for a new primary:

            .. code-block:: javascript

               rs.stepDown()

         #. Verify that the primary has stepped down.

            Run the following command:

            .. code-block::

               rs.status()

            Verify that the primary has stepped down and another
            member has assumed the ``PRIMARY`` state.

         #. Shut down the former primary member.
                     
            To shut down the former primary, connect to the
            deployment using :binary:`mongosh` and run the
            following command:

            .. code-block:: javascript

               db.adminCommand( { shutdown: 1 } )

         #. Restart the :binary:`~bin.mongod` with the |oldversion| binary.

            To start a ``mongod`` process, run the following command:

            .. code-block:: javascript

               mongod --dbpath </path-to-mongodb-datafiles>

   .. step:: Re-enable the balancer.

      After you downgrade all of the sharded cluster components, connect
      to a :binary:`~bin.mongos` and run the following command to
      re-enable the balancer:

      .. code-block:: javascript

         sh.startBalancer()

      The :method:`sh.startBalancer()` method also enables auto-splitting
      for the sharded cluster.
