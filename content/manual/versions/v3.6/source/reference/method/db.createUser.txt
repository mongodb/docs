===============
db.createUser()
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.createUser ( user, writeConcern )

   Creates a new user for the database on which the method is run.
   :method:`db.createUser()` returns a *duplicate user* error if the
   user already exists on the database.

   The :method:`db.createUser()` method has the following syntax:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``user``
   
        - document
   
        - The document with authentication and access information about the
          user to create.
          
          
   
      * - ``writeConcern``
   
        - document
   
        - Optional. The level of :doc:`write concern </reference/write-concern>` for the
          creation operation. The ``writeConcern`` document takes the same
          fields as the :dbcommand:`getLastError` command.
          
          
   


   The ``user`` document defines the user and has the following form:

   .. code-block:: javascript

      { 
        user: "<name>",
        pwd: "<cleartext password>",
        customData: { <any information> },
        roles: [
          { role: "<role>", db: "<database>" } | "<role>",
          ...
        ],
        authenticationRestrictions: [ 
           { 
             clientSource: ["<IP>" | "<CIDR range>", ...],
             serverAddress: ["<IP>" | "<CIDR range>", ...]
           },
           ...
        ]
      }

   The ``user`` document has the following fields:

   .. |local-cmd-name| replace:: :method:`db.createUser()`

   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``user``
   
        - string
   
        - The name of the new user.
          
          
   
      * - ``pwd``
   
        - string
   
        - The user's password. The ``pwd`` field is not
          required if you run |local-cmd-name| on the ``$external``
          database to create users who have credentials stored externally to
          MongoDB.
          
          
   
      * - ``customData``
   
        - document
   
        - Optional. Any arbitrary information.  This field can be used to store any data
          an admin wishes to associate with this particular user.  For example,
          this could be the user's full name or employee id.
          
          
   
      * - ``roles``
   
        - array
   
        - The roles granted to the user. Can specify an empty array ``[]`` to
          create users without roles.
          
          
   
      * - :ref:`authenticationRestrictions <db-createUser-authenticationRestrictions>`
   
        - array
   
        - .. _db-createUser-authenticationRestrictions:
        
          Optional. The authentication restrictions the server enforces on the created
          user. Specifies a list of IP addresses and
          :abbr:`CIDR (Classless Inter-Domain Routing)` ranges from which the
          user is allowed to connect to the server or from which the server can
          accept users.
          
          .. versionadded:: 3.6
          
          
   


Roles
~~~~~

.. include:: /includes/fact-roles-array-contents.rst

.. _method-createUser-authentication-restrictions:

Authentication Restrictions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-auth-restrictions-array-contents.rst

The :method:`db.createUser()` method wraps the :dbcommand:`createUser`
command.

Behavior
--------

User ID
~~~~~~~

Starting in version 3.6.13, MongoDB automatically assigns a unique
``userId`` to the user upon creation.

Replica set
~~~~~~~~~~~

.. |command| replace:: :method:`db.createUser()`

.. include:: /includes/fact-management-methods-write-concern.rst

Encryption
~~~~~~~~~~


.. include:: /includes/fact-cleartext-passwords-tls.rst

External Credentials
~~~~~~~~~~~~~~~~~~~~

Users created on the ``$external`` database should have credentials
stored externally to MongoDB, as, for example, with :doc:`MongoDB
Enterprise installations that use Kerberos
</tutorial/control-access-to-mongodb-with-kerberos-authentication>`.

.. include:: /includes/extracts/sessions-external-username-limit.rst

``local`` Database
~~~~~~~~~~~~~~~~~~

You cannot create users on the local database.

Required Access
---------------

.. include:: /includes/access-create-user.rst

Examples
--------

The following :method:`db.createUser()` operation creates the
``accountAdmin01`` user on the ``products`` database.

.. cssclass:: copyable-code
.. code-block:: javascript

   use products
   db.createUser( { user: "accountAdmin01",
                    pwd: "changeMe",
                    customData: { employeeId: 12345 },
                    roles: [ { role: "clusterAdmin", db: "admin" },
                             { role: "readAnyDatabase", db: "admin" },
                             "readWrite"] },
                  { w: "majority" , wtimeout: 5000 } )

The operation gives ``accountAdmin01`` the following roles:

- the ``clusterAdmin`` and ``readAnyDatabase`` roles on the ``admin``
  database

- the ``readWrite`` role on the ``products`` database

Create User with Roles
~~~~~~~~~~~~~~~~~~~~~~

The following operation creates ``accountUser`` in the ``products`` database
and gives the user the ``readWrite`` and ``dbAdmin`` roles.

.. cssclass:: copyable-code
.. code-block:: javascript

   use products
   db.createUser(
      {
        user: "accountUser",
        pwd: "password",
        roles: [ "readWrite", "dbAdmin" ]
      }
   )

Create User without Roles
~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation creates a user named ``reportsUser`` in the ``admin``
database but does not yet assign roles:

.. cssclass:: copyable-code
.. code-block:: javascript

   use admin
   db.createUser(
      {
        user: "reportsUser",
        pwd: "password",
        roles: [ ]
      }
   )

Create Administrative User with Roles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation creates a user named ``appAdmin`` in the
``admin`` database and gives the user ``readWrite`` access to the
``config`` database, which lets the user change certain settings for
sharded clusters, such as to the balancer setting.

.. cssclass:: copyable-code
.. code-block:: javascript

   use admin
   db.createUser(
      {
        user: "appAdmin",
        pwd: "password",
        roles:
          [
            { role: "readWrite", db: "config" },
            "clusterAdmin"
          ]
      }
   )

Create User with Authentication Restrictions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation creates a user named ``restricted`` in the
``admin`` database. This user may only authenticate if connecting from
IP address ``192.0.2.0`` to IP address ``198.51.100.0``.

.. cssclass:: copyable-code
.. code-block:: javascript

   use admin
   db.createUser(
      {
        user: "restricted",
        pwd: "password",
        roles: [ ],
        authenticationRestrictions: [ {
           clientSource: ["192.0.2.0"],
           serverAddress: ["198.51.100.0"]
        } ]
      }
   )
