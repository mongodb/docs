title: Start one member of the replica set.
stepnum: 1
ref: start-first-replica-set-member
content: |
  This :program:`mongod`  should *not* enable :setting:`auth`.
---
title: Create administrative users.
stepnum: 2
ref: create-administrative-users
pre: |
  The following operations will create two users: a user administrator
  that will be able to create and modify users (``siteUserAdmin``),
  and a :authrole:`root` user (``siteRootAdmin``) that you will use to
  complete the remainder of the tutorial:
action:
  language: javascript
  code: |
    use admin
    db.createUser( {
        user: "siteUserAdmin",
        pwd: "<password>",
        roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
      });
    db.createUser( {
        user: "siteRootAdmin",
        pwd: "<password>",
        roles: [ { role: "root", db: "admin" } ]
      });
---
title: Stop the ``mongod`` instance.
stepnum: 3
ref: stop-first-replica-set-member
---
title: Create the key file to be used by each member of the replica set.
stepnum: 1
ref: generate-keyfile
source:
  file: steps-generate-key-file.yaml
  ref: generate
---
title: Copy the key file to each member of the replica set.
stepnum: 2
ref: copy-key-file
content: |
  Copy the ``mongodb-keyfile`` to all hosts where components of a
  MongoDB deployment run. Set the permissions of these files to
  ``600`` so that only the *owner* of the file can read or write this
  file to prevent other users on the system from accessing the shared
  secret.
---
title: Start each member of the replica set with the appropriate options.
stepnum: 3
ref: start-mongod
pre: |
  For each member, start a :program:`mongod` and specify the key file and
  the name of the replica set. Also specify other parameters as needed for
  your deployment. For replication-specific parameters, see
  :ref:`cli-mongod-replica-set` required by your deployment.

  .. include:: /includes/fact-unique-replica-set-names.rst
action:
  - pre: |
      The following example specifies parameters through the :option:`--keyFile`
      and :option:`--replSet` command-line options:
    language: javascript
    code: |
      mongod --keyFile /mysecretdirectory/keyfile --replSet "rs0"
  - pre: |
      The following example specifies parameters through a configuration file:
    language: javascript
    code: |
      mongod --config $HOME/.mongodb/config
post: |
  In production deployments, you can configure a :term:`control script` to
  manage this process. Control scripts are beyond the scope of this document.
---
title: "Connect to the member of the replica set where you created the administrative users."
stepnum: 4
ref: connect-and-auth
pre: |
  Connect to the replica set member you started and authenticate as
  the ``siteRootAdmin`` user. From the :program:`mongo` shell, use the
  following operation to authenticate:
action:
  language: javascript
  code: |
    use admin
    db.auth("siteRootAdmin", "<password>");
---
stepnum: 5
source:
  file: steps-deploy-replica-set.yaml
  ref: initiate-rs
---
stepnum: 6
source:
  file: steps-deploy-replica-set.yaml
  ref: verify-rsconf
---
stepnum: 7
source:
  file: steps-deploy-replica-set.yaml
  ref: add-remaining-members
---
stepnum: 8
source:
  file: steps-deploy-replica-set.yaml
  ref: check-status
---
stepnum: 9
source:
  file: steps-add-user-administrator.yaml
  ref: create-site-user-admin
pre: |
  Add the user administrator with the :authrole:`userAdminAnyDatabase` role, and
  only that role.

  You must issue the following operation while connected to the
  :term:`primary` as the ``siteRootAdmin`` user.
---
title: Create additional users to address operational requirements.
stepnum: 10
ref: create-records-db-owner
pre: |
  You can use :doc:`built-in roles </reference/built-in-roles>` to create
  common types of database users, such as the :authrole:`dbOwner` role to
  create a database administrator, the :authrole:`readWrite` role to
  create a user who can update data, or the :authrole:`read` role to
  create user who can search data but no more. You also can define
  :ref:`custom roles <user-defined-roles>`.
action:
  pre: |
    For example, the following creates a database administrator for the
    ``products`` database:
  language: javascript
  code: |
    use products
    db.createUser(
      {
        user: "productsDBAdmin",
        pwd: "password",
        roles:
        [
          {
            role: "dbOwner",
            db: "products"
          }
        ]
      }
    )
post: |
  For an overview of roles and privileges, see :ref:`authorization`. For
  more information on adding users, see
  :doc:`/tutorial/add-user-to-database`.
...
