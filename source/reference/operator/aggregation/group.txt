====================
$group (aggregation)
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. pipeline:: $group

   Groups documents by some specified expression and outputs to the
   next stage a document for each distinct grouping. The output
   documents contain an ``_id`` field which contains the distinct group
   by key. The output documents can also contain computed fields that
   hold the values of some accumulator expression grouped by the
   :pipeline:`$group`\'s ``_id`` field. :pipeline:`$group` does *not*
   order its output documents.

   The :pipeline:`$group` stage has the following prototype form:

   .. code-block:: javascript

      { $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, ... } }

   The ``_id`` field is *mandatory*; however, you can specify an
   ``_id`` value of null, or any other constant value, to calculate
   accumulated values for all the input documents as a whole.

   The remaining computed fields are *optional* and computed using the
   ``<accumulator>`` operators.

   The ``_id`` and the ``<accumulator>`` expressions can accept any
   valid :ref:`expression <aggregation-expressions>`. For more
   information on expressions, see :ref:`aggregation-expressions`.

Considerations
--------------

Accumulator Operator
~~~~~~~~~~~~~~~~~~~~

The ``<accumulator>`` operator must be one of the following accumulator
operators:

.. include:: /includes/extracts/agg-operators-accumulators-group.rst

.. _group-memory-limit:

``$group`` Operator and Memory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :pipeline:`$group` stage has a limit of 100 megabytes of RAM. By
default, if the stage exceeds this limit, :pipeline:`$group` will
produce an error. However, to allow for the handling of large datasets,
set the :method:`allowDiskUse <db.collection.aggregate()>` option to
``true`` to enable :pipeline:`$group` operations to write to temporary
files. See :method:`db.collection.aggregate()` method and the
:dbcommand:`aggregate` command for details.

Examples
--------

.. _aggregation-group-count:

Calculate Count, Sum, and Average
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Given a collection ``sales`` with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc", "price" : 10, "quantity" : 2, "date" : ISODate("2014-03-01T08:00:00Z") }
   { "_id" : 2, "item" : "jkl", "price" : 20, "quantity" : 1, "date" : ISODate("2014-03-01T09:00:00Z") }
   { "_id" : 3, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-03-15T09:00:00Z") }
   { "_id" : 4, "item" : "xyz", "price" : 5, "quantity" : 20, "date" : ISODate("2014-04-04T11:21:39.736Z") }
   { "_id" : 5, "item" : "abc", "price" : 10, "quantity" : 10, "date" : ISODate("2014-04-04T21:23:13.331Z") }

Group by Month, Day, and Year
`````````````````````````````

The following aggregation operation uses the :pipeline:`$group` stage
to group the documents by the month, day, and year and calculates the
total price and the average quantity as well as counts the documents
per each group:

.. code-block:: javascript

   db.sales.aggregate(
      [
         {
           $group : {
              _id : { month: { $month: "$date" }, day: { $dayOfMonth: "$date" }, year: { $year: "$date" } },
              totalPrice: { $sum: { $multiply: [ "$price", "$quantity" ] } },
              averageQuantity: { $avg: "$quantity" },
              count: { $sum: 1 }
           }
         }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : { "month" : 3, "day" : 15, "year" : 2014 }, "totalPrice" : 50, "averageQuantity" : 10, "count" : 1 }
   { "_id" : { "month" : 4, "day" : 4, "year" : 2014 }, "totalPrice" : 200, "averageQuantity" : 15, "count" : 2 }
   { "_id" : { "month" : 3, "day" : 1, "year" : 2014 }, "totalPrice" : 40, "averageQuantity" : 1.5, "count" : 2 }

Group by ``null``
`````````````````

The following aggregation operation specifies a group ``_id`` of
``null``, calculating the total price and the average quantity as well
as counts for all documents in the collection:

.. code-block:: javascript

   db.sales.aggregate(
      [
         {
           $group : {
              _id : null,
              totalPrice: { $sum: { $multiply: [ "$price", "$quantity" ] } },
              averageQuantity: { $avg: "$quantity" },
              count: { $sum: 1 }
           }
         }
      ]
   )

The operation returns the following result:

.. code-block:: javascript

   { "_id" : null, "totalPrice" : 290, "averageQuantity" : 8.6, "count" : 5 }

.. seealso:: :pipeline:`$count`

.. _aggregation-group-distinct-values:

Retrieve Distinct Values
~~~~~~~~~~~~~~~~~~~~~~~~

Given a collection ``sales`` with the following documents:

.. code-block:: javascript

   { "_id" : 1, "item" : "abc", "price" : 10, "quantity" : 2, "date" : ISODate("2014-03-01T08:00:00Z") }
   { "_id" : 2, "item" : "jkl", "price" : 20, "quantity" : 1, "date" : ISODate("2014-03-01T09:00:00Z") }
   { "_id" : 3, "item" : "xyz", "price" : 5, "quantity" : 10, "date" : ISODate("2014-03-15T09:00:00Z") }
   { "_id" : 4, "item" : "xyz", "price" : 5, "quantity" : 20, "date" : ISODate("2014-04-04T11:21:39.736Z") }
   { "_id" : 5, "item" : "abc", "price" : 10, "quantity" : 10, "date" : ISODate("2014-04-04T21:23:13.331Z") }

The following aggregation operation uses the :pipeline:`$group` stage
to group the documents by the item to retrieve the distinct item values:

.. code-block:: javascript

   db.sales.aggregate( [ { $group : { _id : "$item" } } ] )

The operation returns the following result:

.. code-block:: javascript

  { "_id" : "xyz" }
  { "_id" : "jkl" }
  { "_id" : "abc" }

.. _aggregation-pivot-data:

Pivot Data
~~~~~~~~~~

A collection ``books`` contains the following documents:

.. code-block:: javascript

   { "_id" : 8751, "title" : "The Banquet", "author" : "Dante", "copies" : 2 }
   { "_id" : 8752, "title" : "Divine Comedy", "author" : "Dante", "copies" : 1 }
   { "_id" : 8645, "title" : "Eclogues", "author" : "Dante", "copies" : 2 }
   { "_id" : 7000, "title" : "The Odyssey", "author" : "Homer", "copies" : 10 }
   { "_id" : 7020, "title" : "Iliad", "author" : "Homer", "copies" : 10 }

Group ``title`` by ``author``
`````````````````````````````

The following aggregation operation pivots the data in the ``books``
collection to have titles grouped by authors.

.. code-block:: javascript

   db.books.aggregate(
      [
        { $group : { _id : "$author", books: { $push: "$title" } } }
      ]
   )

The operation returns the following documents:

.. code-block:: javascript

   { "_id" : "Homer", "books" : [ "The Odyssey", "Iliad" ] }
   { "_id" : "Dante", "books" : [ "The Banquet", "Divine Comedy", "Eclogues" ] }

.. _group-stage-pivot-using-ROOT:

Group Documents by ``author``
`````````````````````````````

The following aggregation operation uses the :variable:`$$ROOT <ROOT>`
system variable to group the documents by authors. The resulting
documents must not exceed the :limit:`BSON Document Size` limit.

.. code-block:: javascript

   db.books.aggregate(
      [
        { $group : { _id : "$author", books: { $push: "$$ROOT" } } }
      ]
   )

The operation returns the following documents:

.. code-block:: javascript

   {
     "_id" : "Homer",
     "books" :
        [
          { "_id" : 7000, "title" : "The Odyssey", "author" : "Homer", "copies" : 10 },
          { "_id" : 7020, "title" : "Iliad", "author" : "Homer", "copies" : 10 }
        ]
   }

   {
     "_id" : "Dante",
     "books" :
        [
          { "_id" : 8751, "title" : "The Banquet", "author" : "Dante", "copies" : 2 },
          { "_id" : 8752, "title" : "Divine Comedy", "author" : "Dante", "copies" : 1 },
          { "_id" : 8645, "title" : "Eclogues", "author" : "Dante", "copies" : 2 }
        ]
   }

.. seealso:: The :doc:`/tutorial/aggregation-zip-code-data-set`
   tutorial provides an extensive example of the :pipeline:`$group`
   operator in a common use case.
