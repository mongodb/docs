.. _stream-aggregation:

======================================================
Supported Aggregation Pipeline Stages
======================================================

.. default-domain:: mongodb

.. meta::
   :keywords: atlas stream processing, $source aggregation pipeline stage, $tumblingWindow aggregation pipeline stage, $hoppingWindow aggregation pipeline stage, $merge aggregation pipeline stage, $emit aggregation pipeline stage, $validate aggregation pipeline stage, 
   :description: Learn how to use the extensions to the aggregation pipeline syntax provided by Atlas Stream Processing.

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: includes/atlas-sp/public-preview.rst

{+atlas-sp+} extends the :manual:`aggregation pipeline 
</aggregation>` with stages for processing continuous data streams.
These stages combine with existing aggregation stages built in 
to the default :binary:`mongod <bin.mongod>` process, enabling you to 
perform many of the same operations on continuous data as you can 
perform on data-at-rest.

The following table lists the aggregation pipeline stages unique to
{+atlas-sp+} and those which exist in modified form in {+atlas-sp+}.

.. list-table::
   :header-rows: 1
   :widths: 40 60
   
   * - Aggregation Pipeline Stage
     - Purpose 

   * - :pipeline:`$source`
     - Specifies a streaming data source to consume messages from.

   * - :pipeline:`$validate`
     - Validates the documents of a stream against a user-defined 
       schema.

   * - :ref:`$lookup <stream-agg-pipeline-lookup>`
     - Performs a left outer join to a specified collection to filter
       in documents from the "joined" collection for processing.
     
       This version of the existing :pipeline:`$lookup` stage requires
       that you specify a {+service+} collection in the 
       :ref:`Connection Registry <manage-spi-connection-add>` as the
       value for the ``from`` field.

   * - :pipeline:`$hoppingWindow`
     - Assigns documents from a stream to 
       :ref:`windows <atlas-sp-windows>` with user-defined
       durations and intervals between start times.

   * - :pipeline:`$tumblingWindow`
     - Assigns documents from a stream to non-overlapping, continuous 
       :ref:`windows <atlas-sp-windows>` with user-defined
       durations.

   * - :pipeline:`$emit`
     - Specifies a stream in the connection registry to emit messages 
       to.

   * - :ref:`$merge <stream-agg-pipeline-merge>`
     - A version of the existing :ref:`adf-merge-stage` stage where 
       the value of the ``connectionName`` field must always be the 
       name of a remote collection in the 
       :ref:`Connection Registry <manage-spi-connection-add>`.

.. The following can be uncommented once this stage is supported.
   * - :pipeline:`$validatedSource`
     - Similar to :pipeline:`$validate`, but is bound to a specific
       source, allowing you to define one stage in place of both
       :pipeline:`$source` and :pipeline:`$validate`.

You can also use the following stages supported by all 
``mongod`` processes in your streaming data pipelines:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Aggregation Pipeline Stage
     - Use Conditions

   * - :pipeline:`$addFields`
     - Anywhere

   * - :pipeline:`$match`
     - Anywhere

   * - :pipeline:`$project`
     - Anywhere

   * - :pipeline:`$redact`
     - Anywhere

   * - :pipeline:`$replaceRoot`
     - Anywhere

   * - :pipeline:`$replaceWith`
     - Anywhere

   * - :pipeline:`$set`
     - Anywhere

   * - :pipeline:`$unset`
     - Anywhere

   * - :pipeline:`$unwind`
     - Anywhere

   * - :pipeline:`$group`
     - Only within :pipeline:`$hoppingWindow` or
       :pipeline:`$tumblingWindow` stages.

   * - :pipeline:`$sort`
     - Only within :pipeline:`$hoppingWindow` or
       :pipeline:`$tumblingWindow` stages.

   * - :pipeline:`$limit`
     - Only within :pipeline:`$hoppingWindow` or
       :pipeline:`$tumblingWindow` stages.

   * - :pipeline:`$count`
     - Only within :pipeline:`$hoppingWindow` or
       :pipeline:`$tumblingWindow` stages.
