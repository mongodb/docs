.. index:: write operations
.. index:: crud; write operations

=========================
Write Operations Overview
=========================

.. default-domain:: mongodb

A write operation is any operation that creates or modifies data in the
MongoDB instance. In MongoDB, write operations target a single
:term:`collection`. All write operations in MongoDB are atomic on the
level of a single :term:`document`.

There are three classes of write operations in MongoDB: :ref:`insert
<write-op-insert>`, :ref:`update <write-op-update>`, and :ref:`delete
<write-op-delete>`. Insert operations add new documents to a collection.
Update operations modify existing documents, and delete operations delete
documents from a collection. No insert, update, or delete can affect more
than one document atomically.

For the update and remove operations, you can specify criteria, or
filters, that identify the documents to update or remove. These
operations use the same query syntax to specify the criteria as
:doc:`read operations </core/read-operations>`.

MongoDB allows applications to determine the acceptable level of
acknowledgement required of write operations. See
:doc:`/core/write-concern` for more information.

.. _write-op-insert:

Insert
------

MongoDB provides the following methods for inserting documents into a 
collection:

- :method:`db.collection.insertOne()`

- :method:`db.collection.insertMany()`

- :method:`db.collection.insert()`

.. _write-op-insertOne:

insertOne
~~~~~~~~~

.. versionadded:: 3.2

:method:`db.collection.insertOne()` inserts a *single* document

The following diagram highlights the components of the MongoDB 
:method:`~db.collection.insertOne()` operation:

.. include:: /images/crud-annotated-mongodb-insertOne.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-insertOne.rst

.. example::

   The following operation inserts a new document into the ``users``
   collection. The new document has three fields ``name``, ``age``, and
   ``status``. Since the document does not specify an ``_id`` field, 
   MongoDB adds the ``_id`` field and a generated value to the new document.
   See :ref:`write-op-insert-behavior`. 

   .. code-block:: javascript

      db.users.insertOne(
         {
            name: "sue",
            age: 26,
            status: "pending"
         }
      )

For more information and examples, see :method:`db.collection.insertOne()`.

.. _write-op-insertMany:

insertMany
~~~~~~~~~~

.. versionadded:: 3.2

:method:`db.collection.insertMany()` inserts *multiple* documents

The following diagram highlights the components of the MongoDB 
:method:`~db.collection.insertMany()` operation:

.. include:: /images/crud-annotated-mongodb-insertMany.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-insertMany.rst

.. example::

   The following operation inserts three new documents into the ``users``
   collection. Each document has three fields ``name``, ``age``, and
   ``status``. Since the documents do not specify an ``_id`` field, 
   MongoDB adds the ``_id`` field and a generated value to each document.
   See :ref:`write-op-insert-behavior`. 

   .. code-block:: javascript

      db.users.insertMany( 
         [
            { name: "sue", age: 26, status: "pending" },
            { name: "bob", age: 25, status: "enrolled" },
            { name: "ann", age: 28, status: "enrolled" }
         ]
      )

For more information and examples, see :method:`db.collection.insertMany()`.

.. _write-op-insert-method:

insert
~~~~~~

In MongoDB, the :method:`db.collection.insert()` method adds new
:term:`documents <document>` to a collection.

The following diagram highlights the components of a MongoDB insert
operation:

.. include:: /images/crud-annotated-mongodb-insert.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-insert.rst

.. example::

   The following operation inserts a new document into the ``users``
   collection. The new document has three fields ``name``, ``age``, and
   ``status``. Since the document does not specify an ``_id`` field, 
   MongoDB adds the ``_id`` field and a generated value to the new document. 
   See :ref:`write-op-insert-behavior`. 

   .. code-block:: javascript

      db.users.insert(
         {
            name: "sue",
            age: 26,
            status: "A"
         }
      )

For more information and examples, see :method:`db.collection.insert()`.

.. _write-op-insert-behavior:

Insert Behavior
~~~~~~~~~~~~~~~

The :term:`_id` field is required in every MongoDB :term:`document`.  
The ``_id`` field is like the document's :term:`primary key`. 

If you add a new document *without* the :term:`_id` field, the client
library or the :program:`mongod` instance adds an ``_id`` field and
populates the field with a unique :term:`ObjectId <objectid>`. If you pass in 
an ``_id`` value that already exists, an exception is thrown.

The ``_id`` 
field is :term:`uniquely indexed <unique index>` by default in every 
collection.

Other Methods to Add Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :method:`~db.collection.updateOne()`, 
:method:`~db.collection.updateMany()`, and 
:method:`~db.collection.replaceOne()` operations accept the ``upsert`` 
parameter. When ``upsert : true``, if no document in the collection matches 
the filter, a new document is created based on the information passed to the 
operation. See :ref:`write-operations-upsert-behavior`. 

.. _write-op-update:

Update
------

MongoDB provides the following methods for updating documents in a collection:

- :method:`db.collection.updateOne()` updates a *single* document
- :method:`db.collection.updateMany()` updates *multiple* documents
- :method:`db.collection.replaceOne()` replaces a *single* document
- :method:`db.collection.update()` updates or replaces either a *single* 
  document or, if ``multi : true``, multiple documents

.. _write-op-updateOne:

updateOne
~~~~~~~~~

.. versionadded:: 3.2

The following diagram highlights the components of the MongoDB 
:method:`~db.collection.updateOne()` operation:

.. include:: /images/crud-annotated-mongodb-updateOne.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-updateOne.rst

.. example::

   This update operation on the ``users`` collection sets the
   ``status`` field to ``reject`` for the *first* document that matches the 
   filter of ``age`` less than ``18``. See 
   :ref:`write-op-update-behavior`.

   .. code-block:: javascript

      db.users.updateOne(
         { age: { $lt: 18 } },
         { $set: { status: "reject" } }
      )

For more information and examples, see :method:`db.collection.updateOne()`.

.. _write-op-updateMany:

updateMany
~~~~~~~~~~

.. versionadded:: 3.2

The following diagram highlights the components of the MongoDB 
:method:`~db.collection.updateMany()` operation:

.. include:: /images/crud-annotated-mongodb-updateMany.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-updateMany.rst

.. example::

   This update operation on the ``users`` collection sets the
   ``status`` field to ``reject`` for *all* documents that match the filter
   of ``age`` less than ``18``. See 
   :ref:`write-op-update-behavior`.

   .. code-block:: javascript

      db.users.updateMany(
         { age: { $lt: 18 } },
         { $set: { status: "reject" } }
      )

For more information and examples, see :method:`db.collection.updateMany()`.

.. _write-op-replaceOne:

replaceOne
~~~~~~~~~~

.. versionadded:: 3.2

The following diagram highlights the components of the MongoDB 
:method:`~db.collection.replaceOne()` operation:

.. include:: /images/crud-annotated-mongodb-replaceOne.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-replaceOne.rst

.. example::

   This replace operation on the ``users`` collection replaces the *first* 
   document that matches the filter of ``name`` is ``sue`` with a new 
   document. See :ref:`write-op-replace-behavior`.

   .. code-block:: javascript

      db.users.replaceOne(
         { name: "sue" },
         { name: "amy", age : 25, score: "enrolled" }
      )

For more information and examples, see :method:`db.collection.replaceOne()`.

update
~~~~~~

In MongoDB, the :method:`db.collection.update()` method modifies
existing :term:`documents <document>` in a :term:`collection`. The
:method:`db.collection.update()` method can accept query criteria to
determine which documents to update as well as an options document that
affects its behavior, such as the ``multi`` option to update multiple
documents.

Operations performed by an update are atomic within a single document. For
example, you can safely use the :update:`$inc` and :update:`$mul` operators to
modify frequently-changed fields in concurrent applications.

The following diagram highlights the components of a MongoDB update
operation:

.. include:: /images/crud-annotated-mongodb-update.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-update.rst

.. example::

   .. code-block:: javascript

      db.users.update(
         { age: { $gt: 18 } },
         { $set: { status: "A" } },
         { multi: true }
      )

   This update operation on the ``users`` collection sets the
   ``status`` field to ``A`` for the documents that match the criteria
   of ``age`` greater than ``18``.

For more information, see :method:`db.collection.update()` and
:ref:`update() Examples <update-method-examples>`.

.. _write-op-update-behavior:
.. _update-multiple-documents:

Update Behavior
~~~~~~~~~~~~~~~

:method:`~db.collection.updateOne()` and :method:`~db.collection.updateMany()` 
use :doc:`/reference/operator/update/` such as :update:`$set`, 
:update:`$unset`, or :update:`$rename` to modify existing documents.

:method:`~db.collection.updateOne()` will update the *first* document that is 
returned by the filter. :method:`db.collection.findOneAndUpdate()` 
offers :method:`sorting <cursor.sort()>` of the filter results,
allowing a degree of control over which document is updated.

By default, the :method:`db.collection.update()` method updates a
**single** document. However, with the ``multi`` option,
:method:`~db.collection.update()` can update all documents in a
collection that match a query.

The :method:`db.collection.update()` method either updates specific
fields in the existing document or replaces the document. See
:method:`db.collection.update()` for details as well as examples.

.. include:: /includes/fact-update-field-order.rst

.. _write-op-replace-behavior:

Replace Behavior
~~~~~~~~~~~~~~~~

:method:`~db.collection.replaceOne()` cannot use 
:doc:`/reference/operator/update/` in the replacement document. The 
replacement document must consist of only ``<field> : <value>`` assignments.

:method:`~db.collection.replaceOne()` will replace the *first* document that 
matches the filter. :method:`db.collection.findOneAndReplace()` 
offers :method:`sorting <cursor.sort()>` of the filter results, 
allowing a degree of control over which document is replaced.

You cannot replace the ``_id`` field.

.. _write-operations-upsert-behavior:

Update Behavior with the ``upsert`` Option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If :method:`~db.collection.update()`, 
:method:`~db.collection.updateOne()`, 
:method:`~db.collection.updateMany()`, or 
:method:`~db.collection.replaceOne()` include ``upsert : true`` **and** no 
documents match the filter portion of the operation, then the operation 
creates a new document and inserts it. If there are matching documents, then 
the operation modifies the matching document or documents.

.. _write-op-delete:

Delete
------
 
MongoDB provides the following methods for deleting documents from a 
collection:
   
- :method:`db.collection.deleteOne()` deletes a *single* document
- :method:`db.collection.deleteMany()` deletes *multiple* documents
- :method:`db.collection.remove()` deletes either *multiple* documents or 
  a *single* document if ``justOne : true``.
   
.. _write-op-deleteOne:

deleteOne
~~~~~~~~~

.. versionadded:: 3.2

The following diagram highlights the components of the MongoDB 
:method:`~db.collection.deleteOne()` operation:

.. include:: /images/crud-annotated-mongodb-deleteOne.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-deleteOne.rst

.. example::

   This delete operation on the ``users`` collection deletes the *first* 
   document where ``name`` is ``sue``. See 
   :ref:`write-op-delete-behavior`.

   .. code-block:: javascript

      db.users.deleteOne(
         { status: "reject" }
      )

For more information and examples, see :method:`db.collection.deleteOne()`.

.. _write-op-deleteMany:

deleteMany
~~~~~~~~~~

.. versionadded:: 3.2

The following diagram highlights the components of the MongoDB 
:method:`~db.collection.deleteMany()` operation:

.. include:: /images/crud-annotated-mongodb-deleteMany.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-deleteMany.rst

.. example::

   This delete operation on the ``users`` collection deletes *all* 
   documents where ``status`` is ``reject``.
   See :ref:`write-op-delete-Behavior`. 

   .. code-block:: javascript

      db.users.deleteMany( 
         { status: "reject" }
      )

For more information and examples, see :method:`db.collection.deleteMany()`.

.. _write-op-remove:

remove
~~~~~~

In MongoDB, the :method:`db.collection.remove()` method deletes
documents from a collection. The :method:`db.collection.remove()`
method accepts a query criteria to determine which documents to remove.

The following diagram highlights the components of a MongoDB remove
operation:

.. include:: /images/crud-annotated-mongodb-remove.rst

The following diagram shows the same query in SQL:

.. include:: /images/crud-annotated-sql-delete.rst

.. example::

   .. code-block:: javascript

      db.users.remove(
         { status: "D" }
      )

   This delete operation on the ``users`` collection removes all
   documents that match the criteria of ``status`` equal to ``D``.

For more information, see :method:`db.collection.remove()` method and
:doc:`/tutorial/remove-documents`.

.. _write-op-delete-behavior:

Delete Behavior
~~~~~~~~~~~~~~~

:method:`~db.collection.deleteOne()` will delete the *first* document that 
matches the filter. :method:`db.collection.findOneAndDelete()` 
offers :method:`sorting <cursor.sort()>` of the filter results, 
allowing a degree of control over which document is deleted.

.. _write-op-remove-behavior:

Remove Behavior
~~~~~~~~~~~~~~~

By default, :method:`db.collection.remove()` method removes all
documents that match its query. If the optional ``justOne`` parameter is set 
to ``true``, :method:`~db.collection.remove()` will limit the delete operation 
to a single document.

Additional Methods
------------------

The :method:`db.collection.save()` method can either update an existing
document or insert a document if the document cannot be found by the
``_id`` field. See :method:`db.collection.save()` for more information
and examples.

Bulk Write
~~~~~~~~~~

MongoDB provides the :method:`db.collection.bulkWrite()` method for executing 
multiple write operations in a group. Each write operation is still atomic on 
the level of a single :term:`document`. 

.. example::
   
   The following :method:`~db.collection.bulkWrite()` inserts several 
   documents, performs an update, and then deletes several documents.
   
   .. code-block:: javascript
   
      db.collection.bulkWrite(
         [
            { insertOne : { "document" : { name : "sue", age : 26 } } },
            { insertOne : { "document" : { name : "joe", age : 24 } } },
            { insertOne : { "document" : { name : "ann", age : 25 } } },
            { insertOne : { "document" : { name : "bob", age : 27 } } },
            { updateMany: { 
               "filter" : { age : { $gt : 25} },
               "update" : { $set : { "status" : "enrolled" } } 
               } 
            },
            { deleteMany : { "filter" : { "status" : { $exists : true } } } }
         ]
      )
