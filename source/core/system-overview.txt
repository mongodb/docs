======================
On Prem MMS Components
======================

.. default-domain:: mongodb

See :doc:`/core/deployments` for diagrams of potential deployment
architectures and :doc:`/reference/on-prem` for system reference.

.. _mms-application-package:

MMS Application Package
-----------------------

The front-end package contains the UI the end user interacts with, as
well as HTTPS services used by the Monitoring Agent and Backup Agent
to transmit data to and from MMS. All three components start
automatically when the front-end MMS package starts. These components
are stateless. Multiple instances of the front-end package can run as
long as each instance has the same configuration. Users and agents can
interact with any instance.

For MMS Monitoring, you **only** need to install the application
package. The application package consists of the following components:

- MMS Application and Monitoring Server

- MMS Backup Ingestion Server

- MMS Backup Alerts Service

.. _mms-http-service:

MMS HTTP Service
~~~~~~~~~~~~~~~~

The HTTP server runs on port ``8080`` by default.  This component
contains the web interface for managing MMS users, monitoring of
MongoDB servers, and managing those serverâ€™s backups. Users can sign
up, create new accounts and groups, as well as join an existing
group. The MMS Web Server also contains endpoints used by the MMS
Agent to report back information on monitored MongoDB instances.

.. _backup-http-service:

Backup HTTP Service
~~~~~~~~~~~~~~~~~~~

The HTTP server runs on port ``8081`` by default. The Backup HTTP Service
contains a set of web services used by the Backup Agent. The agent
retrieves its configuration from this service. The agent also sends
back initial sync and oplog data through this interface. There is no
user interaction with this service. The Backup HTTP service runs on
port ``8081`` by default.

The Backup HTTP Service exposes an endpoint that reports on the state
of the service and the underlying database to support monitoring of
the Backup service. This status also checks the connections from the
service to the :ref:`MMS Application Database
<mms-application-database>` and the :ref:`MMS Backup Blockstore
Database <mms-backup-blockstore-database>`. See
:ref:`backup-http-service-endpoint`.

.. _backup-alert-service:

Backup Alert Service
~~~~~~~~~~~~~~~~~~~~

The Backup Alert Service watches the state of all agents, local copies
of backed up databases, and snapshots. It sends email alerts as
problems occur. The Backup Alert Service exposes a health-check endpoint.
See :ref:`backup-alert-service-endpoint`.

Backup Daemon Package
---------------------

.. _backup-daemon:

Backup Daemon
~~~~~~~~~~~~~

The Backup Daemon is the only component in the Backup Daemon
Package. The Backup Daemon manages all local copies of backed up
database (i.e. HEADs) as well as backup snapshots. The daemon
does scheduled work based on data coming in to the Backup HTTP Service
from the Backup Agents. No client applications talk directly to the
daemon. Its state and job queues come from the
:ref:`MMS Application Database <mms-application-database>`.

The daemon creates a local copy of the backed up database on in its
local storage in the :setting:`rootDirectory` path. If you run
multiple Backup Daemons, when you add a new backup the system selects
a daemon for that instance and the local copy of that instance resides
with that Daemon.

The daemon will take scheduled snapshots and store the snapshots in
the Snapshot Storage (also known as the :ref:`Blockstore
<mms-backup-blockstore-database>`). It will also act
on restore requests by retrieving data from the Blockstore and
delivering it to the requested destination.

The server running the Backup Daemon acts as a :manual:`hidden secondary
</core/replica-set-hidden-member>` for every :term:`replica set` assigned
to it.

:ref:`Multiple Backup Daemons <multiple-backup-daemons>` can increase your
storage by scaling horizontally and can provide **manual** failover.

The Backup Daemon exposes a health-check endpoint. See
:ref:`backup-daemon-endpoint`.

.. _backing-database:

Data Storage
------------

MMS uses dedicated MongoDB databases to store the MMS Application's
monitoring data and the Backup Service's snapshots. The "backing
databases," run on separate dedicated replica sets, which are the
:doc:`backing MongoDB instances </tutorial/prepare-backing-mongodb-instances>`.

You can only use backing MongoDB instances for than storing MMS
data. MMS requires that you use separate replica sets for each backing
database and that these instances *only* host MMS data.

The backing databases are not part of the MMS package installation. Set
them up separately and record their locations in the MMS configuration
files.

.. _mms-application-database:

MMS Application Database
~~~~~~~~~~~~~~~~~~~~~~~~

This database contains application metadata that is used by the :ref:`MMS
monitoring application <mms-application-package>`. The database stores:

- Monitoring data collected from Monitoring Agents.

- Meta data for MMS users, groups, hosts, monitoring data, and backup
  state.

For topology and specifications, see
:ref:`mms-application-database-specifications`.

.. _mms-backup-blockstore-database:

MMS Backup Blockstore Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This database contains all snapshots of databases backed up
and oplogs retained for point in time restores. The blockstore
database
will require disk space proportional to the backed up databases.

Configure the Blockstore as a replica set to provide durability and
automatic failover to the backup and restore components. See
:doc:`/tutorial/prepare-backing-mongodb-instances`
for more information.

You **cannot** backup the blockstore database with MMS Backup.

Additional Information
----------------------

To learn more about |backup| requirements and |backup|, see
:ref:`faq-backup` and the :doc:`/tutorial/nav/backup-agent`.
