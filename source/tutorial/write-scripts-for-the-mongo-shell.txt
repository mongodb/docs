=====================================
Write Scripts for the ``mongo`` Shell
=====================================

.. default-domain:: mongodb

You can write scripts for the :program:`mongo` shell in JavaScript
that manipulate data in MongoDB or perform administrative
operation. For more information about the :program:`mongo` shell see
:doc:`/mongo`, and see the :ref:`running-js-scripts-in-mongo-on-mongod-host`
section for more information about using these :program:`mongo`
script.

This tutorial provides an introduction to writing JavaScript that uses
the :program:`mongo` shell to access MongoDB.

.. _mongo-shell-new-connections:

Opening New Connections
-----------------------

From the :program:`mongo` shell or from a JavaScript file, you can
instantiate database connections using the :method:`Mongo()`
constructor:

.. code-block:: javascript

   new Mongo()
   new Mongo(<host>)
   new Mongo(<host:port>)

Consider the following example that instantiates a new connection to
the MongoDB instance running on localhost on the default port and sets
the global ``db`` variable to ``myDatabase`` using the
:method:`~Mongo.getDB()` method:

.. code-block:: javascript

   conn = new Mongo();
   db = conn.getDB("myDatabase");

Additionally, you can use the :method:`connect()` method
to connect to the MongoDB instance. The following example connects to
the MongoDB instance that is running on ``localhost`` with the
non-default port ``27020`` and set the global ``db`` variable:

.. code-block:: javascript

   db = connect("localhost:27020/myDatabase");

If you create new connections inside a :ref:`JavaScript file
<mongo-shell-javascript-file>`:

- You **cannot** use ``use <dbname>`` inside the file to set the ``db``
  global variable.

- To set the ``db`` global variable, use the :method:`~Mongo.getDB()`
  method or the :method:`connect()` method. You can assign the
  database reference to a variable other than ``db``.

- Additionally, inside the script, you would need to call
  :method:`db.getLastErrorObj()` or :method:`db.getLastError()`
  explicitly to wait for the result of :doc:`write
  operations</core/write-operations>`.

.. _mongo-shell-scripting:

Scripting
---------

From the command line, use :program:`mongo` to evaluate JavaScript.

``--eval`` option
~~~~~~~~~~~~~~~~~

Use the :option:`--eval <mongo --eval>` option to :program:`mongo` to
pass the shell a JavaScript fragment, as in the following:

.. code-block:: sh

   mongo test --eval "printjson(db.getCollectionNames())"

This returns the output of :method:`db.getCollectionNames()` using the
:program:`mongo` shell connected to the :program:`mongod` or
:program:`mongos` instance running on port ``27017`` on the
``localhost`` interface.

.. _mongo-shell-javascript-file:

evaluate a javascript file
~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify a ``.js`` file to the :program:`mongo` shell, and
:program:`mongo` will evaluate the javascript directly. Consider the
following example:

.. code-block:: sh

   mongo localhost:27017/test myjsfile.js

This operation evaluates the ``myjsfile.js`` script in a
:program:`mongo` shell that connects to the ``test`` :term:`database`
on the :program:`mongod` instance accessible via the ``localhost``
interface on port ``27017``.

Alternately, you can specify the mongodb connection parameters inside
of the javascript file using the ``Mongo()`` constructor. See
:ref:`mongo-shell-new-connections` for more information.
