.. meta::
   :robots: noindex, nosnippet

====================
Write Data - SwiftUI
====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Perform a Quick Write
---------------------

In addition to performing writes inside a transaction block, the Realm Swift 
SDK offers a convenience feature to enable quick writes without explicitly 
performing a write transaction.

When you use the ``@ObservedRealmObject`` or ``@ObservedResults`` property 
wrappers, you can implicitly open a write transaction. Use the ``$`` operator
to create a two-way binding to the state object. Then, when you make changes 
to the bound object or collection, you initiate an implicit write.

The Realm SwiftUI property wrappers work with :ref:`frozen data 
<ios-frozen-objects>` to provide thread safety. When you use ``$`` to 
create a two-way binding, the Realm Swift SDK manages thawing the 
frozen objects so you can write to them. 

Update an Object's Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this example, we create a two-way binding with one of the state object's
properties. ``$dog.favoriteToy`` creates a binding to the model Dog 
object's ``favoriteToy`` property

When the app user updates that field in this example, Realm
opens an implicit write transaction and saves the new value to the database.

.. literalinclude:: /examples/generated/swiftui/QuickWrite.snippet.quick-write-property.swift
   :language: swift

Add or Remove Objects in an ObservedResults Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While a regular :ref:`Realm Results collection <ios-results-collections>`
is immutable, :swift-sdk:`ObservedResults <Structs/ObservedResults.html>` 
is a mutable collection that allows you to perform writes using a two-way 
binding. When you update the bound collection, Realm opens an implicit write 
transaction and saves the changes to the collection.

In this example, we remove an element from the results set using 
``$dogs.remove`` in the ``onDelete``. Using the ``$dogs`` here creates a 
two-way binding to a ``BoundCollection`` that lets us mutate the 
``@ObservedResults`` ``dogs`` collection.

We add an item to the results using ``$dogs.append`` in the 
``addDogButton``. 

These actions write directly to the ``@ObservedResults`` collection.

.. literalinclude:: /examples/generated/swiftui/QuickWrite.snippet.update-observed-results.swift
   :language: swift
   :emphasize-lines: 15, 27

.. include:: /includes/note-observedresults-swiftui-view.rst

Append an Object to a List
~~~~~~~~~~~~~~~~~~~~~~~~~~

When you have a two-way binding with an ``@ObservedRealmObject`` that has 
a list property, you can add new objects to the list. 

In this example, the ``Person`` object has a list property that forms a 
:ref:`to-many relationship <ios-to-many-relationship>` with one or more dogs.

.. code-block:: swift

   class Person: Object, ObjectKeyIdentifiable {
      @Persisted(primaryKey: true) var _id: ObjectId
      @Persisted var firstName = ""
      @Persisted var lastName = ""
      ...
      @Persisted var dogs: List<Dog>
   }

When the user presses the ``Save`` button, this:

- Creates a ``Dog`` object with the details that the user has entered
- Appends the ``Dog`` object to the ``Person`` object's ``dogs`` list

.. include:: /examples/generated/swiftui/CreateObjects.snippet.add-dog-to-person-view.swift.rst

Use Create to Copy an Object Into the Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There may be times when you create a new object, and set one of its properties
to an object that already exists in the realm. Then, when you go to add the 
new object to the realm, you see an error similar to: 

.. code-block:: shell

   Object is already managed by another Realm. Use create instead to copy it into this Realm.

When this occurs, you can use the :swift-sdk:`.create 
<Structs/Realm.html#/s:10RealmSwift0A0V6create_5value6updatexxm_ypAC12UpdatePolicyOtSo0aB6ObjectCRbzlF>` 
method to initialize the object, and use ``modified: .update`` to set its
property to the existing object.

.. example::

   Consider a version of the DoggoDB ``Dog`` model where the ``favoriteToy``
   property isn't just a ``String``, but is an optional ``DogToy`` object:

   .. code-block:: swift

      class Dog: Object, ObjectKeyIdentifiable {
         @Persisted(primaryKey: true) var _id: UUID
         @Persisted var name = ""
         ...
         @Persisted var favoriteToy: DogToy?
         ...
      }

   When your app goes to create a new ``Dog`` object, perhaps it checks to see
   if the ``DogToy`` already exists in the realm, and then set the ``favoriteToy``
   property to the existing dog toy. 
   
   When you go to append the new ``Dog`` to the ``Person`` object, you may 
   see an error similar to:

   .. code-block:: shell

      Object is already managed by another Realm. Use create instead to copy it into this Realm.
   
   The ``Dog`` object remains unmanaged until you append it to the ``Person`` 
   object's ``dogs`` property. When the Realm Swift SDK checks the ``Dog`` 
   object to find the realm that is currently managing it, it finds nothing. 
   
   When you use the ``$`` notation to perform a quick write that appends the 
   ``Dog`` object to the ``Person`` object, this write uses the realm it has 
   access to in the view. This is a realm instance implicitly opened by 
   the ``@ObservedRealmObject`` or ``@ObservedResults`` property wrapper. 
   The existing ``DogToy`` object, however, may be managed by a different 
   realm instance.

   To solve this error, use the :swift-sdk:`.create 
   <Structs/Realm.html#/s:10RealmSwift0A0V6create_5value6updatexxm_ypAC12UpdatePolicyOtSo0aB6ObjectCRbzlF>` 
   method when you initialize the ``Dog`` object, and use 
   ``modified: .update`` to set its ``favoriteToy`` value to the existing 
   object:

   .. literalinclude:: /examples/generated/code/start/SwiftUI.snippet.copy-to-realm-with-create.swift
      :language: swift

Perform an Explicit Write
-------------------------

In some cases, you may want or need to explicitly perform a write transaction
instead of using the implicit ``$`` to perform a quick write. You may want 
to do this when:

- You need to look up additional objects to perform a write
- You need to perform a write to objects you don't have access to in the view

If you pass an object you are observing with ``@ObservedRealmObject`` or 
``@ObservedResults`` into a function where you perform an explicit write 
transaction that modifies the object, you must thaw it first. 

.. literalinclude:: /examples/generated/code/start/SwiftUI.snippet.thaw-the-passed-in-object.swift
   :language: swift

You can access the realm that is managing the object or objects by calling
``.realm`` on the object or collection: 

.. literalinclude:: /examples/generated/code/start/SwiftUI.snippet.get-an-object-realm.swift
   :language: swift

Because the SwiftUI property wrappers use frozen objects, you must thaw
the realm before you can write to it.

.. example::

   Consider a version of the DoggoDB app where a ``Company`` object
   has a list of ``Employee`` objects. Each ``Employee`` has a list of
   ``Dog`` objects. But for business reasons, you also wanted to have a 
   list of ``Dog`` objects available directly on the ``Company`` object, 
   without being associated with an ``Employee``. The model might look 
   something like:

   .. literalinclude:: /examples/generated/code/start/SwiftUI.snippet.swiftui-company-model.swift
      :language: swift
   
   Consider a view where you have access to the ``Company`` object, but 
   want to perform an explicit write to add an existing dog to an existing 
   employee. Your function might look something like:

   .. literalinclude:: /examples/generated/code/start/SwiftUI.snippet.write-with-swiftui-observed-realm-object.swift
      :language: swift
