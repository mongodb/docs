#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-model-design.txt:5
msgid "Data Model Design"
msgstr "数据模型设计"

#: ../source/core/data-model-design.txt:15
msgid ""
"Effective data models support your application needs. The key consideration "
"for the structure of your documents is the decision to :ref:`embed <data-"
"modeling-embedding>` or to :ref:`use references <data-modeling-"
"referencing>`."
msgstr ""
"一个高效的数据模型能够很好的满足你应用程序的需求。设计一个文档数据结构最关键的考量就是"
"决定是否使用 :ref:`embed <data-modeling-embedding>` "
"还是 :ref:`引用 <data-modeling-referencing>`。"

#: ../source/core/data-model-design.txt:23
msgid "Embedded Data Models"
msgstr "内嵌式数据模型"

#: ../source/core/data-model-design.txt:25
msgid ""
"With MongoDB, you may embed related data in a single structure or document. "
"These schema are generally known as \"denormalized\" models, and take "
"advantage of MongoDB's rich documents. Consider the following diagram:"
msgstr ""
"在MongoDB里面，你可以把相关的数据包括在一个单个的结构或者文档下面。"
"这样的数据模式也叫做 \"非规范化\" 模式，它充分利用了MongoDB的灵活文档格式的功能。"
"以下图为例："

#: ../source/core/data-model-design.txt:32
msgid ""
"Embedded data models allow applications to store related pieces of "
"information in the same database record. As a result, applications may need "
"to issue fewer queries and updates to complete common operations."
msgstr ""
"内嵌数据可以让应用程序把相关的数据保存在同一条数据库记录里面。这样一来，应用程序"
"就可以发送较少的请求给MongoDB数据库来完成常用的查询及更新请求。"

#: ../source/core/data-model-design.txt:36
msgid "In general, use embedded data models when:"
msgstr "一般来说，下述情况建议使用内嵌数据："

#: ../source/core/data-model-design.txt:38
msgid ""
"you have \"contains\" relationships between entities. See :ref:`data-"
"modeling-example-one-to-one`."
msgstr ""
"数据对象之间有 \"contains\" (包含) 关系。 参见"
" :ref:`data-modeling-example-one-to-one`。"

#: ../source/core/data-model-design.txt:41
msgid ""
"you have one-to-many relationships between entities. In these relationships "
"the \"many\" or child documents always appear with or are viewed in the "
"context of the \"one\" or parent documents.  See :ref:`data-modeling-"
"example-one-to-many`."
msgstr ""
"数据对象之间有一对多的关系。 这些情况下 \"多个\"或者子文档会经常和父文档一起被"
"显示和查看。请参见 :ref:`data-modeling-example-one-to-many`。"

#: ../source/core/data-model-design.txt:46
msgid ""
"In general, embedding provides better performance for read operations, as "
"well as the ability to request and retrieve related data in a single "
"database operation. Embedded data models make it possible to update related "
"data in a single atomic write operation."
msgstr ""
"通常情况下，内嵌数据会对读操作有比较好的性能提高，也可以使应用程序在一个"
"单个操作就可以完成对数据的读取。 同时，内嵌数据也对更新相关数据提供了一个原子性写操作。"

#: ../source/core/data-model-design.txt:51
msgid ""
"However, embedding related data in documents may lead to situations where "
"documents grow after creation. With the MMAPv1 storage engine, document "
"growth can impact write performance and lead to data fragmentation."
msgstr ""

#: ../source/core/data-model-design.txt:56
msgid ""
"In version 3.0.0, MongoDB uses :ref:`power-of-2-allocation` as the default "
"allocation strategy for MMAPv1 in order to account for document growth, "
"minimizing the likelihood of data fragmentation. See :ref:`power-"
"of-2-allocation` for details. Furthermore, documents in MongoDB must be "
"smaller than the :limit:`maximum BSON document size <BSON Document Size>`. "
"For bulk binary data, consider :doc:`GridFS </core/gridfs>`."
msgstr ""

#: ../source/core/data-model-design.txt:64
msgid ""
"To interact with embedded documents, use :term:`dot notation` to \"reach "
"into\" embedded documents. See :ref:`query for data in arrays <read-"
"operations-arrays>` and :ref:`query data in embedded documents <read-"
"operations-embedded-documents>` for more examples on accessing data in "
"arrays and embedded documents."
msgstr ""
"当需要访问内嵌的数据时，你可以使用 :term:`dot notation` 。 "
"欲了解如何访问数组内数据或内嵌文档数据，参见 "
" :ref:`数组内数据查询 <read-operations-arrays>` 以及 "
" :ref:`内嵌文档数据查询 <read-operations-subdocuments>` 。"
""

#: ../source/core/data-model-design.txt:73
msgid "Normalized Data Models"
msgstr "规范化数据模型"

#: ../source/core/data-model-design.txt:75
msgid ""
"Normalized data models describe relationships using :doc:`references "
"</reference/database-references>` between documents."
msgstr ""
"规范化数据模型指的是通过使用 :doc:`引用 </reference/database-references>` "
"来表达对象之间的关系。"

#: ../source/core/data-model-design.txt:80
msgid "In general, use normalized data models:"
msgstr "一般来说，在下述情况下可以使用规范化模型："

#: ../source/core/data-model-design.txt:82
msgid ""
"when embedding would result in duplication of data but would not provide "
"sufficient read performance advantages to outweigh the implications of the "
"duplication."
msgstr ""
"当内嵌数据会导致很多数据的重复，并且读性能的优势又不足于盖过数据重复的弊端时候。"

#: ../source/core/data-model-design.txt:86
msgid "to represent more complex many-to-many relationships."
msgstr "需要表达比较复杂的多对多关系的时候。"

#: ../source/core/data-model-design.txt:88
msgid "to model large hierarchical data sets."
msgstr "大型多层次结构数据集。"

#: ../source/core/data-model-design.txt:90
msgid ""
"References provides more flexibility than embedding. However, client-side "
"applications must issue follow-up queries to resolve the references. In "
"other words, normalized data models can require more round trips to the "
"server."
msgstr ""

#: ../source/core/data-model-design.txt:95
msgid ""
"See :ref:`data-modeling-publisher-and-books` for an example of referencing. "
"For examples of various tree models using references, see "
":doc:`/applications/data-models-tree-structures`."
msgstr ""
"关于引用的例子，参见 :ref:`data-modeling-publisher-and-books` 。"
"关于使用引用的树结构模型的例子，参见 :doc:`/applications/data-models-tree-structures`。"

#: ../source/includes/extracts/additional-resources-data-model-design.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:6
msgid ""
"`Thinking in Documents Part 1 (Blog Post) <https://www.mongodb.com/blog/post"
"/thinking-documents-part-1?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:7
msgid ""
"`Thinking in Documents (Presentation) <http://www.mongodb.com/presentations"
"/webinar-back-basics-1-thinking-documents?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:8
msgid ""
"`Schema Design for Time Series Data (Presentation) "
"<http://www.mongodb.com/presentations/webinar-time-series-data-"
"mongodb?jmp=docs>`_"
msgstr ""
"引用比内嵌要更加灵活一些。 但客户端应用必须使用二次查询来解析文档内包含的引用。"
"换句话说，对同样的操作来说，规范化模式会导致更多的网络请求发送到数据库服务器端。"


#: ../source/includes/extracts/additional-resources-data-model-design.rst:9
msgid ""
"`Socialite, the Open Source Status Feed - Storing a Social Graph "
"(Presentation) <http://www.mongodb.com/presentations/socialite-open-source-"
"status-feed-part-2-managing-social-graph?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-model-design.rst:10
msgid ""
"`MongoDB Rapid Start Consultation Services "
"<https://www.mongodb.com/products/consulting?jmp=docs#rapid_start>`_"
msgstr ""

#: ../source/core/data-model-design.txt:0
msgid "On this page"
msgstr ""
