---
title: "Launch the ``mongosh`` Shell."
ref: launch-mongosh-shell
level: 4
content: |

  Create a ``mongosh`` session without connecting to a running database
  by using the :option:`--nodb` option:

  .. code-block:: javascript

     mongosh --nodb

---
title: "Create the Encryption Configuration."
ref: create-encryption-configuration
level: 4
content: |

  Configuring client-side field level encryption for the AWS KMS
  requires an AWS Access Key ID and its associated Secret Access Key.
  The AWS Access Key must correspond to an IAM user with all *List* and
  *Read* permissions for the KMS service.
  
  In ``mongosh``, create a new
  :ref:`autoEncryptionOpts` variable for storing the
  client-side field level encryption configuration, which contains these
  credentials:

  .. code-block:: javascript

     var autoEncryptionOpts = {
       "keyVaultNamespace" : "encryption.__dataKeys",
       "kmsProviders" : {
         "aws" : {
           "accessKeyId" : "YOUR_AWS_ACCESS_KEY_ID",
           "secretAccessKey" : "YOUR_AWS_SECRET_ACCESS_KEY"
         }
       }
     }

  Fill in the values for ``YOUR_AWS_ACCESS_KEY_ID`` and
  ``YOUR_AWS_SECRET_ACCESS_KEY`` as appropriate.

---
title: "Connect with Encryption Support."
ref: connect-with-encryption
level: 4
content: |

  In ``mongosh``, use the :method:`Mongo()<Mongo()>` constructor to
  establish a database connection to the target cluster. Specify the
  :ref:`autoEncryptionOpts` document as the second
  parameter to the :method:`Mongo()<Mongo()>` constructor to configure
  the connection for client-side field level encryption:

  .. code-block:: javascript

     csfleDatabaseConnection = Mongo(
       "mongodb://replaceMe.example.net:27017/?replicaSet=myMongoCluster",
       autoEncryptionOpts
     )

  Replace the ``replaceMe.example.net`` :ref:`URI <mongodb-uri>` with
  the connection string for the target cluster.

---
title: "Create the Key Vault Object."
ref: create-keyvault-object
level: 4
content: |

  Create the ``keyVault`` object using the :method:`getKeyVault()
  <getKeyVault()>` shell method:

  .. code-block:: javascript

     keyVault = csfleDatabaseConnection.getKeyVault();
---
title: "Create the Encryption Key."
ref: create-encryption-key
level: 4
content: |

  Create the data encryption key using the
  :method:`createKey() <KeyVault.createKey()>` shell method:

  .. code-block:: javascript

     keyVault.createKey(
       "aws",
       { region: "regionname", key: "awsarn" },
       [ "keyAlternateName" ]
     )

  Where:

  - The first parameter *must* be ``"aws"`` to specify the configured
    Amazon Web Services KMS.

  - The second parameter *must* be a document containing the following:

    - the AWS region you are connecting to, such as ``us-west-2``

    - the `Amazon Resource Name (ARN)
      <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`__
      to the AWS customer master key (CMK).

  - The third parameter *may* be an array of one or more
    ``keyAltNames`` for the data encryption key. Each key alternate
    name *must* be unique. :method:`getKeyVault()` creates a
    :ref:`unique index <index-type-unique>` on ``keyAltNames`` to
    enforce uniqueness on the field if one does not already exist. Key
    alternate names facilitate data encryption key findability.

  .. include:: /includes/fact-getkey-options.rst
...
