.. meta::
   :robots: noindex, nosnippet

.. _dotnet-manage-email-password-users:

======================================
Manage Email/Password Users - .NET SDK
======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
If you have enabled the :ref:`email/password provider
<email-password-authentication>` in your App, you can register a new
account, confirm an email address, and reset a user's password in the
client code.

.. _dotnet-email-password-register-new-user:

Register a New User Account
---------------------------
To register a new user, pass a user-provided email and password to the
:dotnet-sdk:`RegisterUserAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_RegisterUserAsync_System_String_System_String_>` 
method:

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.register-user.cs
   :language: csharp


.. _dotnet-email-password-confirm-user:

Confirm a New User's Email Address
----------------------------------

To confirm a newly-created user, pass a confirmation ``token`` and
``tokenId`` to the 
:dotnet-sdk:`ConfirmUserAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_ConfirmUserAsync_System_String_System_String_>`
mehtod. 

.. note:: Use Deep Links in Mobile Apps

   Mobile applications can handle email confirmation directly in the app
   by configuring `deep linking <https://developer.android.com/training/app-links/deep-linking.html>`_
   in Android, `universal links <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_
   in iOS, and/or `URI handlers <https://docs.microsoft.com/en-us/windows/uwp/launch-resume/web-to-app-linking>`_ for 
   the Universal Windows Platform (UWP).


.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.confirm-user.cs
   :language: csharp

Resend a Confirmation Email
---------------------------

To resend a confirmation email, call the
:dotnet-sdk:`ResendConfirmationEmailAsync() 
<reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_ResendConfirmationEmailAsync_System_String_>`
method with the user's email address.

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.resend-confirmation.cs
   :language: csharp

Retry a User Confirmation Function
----------------------------------

To resend a confirmation email using a custom function, call the
:dotnet-sdk:`RetryCustomConfirmationAsync() 
<reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_RetryCustomConfirmationAsync_System_String_>`
method with the user's email address.

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.retry-custom-confirmation.cs
   :language: csharp

For more information, refer to :ref:`<auth-run-a-confirmation-function>` in the App Services documentation.

.. _dotnet-email-password-reset-password:

Reset a User's Password
-----------------------

Resetting a user's password is a multi-step process.

1. In your client app, you provide a UI for the user to reset their password. 
   Your App Services App can then send an email or run a custom function 
   to confirm the user's identity.
#. After confirming the user's identity, you can complete the password reset 
   request. 
#. After the password reset is complete, the user can log in using the new 
   password.

Select your preferred password reset method by going to:

1. Your Atlas App Services App
#. :guilabel:`Authentication`
#. :guilabel:`Authentication Providers`
#. :guilabel:`Email/Password` - and press the :guilabel:`EDIT` button

Send a Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To send password reset emails to confirm the user's identity, 
you must configure your App to :ref:`send a password reset email 
<auth-send-a-password-reset-email>`.

To begin the password reset process, call :dotnet-sdk:`SendPasswordResetEmailAsync() 
<reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_SendResetPasswordEmailAsync_System_String_>`
with the user's email. App Services sends an email to the user that contains 
a unique URL. The user must visit this URL within 30 minutes to confirm 
the reset.

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.reset-user-1.cs
   :language: csharp

Password reset emails contain a URL encoded with two values, ``token`` and 
``tokenId``. To complete the password reset flow, you can reset the user's 
password on the client or by calling a custom function on the backend.
To use the SDK to complete the password reset, pass these values to
:dotnet-sdk:`ResetPasswordAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_ResetPasswordAsync_System_String_System_String_System_String_>`:

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.reset-user-2.cs
   :language: csharp

If the user does not visit the URL from the password reset email within 30 
minutes, the ``token`` and ``tokenId`` expire. You must begin the password 
reset process again.

.. note::

   To access the ``token`` and ``tokenId`` values sent in the password
   reset email, you can use an
   `Android deep link <https://developer.android.com/training/app-links/deep-linking>`_ 
   or :apple:`iOS universal link <ios/universal-links/>`.

Run a Password Reset Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you configure your app to :ref:`run a password reset function 
<auth-run-a-password-reset-function>`, you define the function that 
should run when you call :dotnet-sdk:`CallResetPasswordFunctionAsync() 
<reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_CallResetPasswordFunctionAsync_System_String_System_String_System_Object___>`
from the SDK. This function can take a username, a password, and any number 
of additional arguments. You can use these arguments to specify details 
like security question answers or other challenges that the user should 
pass to successfully complete a password reset.

You might prefer to use a custom password reset function when you want to
define your own password reset flows. For example, you might send a custom 
password reset email from a specific domain. You could also use a service other 
than email to confirm the user's identity.

On the App Services side, you define the custom password reset function that
runs when you call this method. That function can return one of three possible
statuses:

- ``fail``
- ``pending``
- ``success``

A ``fail`` status is treated as an Exception by the SDK. The SDK ``CallResetPasswordFunctionAsync()``
does not take return values, so it does not return a ``pending`` or ``success``
status to the client. 

Server-Side Pending Case
````````````````````````

Your :ref:`App Services password reset function 
<auth-run-a-password-reset-function>` may return ``pending`` if you want 
the user to take some additional step to confirm their identity. However, that
return value is not passed to the SDK's 
:dotnet-sdk:`CallResetPasswordFunctionAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_CallResetPasswordFunctionAsync_System_String_System_String_System_Object___>`, 
so your client app must implement its own logic to handle a ``pending`` status.

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.reset-password-function-pending.cs
   :language: csharp

Your server-side function might send an email using a custom email provider. 
You could also use SMS or some other service to confirm the user's identity. 

You have access to a ``token`` and ``tokenId`` in the App Services password 
reset function context. If you pass this information from your App Services 
password reset function, you can pass these values back to your app using
platform-specific deep linking or universal links. Then, your client
application can call :dotnet-sdk:`ResetPasswordAsync() 
<reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_ResetPasswordAsync_System_String_System_String_System_String_>` 
to complete the password reset flow.

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.reset-user-2.cs
   :language: csharp

.. note::

   To access the ``token`` and ``tokenId`` values sent from a custom password
   reset function, you can use an 
   `Android deep link <https://developer.android.com/training/app-links/deep-linking>`_ 
   or :apple:`iOS universal link <ios/universal-links/>`.

Server-Side Success Case
````````````````````````

If your :ref:`App Services password reset function 
<auth-run-a-password-reset-function>` does additional validation within 
the function, or if you have validated the user's identity prior to 
attempting to reset the password, you may configure the App Services function
to return ``success``. However, that return value is not passed to the SDK's 
:dotnet-sdk:`CallResetPasswordFunctionAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_CallResetPasswordFunctionAsync_System_String_System_String_System_Object___>`, 
so your client app must implement its own logic to handle a ``success`` status.

Calling the function in this example performs the entire password reset process.

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.reset-user-3.cs
   :language: csharp
