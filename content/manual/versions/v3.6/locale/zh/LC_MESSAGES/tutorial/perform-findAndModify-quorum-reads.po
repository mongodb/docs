#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:3
msgid "Perform Quorum Reads on Replica Sets"
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:10
msgid "Overview"
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:12
msgid ""
"When reading from the primary of a replica set, it is possible to read data "
"that is stale or not durable, depending on the read concern used [#edge-"
"cases-2-primaries]_. With a read concern level of :readconcern:`\"local\"`, "
"a client can read data before it is :term:`durable`; that is, before they "
"have propagated to enough replica set members to avoid a rollback. A read "
"concern level of :readconcern:`\"majority\"` guarantees durable reads but "
"may return stale data that has been overwritten by another write operation."
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:21
msgid ""
"This tutorial outlines a procedure that uses "
":method:`db.collection.findAndModify()` to read data that is not stale and "
"cannot be rolled back. To do so, the procedure uses the "
":method:`~db.collection.findAndModify()` method with a :ref:`write concern "
"<write-concern>` to modify a dummy field in a document. Specifically, the "
"procedure requires that:"
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:28
msgid ""
":method:`db.collection.findAndModify()` use an **exact** match query, and a "
":doc:`unique index </core/index-unique>` **must exist** to satisfy the "
"query."
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:32
msgid ""
":method:`~db.collection.findAndModify()` must actually modify a document; "
"i.e. result in a change to the document."
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:35
msgid ""
":method:`~db.collection.findAndModify()` must use the write concern "
":writeconcern:`{ w: \"majority\" } <\"majority\">`."
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:40
msgid ""
"The \"quorum read\" procedure has a substantial cost over simply using a "
"read concern of :readconcern:`\"majority\"` because it incurs write latency "
"rather than read latency. This technique should only be used if staleness is"
" absolutely intolerable."
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:46
msgid "Prerequisites"
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:48
msgid ""
"This tutorial reads from a collection named ``products``. Initialize the "
"collection using the following operation."
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:77
msgid ""
"The documents in this collection contain a dummy field named "
"``_dummy_field`` that will be incremented by the "
":method:`db.collection.findAndModify()` in the tutorial. If the field does "
"not exist, the :method:`db.collection.findAndModify()` operation will add "
"the field to the document. The purpose of the field is to ensure that the "
":method:`db.collection.findAndModify()` results in a modification to the "
"document."
msgstr ""

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:86
msgid "Procedure"
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may "
"*transiently* believe that they are the primary, but at most, one of them "
"will be able to complete writes with :writeconcern:`{ w: \"majority\" } "
"<\"majority\">` write concern. The node that can complete :writeconcern:`{ "
"w: \"majority\" } <\"majority\">` writes is the current primary, and the "
"other node is a former primary that has not yet recognized its demotion, "
"typically due to a :term:`network partition`. When this occurs, clients that"
" connect to the former primary may observe stale data despite having "
"requested read preference :readmode:`primary`, and new writes to the former "
"primary will eventually roll back."
msgstr ""
