.. meta::
   :robots: noindex, nosnippet

.. _react-native-connect-to-mongodb-realm-backend-app:

=======================================================
Connect to an Atlas App Services App - React Native SDK
=======================================================

.. meta:: 
   :description: Connect to Atlas App Services from the Atlas Device SDK. Specify configuration details to customize App access.
   :keywords: code example

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The App client is the interface to the App Services
backend. It provides access to the :ref:`authentication functionality
<react-native-authenticate-users>`, :ref:`Atlas Functions <react-native-call-a-function>`,
and :ref:`Atlas Device Sync <react-native-realm-sync>`.

Before You Begin
----------------

#. :ref:`Create an App Services App <create-a-realm-app>`
#. :ref:`Get Your App ID <find-your-app-id>`

.. _react-native-app-client-configuration:
.. _react-native-access-the-app-client:

Configure the App Client
------------------------

To set up your App client, pass the App ID string
to the ``id`` prop of the ``AppProvider``.
Wrap any components that need to access the App with the ``AppProvider``.
In this example, we wrap the :ref:`UserProvider <react-native-user-provider>` 
in the ``AppProvider`` to authenticate a user.

.. include:: /examples/generated/react-native/v12/use-app.snippet.app-config-imports.tsx.rst
.. include:: /examples/generated/react-native/v12/use-app.snippet.app-config.tsx.rst

.. include:: /includes/note-rn-multiple-app-clients-and-app-config-cache.rst

.. _react-native-app-retrieve-client:

Retrieve an Instance of the App Client
--------------------------------------

All components wrapped within an ``AppProvider`` can access the :js-sdk:`App <Realm.App.html>`
client with the ``useApp()`` hook.

.. include:: /examples/generated/react-native/v12/use-app.snippet.import-use-app.tsx.rst
.. include:: /examples/generated/react-native/v12/use-app.snippet.use-app.tsx.rst

.. _react-native-retrieve-client-outside-provider:

Retrieve App Outside the App Provider
-------------------------------------

To retrieve an instance of the App Client from anywhere in your application,
instantiate a new instance of :js-sdk:`Realm.App() <Realm.App.html>`
from the ``realm`` package, then pass in your ``App ID``.

.. code-block:: typescript

   import Realm from 'realm';

   const app = Realm.App.getApp("<Your App ID>");

.. _react-native-encrypt-app-metadata:

Encrypt App Metadata
--------------------

You can encrypt the metadata that App Services stores on client devices. Use the
values of the :js-sdk:`MetadataMode enum <enums/_internal_.MetadataMode.html>`
to determine encryption behavior.

To encrypt App metadata:

#. Import ``MetadataMode`` from ``Realm`` and import other dependencies:

   .. include:: /examples/generated/react-native/v12/EncryptMetadata.snippet.imports.tsx.rst

#. Create an App configuration object that contains the ``metadata`` property.
#. Set ``metadata.mode`` to ``MetadataMode.Encryption``.
#. Set ``metadata.encryptionKey`` to the key you want to use for encryption.
#. Pass the App configuration object to ``new Realm.App()``.

.. include:: /examples/generated/react-native/v12/EncryptMetadata.snippet.encrypt-metadata.tsx.rst
