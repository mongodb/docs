# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: 2013-12-16 23:49+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# f6898de1089444cd925e8f698a6c4e36
#: ../source/core/replication-introduction.txt:5
msgid "Replication Introduction"
msgstr ""

# 911539ad063d4e52914583214b8f855c
#: ../source/core/replication-introduction.txt
msgid "On this page"
msgstr ""

# f62b865957944ba8992880fa565215cb
#: ../source/core/replication-introduction.txt:15
msgid "Replication is the process of synchronizing data across multiple servers."
msgstr ""

# 4522e83b2da3410eb247ddf956afd9b6
#: ../source/core/replication-introduction.txt:19
msgid "Redundancy and Data Availability"
msgstr ""

# f7843b3e14314ea4aeab6a57a6b61acf
#: ../source/core/replication-introduction.txt:21
msgid ""
"Replication provides redundancy and increases data availability. With "
"multiple copies of data on different database servers, replication "
"provides a level of fault tolerance against the loss of a single database"
" server."
msgstr ""

# bff43105046944f4812f592ac6822f9b
#: ../source/core/replication-introduction.txt:26
msgid ""
"In some cases, replication can provide increased read capacity as clients"
" can send read operations to different servers. Maintaining copies of "
"data in different data centers can increase data locality and "
"availability for distributed applications. You can also maintain "
"additional copies for dedicated purposes, such as disaster recovery, "
"reporting, or backup."
msgstr ""

# 235d753035b44f278743f3a21231a6f3
#: ../source/core/replication-introduction.txt:34
msgid "Replication in MongoDB"
msgstr ""

# d2f63b70942244c99957dc3d6c4b406d
#: ../source/core/replication-introduction.txt:36
msgid ""
"A replica set is a group of :program:`mongod` instances that maintain the"
" same data set. A replica set contains several data bearing nodes and "
"optionally one arbiter node. Of the data bearing nodes, one and only one "
"member is deemed the primary node, while the other nodes are deemed "
"secondary nodes."
msgstr ""

# 24f92ce9eb6b47cc99e43fa48b10ba41
#: ../source/core/replication-introduction.txt:42
msgid ""
"The :doc:`primary node </core/replica-set-primary>` receives all write "
"operations. A replica set can have only one primary capable of confirming"
" writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write "
"concern; although in some circumstances, another mongod instance may "
"transiently believe itself to also be primary. [#edge-cases-2-primaries]_"
" The primary records all changes to its data sets in its operation log, "
"i.e. :doc:`oplog </core/replica-set-oplog>`. For more information on "
"primary node operation, see :doc:`/core/replica-set-primary`."
msgstr ""

# c33990fd71ca45998b70c4b8b0fbafb7
#: ../source/core/replication-introduction.txt:54
msgid ""
"The :doc:`secondaries </core/replica-set-secondary>` replicate the "
"primary's oplog and apply the operations to their data sets such that the"
" secondaries' data sets reflect the primary's data set. If the primary is"
" unavailable, an eligible secondary will hold an election to elect itself"
" the new primary. For more information on secondary members, see "
":doc:`/core/replica-set-secondary`."
msgstr ""

# b53bba2b224e434faffd213e0c4ba3de
#: ../source/core/replication-introduction.txt:63
msgid ""
"You may add an extra :program:`mongod` instance to a replica set as an "
":doc:`arbiter </core/replica-set-arbiter>`. Arbiters do not maintain a "
"data set. The purpose of an arbiter is to maintain a quorum in a replica "
"set by responding to heartbeat and election requests by other replica set"
" members. Because they do not store a data set, arbiters can be a good "
"way to provide replica set quorum functionality with a cheaper resource "
"cost than a fully functional replica set member with a data set. If your "
"replica set has an even number of members, add an arbiter to obtain a "
"majority of votes in an election for primary. Arbiters do not require "
"dedicated hardware. For more information on arbiters, see :doc:`/core"
"/replica-set-arbiter`."
msgstr ""

# 5cde2c287f5c4d2f971a476d556aa248
#: ../source/core/replication-introduction.txt:77
msgid ""
"An :doc:`arbiter </core/replica-set-arbiter>` will always be an arbiter "
"whereas a :doc:`primary </core/replica-set-primary>` may step down and "
"become a :doc:`secondary </core/replica-set-secondary>` and a "
":doc:`secondary </core/replica-set-secondary>` may become the primary "
"during an election."
msgstr ""

# 3d77860c70b342748bd090faad8033d0
#: ../source/core/replication-introduction.txt:86
msgid "Asynchronous Replication"
msgstr ""

# 5287d1fcb09f4e85ac65081cb785f3a0
#: ../source/core/replication-introduction.txt:88
msgid ""
"Secondaries apply operations from the primary asynchronously. By applying"
" operations after the primary, sets can continue to function despite the "
"failure of one or more members. For more information on replication "
"mechanics, see :ref:`replica-set-oplog` and :ref:`replica-set-sync`."
msgstr ""

# b20122a93bc7457dbd086aa4f09e8153
#: ../source/core/replication-introduction.txt:95
msgid "Automatic Failover"
msgstr ""

# 689cd2c280ca4fa6ae8503f163fe8ce7
#: ../source/core/replication-introduction.txt:97
msgid ""
"When a primary does not communicate with the other members of the set for"
" more than 10 seconds, an eligible secondary will hold an election to "
"elect itself the new primary. The first secondary to hold an election and"
" receive a majority of the members' votes becomes primary."
msgstr ""

# eb583da02e774db29bcda64a68a23f0e
#: ../source/includes/fact-replica-set-protocolVersion1.rst:3
msgid ""
"MongoDB introduces a version 1 of the replication protocol "
"(:rsconf:`protocolVersion: 1 <protocolVersion>`) to reduce replica set "
"failover time and accelerates the detection of multiple simultaneous "
"primaries. New replica sets will, by default, use "
":rsconf:`protocolVersion: 1 <protocolVersion>`. Previous versions of "
"MongoDB use version 0 of the protocol."
msgstr ""

# 7150ab70441749a7a081175a36aedde5
#: ../source/core/replication-introduction.txt:106
msgid ""
"See :ref:`replica-set-elections` and :ref:`replica-set-rollbacks` for "
"more information."
msgstr ""

# 208987a22aa147abbabb7ebbf4ddf4b8
#: ../source/core/replication-introduction.txt:110
msgid "Read Operations"
msgstr ""

# 70222abfae6540eaa1bf87ad3b46119b
#: ../source/core/replication-introduction.txt:112
msgid ""
"By default, clients read from the primary [#edge-cases-2-primaries]_; "
"however, clients can specify a :doc:`read preference </core/read-"
"preference>` to send read operations to secondaries. :ref:`Asynchronous "
"replication <asynchronous-replication>` to secondaries means that reads "
"from secondaries may return data that does not reflect the state of the "
"data on the primary. For information on reading from replica sets, see "
":doc:`/core/read-preference`."
msgstr ""

# bd8df0205c6e43d481c0db49d2b35879
#: ../source/includes/extracts/concurrent-operations-read-uncommitted.rst:1
msgid ""
"In MongoDB, clients can see the results of writes before the writes are "
":term:`durable`:"
msgstr ""

# fa51c7f76ebe44d9b70a84e90b0f8a17
#: ../source/includes/list-visibility-of-data.rst:1
msgid ""
"Regardless of :doc:`write concern </reference/write-concern>`, other "
"clients using :readconcern:`\"local\"` (i.e. the default) readConcern can"
" see the result of a write operation before the write operation is "
"acknowledged to the issuing client."
msgstr ""

# 57530d4d1c604b30ad2d1eb034a9f612
#: ../source/includes/list-visibility-of-data.rst:6
msgid ""
"Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can"
" read data which may be subsequently :doc:`rolled back </core/replica-"
"set-rollbacks>`."
msgstr ""

# 5009fee8937a411c807e3db8761474ea
#: ../source/core/replication-introduction.txt:122
msgid ""
"For more information on read isolations, consistency and recency for "
"MongoDB, see :doc:`/core/read-isolation-consistency-recency`."
msgstr ""

# 34ee4436e1e141ea96ebd1b928ec6022
#: ../source/core/replication-introduction.txt:126
msgid "Additional Features"
msgstr ""

# 2a93dd098c1f4f9188d4b4681702577d
#: ../source/core/replication-introduction.txt:128
msgid ""
"Replica sets provide a number of options to support application needs. "
"For example, you may deploy a replica set with :doc:`members in multiple "
"data centers </core/replica-set-architecture-geographically-"
"distributed>`, or control the outcome of elections by adjusting the "
":rsconf:`members[n].priority` of some members. Replica sets also support "
"dedicated members for reporting, disaster recovery, or backup functions."
msgstr ""

# 8b61f148ba47434cb5c1bf424641d4eb
#: ../source/core/replication-introduction.txt:137
msgid ""
"See :ref:`replica-set-secondary-only-members`, :ref:`replica-set-hidden-"
"members` and :ref:`replica-set-delayed-members` for more information."
msgstr ""

# 7f253d7d9bc04a2ba1c5920fffc699fc
#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may"
" *transiently* believe that they are the primary, but at most, one of "
"them will be able to complete writes with :writeconcern:`{ w: "
"\"majority\" } <\"majority\">` write concern. The node that can complete "
":writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current "
"primary, and the other node is a former primary that has not yet "
"recognized its demotion, typically due to a :term:`network partition`. "
"When this occurs, clients that connect to the former primary may observe "
"stale data despite having requested read preference :readmode:`primary`, "
"and new writes to the former primary will eventually roll back."
msgstr ""

# 5b4a94698d5d4feb8e6559ea6a662335
#: ../source/includes/extracts/additional-resources-replication-introduction.rst:4
msgid "Additional Resources"
msgstr ""

# 2121829089644ac4aa3054986842555f
#: ../source/includes/extracts/additional-resources-replication-introduction.rst:6
msgid ""
"`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-"
"cards?jmp=docs>`_"
msgstr ""

# d178c395a34240adb8faafbc37a7c9b2
#: ../source/includes/extracts/additional-resources-replication-introduction.rst:7
msgid ""
"`Webinar: Managing Your Mission Critical App - Ensuring Zero Downtime "
"<http://www.mongodb.com/webinar/managing-mission-critical-app-"
"downtime?jmp=docs>`_"
msgstr ""

#~ msgid ""
#~ "The **primary** accepts all write "
#~ "operations from clients. Replica set can"
#~ " have only one primary. Because only"
#~ " one member can accept write "
#~ "operations, replica sets provide **strict "
#~ "consistency**. To support replication, the "
#~ "primary logs all changes to its "
#~ "data sets in its :doc:`oplog </core"
#~ "/replica-set-oplog>`. See :doc:`primary "
#~ "</core/replica-set-primary>` for more "
#~ "information."
#~ msgstr ""

#~ msgid ""
#~ "The **secondaries** replicate the primary's"
#~ " oplog and apply the operations to"
#~ " their data sets. Secondaries' data "
#~ "sets reflect the primary's data set. "
#~ "If the primary is unavailable, the "
#~ "replica set will elect a secondary "
#~ "to be primary. By default, clients "
#~ "read from the primary, however, clients"
#~ " can specify a :doc:`read preferences "
#~ "</core/read-preference>` to send read "
#~ "operations to secondaries. See "
#~ ":doc:`secondaries </core/replica-set-secondary>` "
#~ "for more information"
#~ msgstr ""

#~ msgid ""
#~ "You may add an extra :program:`mongod`"
#~ " instance a replica set as an "
#~ "**arbiter**. Arbiters do not maintain a"
#~ " data set. Arbiters only exist to "
#~ "vote in elections. If your replica "
#~ "set has an even number of members,"
#~ " add an arbiter to obtain a "
#~ "majority of votes in an election "
#~ "for primary. Arbiters do not require "
#~ "dedicated hardware. See :doc:`arbiter </core"
#~ "/replica-set-arbiter>` for more "
#~ "information."
#~ msgstr ""

#~ msgid ""
#~ "See :doc:`/core/replica-set-oplog` and "
#~ ":doc:`/core/replica-set-sync` for more "
#~ "information. See :doc:`/core/read-preference` "
#~ "for more on read operations and "
#~ "secondaries."
#~ msgstr ""

#~ msgid ""
#~ "See :doc:`/core/replica-set-elections` and "
#~ ":doc:`/core/replica-set-rollbacks` for more"
#~ " information."
#~ msgstr ""

#~ msgid ""
#~ "See :doc:`/core/replica-set-priority-0-member`, "
#~ ":doc:`/core/replica-set-hidden-member` and "
#~ ":doc:`/core/replica-set-delayed-member` for"
#~ " more information."
#~ msgstr ""

# cc3ecd78ff9e4d54abf6471ca63b2cee
#~ msgid "Purpose of Replication"
#~ msgstr ""

# 5747e69c18654e98a56a62179a0b70eb
#~ msgid ""
#~ "Replication provides redundancy and increases"
#~ " data availability. With multiple copies"
#~ " of data on different database "
#~ "servers, replication protects a database "
#~ "from the loss of a single server."
#~ " Replication also allows you to "
#~ "recover from hardware failure and "
#~ "service interruptions. With additional copies"
#~ " of the data, you can dedicate "
#~ "one to disaster recovery, reporting, or"
#~ " backup."
#~ msgstr ""

# ec0941baa2d247b9ac65eafcfe8c2d94
#~ msgid ""
#~ "In some cases, you can use "
#~ "replication to increase read capacity. "
#~ "Clients have the ability to send "
#~ "read and write operations to different"
#~ " servers. You can also maintain "
#~ "copies in different data centers to "
#~ "increase the locality and availability "
#~ "of data for distributed applications."
#~ msgstr ""

# 70f6bef622a241439db293298bffdc85
#~ msgid ""
#~ "A replica set is a group of "
#~ ":program:`mongod` instances that host the "
#~ "same data set. One :program:`mongod`, "
#~ "the primary, receives all write "
#~ "operations. All other instances, secondaries,"
#~ " apply operations from the primary so"
#~ " that they have the same data "
#~ "set."
#~ msgstr ""

# 650f0f2e19da4dd48e150ab7f617a477
#~ msgid ""
#~ "An **arbiter** will always be an "
#~ "arbiter. A **primary** may step down "
#~ "and become a **secondary**. A "
#~ "**secondary** may become the primary "
#~ "during an election."
#~ msgstr ""

# 92d4c3cdcc3c4303a7f08eec12b7eee9
#~ msgid ""
#~ "Secondaries apply operations from the "
#~ "primary asynchronously. By applying operations"
#~ " after the primary, sets can continue"
#~ " to function without some members. "
#~ "However, as a result secondaries may "
#~ "not return the most current data "
#~ "to clients."
#~ msgstr ""

# 987e145bdad04430b8c686d3020e5c4b
#~ msgid ""
#~ "When a primary does not communicate "
#~ "with the other members of the set"
#~ " for more than 10 seconds, the "
#~ "replica set will attempt to select "
#~ "another member to become the new "
#~ "primary. The first secondary that "
#~ "receives a majority of the votes "
#~ "becomes primary."
#~ msgstr ""

# 69e879e73fde4cd0857c46f0bd2322ba
#~ msgid ""
#~ "Replica sets provide a number of "
#~ "options to support application needs. "
#~ "For example, you may deploy a "
#~ "replica set with :doc:`members in "
#~ "multiple data centers </core/replica-set-"
#~ "architecture-geographically-distributed>`, or "
#~ "control the outcome of elections by "
#~ "adjusting the "
#~ ":data:`~local.system.replset.members[n].priority` of some"
#~ " members. Replica sets also support "
#~ "dedicated members for reporting, disaster "
#~ "recovery, or backup functions."
#~ msgstr ""

#~ msgid ""
#~ "The **primary** accepts all write "
#~ "operations from clients. Replica set can"
#~ " have only one primary. Because only"
#~ " one member can accept write "
#~ "operations, replica sets provide **strict "
#~ "consistency** for all reads from the "
#~ "primary. To support replication, the "
#~ "primary logs all changes to its "
#~ "data sets in its :doc:`oplog </core"
#~ "/replica-set-oplog>`. See :doc:`primary "
#~ "</core/replica-set-primary>` for more "
#~ "information."
#~ msgstr ""

#~ msgid ""
#~ "The **secondaries** replicate the primary's"
#~ " oplog and apply the operations to"
#~ " their data sets. Secondaries' data "
#~ "sets reflect the primary's data set. "
#~ "If the primary is unavailable, the "
#~ "replica set will elect a secondary "
#~ "to be primary. By default, clients "
#~ "read from the primary, however, clients"
#~ " can specify a :doc:`read preferences "
#~ "</core/read-preference>` to send read "
#~ "operations to secondaries. Reads from "
#~ "secondaries may return data that does"
#~ " not reflect the state of the "
#~ "primary. See :doc:`secondaries </core/replica-"
#~ "set-secondary>` for more information."
#~ msgstr ""

#~ msgid ""
#~ "You may add an extra :program:`mongod`"
#~ " instance to a replica set as "
#~ "an **arbiter**. Arbiters do not maintain"
#~ " a data set. Arbiters only exist "
#~ "to vote in elections. If your "
#~ "replica set has an even number of"
#~ " members, add an arbiter to obtain"
#~ " a majority of votes in an "
#~ "election for primary. Arbiters do not"
#~ " require dedicated hardware. See "
#~ ":doc:`arbiter </core/replica-set-arbiter>` for"
#~ " more information."
#~ msgstr ""

#~ msgid ""
#~ "See :ref:`replica-set-oplog` and :ref"
#~ ":`replica-set-sync` for more information."
#~ " See :ref:`replica-set-read-preference` "
#~ "for more on read operations and "
#~ "secondaries."
#~ msgstr ""

