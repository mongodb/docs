.. meta::
   :robots: noindex, nosnippet 

.. _mongodb-analyzer-analyze-linq:

========================
Analyze LINQ Expressions
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

**LINQ** is a query syntax included in the C# language. The {+driver-short+}
can translate a subset of LINQ expressions into MongoDB aggregation pipelines.

To learn more about LINQ, see the following resources:

- `LINQ <{+driver-docs+}/fundamentals/linq/>`__ in the {+driver-short+}
  documentation
- `LINQ <https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/>`__
  in the Microsoft C# guide

To learn more about aggregation pipelines, see
:manual:`Aggregation </aggregation/>` in the MongoDB manual.

.. note:: Runtime Differences 

   Although the {+query-api+} translations generated by the {+product-short+} have the same 
   :manual:`query shape </reference/glossary/#std-term-query-shape>`
   as your runtime {+driver-short+}
   queries, there may be slight differences due to the following
   factors:
   
   - Your Serialization Settings
   - Your LINQ Settings
   
   The difference between the translations the {+product-short+} generates
   and your queries at runtime should not impact your ability to analyze
   and debug your code.

   To learn more about serialization and LINQ settings, see the 
   :ref:`FAQ <mongodb-analyzer-faq-custom-serialization>`
   page.

Use the {+product-short+} to learn the following
about your LINQ expressions:

- How your LINQ expressions translate into the {+query-api+}
- If any of your LINQ expressions are not supported

Translate into the {+query-api+}
------------------------------------

Click the following tabs to see an example of a LINQ expression
and its corresponding {+query-api+} translation:

.. tabs::

   .. tab:: LINQ
      :tabid: linq

      .. code-block:: csharp

         var books = queryableCollection
                .Where(b =>
                    b.Genre == genre &&
                    b.Price >= minPrice &&
                    b.Title.Contains(titleSearchTerm))
                .OrderBy(b => b.Price)
                .ToList();

   .. tab:: {+query-api+}
      :tabid: query-api-linq

      .. code-block:: json

         [{ "$match" : { 
              "Genre" : genre, 
              "Price" : { "$gte" : minPrice }, 
              "Title" : /titleSearchTerm/s }
           }, 
           { "$sort" : { "Price" : 1 } }]

.. include:: /includes/variable-names.rst

Analyze LINQ in Visual Studio
-----------------------------

To analyze your LINQ expressions in Visual Studio, perform the following actions:

1. Install the {+product-short+} as described in the :ref:`Install <mongodb-analyzer-install>`
   guide.
#. Write a LINQ expression with the {+driver-short+}.
#. Move your mouse over the :guilabel:`...` annotation beneath the first
   method of your LINQ expression to display an information message that contains
   the {+query-api+} translation.

Simple LINQ Expressions
~~~~~~~~~~~~~~~~~~~~~~~

The {+product-short+} analyzes LINQ expressions in the following syntax types:

- Method syntax
- Query syntax

Click on the following corresponding tab to see a LINQ expression written in method
syntax with or without an information message displayed:

.. tabs::

   .. tab:: Without Information Message
      :tabid: without-message-method-syntax

      .. figure:: /includes/images/linq.png
         :alt: Screenshot of LINQ expression with an ellipsis annotation in Visual Studio.

   .. tab:: With Information Message
      :tabid: with-message-method-syntax

      .. figure:: /includes/images/linq-popup.png
         :alt: Screenshot of LINQ expression with an information message displayed in Visual Studio.

Click on the following corresponding tab to see a LINQ expression written in query
syntax with or without an information message displayed:

.. tabs::

   .. tab:: Without Information Message
      :tabid: without-message-query-syntax

      .. figure:: /includes/images/linq-query.png
         :alt: Screenshot of LINQ expression with an ellipsis annotation in Visual Studio.

   .. tab:: With Information Message
      :tabid: with-message-query-syntax

      .. figure:: /includes/images/linq-query-popup.png
         :alt: Screenshot of LINQ expression with an information message displayed in Visual Studio.

.. _mongodb-analyzer-unsupported-linq:

Unsupported LINQ Expressions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your LINQ expression is not supported, the {+product-short+} outputs a
``MALinq2001`` warning.

The following code snippet contains the unsupported ``GetHashCode`` LINQ
expression:

.. code-block:: csharp

   var result = queryableColl.Where(b => b.GetHashCode() == 167);

The {+product-short+} shows an annotation on the unsupported expression
and generates the following warning message:

.. code-block:: text
   :copyable: false

   Expression not supported: b.GetHashCode().

The following screenshot shows the annotated code and the warning
displayed when you hover over the annotation:

.. figure:: /includes/images/linq-unsupported-popup.png
   :alt: Screenshot of warning displayed in Visual Studio from unsupported LINQ.

.. include:: /includes/error-list-window.rst

To view more examples of unsupported LINQ expressions, see the 
`{+product+} Github repository <{+product-source-repo+}/blob/main/tests/MongoDB.Analyzer.Tests.Common.TestCases/Linq/NotSupportedLinqExpressions.cs>`__.

.. _mongodb-analyzer-analyze-linq3:

Analyze LINQ3
~~~~~~~~~~~~~

To analyze a LINQ3 expression, you must configure the {+product-short+} to use the LINQ3
provider. To learn how to configure your LINQ provider, see the
:ref:`configuration <mongodb-analyzer-configuration>` guide.

.. important:: Expressions Supported Only by LINQ3

   If your {+driver-short+} version supports LINQ3 but you configure your {+product-short+} to use
   the default LINQ provider (LINQ2), the {+product-short+} informs you if your LINQ expression
   is supported by LINQ3 but not LINQ2.

   Click the tabs to see a LINQ expression supported by LINQ3 but not LINQ2 and the
   corresponding warning output by the {+product-short+}:

   .. tabs::

      .. tab:: Code Snippet
         :tabid: code-snippet-linq3

         .. code-block:: csharp

            var result = queryableColl.Where(b => b.Title.Substring(0) == "Pane");

      .. tab:: Warning
         :tabid: warning-linq3

         .. code-block:: text
            :copyable: false

            Supported in LINQ3 only: db.coll.Aggregate([{ "$match" : { "$expr" : { "$eq" : [{ "$substrCP" : ["$Title", 0, { "$subtract" : [{ "$strLenCP" : "$Title" }, 0] }] }, "Pane"] } } }])

To view examples of expressions the {+driver-short+} only supports with the LINQ3 provider, see the 
`{+product+} Github repository
<{+product-source-repo+}/blob/main/tests/MongoDB.Analyzer.Tests.Common.TestCases/Linq/NotSupportedLinq2.cs>`__.
