# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:32+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/2dsphere.txt:3
msgid "``2dsphere`` Indexes"
msgstr ""

#: ../source/core/2dsphere.txt:14
msgid "Overview"
msgstr ""

#: ../source/core/2dsphere.txt:16
msgid ""
"A ``2dsphere`` index supports queries that calculate geometries on an "
"earth-like sphere. ``2dsphere`` index supports all MongoDB geospatial "
"queries: queries for inclusion, intersection and proximity. For more "
"information on geospatial queries, see :doc:`/geospatial-queries`."
msgstr ""

#: ../source/core/2dsphere.txt:22
msgid ""
"The ``2dsphere`` index supports data stored as :ref:`GeoJSON objects "
"<geospatial-geojson>` *and* :ref:`legacy coordinate pairs <geospatial-"
"legacy>` (See also :ref:`2dsphere-data-restrictions`). For legacy "
"coordinate pairs, the index converts the data to GeoJSON :ref:`geojson-"
"point`."
msgstr ""

#: ../source/core/2dsphere.txt:31
msgid "Versions"
msgstr ""

#: ../source/core/2dsphere.txt:37
msgid "``2dsphere`` Index Version"
msgstr ""

#: ../source/core/2dsphere.txt:38
msgid "Description"
msgstr ""

#: ../source/core/2dsphere.txt:40
msgid "Version 3"
msgstr ""

#: ../source/core/2dsphere.txt:42
msgid ""
"MongoDB 3.2 introduces a version 3 of ``2dsphere`` indexes. Version 3 is "
"the default version of ``2dsphere`` indexes created in MongoDB 3.2 and "
"later."
msgstr ""

#: ../source/core/2dsphere.txt:46
msgid "Version 2"
msgstr ""

#: ../source/core/2dsphere.txt:48
msgid ""
"MongoDB 2.6 introduces a version 2 of ``2dsphere`` indexes. Version 2 is "
"the default version of ``2dsphere`` indexes created in MongoDB 2.6 and "
"3.0 series."
msgstr ""

#: ../source/core/2dsphere.txt:52
msgid ""
"To override the default version and specify a different version, include "
"the option ``{ \"2dsphereIndexVersion\": <version> }`` when creating the "
"index."
msgstr ""

#: ../source/core/2dsphere.txt:57
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/2dsphere.txt:59
msgid ""
"Version 2 and later ``2dsphere`` indexes are always :doc:`sparse </core"
"/index-sparse>` and ignore the :doc:`sparse </core/index-sparse>` option."
" If a document lacks a ``2dsphere`` index field (or the field is ``null``"
" or an empty array), MongoDB does not add an entry for the document to "
"the index. For inserts, MongoDB inserts the document but does not add to "
"the ``2dsphere`` index."
msgstr ""

#: ../source/core/2dsphere.txt:66
msgid ""
"For a compound index that includes a ``2dsphere`` index key along with "
"keys of other types, only the ``2dsphere`` index field determines whether"
" the index references a document."
msgstr ""

#: ../source/core/2dsphere.txt:70
msgid ""
"Earlier versions of MongoDB only support ``2dsphere (Version 1)`` "
"indexes. ``2dsphere (Version 1)`` indexes are *not* sparse by default and"
" will reject documents with ``null`` location fields."
msgstr ""

#: ../source/core/2dsphere.txt:75
msgid "Additional GeoJSON Objects"
msgstr ""

#: ../source/core/2dsphere.txt:77
msgid ""
"Version 2 and later ``2dsphere`` indexes includes support for additional "
"GeoJSON object: :ref:`geojson-multipoint`, :ref:`geojson-"
"multilinestring`, :ref:`geojson-multipolygon`, and :ref:`geojson-"
"geometrycollection`. For details on all supported GeoJSON objects, see "
":doc:`/reference/geojson`."
msgstr ""

#: ../source/core/2dsphere.txt:83
msgid "Considerations"
msgstr ""

#: ../source/core/2dsphere.txt:86
msgid "``geoNear`` and ``$geoNear`` Restrictions"
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
msgid ""
"The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline "
"stage require that a collection have *at most* only one |first-geo-index|"
" and/or only one |second-geo-index| whereas :ref:`geospatial query "
"operators <geospatial-query-selectors>` (e.g. :query:`$near` and "
":query:`$geoWithin`) permit collections to have multiple geospatial "
"indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
msgid ""
"The geospatial index restriction for the :dbcommand:`geoNear` command and"
" the :pipeline:`$geoNear` pipeline stage exists because neither the "
":dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage "
"syntax includes the location field. As such, index selection among "
"multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
msgid ""
"No such restriction applies for :ref:`geospatial query operators "
"<geospatial-query-selectors>` since these operators take a location "
"field, eliminating the ambiguity."
msgstr ""

#: ../source/core/2dsphere.txt:93
msgid "Shard Key Restrictions"
msgstr ""

#: ../source/includes/extracts/geospatial-index-shard-key-restriction-2dsphere.rst:1
msgid ""
"You cannot use a ``2dsphere`` index as a :term:`shard key` when sharding "
"a collection. However, you can create a geospatial index on a sharded "
"collection by using a different field as the shard key."
msgstr ""

#: ../source/core/2dsphere.txt:100
msgid "``2dsphere`` Indexed Field Restrictions"
msgstr ""

#: ../source/includes/geo-data-limit-for-2dsphere.rst:1
msgid ""
"Fields with :doc:`2dsphere </core/2dsphere>` indexes must hold geometry "
"data in the form of :term:`coordinate pairs <legacy coordinate pairs>` or"
" :term:`GeoJSON` data. If you attempt to insert a document with non-"
"geometry data in a ``2dsphere`` indexed field, or build a ``2dsphere`` "
"index on a collection where the indexed field has non-geometry data, the "
"operation will fail."
msgstr ""

#: ../source/core/2dsphere.txt:105 ../source/core/2dsphere.txt:137
msgid "Create a ``2dsphere`` Index"
msgstr ""

#: ../source/includes/create-2dsphere-index.rst:1
msgid ""
"To create a ``2dsphere`` index, use the "
":method:`db.collection.createIndex()` method and specify the string "
"literal ``\"2dsphere\"`` as the index type:"
msgstr ""

#: ../source/includes/create-2dsphere-index.rst:9
msgid ""
"where the ``<location field>`` is a field whose value is either a "
":ref:`GeoJSON object <geospatial-geojson>` or a :ref:`legacy coordinates "
"pair <geospatial-legacy>`."
msgstr ""

#: ../source/core/2dsphere.txt:109
msgid ""
"Unlike a compound :doc:`2d </core/2d>` index which can reference one "
"location field and one other field, a :ref:`compound <index-type-"
"compound>` ``2dsphere`` index can reference multiple location and non-"
"location fields."
msgstr ""

#: ../source/core/2dsphere.txt:114
msgid ""
"For the following examples, consider a collection ``places`` with "
"documents that store location data as :ref:`GeoJSON Point <geojson-"
"point>` in a field named ``loc``:"
msgstr ""

#: ../source/core/2dsphere.txt:139
msgid ""
"The following operation creates a :doc:`2dsphere </core/2dsphere>` index "
"on the location field ``loc``:"
msgstr ""

#: ../source/core/2dsphere.txt:147
msgid "Create a Compound Index with ``2dsphere`` Index Key"
msgstr ""

#: ../source/core/2dsphere.txt:149
msgid ""
"A :ref:`compound index <index-type-compound>` can include a ``2dsphere`` "
"index key in combination with non-geospatial index keys. For example, the"
" following operation creates a compound index where the first key ``loc``"
" is a ``2dsphere`` index key, and the remaining keys ``category`` and "
"``names`` are non-geospatial index keys, specifically descending (``-1``)"
" and ascending (``1``) keys respectively."
msgstr ""

#: ../source/core/2dsphere.txt:161
msgid ""
"Unlike the :doc:`2d </core/2d>` index, a compound ``2dsphere`` index does"
" not require the location field to be the first field indexed. For "
"example:"
msgstr ""

#~ msgid ""
#~ "A ``2dsphere`` index supports queries "
#~ "that calculate geometries on an "
#~ "earth-like sphere. The index supports "
#~ "data stored as both :term:`GeoJSON` "
#~ "objects and as legacy coordinate pairs."
#~ " The index supports legacy coordinate "
#~ "pairs by converting the data to "
#~ "the GeoJSON ``Point`` type."
#~ msgstr ""

#~ msgid ""
#~ "The ``2dsphere`` index supports all "
#~ "MongoDB geospatial queries: queries for "
#~ "inclusion, intersection and proximity."
#~ msgstr ""

#~ msgid ""
#~ "A :ref:`compound <index-type-compound>` "
#~ "``2dsphere`` index can reference multiple "
#~ "location and non-location fields within"
#~ " a collectionâ€™s documents. You can "
#~ "arrange the fields in any order."
#~ msgstr ""

#~ msgid ""
#~ "The default datum for an earth-"
#~ "like sphere in MongoDB 2.4 is "
#~ ":term:`WGS84`. Coordinate-axis order is "
#~ "**longitude, latitude**."
#~ msgstr ""

#~ msgid ""
#~ "See the :doc:`/reference/operator/query-geospatial`"
#~ " for the query operators that support"
#~ " geospatial queries."
#~ msgstr ""

#~ msgid ""
#~ "Version 2 adds support for additional"
#~ " GeoJSON object: :ref:`geojson-multipoint`, "
#~ ":ref:`geojson-multilinestring`, :ref:`geojson-"
#~ "multilinestring`, :ref:`geojson-multipolygon`, and"
#~ " :ref:`geojson-geometrycollection`."
#~ msgstr ""

#~ msgid ""
#~ "Version 2 ``2dsphere`` indexes are "
#~ "sparse by default and ignores the "
#~ ":doc:`sparse: true </core/index-sparse>` "
#~ "option. If a document lacks a "
#~ "``2dsphere`` index field (or the field"
#~ " is a ``null`` or an empty "
#~ "array), MongoDB does not add an "
#~ "entry for the document to the "
#~ "``2dsphere`` index. For inserts, MongoDB "
#~ "inserts the document but does not "
#~ "add to the ``2dsphere`` index."
#~ msgstr ""

#~ msgid ""
#~ "Version 1 ``2dsphere`` indexes are not"
#~ " sparse by default and will reject"
#~ " documents with ``null`` location fields."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB allows *only one* geospatial "
#~ "index per collection. You can create "
#~ "either a |first-geo-index| **or** "
#~ "a |second-geo-index| per collection."
#~ msgstr ""

#~ msgid ""
#~ "The :ref:`geojson-multipoint`, :ref:`geojson-"
#~ "multilinestring`, :ref:`geojson-multilinestring`, "
#~ ":ref:`geojson-multipolygon`, and :ref:`geojson-"
#~ "geometrycollection` require ``2dsphere`` index "
#~ "version 2."
#~ msgstr ""

#~ msgid ""
#~ "Interior rings cannot intersect or "
#~ "overlap each other. Interior rings can"
#~ " share an edge."
#~ msgstr ""

# e7ac0ff485af465b9d0e283f6b369fd6
#~ msgid "``2dsphere`` Version 2"
#~ msgstr ""

# 771db386000c434e99936518c9c155e7
#~ msgid ""
#~ "MongoDB 2.6 introduces a version 2 "
#~ "of ``2dsphere`` indexes. Version 2 is"
#~ " the default version of ``2dsphere`` "
#~ "indexes created in MongoDB 2.6. To "
#~ "create a ``2dsphere`` index as a "
#~ "version 1, include the option ``{ "
#~ "\"2dsphereIndexVersion\": 1 }`` when creating"
#~ " the index."
#~ msgstr ""

# 944ec96f218b4201b4f45f69897aa907
#~ msgid ""
#~ "You cannot use a ``2dsphere`` index "
#~ "as a shard key when sharding a "
#~ "collection. However, you can create and"
#~ " maintain a geospatial index on a "
#~ "sharded collection by using a different"
#~ " field as the shard key."
#~ msgstr ""

# 12c23a635a6e4aafa41b148fec45921e
#~ msgid "GeoJSON Objects"
#~ msgstr ""

# c795db3633d546d6b63fa9cdfbb07d89
#~ msgid "MongoDB supports the following GeoJSON objects:"
#~ msgstr ""

# a9d0177050ab4bcb8b387b92301907e3
#~ msgid ":ref:`geojson-point`"
#~ msgstr ""

# 0b2b8e4392fa4236a67a2d8d0fac243c
#~ msgid ":ref:`geojson-linestring`"
#~ msgstr ""

# a94c73523f0447069dec0e1dfbffc873
#~ msgid ":ref:`geojson-polygon`"
#~ msgstr ""

# 370d10cd95474165af8377f15709a35b
#~ msgid ":ref:`geojson-multipoint`"
#~ msgstr ""

# 3d3bf6463a244544bfa59693f6a06182
#~ msgid ":ref:`geojson-multilinestring`"
#~ msgstr ""

# b8cdc051d76a42f2b3f6939bfd87dd00
#~ msgid ":ref:`geojson-multipolygon`"
#~ msgstr ""

# e8f22e0b95584542a8317a26703871ea
#~ msgid ":ref:`geojson-geometrycollection`"
#~ msgstr ""

# 7ece005122f540b7bca73733c4e86b4b
#~ msgid ""
#~ "In order to index GeoJSON data, "
#~ "you must store the data in a "
#~ "location field that you name. The "
#~ "location field contains a subdocument "
#~ "with a ``type`` field specifying the "
#~ "GeoJSON object type and a "
#~ "``coordinates`` field specifying the object's"
#~ " coordinates. Always store coordinates in"
#~ " ``longitude, latitude`` order."
#~ msgstr ""

# 18892bc453994af99cacae0a77f72985
#~ msgid "Use the following syntax:"
#~ msgstr ""

# c41fc87b04d842dfb9a38480747b2e03
#~ msgid "``Point``"
#~ msgstr ""

# aa2b5ae36ac04fa9bd4364ae8b4b66ec
#~ msgid "The following example stores a GeoJSON :term:`Point`:"
#~ msgstr ""

# 78f19f7989c141abb0ed3a1e04adbf71
#~ msgid "``LineString``"
#~ msgstr ""

# 3c15a9a10f1c475188504ef74baadcda
#~ msgid "The following example stores a GeoJSON :term:`LineString`:"
#~ msgstr ""

# 028d34b2e97748929fa4bd0622178c43
#~ msgid "``Polygon``"
#~ msgstr ""

# 2903ca196ad14ef6ae2cfe71b80d38e0
#~ msgid ""
#~ ":term:`Polygons <Polygon>` consist of an "
#~ "array of GeoJSON ``LinearRing`` coordinate "
#~ "arrays. These ``LinearRings`` are closed "
#~ "``LineStrings``. Closed ``LineStrings`` have "
#~ "at least four coordinate pairs and "
#~ "specify the same position as the "
#~ "first and last coordinates."
#~ msgstr ""

# 8cd330cda2984358b0f8e9d57c491cad
#~ msgid ""
#~ "The following example stores a GeoJSON"
#~ " ``Polygon`` with an exterior ring "
#~ "and no interior rings (or holes). "
#~ "Note the first and last coordinate "
#~ "pair with the ``[ 0 , 0 ]``"
#~ " coordinate:"
#~ msgstr ""

# 155a1d4e59fb40afa6a94ce5031aefb7
#~ msgid "For Polygons with multiple rings:"
#~ msgstr ""

# 84b59cf1b389480b9c3740d4eead5c63
#~ msgid "The first described ring must be the exterior ring."
#~ msgstr ""

# 141e633fee674ab58cd131717849117e
#~ msgid "The exterior ring cannot self-intersect."
#~ msgstr ""

# 12a94b8be2db4c6ba5f64db07d6794b1
#~ msgid "Any interior ring must be entirely contained by the outer ring."
#~ msgstr ""

# 608706a3126e4447968bf49db62aaf99
#~ msgid ""
#~ "The following document represents a "
#~ "polygon with an interior ring as "
#~ "GeoJSON:"
#~ msgstr ""

# db2eda8b247e48aca354d76d4acf1d3a
#~ msgid "``MultiPoint``"
#~ msgstr ""

# 96dae288d6c749278402f12c469c8aa1
# 9f3d7fef79394b2c8ca3f26d3bfb9508
# 918a1c77a7094cce93349c673e6e2f88
# 676a63085e0b484c999176fa91ab1d17
#~ msgid "Requires ``2dsphere`` index version 2."
#~ msgstr ""

# 8e80ea7d272a4a8dae974d5435f496bd
#~ msgid ""
#~ "The following example stores coordinates "
#~ "of GeoJSON type `MultiPoint "
#~ "<http://geojson.org/geojson-spec.html#id5>`_:"
#~ msgstr ""

# 52244de660e6475d992ad258aebcd3a1
#~ msgid "``MultiLineString``"
#~ msgstr ""

# 7e0e372cc1c2463dbe7ee901722309af
#~ msgid ""
#~ "The following example stores coordinates "
#~ "of GeoJSON type `MultiLineString "
#~ "<http://geojson.org/geojson-spec.html#id6>`_:"
#~ msgstr ""

# e11417fdf4f644b5900bcdfbd11579c7
#~ msgid "``MultiPolygon``"
#~ msgstr ""

# 59f6deb7b7f0406fa7626e1f988da4d1
#~ msgid ""
#~ "The following example stores coordinates "
#~ "of GeoJSON type `MultiPolygon "
#~ "<http://geojson.org/geojson-spec.html#id7>`_:"
#~ msgstr ""

# 832a6899b1a84925811e9d00486ab832
#~ msgid "``GeometryCollection``"
#~ msgstr ""

# 041a58a4a777436399245b08b0b316f4
#~ msgid ""
#~ "The following example stores coordinates "
#~ "of GeoJSON type `GeometryCollection "
#~ "<http://geojson.org/geojson-spec.html#geometrycollection>`_:"
#~ msgstr ""

#~ msgid ""
#~ "A ``2dsphere`` index supports queries "
#~ "that calculate geometries on an "
#~ "earth-like sphere. The index supports "
#~ "data stored as both :term:`GeoJSON` "
#~ "objects and as legacy coordinate pairs."
#~ " The index supports legacy coordinate "
#~ "pairs by converting the data to "
#~ "the GeoJSON ``Point`` type. The default"
#~ " datum for an earth-like sphere "
#~ "in MongoDB 2.4 is :term:`WGS84`. "
#~ "Coordinate-axis order is **longitude, "
#~ "latitude**."
#~ msgstr ""

#~ msgid ""
#~ "The ``2dsphere`` index supports all "
#~ "MongoDB geospatial queries: queries for "
#~ "inclusion, intersection and proximity. See "
#~ "the :doc:`/reference/operator/query-geospatial` for"
#~ " the query operators that support "
#~ "geospatial queries."
#~ msgstr ""

#~ msgid ""
#~ "To create a ``2dsphere`` index, use "
#~ "the :method:`db.collection.ensureIndex` method. A"
#~ " :ref:`compound <index-type-compound>` "
#~ "``2dsphere`` index can reference multiple "
#~ "location and non-location fields within"
#~ " a collectionâ€™s documents. See "
#~ ":doc:`/tutorial/build-a-2dsphere-index` for more "
#~ "information."
#~ msgstr ""

#~ msgid ""
#~ "Version 2 adds support for additional"
#~ " GeoJSON object: :ref:`geojson-multipoint`, "
#~ ":ref:`geojson-multilinestring`, :ref:`geojson-"
#~ "multipolygon`, and :ref:`geojson-"
#~ "geometrycollection`."
#~ msgstr ""

#~ msgid ""
#~ "Version 2 ``2dsphere`` indexes are "
#~ ":doc:`sparse </core/index-sparse>` by default"
#~ " and ignores the :doc:`sparse: true "
#~ "</core/index-sparse>` option. If a "
#~ "document lacks a ``2dsphere`` index "
#~ "field (or the field is ``null`` or"
#~ " an empty array), MongoDB does not"
#~ " add an entry for the document "
#~ "to the ``2dsphere`` index. For inserts,"
#~ " MongoDB inserts the document but "
#~ "does not add to the ``2dsphere`` "
#~ "index."
#~ msgstr ""

#~ msgid ""
#~ "Earlier versions of MongoDB only support"
#~ " Version 1 ``2dsphere`` indexes. Version"
#~ " 1 ``2dsphere`` indexes are *not* "
#~ "sparse by default and will reject "
#~ "documents with ``null`` location fields."
#~ msgstr ""

#~ msgid ""
#~ "The geospatial index restriction for the"
#~ " :dbcommand:`geoNear` command nor the "
#~ ":pipeline:`$geoNear` pipeline stage exists "
#~ "because neither the :dbcommand:`geoNear` "
#~ "command nor the :pipeline:`$geoNear` pipeline"
#~ " stage syntax includes the location "
#~ "field. As such, index selection among"
#~ " multiple ``2d`` indexes or ``2dsphere``"
#~ " indexes is ambiguous."
#~ msgstr ""

#~ msgid ""
#~ "The :ref:`geojson-multipoint`, :ref:`geojson-"
#~ "multilinestring`, :ref:`geojson-multipolygon`, and"
#~ " :ref:`geojson-geometrycollection` require "
#~ "``2dsphere`` index version 2."
#~ msgstr ""

#~ msgid ""
#~ "The line that joins two points on"
#~ " a curved surface may or may "
#~ "not contain the same set of co-"
#~ "ordinates that joins those two points"
#~ " on a flat surface. The line "
#~ "that joins two points on a curved"
#~ " surface will be a geodesic. "
#~ "Carefully check points to avoid errors"
#~ " with shared edges, as well as "
#~ "overlaps and other types of "
#~ "intersections."
#~ msgstr ""

#~ msgid "Polygons with a Single Ring"
#~ msgstr ""

#~ msgid "For Polygons with a single ring, the ring cannot self-intersect."
#~ msgstr ""

#~ msgid "Polygons with Multiple Rings"
#~ msgstr ""

#~ msgid ""
#~ "Interior rings cannot intersect or "
#~ "overlap each other. Interior rings "
#~ "cannot share an edge."
#~ msgstr ""

