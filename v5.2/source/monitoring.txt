.. _java-rs-monitoring:

=======================
Monitor your Deployment
=======================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, record messages

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to set up and configure **monitoring** in the
{+driver-short+}.

Monitoring is the process of gathering information about the activities a running
program performs for use in an application or an application performance
management library.

Monitoring the MongoDB Java driver lets you understand the
driver's resource usage and performance, and can help you make informed
decisions when designing and debugging your application.

In this guide you will learn how to perform the following tasks:

- :ref:`Monitor different types of events in the MongoDB Java Driver <java-rs-monitoring-events>`
- :ref:`Monitor connection pool events with Java Management Extensions (JMX) and JConsole <java-rs-monitoring-jmx>`

.. TODO: This guide shows how to use information about the activity of the driver in code.
.. To learn how to record events in the driver, see :doc:`</logging>`.

.. _java-rs-monitoring-events:

Monitor Events
--------------

To monitor an **event**, you must register a **listener** on your ``MongoClient``
instance.

An event is any action that happens in a running program. The driver includes functionality
for listening to a subset of the events that occur when the driver is running.

A listener is a class that performs some action when certain events occur.
A listener's API defines the events it can respond to.

Each method of a listener class represents a response to a certain event. Each
method receives one argument: an object representing the event the method
responds to.

The MongoDB Java driver organizes the events it defines into three categories:

- Command events
- Server discovery and monitoring events
- Connection pool events

The following sections show how to monitor each event category.

For a full list of the events you can monitor,
`see the event package of the MongoDB Java Driver <{+api+}/mongodb-driver-core/com/mongodb/event/package-summary.html>`__.

.. _java-rs-command-events:

Command Events
~~~~~~~~~~~~~~

A command event is an event related to a MongoDB database command. Some
examples of database commands that produce command events are ``find``,
``insert``, ``delete``, and ``count``.

To monitor command events, create a class that implements the
``CommandListener`` interface and register an instance of that class with your
``MongoClient`` instance.

For more information about MongoDB database commands, see :manual:`Database Commands </reference/command/>`
in the {+mdb-server+} manual.

.. note:: Internal Commands

   The driver does not publish events for commands it calls internally. This
   includes database commands the driver uses to monitor your cluster and
   commands related to connection establishment (such as the initial ``hello``
   command).

.. important:: Redacted Output

   As a security measure, the driver redacts the contents of some command events. This
   protects the sensitive information contained in these command events. For a
   full list of redacted command events, see the
   :spec:`MongoDB command logging and monitoring specification </command-logging-and-monitoring/command-logging-and-monitoring.rst#security>`.

Example
^^^^^^^

The following example shows how to make a counter for database commands. The counter
keeps track of the number of times the driver successfully executes each database
command, and prints this information every time a database command finishes.

To implement the counter, perform the following steps:

#. Make a class with counter functionality that implements the ``CommandListener`` interface.
#. Add an instance of the new class that implements ``CommandListener`` to a ``MongoClientSettings`` object.
#. Configure a ``MongoClient`` instance with the ``MongoClientSettings`` object.

The following code defines the ``CommandCounter`` class which implements the
``CommandListener`` interface:

.. literalinclude:: /includes/monitoring/Monitoring.java
   :language: java
   :start-after: start-command-listener
   :end-before: end-command-listener
   :copyable: true
   :dedent:

The following code adds an instance of the ``CommandCounter`` class to a
``MongoClientSettings`` object, and configures a ``MongoClient`` instance with the
``MongoClientSettings`` object. The code then runs some database commands to test the
counter.

.. _java-rs-listener-mongo-client-settings-example:

.. io-code-block::
   :copyable: true

   .. input:: /includes/monitoring/Monitoring.java
      :language: java
      :start-after: start-monitor-command-example
      :end-before: end-monitor-command-example
      :dedent:

   .. output::
      :visible: false

      {find=1}
      {find=2}
      {find=2, endSessions=1}


Server Discovery and Monitoring Events
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A server discovery and monitoring (SDAM) event is an event related to a change
in the state of the MongoDB instance or cluster you have connected the driver to.

The driver defines nine SDAM events. The driver divides these nine events
between three separate listener interfaces which each listen for three of the
nine events. Here are the three interfaces and the events they listen for:

- ``ClusterListener``: :spec:`topology </server-discovery-and-monitoring/server-discovery-and-monitoring.md#topology>`-related
  events
- ``ServerListener``: events related to ``mongod`` or ``mongos`` processes
- ``ServerMonitorListener``: heartbeat-related events

To monitor a type of SDAM event, write a class that
implements one of the three preceding interfaces and register an instance of that
class with your ``MongoClient`` instance.

For a detailed description of each SDAM event in the driver, see the
:spec:`MongoDB SDAM Logging and Monitoring Specification </server-discovery-and-monitoring/server-discovery-and-monitoring-logging-and-monitoring.md#events-api>`.

.. note:: Load Balanced Mode

   The driver doesn't emit heartbeat related events when in load balanced mode. For more details about SDAM events with load balancing, see :spec:`MongoDB Load Balancer Support Specification </load-balancers/load-balancers.md#server-discovery-logging-and-monitoring>`.

Example
^^^^^^^

The following example shows how to make a listener class that prints a message that lets
you know if the driver can write to your MongoDB instance.

The following code defines the ``IsWritable`` class which implements the
``ClusterListener`` interface:

.. literalinclude:: /includes/monitoring/Monitoring.java
   :language: java
   :start-after: start-cluster-listener
   :end-before: end-cluster-listener
   :copyable: true
   :dedent:

The following code adds an instance of the ``IsWritable`` class to a
``MongoClient`` object. The code then runs a find operation to test the
``IsWritable`` class.

.. io-code-block::
   :copyable: true

   .. input:: /includes/monitoring/Monitoring.java
      :language: java
      :start-after: start-monitor-cluster-example
      :end-before: end-monitor-cluster-example
      :dedent:

   .. output::
      :visible: false

      Able to write to server

Connection Pool Events
~~~~~~~~~~~~~~~~~~~~~~

A connection pool event is an event related to a **connection pool** held by the driver.
A connection pool is a set of open TCP connections your driver maintains with
a MongoDB deployment. Connection pools help reduce the number of network handshakes
your application needs to perform with a MongoDB deployment, and can help your
application run faster.

To monitor connection pool events, write a class that implements the
``ConnectionPoolListener`` interface and register an instance of that class with your
``MongoClient`` instance.

Example
^^^^^^^

The following example shows how to make a listener class that prints a message each time
you check out a connection from your connection pool.

The following code defines the ``ConnectionPoolLibrarian`` class which implements the
``ConnectionPoolListener`` interface:

.. literalinclude:: /includes/monitoring/Monitoring.java
   :language: java
   :start-after: start-connection-pool-listener
   :end-before: end-connection-pool-listener
   :copyable: true
   :dedent:

The following code adds an instance of the ``ConnectionPoolLibrarian`` class to a
``MongoClient`` object. The code then runs a database command to test the
librarian.

.. io-code-block::
   :copyable: true

   .. input:: /includes/monitoring/Monitoring.java
      :language: java
      :start-after: start-monitor-cluster-example
      :end-before: end-monitor-cluster-example
      :dedent:

   .. output::
      :visible: false

      Let me get you the connection with id 21...

.. _java-rs-monitoring-jmx:

Monitor Connection Pool Events with JMX
---------------------------------------

You can monitor connection pool events using **Java Management Extensions (JMX)**.
JMX provides tools to monitor applications and devices.

For more information about JMX, see
`the official Oracle JMX documentation <https://docs.oracle.com/javase/tutorial/jmx/index.html>`__.

JMX Support
~~~~~~~~~~~

To enable JMX connection pool monitoring, add an instance of the
``JMXConnectionPoolListener`` class to your ``MongoClient`` object.

The ``JMXConnectionPoolListener`` class performs the following actions:

#. Creates MXBean instances for each ``mongod`` or ``mongos`` process the driver
   maintains a connection pool with
#. Registers these MXBean instances with the platform MBean server

MXBeans registered on the platform MBean server have the following properties:

.. list-table::
   :header-rows: 1
   :widths: 10 20

   * - Property
     - Description

   * - ``clusterId``
     - A client-generated unique identifier. This identifier ensures that
       each MXBean the driver makes has a unique name when an application has
       multiple ``MongoClient`` instances connected to the same MongoDB deployment.

   * - ``host``
     - The hostname of the machine running the ``mongod`` or ``mongos`` process.

   * - ``port``
     - The port on which the ``mongod`` or ``mongos`` process is listening.

   * - ``minSize``
     - The minimum size of the connection pool, including idle and in-use connections.

   * - ``maxSize``
     - The maximum size of the connection pool, including idle and in-use connections.

   * - ``size``
     - The current size of the connection pool, including idle and in-use connections.

   * - ``checkedOutCount``
     - The current count of connections that are in use.


All MXBean instances created by the driver are under the domain
``"org.mongodb.driver"``.

For more information about the topics discussed in this subsection, see the
following resources from Oracle:

- `Platform MBean Server Reference Documentation <https://docs.oracle.com/en/java/javase/16/management/overview-java-se-monitoring-and-management.html#GUID-F7B9AB8A-F5A8-472A-AEC6-93B5B7FBE7CE>`__
- `MXBean Documentation <https://docs.oracle.com/javase/tutorial/jmx/mbeans/mxbeans.html>`__
- `MBean Documentation <https://docs.oracle.com/javase/tutorial/jmx/mbeans/standard.html>`__

JMX and JConsole Example
~~~~~~~~~~~~~~~~~~~~~~~~

The following example shows how you can monitor the driver's connection pools using JMX
and **JConsole**. JConsole is a JMX-compliant GUI monitoring tool that comes with
the Java Platform.

.. tip:: Consult the Official JMX and JConsole Documentation

   The descriptions of JMX and JConsole in this example are illustrative
   rather than a source of truth. For guaranteed up-to-date information, consult
   the following official Oracle resources:

   - `JConsole documentation <https://www.oracle.com/technical-resources/articles/java/jconsole.html>`__
   - `JMX documentation <https://docs.oracle.com/javase/tutorial/jmx/index.html>`__

The following code snippet adds a ``JMXConnectionPoolListener`` to a
``MongoClient`` instance. The code then pauses execution so you can
navigate to JConsole and inspect your connection pools.

.. io-code-block::
   :copyable: true

   .. input:: /includes/monitoring/JMXMonitoring.java
      :language: java
      :start-after: start-jmx-example
      :end-before: end-jmx-example
      :dedent:

   .. output::
      :visible: false

      Navigate to JConsole to see your connection pools...

Once you have started your server, open JConsole by running the following command in your
terminal:

.. code-block:: shell

   jconsole

Once JConsole is open, perform the following actions in the GUI:

#. Select the Java process running the preceding example code.
#. Click :guilabel:`Insecure Connection` in the warning dialog box.
#. Click on the :guilabel:`MBeans` tab.
#. Inspect your connection pool events under the ``"org.mongodb.driver"`` domain.

When you no longer want to inspect your connection pools in JConsole, perform the
following tasks:

#. Exit JConsole by closing the JConsole window.
#. Stop the Java program running the preceding code snippet.

For more information about JMX and JConsole, see the following resources from
Oracle:

- `JConsole Documentation <https://www.oracle.com/technical-resources/articles/java/jconsole.html>`__
- `Monitoring and Management Guide <https://docs.oracle.com/en/java/javase/16/management/monitoring-and-management-using-jmx-technology.html>`__

For more information about the ``JMXConnectionPoolListener`` class, see
the API Documentation for
`JMXConnectionPoolListener <{+api+}/mongodb-driver-core/com/mongodb/management/JMXConnectionPoolListener.html>`__.

Include the Driver in Your Distributed Tracing System
-----------------------------------------------------

If you use a **distributed tracing system**, you can include event data from the
driver. A distributed tracing system is an application that
tracks requests as they propagate throughout different services in a
service-oriented architecture.

If you use the driver in a `Spring Cloud <https://spring.io/projects/spring-cloud>`__
application, use
`Spring Cloud Sleuth <https://spring.io/projects/spring-cloud-sleuth>`__ to
include MongoDB event data in the
`Zipkin <https://zipkin.io/>`__ distributed tracing system.

If you do not use Spring Cloud or must include driver event data in a distributed
tracing system other than Zipkin, you must write a command event listener that
manages `spans <https://docs.spring.io/spring-cloud-sleuth/docs/current-SNAPSHOT/reference/html/getting-started.html#getting-started-terminology>`__
for your desired distributed tracing system. To see an implementation of such a
listener, see the
:github:`TraceMongoCommandListener
<spring-cloud/spring-cloud-sleuth/blob/eb01d5952b2e736970efbe3fc7e9784d119eeae9/spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/mongodb/TraceMongoCommandListener.java>`
class in the Spring Cloud Sleuth source code.

To learn more about Spring Cloud Sleuth, see
`Getting Started <https://docs.spring.io/spring-cloud-sleuth/docs/current-SNAPSHOT/reference/html/getting-started.html>`__
in the Spring Cloud Sleuth documentation.

To view a detailed description of a distributed tracing system, see
`Dapper <https://research.google/pubs/pub36356/>`__ from Google Research.

API Documentation
-----------------

For more information about the classes and methods mentioned in this document, see
the following API Documentation:

- `MongoClients <{+api+}/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoClients.html>`__
- `MongoClientSettings <{+api+}/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`__
- `CommandListener <{+api+}/mongodb-driver-core/com/mongodb/event/CommandListener.html>`__
- `CommandStartedEvent <{+api+}/mongodb-driver-core/com/mongodb/event/CommandStartedEvent.html>`__
- `CommandSucceededEvent <{+api+}/mongodb-driver-core/com/mongodb/event/CommandSucceededEvent.html>`__
- `CommandFailedEvent <{+api+}/mongodb-driver-core/com/mongodb/event/CommandFailedEvent.html>`__
- `ClusterListener <{+api+}/mongodb-driver-core/com/mongodb/event/ClusterListener.html>`__
- `ClusterDescriptionChangedEvent <{+api+}/mongodb-driver-core/com/mongodb/event/ClusterDescriptionChangedEvent.html>`__
- `ConnectionPoolListener <{+api+}/mongodb-driver-core/com/mongodb/event/ConnectionPoolListener.html>`__
- `ConnectionCheckedOutEvent <{+api+}/mongodb-driver-core/com/mongodb/event/ConnectionCheckedOutEvent.html>`__
- `ConnectionCheckOutFailedEvent <{+api+}/mongodb-driver-core/com/mongodb/event/ConnectionCheckOutFailedEvent.html>`__
