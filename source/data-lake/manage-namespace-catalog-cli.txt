.. _manage-ns-catalog-cli:

==========================================================
Manage Namespace Metadata Catalog for Wildcard Collections
==========================================================

.. default-domain:: mongodb

.. include:: /includes/fact-data-lake-beta.rst

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+data-lake+} namespace catalog contains namespace metadata 
(such as databases, collections, and partitions) for each wildcard (``*``) 
collection in each {+data-lake-store+} in the {+data-lake-short+} storage 
configuration. For commands and queries on wildcard collections, 
{+data-lake+} returns the data from the catalog or returns an error if the 
{+data-lake-store+} does not exist. 

When objects that are included in a wildcard collection specification are 
modified in your |s3| bucket, the catalog must be updated for you to see 
the changes when you run ``list`` commands against wildcard collections.
By default, the catalog is refreshed every hour for all active 
{+data-lake-short+}\s. In addition, the namespace metadata catalog is 
refreshed in the background when you: 

- :ref:`Update the storage configuration <datalake-setstorageconfig>`. 
- Run the ``show collections`` command.
- Query a collection.
- Run the :ref:`adl-updateCatalog-cmd` command.

You can determine when the catalog was last updated by using the 
:ref:`adl-catalogInfo-cmd` command and can manually update the catalog 
by using the :ref:`adl-updateCatalog-cmd` command. You must have the 
:authrole:`atlasAdmin` role to update the catalog.

.. _adl-catalogInfo-cmd:

``catalogInfo`` 
---------------

The ``catalogInfo`` command returns an array of the stores and the  
:manual:`ISODate </reference/glossary/#term-isodate>` when the 
namespace metadata in the catalog was last updated.

.. _adl-catalogInfo-cmd-syntax:

Syntax 
~~~~~~

.. code-block:: text 

   db.runCommand({ "catalogInfo" : 1, "stores": ["<storeName>"] })

.. _adl-catalogInfo-cmd-usage:

Usage 
~~~~~

To retrieve the last updated timestamp for all the stores, run the 
following command: 

.. code-block:: text 

   db.runCommand({ "catalogInfo" : 1 })

To retrieve the last updated timestamp for a specific store, run 
the following command: 

.. code-block:: text 

   db.runCommand({ "catalogInfo" : 1, "stores": ["<storeName>"] })

To retrieve the last updated timestamp for a list of stores, run 
the following command: 

.. code-block:: text 

   db.runCommand({ "catalogInfo" : 1, "stores": ["<storeName>",...] })

.. _adl-catalogInfo-cmd-output:

Output 
~~~~~~

The command returns output similar to the following if the command 
succeeds: 

.. code-block:: json 
   :copyable: false 

   {
	  "ok" : 1,
	  "stores" : [
		 {
			"<storeName>" : ISODate("<date>")
		 }
	  ]
   }

where: 

- ``storeName`` is the name of the |s3| store 
- ``date`` is the date and timestamp in :manual:`ISODate 
  </reference/glossary/#term-isodate>` format

.. _adl-catalogInfo-cmd-eg:

Example
~~~~~~~

The following command returns the last updated date and timestamp for 
all the stores.

.. code-block:: json 
   
   db.runCommand({"catalogInfo":1}) 

The previous command returns the following output: 

.. code-block:: json 
   :copyable: false 

   {
	  "ok" : 1,
	  "stores" : [
		 {
			"s3store" : ISODate("2020-03-25T12:35:32.165Z")
		 },
		 {
			"egS3Store" : ISODate("2020-03-25T12:35:32.165Z")
		 }
	  ]
   }

.. _adl-updateCatalog-cmd:

``updateCatalog`` 
-----------------

The ``updateCatalog`` command updates the namespace metadata in the 
catalog. You can verify by running the :ref:`adl-catalogInfo-cmd` command, 
which shows the :manual:`ISODate </reference/glossary/#term-isodate>` when the 
catalog was last updated. If you have a large {+data-lake-store+}, it may take 
a while to update the catalog.

.. _adl-updateCatalog-cmd-syntax: 

Syntax 
~~~~~~ 

.. code-block:: text 

   db.runCommand({ "updateCatalog" : 1, "background" : true }) 

.. _adl-updateCatalog-cmd-usage: 

Usage 
~~~~~ 

To update the catalog, run the following command: 

.. code-block:: text 

   db.runCommand({ "updateCatalog" : 1 }) 

The previous command runs in the foreground and is similar to running 
the command with ``background`` set to ``false``. 

To update the catalog in the background, run the following command:

.. code-block:: text 

   db.runCommand({ "updateCatalog" : 1, "background" : true }) 

.. _adl-updateCatalog-cmd-output: 

Output 
~~~~~~ 

The command returns the following output: 

.. code-block:: json 
   :copyable: false 

   { "ok" : 1 } 

.. _adl-updateCatalog-cmd-eg: 

Example 
~~~~~~~ 

The following command updates the namespace metadata in the catalog: 

.. code-block:: json 

   db.runCommand({ "updateCatalog" : 1 }) 

The previous command returns the following output: 

.. code-block:: json 
   :copyable: false 

   { "ok" : 1 } 
