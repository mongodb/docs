# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/write-concern.txt:6
# 7694c4d85bc34d2c9afdb37e1cbe6ec1
msgid "Write Concern Reference"
msgstr ""

#: ../source/reference/write-concern.txt:10
# eafab616e7e54da3a34c31bd870b59a3
msgid ":doc:`Write concern </core/write-concern>` describes the guarantee that MongoDB provides when reporting on the success of a write operation."
msgstr ""

#: ../source/reference/write-concern.txt:13
# df84575b4ba44052a84854770a43c228
msgid "A new protocol for :ref:`write operations <rel-notes-write-operations>` integrates write concerns with the write operations and eliminates the need to call the :dbcommand:`getLastError` command. Previous versions required a :dbcommand:`getLastError` command immediately after a write operation to specify the write concern."
msgstr ""

#: ../source/reference/write-concern.txt:22
# 8253f77eb95c45b89244e87c87602218
msgid "Read Isolation Behavior"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
# fb7a1d3293c54a11b89480e271ddc82a
msgid "MongoDB allows clients to read documents inserted or modified before it commits these modifications to disk, regardless of write concern level or journaling configuration. As a result, applications may observe two classes of behaviors:"
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
# 072cffb78df24c969f1a8489c3d9a2e4
msgid "For systems with multiple concurrent readers and writers, MongoDB will allow clients to read the results of a write operation before the write operation returns."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
# 08b790fcf89041f29939bc22da6e02ea
msgid "If the :program:`mongod` terminates before the journal commits, even if a write returns successfully, queries may have read data that will not exist after the :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
# a4f36393b9ce433f9538e7bd49b86ac6
msgid "Other database systems refer to these isolation semantics as *read uncommitted*. For all inserts and updates, MongoDB modifies each document in isolation: clients never see documents in intermediate states. For multi-document operations, MongoDB does not provide any multi-document transactions or isolation."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
# 74023bf1596847dc8be5e067f8676669
msgid "When a standalone :program:`mongod` returns a successful *journaled write concern*, the data is fully committed to disk and will be available after :program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
# 9f0ec809f5814b8da32b0d34183c8134
msgid "For replica sets, write operations are durable only after a write replicates and commits to the journal on a majority of the voting members of the set. MongoDB regularly commits data to the journal regardless of journaled write concern: use the :setting:`~storage.journal.commitIntervalMs` to control how often a :program:`mongod` commits the journal."
msgstr ""

#: ../source/reference/write-concern.txt:27
# 71f25c9556b5457b8f74a17d14accf25
msgid "Available Write Concern"
msgstr ""

#: ../source/reference/write-concern.txt:29
# e33fedbe6ff347cc9ae7dab24cad8135
msgid "Write concern can include the :ref:`w <wc-w>` option to specify the required number of acknowledgments before returning, the :ref:`j <wc-j>` option to require writes to the journal before returning, and :ref:`wtimeout <wc-wtimeout>` option to specify a time limit to prevent write operations from blocking indefinitely."
msgstr ""

#: ../source/reference/write-concern.txt:35
# c7c5456aceb74f92a1c533653cc39621
msgid "In sharded clusters, :program:`mongos` instances will pass the write concern on to the shard."
msgstr ""

#: ../source/reference/write-concern.txt:41
# 4bdf1d15826b4cd5807878d8a7a8384e
msgid "``w`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:43
# c2cde476825f48d085d045bd2d5299dc
msgid "The ``w`` option provides the ability to disable write concern entirely *as well as* specify the write concern for :term:`replica sets <replica set>`."
msgstr ""

#: ../source/reference/write-concern.txt:47
# 30ede92227704f32b9e79692f8021dbe
msgid "MongoDB uses ``w: 1`` as the default write concern. ``w: 1`` provides basic receipt acknowledgment."
msgstr ""

#: ../source/reference/write-concern.txt:50
# 4884c99fa393489db00f418558bf20ac
msgid "The ``w`` option accepts the following values:"
msgstr ""

#: ../source/reference/write-concern.txt:56
# 5afaf7588d20446c9b501f0e65385aa0
msgid "Value"
msgstr ""

#: ../source/reference/write-concern.txt:58
# 4b8971c57fb74127aa72aa21be106ace
msgid "Description"
msgstr ""

#: ../source/reference/write-concern.txt:60
# 3a2648eed8c947f7be2747b461fb5d12
msgid "``1``"
msgstr ""

#: ../source/reference/write-concern.txt:62
# 6034bfb5aae843ea8c7a36a5a17f9f83
msgid "Provides acknowledgment of write operations on a standalone :program:`mongod` or the :term:`primary` in a replica set."
msgstr ""

#: ../source/reference/write-concern.txt:65
# 90b8036fdebe401a9dbe82363f1cbbf4
msgid "This is the default write concern for MongoDB."
msgstr ""

#: ../source/reference/write-concern.txt:67
# 00c81dfd24344e1da259f35ab739df5f
msgid "``0``"
msgstr ""

#: ../source/reference/write-concern.txt:69
# 4057e6ee918b4f3cbbd40c25ec49bf64
msgid "Disables basic acknowledgment of write operations, but returns information about socket exceptions and networking errors to the application."
msgstr ""

#: ../source/reference/write-concern.txt:73
# 5a153713671d4a49a72285ea1b88e24e
msgid "If you disable basic write operation acknowledgment but require journal commit acknowledgment, the journal commit prevails, and the server will require that :program:`mongod` acknowledge the write operation."
msgstr ""

#: ../source/reference/write-concern.txt:78
# 3f83c234964b4b0f93dac6fcb19d5460
msgid "<Number greater than 1>"
msgstr ""

#: ../source/reference/write-concern.txt:80
# 042d2ac2243f43f89362906210ab2be3
msgid "Guarantees that write operations have propagated successfully to the specified number of replica set members including the primary."
msgstr ""

#: ../source/reference/write-concern.txt:84
# ed2544aaef584ef9bfc5b58321226db0
msgid "For example, ``w: 2`` indicates acknowledgements from the primary and at least one secondary."
msgstr ""

#: ../source/reference/write-concern.txt:87
# 5feeca561089431a998b2d0e59d831f9
msgid "If you set ``w`` to a number that is greater than the number of set members that hold data, MongoDB waits for the non-existent members to become available, which means MongoDB blocks indefinitely."
msgstr ""

#: ../source/reference/write-concern.txt:92
# b7b33c16304d4472be691acd2eec83a3
msgid "``\"majority\"``"
msgstr ""

#: ../source/reference/write-concern.txt:94
# 02709f7a53aa46b9a8ead7602c9070b1
msgid "Confirms that write operations have propagated to the majority of voting nodes: a majority of the replica set's voting members must acknowledge the write operation before it succeeds. This allows you to avoid hard coding assumptions about the size of your replica set into your application."
msgstr ""

#: ../source/reference/write-concern.txt:100
# 7c639fd203d847b9bd8308c2d6bcbc1f
msgid "In previous versions, ``w: \"majority\"`` refers to the majority of the replica set's members."
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
# 0b379d242ddb4218b2ecd9488d60241c
msgid "In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w: \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, ``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-slave>` deployments."
msgstr ""

#: ../source/reference/write-concern.txt:106
# c27b1f4ff3784b788284de8bec0651e1
msgid "<tag set>"
msgstr ""

#: ../source/reference/write-concern.txt:108
# 954864cebbe645d7adf7a7646713c536
msgid "By specifying a :ref:`tag set <replica-set-configuration-tag-sets>`, you can have fine-grained control over which replica set members must acknowledge a write operation to satisfy the required level of write concern."
msgstr ""

#: ../source/reference/write-concern.txt:116
# eb4a751350d246688ee9daf183742a72
msgid "``j`` Option"
msgstr ""

#: ../source/reference/write-concern.txt:118
# 16894c9d6f814493a7c33ebd5d5bf977
msgid "The ``j`` option confirms that the :program:`mongod` instance has written the data to the on-disk journal. This ensures that data is not lost if the :program:`mongod` instance shuts down unexpectedly. Set to ``true`` to enable."
msgstr ""

#: ../source/reference/write-concern.txt:123
# ad69ee49a4024884b99c6cdf9759b94b
msgid "Specifying a write concern that includes ``j: true`` to a :program:`mongod` or :program:`mongos` running with :option:`--nojournal` option now errors. Previous versions would ignore the ``j: true``."
msgstr ""

#: ../source/includes/note-write-concern-journaled-replication.rst:1
# f0d4b7f6025f4f76b1c5d8db7676f564
msgid "Requiring *journaled* write concern in a replica set only requires a journal commit of the write operation to the :term:`primary` of the set regardless of the level of *replica acknowledged* write concern."
msgstr ""

#: ../source/reference/write-concern.txt:134
# 86207137977f4dee915febc78a4f202c
msgid "``wtimeout``"
msgstr ""

#: ../source/reference/write-concern.txt:136
# 0a468a4ad4b64571a6e752072b874499
msgid "This option specifies a time limit, in milliseconds, for the write concern. ``wtimeout`` is only applicable for ``w`` values greater than ``1``."
msgstr ""

#: ../source/reference/write-concern.txt:140
# d396c86a4bb74a55a9493ed583e19184
msgid "``wtimeout`` causes write operations to return with an error after the specified limit, even if the required write concern will eventually succeed. When these write operations return, MongoDB **does not** undo successful data modifications performed before the write concern exceeded the ``wtimeout`` time limit."
msgstr ""

#: ../source/reference/write-concern.txt:146
# 1902c14ee74640e688a9d9cd2d1d55bc
msgid "If you do not specify the ``wtimeout`` option and the level of write concern is unachievable, the write operation will block indefinitely. Specifying a ``wtimeout`` value of ``0`` is equivalent to a write concern without the ``wtimeout`` option."
msgstr ""

#: ../source/reference/write-concern.txt:151
# 989e8c65cbd34d0594137c1345fb651d
msgid ":doc:`Write Concern Introduction </core/write-concern>` and :ref:`Write Concern for Replica Sets <replica-set-write-concern>`."
msgstr ""

