.. _write-operations-write-concern:
.. _write-concern-operation:
.. _write-concern-internals:
.. _write-concern:

=============
Write Concern
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Write concern describes the level of acknowledgement requested from
MongoDB for write operations to a standalone :program:`mongod` or to
:doc:`replica sets </replication>` or to
:doc:`sharded clusters </core/sharding-introduction>`. In
sharded clusters, :program:`mongos` instances will pass the write
concern on to the shards.

.. versionchanged:: 3.2

   For replica sets using :rsconf:`protocolVersion: 1
   <protocolVersion>` **and** running with the :term:`journal` enabled:

   - :writeconcern:`w: "majority" <"majority">` implies :ref:`j: true
     <wc-j>`.

   - :term:`Secondary members <secondary>` acknowledge replicated write
     operations after the secondary members have written to their
     respective on-disk journals, regardless of the :ref:`j <wc-j>`
     option used for the write on the :term:`primary`.

.. versionchanged:: 2.6
   A new protocol for :ref:`write operations
   <rel-notes-write-operations>` integrates write concerns with the
   write operations and eliminates the need to call the
   :dbcommand:`getLastError` command. Previous versions required a
   :dbcommand:`getLastError` command immediately after a write
   operation to specify the write concern.

Write Concern Specification
---------------------------

Write concern can include the following fields:

.. code-block:: javascript

   { w: <value>, j: <boolean>, wtimeout: <number> }

- the :ref:`w <wc-w>` option to request acknowledgment that the write
  operation has propagated to a specified number of :program:`mongod`
  instances or to :program:`mongod` instances with specified tags.

- the :ref:`j <wc-j>` option to request acknowledgement that the write
  operation has been written to the journal, and

- :ref:`wtimeout <wc-wtimeout>` option to specify a time limit to
  prevent write operations from blocking indefinitely.

.. _wc-w:

``w`` Option
~~~~~~~~~~~~

The ``w`` option requests acknowledgement that the write operation has
propagated to a specified number of :program:`mongod` instances or to
:program:`mongod` instances with specified tags.

Using the ``w`` option, the following ``w: <value>`` write concerns are
available:

.. note::

   Standalone :program:`mongod` instances and primaries of replica sets
   acknowledge write operations after applying the write in memory,
   unless :ref:`j:true <wc-j>`.

   .. versionchanged:: 3.2

      For replica sets using :rsconf:`protocolVersion: 1
      <protocolVersion>`, secondaries acknowledge write operations after
      the secondary members have written to their respective on-disk
      :doc:`journals </core/journaling>`, regardless of the :ref:`j
      <wc-j>` option.

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Value
     - Description

   * - .. writeconcern:: <number>

     - Requests acknowledgement that the write operation has propagated
       to the specified number of :program:`mongod` instances. For
       example:

       ``w: 1``
         Requests acknowledgement that the write operation has
         propagated to the standalone :program:`mongod` or the primary
         in a replica set. ``w: 1`` is the default write concern for
         MongoDB.

       ``w: 0``
         Requests no acknowledgment of the write operation. However, ``w:
         0`` may return information about socket exceptions and
         networking errors to the application.

         If you specify ``w: 0`` but include :ref:`j: true <wc-j>`, the
         :ref:`j: true <wc-j>` prevails to request acknowledgement from
         the standalone :program:`mongod` or the primary of a replica
         set.

       Numbers greater than 1 are valid only for replica sets to
       request acknowledgement from specified number of members,
       including the primary.

   * - .. writeconcern:: "majority"

     - *Changed in version 3.2*

       Requests acknowledgment that write operations have propagated to
       the majority of voting nodes [#majority-definition]_, including
       the primary, and have been written to the on-disk :doc:`journal
       </core/journaling>` for these nodes.

       For replica sets using :rsconf:`protocolVersion: 1
       <protocolVersion>`, :writeconcern:`w: "majority" <"majority">`
       implies :ref:`j: true <wc-j>`. So, unlike ``w: <number>``, with
       :writeconcern:`w: "majority" <"majority">`, the primary also
       writes to the on-disk journal before acknowledging the write.

       After the write operation returns with a :writeconcern:`w:
       "majority" <"majority">` acknowledgement to the client, the
       client can read the result of that write with a
       :readconcern:`"majority"` readConcern.

   * - .. writeconcern:: <tag set>

     - Requests acknowledgement that the write operations have
       propagated to a replica set member with the specified :ref:`tag
       <replica-set-configuration-tag-sets>`.

.. _wc-j:

``j`` Option
~~~~~~~~~~~~

The :ref:`j <wc-j>` option requests acknowledgement from MongoDB that
the write operation has been written to the :doc:`journal
</core/journaling>`.

.. list-table::
   :widths: 25 75

   * - .. writeconcern:: j

     - Requests acknowledgement that the :program:`mongod` instances, as
       specified in the :ref:`w: \<value\> <wc-w>`, have written to the
       on-disk journal. ``j: true`` does not by itself guarantee that
       the write will not be rolled back due to replica set primary
       failover.

       .. versionchanged:: 3.2

          .. include:: /includes/note-write-concern-journaled-replication.rst

          For replica sets using :rsconf:`protocolVersion: 1
          <protocolVersion>`, :writeconcern:`w: "majority"
          <"majority">` implies :ref:`j: true <wc-j>`,
          if journaling is enabled. Journaling is enabled by default.

.. versionchanged:: 2.6
   Specifying a write concern that includes ``j: true`` to
   a :program:`mongod` or :program:`mongos` running with
   :option:`--nojournal` option produces an error. Previous versions would
   ignore the ``j: true``.

.. _wc-wtimeout:

``wtimeout``
~~~~~~~~~~~~

This option specifies a time limit, in milliseconds, for the write
concern. ``wtimeout`` is only applicable for ``w`` values greater than
``1``.

``wtimeout`` causes write operations to return with an error
after the specified limit, even if the required write concern will
eventually succeed. When these write operations return,
MongoDB **does not** undo successful data modifications performed
before the write concern exceeded the ``wtimeout`` time limit.

If you do not specify the ``wtimeout`` option and the level of write
concern is unachievable, the write operation will block indefinitely.
Specifying a ``wtimeout`` value of ``0`` is equivalent to a write
concern without the ``wtimeout`` option.

.. [#majority-definition]

   .. versionchanged:: 3.0

      Prior to MongoDB 3.0, ``w: "majority"`` refers to the
      majority of the replica set's members.

   .. include:: /includes/fact-master-slave-majority.rst
