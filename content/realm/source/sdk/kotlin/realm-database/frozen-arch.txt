.. meta::
   :robots: noindex, nosnippet

.. _kotlin-frozen-architecture:

================================
Frozen Architecture - Kotlin SDK
================================

Unlike the other Realm SDKs, the Kotlin SDK
does not provide live objects and collections that
update simultaneously with underlying data. Instead,
the Kotlin SDK works exclusively with **frozen objects**
that can be passed between threads safely.

Work with Frozen Objects
------------------------

Because frozen objects don't automatically update when data changes
in your realm, they work a little differently from the live objects
you may have used in other Realm SDKs.

Access a Live Version of Frozen Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to :ref:`update <kotlin-update-objects>` or :ref:`delete <kotlin-delete-objects>`
objects, they must be live. You can convert a frozen
object to a live object in a transaction with `mutableRealm.findLatest()
<{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/find-latest.html>`__.
Live objects are only accessible inside of a write transaction within
a `write <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write.html>`__
or `writeBlocking <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write-blocking.html>`__
closure.

Objects returned from a write closure become frozen objects when the
write transaction completes.

.. literalinclude:: /examples/generated/kotlin/MigrateFromJavaToKotlinSDKTest.snippet.deletes.kt
   :language: kotlin

.. tip:: 

   You can check if an object is frozen with the 
   `isFrozen() <{+kotlin-local-prefix+}io.realm.kotlin.ext/is-frozen.html>`__ 
   method.

Thread-safe Realms
------------------

The `Realm <{+kotlin-local-prefix+}io.realm.kotlin/-realm/index.html>`__
class is no longer thread-confined, so you can share a single realm
across multiple threads. You no longer need to handle the realm
lifecycle explicitly with calls to
`Realm.close() <{+kotlin-local-prefix+}io.realm.kotlin/-realm/close.html>`__.

Access Changes
~~~~~~~~~~~~~~

To access changes to objects and collections, use
`Coroutines <https://kotlinlang.org/docs/coroutines-overview.html>`__
and the `Flow API <https://kotlinlang.org/docs/flow.html>`__. Changes
are thread-safe, so you can access them from any context. Notifications
are handled on a dedicated internal notifier thread. Frozen objects now
support change listeners.

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.change-listeners.kt
   :language: kotlin
   :copyable: false

.. important:: Flows API Requires Kotlinx Coroutines

   To use the Flows API in your Kotlin Multiplatform project, install the
   :github:`kotlinx.coroutines <Kotlin/kotlinx.coroutines#multiplatform>`
   library.

Just like in other Realm SDKs, write transactions implicitly
advance your realm to the most recent version of data stored on disk.

.. seealso::

   For more information on notifications, refer to :ref:`React to Changes <kotlin-react-to-changes>`.

Lazy Loading
~~~~~~~~~~~~

Realm objects are still lazy-loaded by default. This allows
you to query large collections of objects without reading large amounts
of data from disk. This also means that the first access to
a field of an object will always return the most recent data.

