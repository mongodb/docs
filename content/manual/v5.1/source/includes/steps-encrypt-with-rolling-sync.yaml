title: Prepare a server.
stepnum: 1
ref: "stp-clear-the-data"
level: 4
content: |

   Follow these steps to prepare the server: 

   - Pick one of the secondary servers. 
   - Stop :binary:`~bin.mongod` on the secondary server.
   - Optional: Backup the data in :setting:`~storage.dbPath`. If a full
     backup is not required, consider backing up just the
     ``diagnostic.data`` directory to preserve potentially-useful
     troubleshooting data in the event of an issue. See :ref:`Full Time
     Diagnostic Data Capture <ftdc-stub>` for more information.
   - Remove the files and directories in the
     :setting:`~storage.dbPath`.
---
title: Enable encryption.
stepnum: 2
ref: "stp-enable-encryption"
level: 4
content: |

   Start the secondary server with :ref:`encryption enabled
   <encrypt-with-new-key>`. The :binary:`~bin.mongod` instance creates
   a new keystore.
---
title: Synchronize the data.
stepnum: 3
ref: "stp-sync-the-data"
level: 4
content: |

   Import the data from the primary. :doc:`Start the mongod process
   </tutorial/manage-mongodb-processes>`, specifying
   :ref:`cli-mongod-replica-set` as appropriate.

   :binary:`~bin.mongod` performs an initial sync and encrypts the data
   during the sync up process.

---
title: Repeat the process on the secondaries.
stepnum: 4
ref: "stp-repeat-the-process"
level: 4
content: |

   When the first secondary has finished importing and encrypting the
   data, repeat the process on the other secondary
   :binary:`~bin.mongod` instances.
---
title: Encrypt the primary.
stepnum: 5
ref: "stp-encrypt-the-primary"
level: 4
content: |

   When the all the secondaries have been encrypted, :method:`step down
   <rs.stepDown>` the primary. Eligible secondaries will elect a new 
   primary.

   The old primary is now a secondary. Repeat the steps to remove the
   unencrypted data and then run an :ref:`initial sync
   <replica-set-initial-sync>`.
...

