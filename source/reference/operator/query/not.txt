====
$not
====

.. default-domain:: mongodb

.. facet::
   :name: programming_language
   :values: shell, python

.. meta::
   :description: Use the $not operator to perform a logical NOT operation on an operator expression. $not selects documents that do not match the operator expression, even those without the field. Use $not for logical disjunctions, not for direct field checks.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. query:: $not

   :query:`$not` performs a logical ``NOT`` operation on the
   specified ``<operator-expression>`` and selects the documents that
   do *not* match the ``<operator-expression>``. This includes
   documents that do not contain the ``field``.


Compatibility
-------------

.. |operator-method| replace:: ``$not``

.. include:: /includes/fact-compatibility.rst

Syntax
------

The :query:`$not` operator has the following form:

.. code-block:: javascript

   { field: { $not: { <operator-expression> } } }

Consider the following example:

.. code-block:: javascript

   db.inventory.find( { price: { $not: { $gt: 1.99 } } } )

This query will select all documents in the ``inventory`` collection where:

- the ``price`` field value is less than or equal to ``1.99`` **or**
- the ``price`` field does not exist

``{ $not: { $gt: 1.99 } }`` is different from the :query:`$lte`
operator. ``{ $lte: 1.99 }`` returns *only* the documents where
``price`` field exists and its value is less than or equal to
``1.99``.

You must use the ``$not`` operator with another operator expression. For
example, to use ``$not`` to perform an inequality check, use this
syntax:

.. code-block:: javascript
   
   { price: { $not: { $eq: 1.99 } } }
   
The preceding query is equivalent to:

.. code-block:: javascript
   
   { price: { $ne: 1.99 } }
   
The following ``$not`` query is **invalid** because it attempts to
compare a field without an operator:

.. code-block:: javascript
   :copyable: false
   
   { price: { $not: 1.99 } }

Behavior
--------

Arrays
~~~~~~

When passed an array argument, the ``$not`` operator may yield
unexpected results. To match documents based on multiple false
conditions, use :query:`$nor`.

Regular Expressions
~~~~~~~~~~~~~~~~~~~

:query:`$not` operator can perform logical ``NOT`` operation on:

- Regular expression objects (i.e. ``/pattern/``)

  For example, the following query selects all documents in the
  ``inventory`` collection where the ``item`` field value does *not*
  start with the letter ``p``.

  .. code-block:: javascript

     db.inventory.find( { item: { $not: /^p.*/ } } )

- :query:`$regex` operator expression 

  For example, the following query selects all documents in the
  ``inventory`` collection where the ``item`` field value does *not*
  start with the letter ``p``.

  .. code-block:: javascript

     db.inventory.find( { item: { $not: { $regex: "^p.*" } } } )
     db.inventory.find( { item: { $not: { $regex: /^p.*/ } } } )

- driver language's regular expression objects

  For example, the following `PyMongo
  <https://pymongo.readthedocs.io/en/stable/index.html>`__ query uses
  Python's ``re.compile()`` method to compile a regular expression:

  .. code-block:: python

     import re
     for noMatch in db.inventory.find( { "item": { "$not": re.compile("^p.*") } } ):
         print noMatch

.. seealso::

   - :method:`~db.collection.find()`
   - :update:`$set`
   - :query:`$gt`
   - :query:`$regex`
