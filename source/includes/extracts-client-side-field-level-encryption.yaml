ref: csfle-requires-enabling-encryption
content: |

  The :binary:`~bin.mongosh` client-side field level encryption methods
  require a database connection with client-side field level encryption
  enabled. If the current database connection was not initiated with
  client-side field level encryption enabled, either:
    
  - Use the :method:`Mongo()` constructor from the :binary:`~bin.mongosh`
    to establish a connection with the required client-side field
    level encryption options. The :method:`Mongo()` method supports the
    following Key Management Service (KMS) providers for Customer
    Master Key (CMK) management:

    - :ref:`Amazon Web Services KMS <qe-fundamentals-kms-providers-aws>`
    - :ref:`Azure Key Vault <qe-fundamentals-kms-providers-azure>`
    - :ref:`Google Cloud Platform KMS <qe-fundamentals-kms-providers-gcp>`
    - :ref:`Locally Managed Key <qe-fundamentals-kms-providers-local>`

    *or*

  - Use the :binary:`~bin.mongosh` :ref:`command line options
    <mongosh-client-side-field-level-encryption-options>` to establish a
    connection with the required options. The command line options only
    support the :ref:`Amazon Web Services KMS
    <qe-fundamentals-kms-providers-aws>` provider for CMK management. 
---
ref: csfle-keyvault-unique-index
content: |

  The :method:`getKeyVault()` method automatically creates a
  :ref:`unique index <index-type-unique>`  on the ``keyAltNames`` field
  with a :ref:`partial index <index-type-partial>` filter for only
  documents where ``keyAltNames`` exists. :method:`getKeyVault()`
  creates this index in the key vault collection. This prevents any two
  data encryption keys in the same key vault from having the same key
  alternative name and therefore avoids ambiguity around which data
  encryption key is appropriate for encryption/decryption.

  .. warning::

     Do not drop the unique index created by :method:`getKeyVault()`.
     {+csfle+} operations depend on
     server-enforced uniqueness of ``keyAltNames``. Removing the index
     may lead to unexpected or unpredictable behavior.
     
---
ref: csfle-environmental-variables
content: |

  To mitigate the risk of the AWS Access Key or AWS Secret Key leaking
  into logs, consider specifying an environment variable containing the
  required values as part of the :binary:`~bin.mongosh` startup. For
  example, the following operation loads the ``AWS_ACCESS_KEY_ID`` and
  ``AWS_SECRET_ACCESS_KEY`` environment variables into local variables
  in :binary:`~bin.mongosh`:

  .. code-block:: bash

     mongosh --eval "
         var AWS_ACCESS_KEY_ID = '$AWS_ACCESS_KEY_ID'
         var AWS_SECRET_ACCESS_KEY = '$AWS_SECRET_ACCESS_KEY'
       " \
       --shell
       --nodb

  Use the created ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` 
  variables in the shell to reference the AWS credentials.

---
ref: csfle-enterprise-atlas-only
content: |

  .. note:: Enterprise Feature

     The automatic feature of field level encryption is only available
     in MongoDB Enterprise 4.2 or later, and MongoDB Atlas 4.2 or later
     clusters. 
---
ref: csfle-aws-kms-4.2.0-4.2.1-broken
content: |

  :gold:`IMPORTANT:` For AWS KMS support, use :binary:`~bin.mongosh`,
  or the MongoDB 4.2.2 or later legacy ``mongo`` shell. The 4.2.0 and
  4.2.1 legacy ``mongo`` shell do not support the AWS KMS service due
  to an unexpected change in the KMS response object. See
  :issue:`SERVER-44721` for more information.
...
