#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/operator/aggregation/out.txt:5
msgid "$out (aggregation)"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:18
msgid "Definition"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:22
msgid ""
"Takes the documents returned by the aggregation pipeline and writes them "
"to a specified collection. The :pipeline:`$out` operator must be *the "
"last stage* in the pipeline."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:28
msgid ""
"MongoDB 3.2 added support for :ref:`document validation <3.2-rel-notes-"
"document-validation>`. The ``bypassDocumentValidation`` field enables you"
" to bypass document validation during the :pipeline:`$out` phase of the "
"aggregation operation. This lets you insert documents that do not meet "
"the validation requirements. Specify ``bypassDocumentValidation`` as an "
"option on the aggregation method or command."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:36
msgid "The :pipeline:`$out` stage has the following prototype form:"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:42
msgid ":pipeline:`$out` takes a string that specifies the output collection name."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:47
msgid ""
"You cannot specify a sharded collection as the output collection. The "
"input collection for a pipeline can be sharded."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:50
msgid ""
"The :pipeline:`$out` operator cannot write results to a :doc:`capped "
"collection </core/capped-collections>`."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:54
msgid "Behaviors"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:57
msgid "Create New Collection"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:59
msgid ""
"The :pipeline:`$out` operation creates a new collection in the current "
"database if one does not already exist. The collection is not visible "
"until the aggregation completes. If the aggregation fails, MongoDB does "
"not create the collection."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:65
msgid "Replace Existing Collection"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:67
msgid ""
"If the collection specified by the :pipeline:`$out` operation already "
"exists, then upon completion of the aggregation, the :pipeline:`$out` "
"stage atomically replaces the existing collection with the new results "
"collection. Specifically, the :pipeline:`$out` operation:"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:72
msgid "Creates a temp collection."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:73
msgid "Copies the indexes from the existing collection to the temp collection."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:74
msgid "Inserts the documents into the temp collection."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:75
msgid ""
"Calls :method:`db.collection.renameCollection` with ``dropTarget: true`` "
"to rename the temp collection to the destination collection."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:78
msgid ""
"The :pipeline:`$out` operation does not change any indexes that existed "
"on the previous collection. If the aggregation fails, the "
":pipeline:`$out` operation makes no changes to the pre-existing "
"collection."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:83
msgid "Index Constraints"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:85
msgid ""
"The pipeline will fail to complete if the documents produced by the "
"pipeline would violate any unique indexes, including the index on the "
"``_id`` field of the original output collection."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:90
msgid "Example"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:92
msgid "A collection ``books`` contains the following documents:"
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:102
msgid ""
"The following aggregation operation pivots the data in the ``books`` "
"collection to have titles grouped by authors and then writes the results "
"to the ``authors`` collection."
msgstr ""

#: ../source/reference/operator/aggregation/out.txt:113
msgid ""
"After the operation, the ``authors`` collection contains the following "
"documents:"
msgstr ""

#~ msgid ""
#~ "Takes the documents returned by the "
#~ "aggregation pipeline and writes them to"
#~ " a specified collection. The "
#~ ":pipeline:`$out` operator must be *the "
#~ "last stage* in the pipeline. The "
#~ ":pipeline:`$out` operator lets the aggregation"
#~ " framework return result sets of any"
#~ " size."
#~ msgstr ""

#~ msgid ""
#~ "If the collection specified by the "
#~ ":pipeline:`$out` operation already exists, "
#~ "then upon completion of the aggregation,"
#~ " the :pipeline:`$out` stage atomically "
#~ "replaces the existing collection with "
#~ "the new results collection. The "
#~ ":pipeline:`$out` operation does not change "
#~ "any indexes that existed on the "
#~ "previous collection. If the aggregation "
#~ "fails, the :pipeline:`$out` operation makes"
#~ " no changes to the pre-existing "
#~ "collection."
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

