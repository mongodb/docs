.. _query-perf:

=======================
|fts| Query Performance
=======================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: cluster performance, trigger atlas alerts, $match aggregation pipeline stage, $compound operator, stored source fields, $near operator
   :description: Improve your query performance by understanding how query complexity, operators, and pipeline stages can affect cluster performance.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. composable-tutorial::                                                
   :options: deployment-type
   :defaults: atlas

   .. selected-content::
      :selections: atlas

      .. _query-operators-and-complexity:

      .. include:: /includes/query-performance/query-ops-complexity.rst

      .. _query-limit-and-facet-agg-stage:

      .. include:: /includes/query-performance/limit-before-facet.rst

      Minimize Additional MQL Aggregation Stages
      ------------------------------------------

      Try to encapsulate the entire search logic within the ``$search`` 
      stage itself and minimize using additional blocking stages, such as 
      :pipeline:`$group`, :pipeline:`$count`, :pipeline:`$match`, or 
      :pipeline:`$sort`. This optimizes the |fts| index usage, and 
      reduces the need for additional database operations in ``mongod``.

      .. _query-match-agg-stage:

      .. include:: /includes/query-performance/compound-filter-match.rst

      .. _query-group-agg-stage:

      .. include:: /includes/query-performance/facet-instead-group.rst

      .. _query-count-agg-stage:

      .. include:: /includes/query-performance/query-count-agg.rst

      .. _query-sort-agg-stage:

      .. include:: /includes/query-performance/sort-near.rst

      Avoid Use of ``$skip`` After ``$search`` 
      ----------------------------------------

      .. include:: /includes/query-performance/avoid-skip-after-search.rst

      Use ``$search`` Instead of ``$text`` or ``$regex``
      --------------------------------------------------

      .. include:: /includes/query-performance/search-instead-of-text-regex.rst

      .. _query-performance-monitoring:

      Monitor Performance 
      -------------------

      You can :ref:`monitor <monitor-cluster-metrics>` your |service|
      cluster and view charts with performance statistics on the |service|
      :guilabel:`Metrics` tab. These metrics can help you see how |fts|
      queries and index building affect your cluster's performance. To learn 
      more, see :ref:`review-atlas-search-metrics`.

      |service| might trigger some |service| :ref:`alerts <alerts>` when:

      - |fts| queries your {+database-deployments+}, which can impact
        |service| performance metrics, such as the :ref:`query targeting 
        <query-targeting-resolution>` metrics.

      .. include:: /includes/fact-query-targeting-mongot.rst

      - |fts| replicates data from MongoDB, which contributes to the 
        :ref:`metrics <monitor-cluster-metrics>` measured in |service|, such 
        as the number of :guilabel:`getmore` operations.

      .. note::

         If your cluster's resources are stretched or near the
         limits of acceptable performance, consider :ref:`upgrading
         <scale-cluster>` to a larger cluster tier before implementing
         |fts| functionality.

      .. seealso:: 

         - :ref:`perf-ref-stored-source`
         - :ref:`$sort Example <fts-return-stored-source-egs>`

      Continue Learning 
      -----------------

      .. include:: /includes/query-performance/continue-learning.rst

   .. selected-content::
      :selections: local

      .. include:: /includes/query-performance/query-ops-complexity.rst

      .. include:: /includes/query-performance/limit-before-facet.rst

      Minimize Additional MQL Aggregation Stages
      ------------------------------------------

      Try to encapsulate the entire search logic within the ``$search`` 
      stage itself and minimize using additional blocking stages, such as 
      :pipeline:`$group`, :pipeline:`$count`, :pipeline:`$match`, or 
      :pipeline:`$sort`. This optimizes the |fts| index usage, and 
      reduces the need for additional database operations in ``mongod``.

      .. include:: /includes/query-performance/compound-filter-match.rst

      .. include:: /includes/query-performance/facet-instead-group.rst

      .. include:: /includes/query-performance/query-count-agg.rst

      .. include:: /includes/query-performance/sort-near.rst

      Avoid Use of ``$skip`` After ``$search`` 
      ----------------------------------------

      .. include:: /includes/query-performance/avoid-skip-after-search.rst

      Use ``$search`` Instead of ``$text`` or ``$regex``
      --------------------------------------------------

      .. include:: /includes/query-performance/search-instead-of-text-regex.rst

      Continue Learning 
      -----------------

      .. include:: /includes/query-performance/continue-learning.rst
  
   .. selected-content::
      :selections: self

      .. include:: /includes/query-performance/query-ops-complexity.rst

      .. include:: /includes/query-performance/limit-before-facet.rst

      Minimize Additional MQL Aggregation Stages
      ------------------------------------------

      Try to encapsulate the entire search logic within the ``$search`` 
      stage itself and minimize using additional blocking stages, such as 
      :pipeline:`$group`, :pipeline:`$count`, :pipeline:`$match`, or 
      :pipeline:`$sort`. This optimizes the |fts| index usage, and 
      reduces the need for additional database operations in ``mongod``.

      .. include:: /includes/query-performance/compound-filter-match.rst

      .. include:: /includes/query-performance/facet-instead-group.rst

      .. include:: /includes/query-performance/query-count-agg.rst

      .. include:: /includes/query-performance/sort-near.rst

      Avoid Use of ``$skip`` After ``$search`` 
      ----------------------------------------

      .. include:: /includes/query-performance/avoid-skip-after-search.rst

      Use ``$search`` Instead of ``$text`` or ``$regex``
      --------------------------------------------------

      .. include:: /includes/query-performance/search-instead-of-text-regex.rst

      Continue Learning 
      -----------------

      .. include:: /includes/query-performance/continue-learning.rst