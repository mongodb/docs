======================
Deploy a Shard Cluster
======================

.. default-domain:: mongodb

Synopsis
--------

This document describes how to deploy a :term:`shard cluster` for a
standalone :program:`mongod` instance.

To deploy a shard cluster for an existing replica set, see instead
:doc:`/tutorial/convert-replica-set-to-replicated-shard-cluster`.

Requirements
------------

Before deploying a shard cluster, see the requirements listed in
:ref:`Requirements for Shard Clusters <sharding-requirements>`.

.. warning:: Sharding and "localhost" Addresses

   If you use either "localhost" or ``127.0.0.1`` as the hostname
   portion of any host identifier, for example as the ``host`` argument to
   :dbcommand:`addShard` or the value to the :option:`mongos --configdb`
   run time option, then you must use "localhost" or ``127.0.0.1``
   for *all* host settings. If you mix localhost addresses and remote
   host address, MongoDB will produce errors.

Procedure
---------

Initiate Config Database Instances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Begin by configuring three config servers. These are very small
:program:`mongod` instances that provide cluster metadata. You must
have exactly *three* instances in production deployments. For
redundancy these instances should run on different systems and
servers. It's important to separate config server :program:`mongod`
instances to provide redundancy and to ensure that cluster
metadata is secure and durable.

Because the config server :program:`mongod` instances receive relatively
little traffic and demand only a small portion of system resources, you
can run the instances on systems that run other services, such as on
shards or on servers that run :program:`mongos`.

To start a config server, type the following command at a system prompt:

.. code-block:: sh

   mongod --configsvr

The :option:`--configsrv` stores a config database in the `configdb/`
subdirectory of the :setting:`dbpath` directory. By default, the
:setting:`dbpath` directory is ``/data/db/``. The config server instance
is accessible via port ``27019``. In addition to :setting:`configsvr`,
use other :doc:`mongod runtime options </reference/configuration-options>`
as needed.

Repeat this process for all three config servers.

Start ``mongos`` Instances
~~~~~~~~~~~~~~~~~~~~~~~~~~

All operations against a shard cluster go through the :program:`mongos`
instance. The :program:`mongos` instance routes queries and operations
to the appropriate shards and interacts with the configdb instances.

:program:`mongos` instances are lightweight, and a shard cluster can
have multiple instances. Typically, you run one :program:`mongos`
instance on each of your application servers.

You must specify three config servers. Use resolvable host names for
all hosts, using DNS or your system's hostfile to provide operational
flexibility.

The :program:`mongos` instance runs on the default MongoDB port of ``27017``.

Use the following command at a system prompt to start a
:program:`mongos` instance:

.. code-block:: sh

   mongos --configdb config0.mongodb.example.net,config1.mongodb.example.net,config2.mongodb.example.net --port 27017

The above example assumes that you have config servers running on the following hosts:

- ``config0.mongodb.example.net``
- ``config1.mongodb.example.net``
- ``config2.mongodb.example.net``

Add Shards to the Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~

In a production shard cluster, each shard is itself a :term:`replica
set`. You must deploy at least two replica sets for use as shards. For
instructions on deploying replica sets, see
:doc:`/tutorial/deploy-replica-set`.

When you have two active and functioning replica sets, perform the procedure here:

Using the :program:`mongo` shell, log into a :program:`mongos`. For example,
if the :program:`mongos` is accessible at
``mongos0.mongodb.example.net`` on port ``27017`` you would type:

.. code-block:: sh

   mongo mongos0.mongodb.example.net

To add each shard to the cluster, Use :func:`sh.addShard()`. For
example, to add two shards with the hostnames ``shard0.example.net`` and
``shard1.example.net`` on port ``27017``, type:.

      sh.addShard( "shard0.example.net" )
      sh.addShard( "shard1.example.net" )

   .. versionchanged:: 2.0.3

   After version 2.0.3, you may use the above form to add replica
   sets to a cluster. The cluster will automatically discover
   the members of the replica set and adjust its configuration
   accordingly.

   Before version 2.0.3, you must specify the shard in the
   following form: the replica set name, followed by a forward
   slash, followed by a comma-separated list of seeds for the
   replica set. For example, if the name of the replica set is
   ``repl0``, then your :func:`sh.addShard` command might resemble:

   .. code-block:: javascript

      sh.addShard( "repl0/shard0.example.net,shard1.example.net" )

The :func:`sh.addShard()` helper in the :program:`mongo` shell
provides a wrapper around the :dbcommand:`addShard` :term:`database
command`.

Enable Sharding for Databases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While sharding operates on a per-collection basis, you must enable
sharding for each database that holds a database that you would like
to shard.

Use the following operation in a :program:`mongo` shell session
connected to a :program:`mongos` instance in your cluster:

.. code-block:: javascript

   sh.enableSharding("records")

Where ``records`` is the name of the database that holds the collection
you want to shard. :func:`sh.enableSharding()` is a wrapper
around the :dbcommand:`enableSharding` :term:`database command`. You
can enable sharding for multiple databases in your deployment.

Enable Sharding for Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can enable sharding on a per-collection basis. Because
MongoDB uses "range based sharding," you must specify a :term:`shard
key` MongoDB can use to distribute your documents among the
shards. For more information, see the sections of this manual that give
an :ref:`overview of shard keys <sharding-shard-key>` and that
give an in-depth exploration of the
:ref:`features of good shard keys <sharding-shard-key>`.

To enable sharding for a collection, use the
:func:`sh.shardCollection()` helper in the :program:`mongo` shell.
The helper provides a wrapper around the :dbcommand:`shardCollection`
:term:`database command` and has the following prototype form:

.. code-block:: javascript

   sh.shardCollection("[database].[collection]", "key")

Replace the ``[database].[collection]`` string with the full namespace
of your database, which consists of the name of your database, a dot
(e.g. ``.``), and the full name of the collection. The ``key``
represents your shard key, which you specify in the same form as you
would an :dbcommand:`index <ensureIndex>`. If you do not specify the
``key`` argument, MongoDB will use the ``_id`` field as the shard
key.

Consider the following example invocations of
:func:`sh.shardCollection()`:

.. code-block:: javascript

   sh.shardCollection("records.people", { "zipcode": 1, "name": 1 } )
   sh.shardCollection("people.addresses", { "state": 1, "_id": 1 } )
   sh.shardCollection("assets.chairs", { "type": 1, "_id": 1 } )
   sh.shardCollection("events.alerts", { "hashed_id": 1 } )

In order, these operations shard:

#. The ``people`` collection in the ``records`` database using the shard key
   ``{ "zipcode": 1, "name": 1 }``.

   This shard key distributes documents by the value of the
   ``zipcode`` field. If a number of documents have the same value for
   this field, then that :term:`chunk` will be :ref:`splitable
   <sharding-shard-key-cardinality>` by the values of the ``name``
   field.

#. The ``addresses`` collection in the ``people`` database using the shard key
   ``{ "state": 1, "_id": 1 }``.

   This shard key distributes documents by the value of the ``state``
   field. If a number of documents have the same value for this field,
   then that :term:`chunk` will be :ref:`splitable
   <sharding-shard-key-cardinality>` by the values of the ``_id``
   field.

#. The ``chairs`` collection in the ``assets`` database using the shard key
   ``{ "type": 1, "_id": 1 }``.

   This shard key distributes documents by the value of the ``type``
   field. If a number of documents have the same value for this field,
   then that :term:`chunk` will be :ref:`splitable
   <sharding-shard-key-cardinality>` by the values of the ``_id``
   field.

#. The ``alerts`` collection in the ``events`` database using the shard key
   ``{ "hashed_id": 1 }``.

   This shard key distributes documents by the value of the
   ``hashed_id`` field. Presumably this is a computed value that
   holds the hash of some value in your documents and is able to
   evenly distribute documents throughout your cluster.
