======================
Server-side JavaScript
======================

.. default-domain:: mongodb

The V8 JavaScript engine, which became the default in 2.4, allows
multiple JavaScript operations to execute at the same time on a MongoDB
server. Most operations on a MongoDB server do not use JavaScript, but
prior to 2.4, MongoDB operations that did require the JavaScript
interpreter had to acquire a lock.

MongoDB supports server-side execution of JavaScript code for the following:

- :dbcommand:`mapReduce` and the corresponding :program:`mongo` shell
  method :method:`db.collection.mapReduce()`. See
  :doc:`/core/map-reduce` for more information.

- :dbcommand:`eval` command and the corresponding :program:`mongo`
  shell method :method:`db.eval()`.

- :operator:`$where` operator.

- :ref:`running-js-scripts-in-mongo-on-mongod-host`

.. include:: /includes/fact-disable-javascript-with-noscript.rst

.. seealso::

   :doc:`/tutorial/store-javascript-function-on-server`

.. _running-js-scripts-in-mongo-on-mongod-host:

Running ``.js`` files via a ``mongo`` shell Instance on the Server
------------------------------------------------------------------

You can run a JavaScript (``.js``) file using a :program:`mongo` shell
instance on the server. This is a good technique for performing batch
administrative work. When you run :program:`mongo` shell on the server,
connecting via the localhost interface, the connection is fast with low
latency.

Concurrency
-----------

Refer to the individual method or operator documentation for any
concurrency information. See also the :ref:`concurrency table
<faq-concurrency-operations-locks>`.
