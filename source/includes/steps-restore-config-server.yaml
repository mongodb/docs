title: Restore the snapshot to the config server.
stepnum: 1
ref: data
pre: |
  Extract the data files to the location where the config server's
  :program:`mongod` process will access them. This is the location you
  will specify as the :setting:`~storage.dbPath` when running :program:`mongod` for
  the config server.
action:
  language: sh
  code: |
      tar -xvf <backup-restore-name>.tar.gz
      mv <backup-restore-name> /data
---
title: "Start the config server."
stepnum: 2
ref: start
action:
  pre: |
    The following example starts the config server using the new data:
  language: sh
  code: |
    mongod --configsvr --dbpath /data

post: |

  .. include:: /includes/extracts/fact-encrypted-startup-options.rst

---
title: "Update the sharded cluster metadata."
stepnum: 3
ref: metadata
pre: |
  If the new shards do not have the same hostnames and ports as the
  original cluster, you must update the shard metadata. To do this,
  connect to each config server and update the data.
action:
  - pre: |
      First connect to the config server with the :program:`mongo`
      shell. For example:
    language: sh
    code: |
      mongo
  - pre: |
      Then access the ``shards`` collection in the :manual:`config
      </reference/config-database>` database. For example:
    language: javascript
    code: |
      use config
      db.shards.find().pretty()
  - pre: |
      The :method:`~db.collection.find()` method returns the documents in the ``shards``
      collection. The collection contains a document for each shard in the
      cluster. The ``host`` field for a shard displays the name of the
      shard's replica set and then the hostname and port of the shard. For
      example:
    language: javascript
    code: |
      { "_id" : "shard0000", "host" : "shard1/localhost:30000" }
  - pre: |
      To change a shard's hostname and port, use the MongoDB
      :method:`~db.collection.update()` command to modify the
      documents in the ``shards`` collection.
...
