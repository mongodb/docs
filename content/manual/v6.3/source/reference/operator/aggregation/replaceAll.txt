=========================
$replaceAll (aggregation)
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
   
Definition
----------

.. expression:: $replaceAll

   .. versionadded:: 4.4
   
   Replaces all instances of a search string in an input string with a
   replacement string.

   :expression:`$replaceAll` is both case-sensitive and
   diacritic-sensitive, and ignores any collation present on a
   collection.

Syntax
------

The :expression:`$replaceAll` operator has the following
:ref:`operator expression syntax <agg-quick-ref-operator-expressions>`:

.. code-block:: javascript

   { $replaceAll: { input: <expression>, find: <expression>, replacement: <expression> } }

Operator Fields
~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Field
     - Description

   * - :ref:`input <replaceAll-input>`

     - .. _replaceAll-input:

       The string on which you wish to apply the
       :ref:`find<replaceAll-find>`. Can be any valid
       :ref:`expression<aggregation-expressions>` that resolves to a
       string or a ``null``. If ``input`` refers to a field that is
       missing, ``$replaceAll`` returns ``null``.

   * - :ref:`find <replaceAll-find>`

     - .. _replaceAll-find:

       The string to search for within the given
       :ref:`input <replaceAll-input>`. Can be any valid
       :ref:`expression<aggregation-expressions>` that resolves to a
       string or a ``null``. If ``find`` refers to a field that is
       missing, ``$replaceAll`` returns ``null``.

   * - :ref:`replacement <replaceAll-replacement>`

     - .. _replaceAll-replacement:

       The string to use to replace all matched instances of
       :ref:`find<replaceAll-find>` in :ref:`input <replaceAll-input>`.
       Can be any valid :ref:`expression<aggregation-expressions>` that
       resolves to a string or a ``null``.

Behavior
--------

The :ref:`input <replaceAll-input>`, :ref:`find <replaceAll-find>`, and
:ref:`replacement <replaceAll-replacement>` expressions must evaluate to
a string or a ``null``, or :expression:`$replaceAll` fails with an
error.

.. _replaceall-and-null-values:

``$replaceAll`` and Null Values
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If :ref:`input <replaceAll-input>` or :ref:`find <replaceAll-find>`
refer to a field that is missing, they return ``null``.

If *any one* of :ref:`input <replaceAll-input>`,
:ref:`find <replaceAll-find>`, or
:ref:`replacement <replaceAll-replacement>` evaluates to a ``null``, the
entire :expression:`$replaceAll` expression evaluates to ``null``:

.. list-table::
   :header-rows: 1
   :class: border-table
   :widths: 90 10

   * - Example
     - Result

   * - ``{ $replaceAll: { input: null, find: "abc", replacement: "ABC" } }``
     - ``null``

   * - ``{ $replaceAll: { input: "abc", find: null, replacement: "ABC" } }``
     - ``null``

   * - ``{ $replaceAll: { input: "abc", find: "abc", replacement: null } }``
     - ``null``

.. _replaceall-and-collation:

``$replaceAll`` and Collation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

String matching for all :expression:`$replaceAll` expressions is always
case-sensitive and diacritic-sensitive. Any :ref:`collation <collation>`
configured on a collection, :method:`db.collection.aggregate()`, or
index is ignored when performing string comparisons with
``$replaceAll``.

For example, create a sample collection with collation strength ``1``:

.. code-block:: javascript

   db.createCollection( "myColl", { collation: { locale: "fr", strength: 1 } } )

A collation strength of ``1`` compares base character only and ignores
other differences such as case and diacritics.

Next, insert three example documents:

.. code-block:: javascript

   db.myColl.insertMany([
      { _id: 1, name: "cafe" },
      { _id: 2, name: "Cafe" },
      { _id: 3, name: "café" }
   ])

The following :expression:`$replaceAll` operation tries to find and
replace all instances of "Cafe" in the ``name`` field:

.. code-block:: javascript

   db.myColl.aggregate([
     {
       $addFields:
         {
           resultObject: { $replaceAll: { input: "$name", find: "Cafe", replacement: "CAFE" } }
         }
     }
   ])

Because :expression:`$replaceAll` ignores the collation configured for
this collection, the operation only matches the instance of "Cafe" in
document ``2``:

.. code-block:: javascript
   :emphasize-lines: 2
   :copyable: false

   { "_id" : 1, "name" : "cafe", "resultObject" : "cafe" }
   { "_id" : 2, "name" : "Cafe", "resultObject" : "CAFE" }
   { "_id" : 3, "name" : "café", "resultObject" : "café" }

Operators which respect collation, such as :pipeline:`$match`, would
match all three documents when performing a string comparison against
"Cafe" due to this collection's collation strength of ``1``.

.. _replaceall-and-unicode-normalization:

``$replaceAll`` and Unicode Normalization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :expression:`$replaceAll` aggregation expression does not perform
any unicode normalization. This means that string matching for all
``$replaceAll`` expressions will consider the number of code points used
to represent a character in unicode when attempting a match.

For example, the character ``é`` can be represented in unicode using
either one code point or two:

.. list-table::
   :header-rows: 1
   :widths: 25 25 50

   * - Unicode
     - Displays as
     - Code points

   * - ``\xe9``
     - ``é``
     - 1 ( ``\xe9`` )

   * - ``e\u0301``
     - ``é``
     - 2 ( ``e`` + ``\u0301`` )

Using :expression:`$replaceAll` with a :ref:`find <replaceAll-find>`
string where the character ``é`` is represented in unicode with one code
point will not match any instance of ``é`` that uses two code points in
the :ref:`input <replaceAll-input>` string.

The following table shows whether a match occurs for a
:ref:`find <replaceAll-find>` string of "café" when compared to
:ref:`input <replaceAll-input>` strings where ``é`` is represented
by either one code point or two. The :ref:`find <replaceAll-find>`
string in this example uses one code point to represent the ``é``
character:

.. list-table::
   :header-rows: 1
   :widths: 85 15

   * - Example
     - Match

   * - ``{ $replaceAll: { input: "caf\xe9", find: "café", replacement: "CAFE" } }``
     - yes

   * - ``{ $replaceAll: { input: "cafe\u0301", find: "café", replacement: "CAFE" } }``
     - no

Because :expression:`$replaceAll` does not perform any unicode
normalization, only the first string comparison matches, where both the
:ref:`find <replaceAll-find>` and :ref:`input <replaceAll-input>`
strings use one code point to represent ``é``.

Example
-------

Create an ``inventory`` collection with the following documents:

.. code-block:: javascript

   db.inventory.insertMany([
      { "_id" : 1, "item" : "blue paint" },
      { "_id" : 2, "item" : "blue and green paint" },
      { "_id" : 3, "item" : "blue paint with blue paintbrush" },
      { "_id" : 4, "item" : "blue paint with green paintbrush" },
   ])

The following example replaces each instance of "blue paint" in the
``item`` field with "red paint":

.. code-block:: javascript

   db.inventory.aggregate([
      {
        $project:
         {
            item: { $replaceAll: { input: "$item", find: "blue paint", replacement: "red paint" } }
         }
      }
   ])

The operation returns the following results:

.. code-block:: javascript
   :copyable: false

   { "_id" : 1, "item" : "red paint" }
   { "_id" : 2, "item" : "blue and green paint" }
   { "_id" : 3, "item" : "red paint with red paintbrush" }
   { "_id" : 4, "item" : "red paint with green paintbrush" }
