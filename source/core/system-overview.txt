===================
|onprem| Components
===================

.. default-domain:: mongodb

An |onprem| installation consists of the :ref:`mms-application-package` and
:ref:`backup-daemon`. Each component requires a
separate dedicated MongoDB database to hold operational data.

Network Diagram
---------------

.. include:: /images/opsmanager-network-diagram-automation.rst

.. _mms-http-service:
.. _application:
.. _mms-application-package:

|application|
-------------

The front-end |application| contains the UI the end user interacts with, as
well as the HTTP service used by the Monitoring Agent and Backup Agent
to transmit data to and from |mms|. The components are stateless and start
automatically when the |application| starts.
Multiple instances of the |application| can run as
long as each instance has the same configuration. Users and agents can
interact with any instance.

The |http-service| runs on port ``8080`` by default and
contains the web interface for managing |mms| users, monitoring of
MongoDB servers, and managing those serverâ€™s backups. Users can sign
up, create new accounts and groups, as well as join an existing
group.

The |onprem| agents use the |http-service| to transmit application and
backup data and to retrieve configuration information. The service exposes
an endpoint that reports on the state of |onprem| and its connections to
the :ref:`mms-application-database` and the :ref:`backup-database`. See
:doc:`/reference/firewall-configuration`.

.. _backup-daemon:

Backup Daemon
-------------

The Backup Daemon manages both the local copies of the backed-up databases
and each backup's snapshots. The daemon does scheduled work based on data
coming in to the |http-service| from the Backup Agents. No client
applications talk directly to the daemon. Its state and job queues come from
the :ref:`mms-application-database`.

The Backup Daemon's local copy of a backed-up deployment is called the
:term:`head database`. The daemon stores all its head databases in its
:setting:`rootDirectory` path. To create each head database, the
daemon's server acts as though it were an "invisible" :term:`secondary`
for each :term:`replica set` designated for backup.

If you run multiple Backup Daemons, |onprem| selects the Backup Daemon to
use when a user enables backup for a deployment. The local copy of the
deployment resides with that daemon's server.

The daemon will take scheduled snapshots and store the snapshots in the
:ref:`backup-database`. It will
also act on restore requests by retrieving data from the Backup Database and
delivering it to the requested destination.

:ref:`Multiple Backup Daemons <multiple-backup-daemons>` can increase your
storage by scaling horizontally and can provide **manual** failover.

The Backup Daemon exposes a health-check endpoint. See
:doc:`/reference/firewall-configuration`.

.. _backing-database:

Dedicated MongoDB Databases for Operational Data
------------------------------------------------

|mms| uses dedicated MongoDB databases to store the |application|'s
monitoring data and the Backup Daemon's snapshots. To ensure redundancy
and high availability, the backing databases
run as :term:`replica sets <replica set>`. The
replica sets host **only** |mms| data. You must :doc:`provision the
replica sets </tutorial/prepare-backing-mongodb-instances>` before
installing |onprem|.

.. _mms-application-database:

|application| Database
~~~~~~~~~~~~~~~~~~~~~~

This database contains application metadata used by the 
:ref:`mms-application-package`. The database stores:

- Monitoring data collected from Monitoring Agents.

- Metadata for |mms| users, groups, hosts, monitoring data, and backup
  state.

For topology and specifications, see
:ref:`mms-application-database-specifications`.

.. _backup-database:
.. _mms-backup-blockstore-database:

Backup Database
~~~~~~~~~~~~~~~

The Backup Database stores snapshots of your backed up deployments and
stores temporary backup data. The Backup Database is actually three
databases. You can have multiple instances of each, according to your
sizing needs:

- The :term:`Backup Blockstore Database`, which stores the snapshots of
  your backed-up deployments and requires the bulk of the space on the
  Backup Database servers.

- The :term:`Oplog Store Database`, which stores oplog entries the Backup
  Daemon will apply to its local copies of your backed-up deployments.

- The :term:`Sync Store Database`, which stores temporary backup
  information when you start a new backup. The Backup Daemon creates its
  local backup by performing an initial sync using this data.

The databases must run on a dedicated MongoDB deployment that holds no
other data. For production, configure the MongoDB deployment as a replica
set to provide redundancy for the data. To provide high availability through
automatic failover, configure the replica set with three data-bearing
members.

You **cannot** back up the Blockstore Database with |onprem| Backup. To
back up |onprem| Backup, see :doc:`/tutorial/backup-the-backup-service`.

The Backup Database requires disk space proportional to the backed-up
deployments. For specifications, see
:ref:`backup-database-specifications`.
