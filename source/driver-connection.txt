.. facet::
   :name: programming_language
   :values: c, cpp, csharp, go, java, javascript/typescript, kotlin, php, python, ruby, rust, scala, swift

.. _connect-via-driver:

===================
Connect via Drivers
===================

.. default-domain:: mongodb

.. meta::
   :description: How to connect to a cluster with an application using a MongoDB driver.
   :keywords: code example, drivers, java sync, coroutine, rust sync, rust async, swift sync, swift async, node.js, kotlin async

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The :guilabel:`Connect` dialog box for a {+database-deployment+} provides the details to
connect to a {+database-deployment+} with an application using a
:driver:`MongoDB driver </>`.

.. include:: /includes/serverless-driver-options.rst

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the 
language of the example on this page.

----------

Prerequisites
-------------

.. tabs-selector:: drivers

.. tabs-drivers::

   .. tab::
      :tabid: c

   .. tab::
      :tabid: cpp
      
   .. tab::
      :tabid: csharp

      .. important:: Dedicated Cluster Limitation

         If you run the C# driver with .NET 5.0 on Linux, you cannot 
         connect to MongoDB 4.0 on {+dedicated-clusters+} in |service|.  
         This issue applies only to |service| {+dedicated-clusters+}. This 
         issue does not impact cluster tiers M0 through M5. If you 
         run an earlier .NET or .NET Core version and want to 
         upgrade to .NET 5.0, contact MongoDB |service| Support.

   .. tab::
      :tabid: go   

   .. tab::
      :tabid: java-sync

   .. tab::
      :tabid: kotlin-coroutine

   .. tab::
      :tabid: nodejs

   .. tab::
      :tabid: php

   .. tab::
      :tabid: python

   .. tab::
      :tabid: ruby

   .. tab:: 
      :tabid: rust-async

   .. tab:: 
      :tabid: rust-sync
 
   .. tab:: 
      :tabid: scala

   .. tab::
      :tabid: swift-async

   .. tab::
      :tabid: swift-sync

Driver Version
~~~~~~~~~~~~~~

Your driver version must be compatible with your version of the MongoDB
server. We recommend choosing the latest driver that is compatible with
your MongoDB server version to use the latest database features and
prepare for future version upgrades.

For a list of driver versions that contain the full set of
functionality for your version of the MongoDB server, check the
compatibility matrix for your :driver:`MongoDB driver </>`.

For a list of driver versions that you can use to connect to
{+Serverless-instances+}, see :ref:`atlas-serverless-drivers`.

.. _driver-version-opt-connection:

Optimized Connection Strings for Sharded {+Clusters+} Behind a Private Endpoint
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To connect to your sharded {+cluster+} using a driver and an 
:ref:`optimized connection string <optimized-connection-strings>`, you
must use at least one of the following driver versions:

.. include:: /includes/list-table-min-driver-versions-serverless-and-optimized-strings.rst

|tls|
~~~~~

Clients must support |tls| to connect to an |service| {+database-deployment+}.

Clients must support the :rfc:`SNI <6066#section-3>` |tls| extension to
connect to an |service| ``M0`` {+Free-cluster+}, ``M2/M5`` {+Shared-cluster+},
or {+Flex-cluster+}.

To verify that your :driver:`MongoDB driver </>` supports the
|sni| |tls| extension, refer to the Compatibility section of your
driver's documentation. If the driver is compatible with MongoDB 4.2
and later, it supports the |sni| |tls| extension.

.. include:: /includes/security/connection-prereq-access-list.rst

.. include:: /includes/fact-connection-prereq-user.rst


.. _drivers-connect-your-application:

Connect Your Application
------------------------

.. Attention writers: If you make changes to the following procedure
.. please check the related procedures in the following Server docs 
.. page(s) to see if they require changes as well: 
.. www.mongodb.com/docs/manual/reference/connection-string/

.. include:: /includes/steps-connect-to-database-deployment-driver.rst

.. _driver-examples:

Driver Examples
---------------

In the following example, you authenticate and connect to |a-service| 
{+database-deployment+} by using a :manual:`URI connection string 
</reference/connection-string/>`. Replace the placeholders in the example 
with your credentials and deployment details.

.. tabs-drivers::

   .. tab::
      :tabid: c

      .. note::

         .. include:: /includes/extracts/driver-free-tier-c.rst

      .. code-block:: c

         client = mongoc_client_new ("mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority");
         db = mongoc_client_get_database (client, "<databaseName>");

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-c+} for the
             latest recommended driver versions.

         * - MongoDB 5.0 and later
           - Version 1.11 and later

      Behavior
      ~~~~~~~~

      .. include:: /includes/extracts/c-driver-single-threaded.rst

   .. tab::
      :tabid: cpp

      .. note::

         .. include:: /includes/extracts/driver-free-tier-cpp.rst

      .. code-block:: cpp

         #include <mongocxx/client.hpp>
         #include <mongocxx/instance.hpp>

         //...

         mongocxx::instance inst{};
         mongocxx::client conn{mongocxx::uri{"mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority"}};
         mongocxx::database db = conn["<databaseName>"];

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-cpp+} for the
             latest recommended driver versions.

      .. note::

         The Legacy C++ driver has reached End-Of-Life, and is no
         longer supported.

      Behavior
      ~~~~~~~~

      .. include:: /includes/extracts/cplus-driver-single-threaded.rst

   .. tab::
      :tabid: csharp

      .. note::

         .. include:: /includes/extracts/driver-free-tier-csharp.rst

      .. code-block:: csharp

         var client = new MongoClient("mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority");
         var database = client.GetDatabase("<databaseName>");

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-csharp+} for the
             latest recommended driver versions.

         * - MongoDB 5.0 and later
           - Version 2.7 and later

      .. note::

         Microsoft .NET Core library versions *2.1 and later*
         support the |sni| |tls| extension on Linux and macOS.
         Applications using prior versions of .NET Core on these
         platforms cannot connect to an |service| ``M0`` {+Free-cluster+},
         ``M2/M5`` {+Shared-cluster+}, or {+Flex-cluster+}.

         To learn more this requirement, see this
         :github:`dotnet/corefx issue </dotnet/corefx/issues/9608>`.

   .. tab::
      :tabid: go

      .. note::

         .. include:: /includes/extracts/driver-free-tier-go.rst

      .. code-block:: go

         uri := "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority"

         ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
         defer cancel()
         
         client, err := mongo.Connect(ctx, options.Client().ApplyURI(uri))
         if err != nil {
             panic(err)
         }

         defer func() {
             if err = client.Disconnect(ctx); err != nil {
                 panic(err)
             }
         }()

         // Ping the primary
         if err := client.Ping(ctx, readpref.Primary()); err != nil {
             panic(err)
         }

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-go+} for the
             latest recommended driver versions.

         * - MongoDB 5.0 and later
           - Version 1.0.0 and later


   .. tab::
      :tabid: java-sync

      .. note::

         .. include:: /includes/extracts/driver-free-tier-java.rst

      .. code-block:: java

         MongoClientURI uri = new MongoClientURI(
             "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority");

         MongoClient mongoClient = MongoClients.create(uri);
         MongoDatabase database = mongoClient.getDatabase("<databaseName>");

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-java+} for the
             latest recommended driver versions.

         * - MongoDB 5.0 and later
           - Version 3.8 and later

   .. tab::
      :tabid: kotlin-coroutine

      .. note::

         .. include:: /includes/extracts/driver-free-tier-kotlin.rst

      .. code-block:: kotlin

         val uri = "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority"

         // Construct a ServerApi instance using the ServerApi.builder() method
         val serverApi = ServerApi.builder()
            .version(ServerApiVersion.V1)
            .build()
         val settings = MongoClientSettings.builder()
            .applyConnectionString(ConnectionString(uri))
            .serverApi(serverApi)
            .build()
            
         // Create a new client and connect to the server
         val mongoClient = MongoClient.create(settings)
         val database = mongoClient.getDatabase("<databaseName>")
         try {
            // Send a ping to confirm a successful connection
            val command = Document("ping", BsonInt64(1))
            val commandResult = database.runCommand(command)
            println("Pinged your deployment. You successfully connected to MongoDB!")
         } 
         
         catch (me: MongoException) {
            System.err.println(me)
         }

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - MongoDB 5.0 and later
           - Version 4.10 and later

   .. tab::
      :tabid: nodejs

      .. note::

         .. include:: /includes/extracts/driver-free-tier-node.rst

      .. code-block:: javascript

         import mongodb from 'mongodb';
         
         const MongoClient = mongodb.MongoClient;
         const uri = "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority";
         const client = new MongoClient(uri, { useNewUrlParser: true });
         client.connect(err => {
           const collection = client.db("<databaseName>").collection("<collectionName>");
           // perform actions on the collection object
           client.close();
         });

      .. include:: /includes/extracts/connection-details-driver.rst

      .. example::

         The following connection string specifies the ``cluster0`` deployment and ``test``
         database component, and includes the ``authSource=admin`` option.

         .. code-block:: javascript

            var uriTestDb = "mongodb+srv://<db_username>:<db_password>@cluster0.mongodb.net/test?ssl=true&authSource=admin&w=majority";
            MongoClient.connect(uriTestDb, function(err, db) {
               db.close();
            });

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-node+} for the
             latest recommended driver versions.

         * - MongoDB 5.0 and later
           - Version 3.1 and later

   .. tab::
      :tabid: php

      .. note::

         .. include:: /includes/extracts/driver-free-tier-php.rst

      The following example uses the MongoDB PHP Library which provides a
      high-level abstraction around the lower-level PHP driver:

      .. code-block:: php

         $client = new MongoDB\Client(
             'mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority');

         $db = $client-><databaseName>;

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-php+} for the
             latest recommended driver versions.

         * - MongoDB 5.0 and later
           - PHPLIB 1.4 + mongodb-1.5.


      Behavior
      ~~~~~~~~

      .. include:: /includes/extracts/php-driver-single-threaded.rst

   .. tab::
      :tabid: python

      .. note::

         .. include:: /includes/extracts/driver-free-tier-python.rst

      .. code-block:: python

         import pymongo
         import dns # required for connecting with SRV

         client = pymongo.MongoClient("mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority")
         db = client.<databaseName>

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-python+} for the
             latest recommended driver versions.

         * - MongoDB 5.0 and later
           - Version 3.7 and later


      .. note:: macOS and Python 3.6 Installers

         The Python 3.6 installers for macOS from
         `<https://www.python.org>`_ do not automatically install
         any CA certificates. Without installed CA certificates,
         connections to |service| will fail certificate
         verification.

         After you run the installer from
         `<https://www.python.org>`_ to install Python 3.6, you
         must run the following script to install an up-to-date CA
         bundle before connecting to |service|:

         .. code-block:: sh

            open "/Applications/Python 3.6/Install Certificates.command"

         For more information on Python 3.6 installers for macOS
         from `<https://www.python.org>`_, see
         `<https://bugs.python.org/issue29065#msg283984>`_. Earlier
         versions of Python as well as Python 3.6 installed by
         other means (e.g. `Homebrew
         <https://brew.sh/#install>`__), are not affected.

   .. tab::
      :tabid: ruby

      .. note::

         .. include:: /includes/extracts/driver-free-tier-ruby.rst

      .. code-block:: ruby

         client = Mongo::Client.new('mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority')

      .. include:: /includes/extracts/connection-details-driver.rst

      .. example::

         The following connection string specifies the ``cluster0`` deployment and the ``test``
         database component, and includes the ``authSource=admin`` option.

         .. code-block:: ruby

            client = Mongo::Client.new('mongodb+srv://<db_username>:<db_password>@cluster0.mongodb.net/test?ssl=true&replicaSet=Mycluster0-shard-0&authSource=admin&w=majority')

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-ruby+} for the
             latest recommended driver versions.

         * - MongoDB 5.0 and later
           - Version 2.6 and later

      Mongoid Example
      ~~~~~~~~~~~~~~~

      .. code-block:: yaml

         production:
           # Configure available database clients. (required)
           clients:
             # Defines the default client. (required)
             default:
               # Defines the name of the default database that Mongoid can connect to.
               # (required).
               database: 'myDatabaseName'

               # Provides the hosts the default client can connect to. Must be an array
               # of host:port pairs. (required)
               hosts:
                 - mycluster0-shard-00-00.mongodb.net:27017
                 - mycluster0-shard-00-01.mongodb.net:27017
                 - mycluster0-shard-00-02.mongodb.net:27017
               options:
                 # The name of the user for authentication.
                 user: <username>

                 # The password of the user for authentication.
                 password: <password>

                 # The database or source to authenticate the user against. If the database
                 # specified above is not admin, admin MUST be specified here.
                 auth_source: admin

                 # All Atlas servers use SSL. (default: false)
                 ssl: true

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Minimum ODM Version

         * - MongoDB 5.0 and later

           - `Version 7.0.0 and later <https://www.mongodb.com/docs/mongoid/7.0/>`_

   .. tab:: 
      :tabid: rust-async

      The default async runtime used by the driver is ``tokio``. To use a
      different runtime, see `Configuring the async runtime <https://github.com/mongodb/mongo-rust-driver#configuring-the-async-runtime>`__.

      .. note::

         .. include:: /includes/extracts/driver-free-tier-rust.rst

      .. code-block:: rust

         use mongodb::{options::ClientOptions, Client};
         #[tokio::main]
             async fn main() -> mongodb::error::Result<()> {
                 let client_options = ClientOptions::parse(
                     "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority",
                 )
                 .await?;
                 let client = Client::with_options(client_options)?;
                 let _database = client.database("<databaseName>");
                 
             // List the names of the databases in that cluster
             for db_name in client.list_database_names(None, None)? {
                 println!("{}", db_name);
             }
             Ok(())
             }

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-rust+} for the
             latest recommended driver versions.

   .. tab:: 
      :tabid: rust-sync
     
      Make sure you enabled the sync API. See `Enabling the sync API <https://github.com/mongodb/mongo-rust-driver#enabling-the-sync-api>`__
      for more details.
      
      .. note::

         .. include:: /includes/extracts/driver-free-tier-rust.rst

      .. code-block:: rust

         use mongodb::{bson::doc, sync::Client};
         fn main() -> mongodb::error::Result<()> {
                 let client_options = ClientOptions::parse(
                     "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority",
                 )?;

         // Ping the server to see if you can connect to the cluster
         client
             .database("admin")
             .run_command(doc! {"ping": 1}, None)?;
         println!("Connected successfully.");
    
         // List the names of the databases in that cluster
         for db_name in client.list_database_names(None, None)? {
             println!("{}", db_name);
         }
         Ok(())
         }

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-rust+} for the
             latest recommended driver versions.

   .. tab:: 
      :tabid: scala

      .. note::

         .. include:: /includes/extracts/driver-free-tier-scala.rst

      .. code-block:: scala

         val uri: String = "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority"
         System.setProperty("org.mongodb.async.type", "netty")
         val client: MongoClient = MongoClient(uri)
         val db: MongoDatabase = client.getDatabase("<databaseName>")

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-scala+} for the
             latest recommended driver versions.

   .. tab:: 
      :tabid: swift-async

      .. note::

         .. include:: /includes/extracts/driver-free-tier-swift.rst

      .. code-block:: swift

         import MongoSwift
         import NIO
         
         let elg = MultiThreadedEventLoopGroup(numberOfThreads: 4)

         let uri = "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority"
         let client = try MongoClient(
             uri,
             using: elg
         )

         defer {
    
             // clean up driver resources
             try? client.syncClose()
             cleanupMongoSwift()
    
             // shut down EventLoopGroup
             try? elg.syncShutdownGracefully()
         }

         // print a list of database names to confirm connection
         print(try client.listDatabaseNames().wait())

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-swift+} for the
             latest recommended driver versions.

   .. tab:: 
      :tabid: swift-sync

      .. note::

         .. include:: /includes/extracts/driver-free-tier-swift.rst

      .. code-block:: swift

         import MongoSwiftSync

         let uri = "mongodb+srv://<db_username>:<db_password>@<clusterName>.mongodb.net/?retryWrites=true&w=majority"
         let client = try MongoClient(uri)

         // print a list of database names to confirm connection
         print (try client.listDatabaseNames())

      .. list-table::
         :header-rows: 1

         * - MongoDB Version
           - Recommended Driver Versions

         * - All
           - See the {+reference-compatibility-mongodb-swift+} for the
             latest recommended driver versions.


Troubleshooting
---------------

.. include:: /includes/fact-connection-troubleshooting.rst


.. seealso::

   :ref:`connection-limits`
