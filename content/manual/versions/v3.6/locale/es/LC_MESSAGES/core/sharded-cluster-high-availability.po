# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: 2014-04-08 19:31+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# a20ba32b1c604380bb38847f39d17e7e
#: ../source/core/sharded-cluster-high-availability.txt:5
msgid "Sharded Cluster High Availability"
msgstr ""

# 7e8fc9bf6b074b8c96d1ec8de5268b3e
#: ../source/core/sharded-cluster-high-availability.txt
msgid "On this page"
msgstr ""

# 59e44a32adbb4f49970db6b51481ac8a
#: ../source/core/sharded-cluster-high-availability.txt:15
msgid ""
"A :ref:`production <sharding-production-architecture>` :term:`cluster` "
"has no single point of failure. This section introduces the availability "
"concerns for MongoDB deployments in general and highlights potential "
"failure scenarios and available resolutions."
msgstr ""

# a7e436635beb45318e6d8eef48488303
#: ../source/core/sharded-cluster-high-availability.txt:21
msgid "Application Servers or :program:`mongos` Instances Become Unavailable"
msgstr ""

# 9e9225de3ffc47a5a3883c957df9b312
#: ../source/core/sharded-cluster-high-availability.txt:23
msgid ""
"If each application server has its own :program:`mongos` instance, other "
"application servers can continue to access the database. Furthermore, "
":program:`mongos` instances do not maintain persistent state, and they "
"can restart and become unavailable without losing any state or data. When"
" a :program:`mongos` instance starts, it retrieves a copy of the "
":term:`config database` and can begin routing queries."
msgstr ""

# d7e74ffc6dab42038f64be2116dac40d
#: ../source/core/sharded-cluster-high-availability.txt:31
msgid "A Single :program:`mongod` Becomes Unavailable in a Shard"
msgstr ""

# ce6f1697217c41788f7576d4ef3df900
#: ../source/core/sharded-cluster-high-availability.txt:33
msgid ""
":doc:`Replica sets </replication>` provide high availability for shards. "
"If the unavailable :program:`mongod` is a :term:`primary`, then the "
"replica set will :ref:`elect <replica-set-elections>` a new primary. If "
"the unavailable :program:`mongod` is a :term:`secondary`, and it "
"disconnects the primary and secondary will continue to hold all data. In "
"a three member replica set, even if a single member of the set "
"experiences catastrophic failure, two other members have full copies of "
"the data. [#recovery-window]_"
msgstr ""

# 572f55161245408eafa27d24885bdbde
#: ../source/core/sharded-cluster-high-availability.txt:42
msgid ""
"Always investigate availability interruptions and failures. If a system "
"is unrecoverable, replace it and create a new member of the replica set "
"as soon as possible to replace the lost redundancy."
msgstr ""

# 409aaf8e492d4d19af660eafb2107b72
#: ../source/core/sharded-cluster-high-availability.txt:46
msgid ""
"If an unavailable secondary becomes available while it still has current "
"oplog entries, it can catch up to the latest state of the set using the "
"normal :term:`replication process <sync>`; otherwise, it must perform an "
":term:`initial sync`."
msgstr ""

# a4076d006e4f419995c2fef61098ce05
#: ../source/core/sharded-cluster-high-availability.txt:52
msgid "All Members of a Shard Become Unavailable"
msgstr ""

# 2b85c93604624510a11ef8818db2c19c
#: ../source/core/sharded-cluster-high-availability.txt:54
msgid ""
"If all members of a replica set shard are unavailable, all data held in "
"that shard is unavailable. However, the data on all other shards will "
"remain available, and it is possible to read and write data to the other "
"shards. However, your application must be able to deal with partial "
"results, and you should investigate the cause of the interruption and "
"attempt to recover the shard as soon as possible."
msgstr ""

# 75e311910e5a4048b6109a48dc4ac9db
#: ../source/core/sharded-cluster-high-availability.txt:64
msgid "A Config Server Replica Set Member Become Unavailable"
msgstr ""

# d09fb00314f24b64bbd190678d8448c3
#: ../source/includes/fact-mirrored-config-servers-deprecated.rst:1
msgid ""
"Starting in MongoDB 3.2, config servers for sharded clusters can be "
"deployed as a :doc:`replica set </core/replication-introduction>`. The "
"replica set config servers must run the :doc:`WiredTiger storage engine "
"</core/wiredtiger>`. MongoDB 3.2 deprecates the use of three mirrored "
":program:`mongod` instances for config servers."
msgstr ""

# 760255032160437c89db0ab56bf17209
#: ../source/core/sharded-cluster-high-availability.txt:70
msgid ""
":doc:`Replica sets </replication>` provide high availability for the "
"config servers. If an unavailable config server is a :term:`primary`, "
"then the replica set will :ref:`elect <replica-set-elections>` a new "
"primary."
msgstr ""

# fb7314b826f84db887e6340560a97214
#: ../source/core/sharded-cluster-high-availability.txt:75
msgid ""
"If the replica set config server loses its primary and cannot elect a "
"primary, the cluster's metadata becomes *read only*. You can still read "
"and write data from the shards, but no :ref:`chunk migration <sharding-"
"balancing>` or :doc:`chunk splits </tutorial/split-chunks-in-sharded-"
"cluster>` will occur until a primary is available. If all config "
"databases become unavailable, the cluster can become inoperable."
msgstr ""

# 447258bf359b4a87bd96a03507611763
#: ../source/includes/note-config-server-startup.rst:3
msgid ""
"All config servers must be running and available when you first initiate "
"a :term:`sharded cluster`."
msgstr ""

# 51ae1c4c35c8407db5c549d6b6529480
#: ../source/core/sharded-cluster-high-availability.txt:86
msgid "Renaming Mirrored Config Servers and Cluster Availability"
msgstr ""

# 7cce50aca98048c89a85cd14afea2116
#: ../source/includes/fact-rename-config-servers-requires-cluster-restart.rst:1
msgid ""
"If the sharded cluster is using *mirrored* config servers instead of a "
"replica set and the name or address that a sharded cluster uses to "
"connect to a config server changes, you must restart **every** "
":program:`mongod` and :program:`mongos` instance in the sharded cluster. "
"Avoid downtime by using CNAMEs to identify config servers within the "
"MongoDB deployment."
msgstr ""

# d1a5e9092bf645729fb6b292f683865e
#: ../source/core/sharded-cluster-high-availability.txt:90
msgid ""
"To avoid downtime when renaming config servers, use DNS names unrelated "
"to physical or virtual hostnames to refer to your :ref:`config servers "
"<sharding-config-server>`."
msgstr ""

# 3768387fa35040598e7c7b12bbb16ae3
#: ../source/core/sharded-cluster-high-availability.txt:94
msgid ""
"Generally, refer to each config server using the DNS alias (e.g. a CNAME "
"record). When specifying the config server connection string to "
":program:`mongos`, use these names. These records make it possible to "
"change the IP address or rename config servers without changing the "
"connection string and without having to restart the entire cluster."
msgstr ""

# d756641a18d14d9099104c317a9d319a
#: ../source/core/sharded-cluster-high-availability.txt:101
msgid "Shard Keys and Cluster Availability"
msgstr ""

# f298fb6e1ca44362b071fe19fb3368b3
#: ../source/core/sharded-cluster-high-availability.txt:103
msgid "The most important consideration when choosing a :term:`shard key` are:"
msgstr ""

# 99a5f89f710b4fd89bc5bacd8e92d15f
#: ../source/core/sharded-cluster-high-availability.txt:106
msgid ""
"to ensure that MongoDB will be able to distribute data evenly among "
"shards, and"
msgstr ""

# 6a65d2af4b1e49389f29bfdda67eaf3b
#: ../source/core/sharded-cluster-high-availability.txt:109
msgid "to scale writes across the cluster, and"
msgstr ""

# a7dd6a425d1b472895c74e736fbc571b
#: ../source/core/sharded-cluster-high-availability.txt:111
msgid ""
"to ensure that :program:`mongos` can isolate most queries to a specific "
":program:`mongod`."
msgstr ""

# 296eeef18347415cbfa374cae9515da9
#: ../source/core/sharded-cluster-high-availability.txt:114
msgid "Furthermore:"
msgstr ""

# 2de7d72fb22146ada15da6c4f31214a7
#: ../source/core/sharded-cluster-high-availability.txt:116
msgid ""
"Each shard should be a :term:`replica set`, if a specific "
":program:`mongod` instance fails, the replica set members will elect "
"another to be :term:`primary` and continue operation. However, if an "
"entire shard is unreachable or fails for some reason, that data will be "
"unavailable."
msgstr ""

# 9f0179a6bccb4c7bb576a008baea7ac7
#: ../source/core/sharded-cluster-high-availability.txt:122
msgid ""
"If the shard key allows the :program:`mongos` to isolate most operations "
"to a single shard, then the failure of a single shard will only render "
"*some* data unavailable."
msgstr ""

# f744dab8039d46dbbc42635a0f3c9356
#: ../source/core/sharded-cluster-high-availability.txt:126
msgid ""
"If your shard key distributes data required for every operation "
"throughout the cluster, then the failure of the entire shard will render "
"the entire cluster unavailable."
msgstr ""

# c6bb96b091e44e4bbf223eedec5428cd
#: ../source/core/sharded-cluster-high-availability.txt:130
msgid ""
"In essence, this concern for reliability simply underscores the "
"importance of choosing a shard key that isolates query operations to a "
"single shard."
msgstr ""

# a2b2966930534ed09b3e1e53dc4c0eb5
#~ msgid ""
#~ "If each application server has its "
#~ "own :program:`mongos` instance, other "
#~ "application servers can continue access "
#~ "the database. Furthermore, :program:`mongos` "
#~ "instances do not maintain persistent "
#~ "state, and they can restart and "
#~ "become unavailable without losing any "
#~ "state or data. When a :program:`mongos`"
#~ " instance starts, it retrieves a copy"
#~ " of the :term:`config database` and "
#~ "can begin routing queries."
#~ msgstr ""

# b8ae3548f2294fedb5262d378626219c
#~ msgid "All Members of a Replica Set Become Unavailable"
#~ msgstr ""

# d178d54e92ea448eb3b025ace5606a27
#~ msgid ""
#~ "If all members of a replica set"
#~ " within a shard are unavailable, all"
#~ " data held in that shard is "
#~ "unavailable. However, the data on all"
#~ " other shards will remain available, "
#~ "and it's possible to read and "
#~ "write data to the other shards. "
#~ "However, your application must be able"
#~ " to deal with partial results, and"
#~ " you should investigate the cause of"
#~ " the interruption and attempt to "
#~ "recover the shard as soon as "
#~ "possible."
#~ msgstr ""

# 44833ba6490b4c1da66aaf30eac0478e
#~ msgid "One or Two Config Databases Become Unavailable"
#~ msgstr ""

# a93fd4a0ee0d4b1eb2633f8e217f3068
#~ msgid ""
#~ "Three distinct :program:`mongod` instances "
#~ "provide the :term:`config database` using "
#~ "a special two-phase commits to "
#~ "maintain consistent state between these "
#~ ":program:`mongod` instances. Cluster operation "
#~ "will continue as normal but :ref:`chunk"
#~ " migration <sharding-balancing>` and the"
#~ " cluster can create no new "
#~ ":doc:`chunk splits </tutorial/split-chunks-"
#~ "in-sharded-cluster>`. Replace the config"
#~ " server as soon as possible. If "
#~ "all config databases become unavailable, "
#~ "the cluster can become inoperable."
#~ msgstr ""

# 8b05758680d8442f921dd30e1d3b8125
#~ msgid ""
#~ "If an unavailable secondary becomes "
#~ "available while it still has current "
#~ "oplog entries, it can catch up to"
#~ " the latest state of the set "
#~ "using the normal :term:`replication process"
#~ " <sync>`, otherwise it must perform "
#~ "an :term:`initial sync`."
#~ msgstr ""

# e9dbe9c87f244696af44e443bf467551
#~ msgid "Renaming Config Servers and Cluster Availability"
#~ msgstr ""

# 93aabbe850a048ba9e485e86712edd38
#~ msgid ""
#~ "If the name or address that a "
#~ "sharded cluster uses to connect to "
#~ "a config server changes, you must "
#~ "restart **every** :program:`mongod` and "
#~ ":program:`mongos` instance in the sharded "
#~ "cluster. Avoid downtime by using CNAMEs"
#~ " to identify config servers within "
#~ "the MongoDB deployment."
#~ msgstr ""

