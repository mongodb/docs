# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 18:43+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/reference/bson-types.txt:5
msgid "BSON Types"
msgstr ""

#: ../source/reference/bson-types.txt:15
msgid ""
":term:`BSON` is a binary serialization format used to store documents and"
" make remote procedure calls in MongoDB. The BSON specification is "
"located at `bsonspec.org <http://bsonspec.org/>`_."
msgstr ""

#: ../source/reference/bson-types.txt:19
msgid ""
"Each BSON type has both integer and string identifiers as listed in the "
"following table:"
msgstr ""

#: ../source/includes/fact-bson-types.rst:4
msgid "Type"
msgstr ""

#: ../source/includes/fact-bson-types.rst:5
msgid "Number"
msgstr ""

#: ../source/includes/fact-bson-types.rst:6
msgid "Alias"
msgstr ""

#: ../source/includes/fact-bson-types.rst:7
msgid "Notes"
msgstr ""

#: ../source/includes/fact-bson-types.rst:9
msgid "Double"
msgstr ""

#: ../source/includes/fact-bson-types.rst:10
msgid "1"
msgstr ""

#: ../source/includes/fact-bson-types.rst:11
msgid "\"double\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:14
#: ../source/reference/bson-types.txt:70
msgid "String"
msgstr ""

#: ../source/includes/fact-bson-types.rst:15
msgid "2"
msgstr ""

#: ../source/includes/fact-bson-types.rst:16
msgid "\"string\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:19
msgid "Object"
msgstr ""

#: ../source/includes/fact-bson-types.rst:20
msgid "3"
msgstr ""

#: ../source/includes/fact-bson-types.rst:21
msgid "\"object\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:24
msgid "Array"
msgstr ""

#: ../source/includes/fact-bson-types.rst:25
msgid "4"
msgstr ""

#: ../source/includes/fact-bson-types.rst:26
msgid "\"array\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:29
msgid "Binary data"
msgstr ""

#: ../source/includes/fact-bson-types.rst:30
msgid "5"
msgstr ""

#: ../source/includes/fact-bson-types.rst:31
msgid "\"binData\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:34
msgid "Undefined"
msgstr ""

#: ../source/includes/fact-bson-types.rst:35
msgid "6"
msgstr ""

#: ../source/includes/fact-bson-types.rst:36
msgid "\"undefined\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:37
#: ../source/includes/fact-bson-types.rst:67
#: ../source/includes/fact-bson-types.rst:77
msgid "Deprecated."
msgstr ""

#: ../source/includes/fact-bson-types.rst:39
#: ../source/reference/bson-types.txt:42
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-bson-types.rst:40
msgid "7"
msgstr ""

#: ../source/includes/fact-bson-types.rst:41
msgid "\"objectId\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:44
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-bson-types.rst:45
msgid "8"
msgstr ""

#: ../source/includes/fact-bson-types.rst:46
msgid "\"bool\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:49
#: ../source/reference/bson-types.txt:142
msgid "Date"
msgstr ""

#: ../source/includes/fact-bson-types.rst:50
msgid "9"
msgstr ""

#: ../source/includes/fact-bson-types.rst:51
msgid "\"date\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:54
msgid "Null"
msgstr ""

#: ../source/includes/fact-bson-types.rst:55
msgid "10"
msgstr ""

#: ../source/includes/fact-bson-types.rst:56
msgid "\"null\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:59
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-bson-types.rst:60
msgid "11"
msgstr ""

#: ../source/includes/fact-bson-types.rst:61
msgid "\"regex\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:64
msgid "DBPointer"
msgstr ""

#: ../source/includes/fact-bson-types.rst:65
msgid "12"
msgstr ""

#: ../source/includes/fact-bson-types.rst:66
msgid "\"dbPointer\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:69
msgid "JavaScript"
msgstr ""

#: ../source/includes/fact-bson-types.rst:70
msgid "13"
msgstr ""

#: ../source/includes/fact-bson-types.rst:71
msgid "\"javascript\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:74
msgid "Symbol"
msgstr ""

#: ../source/includes/fact-bson-types.rst:75
msgid "14"
msgstr ""

#: ../source/includes/fact-bson-types.rst:76
msgid "\"symbol\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:79
msgid "JavaScript (with scope)"
msgstr ""

#: ../source/includes/fact-bson-types.rst:80
msgid "15"
msgstr ""

#: ../source/includes/fact-bson-types.rst:81
msgid "\"javascriptWithScope\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:84
msgid "32-bit integer"
msgstr ""

#: ../source/includes/fact-bson-types.rst:85
msgid "16"
msgstr ""

#: ../source/includes/fact-bson-types.rst:86
msgid "\"int\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:89
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-bson-types.rst:90
msgid "17"
msgstr ""

#: ../source/includes/fact-bson-types.rst:91
msgid "\"timestamp\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:94
msgid "64-bit integer"
msgstr ""

#: ../source/includes/fact-bson-types.rst:95
msgid "18"
msgstr ""

#: ../source/includes/fact-bson-types.rst:96
msgid "\"long\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:99
msgid "Decimal128"
msgstr ""

#: ../source/includes/fact-bson-types.rst:100
msgid "19"
msgstr ""

#: ../source/includes/fact-bson-types.rst:101
msgid "\"decimal\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:102
msgid "New in version 3.4."
msgstr ""

#: ../source/includes/fact-bson-types.rst:104
msgid "Min key"
msgstr ""

#: ../source/includes/fact-bson-types.rst:105
msgid "-1"
msgstr ""

#: ../source/includes/fact-bson-types.rst:106
msgid "\"minKey\""
msgstr ""

#: ../source/includes/fact-bson-types.rst:109
msgid "Max key"
msgstr ""

#: ../source/includes/fact-bson-types.rst:110
msgid "127"
msgstr ""

#: ../source/includes/fact-bson-types.rst:111
msgid "\"maxKey\""
msgstr ""

#: ../source/reference/bson-types.txt:24
msgid ""
"You can use these values with the :query:`$type` operator to query "
"documents by their BSON type. The :expression:`$type` aggregation "
"operator returns the type of an :ref:`operator expression <agg-quick-ref-"
"operator-expressions>` using one of the listed BSON type strings."
msgstr ""

#: ../source/reference/bson-types.txt:30
msgid "To determine a field's type, see :ref:`check-types-in-shell`."
msgstr ""

#: ../source/reference/bson-types.txt:32
msgid ""
"If you convert BSON to JSON, see the :doc:`Extended JSON </reference"
"/mongodb-extended-json>` reference."
msgstr ""

#: ../source/reference/bson-types.txt:35
msgid ""
"The following sections describe special considerations for particular "
"BSON types."
msgstr ""

#: ../source/reference/bson-types.txt:44
msgid ""
"ObjectIds are small, likely unique, fast to generate, and ordered. "
"ObjectId values consist of 12 bytes, where the first four bytes are a "
"timestamp that reflect the ObjectId's creation. Specifically:"
msgstr ""

#: ../source/includes/fact-ObjectId-construct.rst:1
msgid "a 4-byte value representing the seconds since the Unix epoch,"
msgstr ""

#: ../source/includes/fact-ObjectId-construct.rst:3
msgid "a 5-byte random value, and"
msgstr ""

#: ../source/includes/fact-ObjectId-construct.rst:5
msgid "a 3-byte counter, starting with a random value."
msgstr ""

#: ../source/includes/fact-id-field.rst:1
msgid ""
"In MongoDB, each document stored in a collection requires a unique "
":term:`_id` field that acts as a :term:`primary key`. If an inserted "
"document omits the ``_id`` field, the MongoDB driver automatically "
"generates an :ref:`objectid` for the ``_id`` field."
msgstr ""

#: ../source/includes/fact-id-field.rst:6
msgid ""
"This also applies to documents inserted through update operations with "
":ref:`upsert: true <upsert-parameter>`."
msgstr ""

#: ../source/reference/bson-types.txt:52
msgid ""
"MongoDB clients should add an ``_id`` field with a unique ObjectId. Using"
" ObjectIds for the ``_id`` field provides the following additional "
"benefits:"
msgstr ""

#: ../source/reference/bson-types.txt:56
msgid ""
"in the :binary:`~bin.mongo` shell, you can access the creation time of "
"the ``ObjectId``, using the :method:`ObjectId.getTimestamp()` method."
msgstr ""

#: ../source/reference/bson-types.txt:59
msgid ""
"sorting on an ``_id`` field that stores ``ObjectId`` values is roughly "
"equivalent to sorting by creation time."
msgstr ""

#: ../source/includes/fact-ObjectId-timestamp-order.rst:1
msgid ""
"While :ref:`objectid` values should increase over time, they are not "
"necessarily monotonic. This is because they:"
msgstr ""

#: ../source/includes/fact-ObjectId-timestamp-order.rst:4
msgid ""
"Only contain one second of temporal resolution, so :ref:`objectid` values"
" created within the same second do not have a guaranteed ordering, and"
msgstr ""

#: ../source/includes/fact-ObjectId-timestamp-order.rst:7
msgid "Are generated by clients, which may have differing system clocks."
msgstr ""

#: ../source/reference/bson-types.txt:65
msgid ":method:`ObjectId()`"
msgstr ""

#: ../source/reference/bson-types.txt:72
msgid ""
"BSON strings are UTF-8. In general, drivers for each programming language"
" convert from the language's string format to UTF-8 when serializing and "
"deserializing BSON. This makes it possible to store most international "
"characters in BSON strings with ease. [#sort-string-"
"internationalization]_ In addition, MongoDB :query:`$regex` queries "
"support UTF-8 in the regex string."
msgstr ""

#: ../source/reference/bson-types.txt:79
msgid ""
"Given strings using UTF-8 character sets, using :method:`sort() "
"<cursor.sort()>` on strings will be reasonably correct. However, because "
"internally :method:`sort() <cursor.sort()>` uses the C++ ``strcmp`` api, "
"the sort order may handle some characters incorrectly."
msgstr ""

#: ../source/reference/bson-types.txt:88
msgid "Timestamps"
msgstr ""

#: ../source/reference/bson-types.txt:90
msgid ""
"BSON has a special timestamp type for *internal* MongoDB use and is "
"**not** associated with the regular :ref:`document-bson-type-date` type. "
"Timestamp values are a 64 bit value where:"
msgstr ""

#: ../source/reference/bson-types.txt:94
msgid "the first 32 bits are a ``time_t`` value (seconds since the Unix epoch)"
msgstr ""

#: ../source/reference/bson-types.txt:96
msgid ""
"the second 32 bits are an incrementing ``ordinal`` for operations within "
"a given second."
msgstr ""

#: ../source/reference/bson-types.txt:99
msgid ""
"Within a single :binary:`~bin.mongod` instance, timestamp values are "
"always unique."
msgstr ""

#: ../source/reference/bson-types.txt:102
msgid ""
"In replication, the :term:`oplog` has a ``ts`` field. The values in this "
"field reflect the operation time, which uses a BSON timestamp value."
msgstr ""

#: ../source/reference/bson-types.txt:108
msgid ""
"The BSON timestamp type is for *internal* MongoDB use. For most cases, in"
" application development, you will want to use the BSON date type. See "
":ref:`document-bson-type-date` for more information."
msgstr ""

#: ../source/reference/bson-types.txt:113
msgid ""
"If you insert a document containing an empty BSON timestamp in a top-"
"level field, the MongoDB server will replace that empty timestamp with "
"the current timestamp value. For example, if you create an insert a "
"document with a timestamp value, as in the following operation:"
msgstr ""

#: ../source/reference/bson-types.txt:124
msgid ""
"Then, the :method:`db.test.find() <db.collection.find()>` operation will "
"return a document that resembles the following:"
msgstr ""

#: ../source/reference/bson-types.txt:131
msgid ""
"If ``ts`` were a field in an embedded document, the server would have "
"left it as an empty timestamp value."
msgstr ""

#: ../source/reference/bson-types.txt:134
msgid ""
"Previously, the server would only replace empty timestamp values in the "
"first two fields, including ``_id``, of an inserted document. Now MongoDB"
" will replace any top-level field."
msgstr ""

#: ../source/reference/bson-types.txt:144
msgid ""
"BSON Date is a 64-bit integer that represents the number of milliseconds "
"since the Unix epoch (Jan 1, 1970). This results in a representable date "
"range of about 290 million years into the past and future."
msgstr ""

#: ../source/reference/bson-types.txt:149
msgid ""
"The `official BSON specification <http://bsonspec.org/#/specification>`_ "
"refers to the BSON Date type as the *UTC datetime*."
msgstr ""

#: ../source/reference/bson-types.txt:152
msgid ""
"BSON Date type is signed. [#unsigned-date]_ Negative values represent "
"dates before 1970."
msgstr ""

#: ../source/reference/bson-types.txt:182
msgid ""
"Prior to version 2.0, ``Date`` values were incorrectly interpreted as "
"*unsigned* integers, which affected sorts, range queries, and indexes on "
"``Date`` fields. Because indexes are not recreated when upgrading, please"
" re-index if you created an index on ``Date`` values with an earlier "
"version, and dates before 1970 are relevant to your application."
msgstr ""

#~ msgid ""
#~ "The next sections describe special "
#~ "considerations for particular BSON types."
#~ msgstr ""

#~ msgid ""
#~ "BSON Date is a 64-bit integer that"
#~ " represents the number of milliseconds "
#~ "since the Unix epoch (Jan 1, "
#~ "1970). The `official BSON specification "
#~ "<http://bsonspec.org/#/specification>`_ refers to "
#~ "the BSON Date type as the *UTC "
#~ "datetime*."
#~ msgstr ""

# 08ce06236fec40cfba7a029df86fbf2b
#~ msgid ""
#~ "BSON supports the following data types"
#~ " as values in documents. Each data"
#~ " type has a corresponding number that"
#~ " can be used with the :query:`$type`"
#~ " operator to query documents by BSON"
#~ " type."
#~ msgstr ""

# 977032187d9b4651a928718914cbe8d7
#~ msgid "**Type**"
#~ msgstr ""

# 57f63952eef04dca85c7ed3c73a7a8a1
#~ msgid "**Number**"
#~ msgstr ""

# c0d560c80c604fb38a9352cffbc863e5
#~ msgid "Object id"
#~ msgstr ""

# bc5a79439d44461e9a675a70c0687e33
#~ msgid "255"
#~ msgstr ""

# 3df3d9d21cf04c0599a88cd5e79f30ce
#~ msgid ""
#~ "When comparing values of different "
#~ ":term:`BSON` types, MongoDB uses the "
#~ "following comparison order, from lowest "
#~ "to highest:"
#~ msgstr ""

# de9bc0b4f7184d9498ba5af4f6b7d740
#~ msgid "MinKey (internal type)"
#~ msgstr ""

# 60c1bc8c266547d8aa7f48a798ed9c3b
#~ msgid "Numbers (ints, longs, doubles)"
#~ msgstr ""

# 438f4a97745f4c30b9e98e2cae7a3c90
#~ msgid "Symbol, String"
#~ msgstr ""

# 1074d82168614e239ee7b715d1f51cb0
#~ msgid "BinData"
#~ msgstr ""

# 1f0e6f65a8f44d6d8be6e21c876606ad
#~ msgid "Date, Timestamp"
#~ msgstr ""

# b194e9938a8a4ad78886409b126b62a7
#~ msgid "MaxKey (internal type)"
#~ msgstr ""

# e5f67458330e4f27931fd1a903d80679
#~ msgid ""
#~ "MongoDB treats some types as equivalent"
#~ " for comparison purposes. For instance, "
#~ "numeric types undergo conversion before "
#~ "comparison."
#~ msgstr ""

# 51eec89a9e314f4da26786b4342653a0
#~ msgid ""
#~ "The comparison treats a non-existent "
#~ "field as it would an empty BSON"
#~ " Object. As such, a sort on the"
#~ " ``a`` field in documents ``{ }`` "
#~ "and ``{ a: null }`` would treat"
#~ " the documents as equivalent in sort"
#~ " order."
#~ msgstr ""

# 71252e4a88ab441faf081f8dd034d902
#~ msgid ""
#~ "With arrays, a less-than comparison "
#~ "or an ascending sort compares the "
#~ "smallest element of arrays, and a "
#~ "greater-than comparison or a descending "
#~ "sort compares the largest element of "
#~ "the arrays. As such, when comparing "
#~ "a field whose value is a "
#~ "single-element array (e.g. ``[ 1 ]``)"
#~ " with non-array fields (e.g. ``2``),"
#~ " the comparison is between ``1`` and"
#~ " ``2``. A comparison of an empty "
#~ "array (e.g. ``[ ]``) treats the "
#~ "empty array as less than ``null`` "
#~ "or a missing field."
#~ msgstr ""

# cea6fbbb5e7b405a8ef05a072b3950a7
#~ msgid ""
#~ "If you convert BSON to JSON, see"
#~ " :doc:`/reference/mongodb-extended-json`."
#~ msgstr ""

# dcb45d46d5e9455d93a798afeae479ee
#~ msgid ""
#~ "ObjectIds are: small, likely unique, "
#~ "fast to generate, and ordered. These "
#~ "values consists of 12-bytes, where the"
#~ " first four bytes are a timestamp "
#~ "that reflect the ObjectId's creation. "
#~ "Refer to the :doc:`ObjectId </reference"
#~ "/object-id>` documentation for more "
#~ "information."
#~ msgstr ""

# f6e7463d7bfc4232a38d8e5b53c0796c
#~ msgid ""
#~ "Within a single :program:`mongod` instance,"
#~ " timestamp values are always unique."
#~ msgstr ""

# 56a428d1cb0543a398fa1e2b01838557
#~ msgid ""
#~ "The BSON Timestamp type is for "
#~ "*internal* MongoDB use. For most cases,"
#~ " in application development, you will "
#~ "want to use the BSON date type."
#~ " See :ref:`document-bson-type-date` "
#~ "for more information."
#~ msgstr ""

# 188d2b850da4408ba20df62893aee2c9
#~ msgid ""
#~ "If you create a BSON Timestamp "
#~ "using the empty constructor (e.g. ``new"
#~ " Timestamp()``), MongoDB will only generate"
#~ " a timestamp *if* you use the "
#~ "constructor in the first field of "
#~ "the document. [#id_exception]_ Otherwise, "
#~ "MongoDB will generate an empty timestamp"
#~ " value (i.e. ``Timestamp(0, 0)``.)"
#~ msgstr ""

# 331d3f842d944c6081b3422807509f64
#~ msgid ":program:`mongo` shell displays the Timestamp value with the wrapper:"
#~ msgstr ""

# d68006a1eb88438187f95759b48f9759
#~ msgid ""
#~ "Prior to version 2.1, the "
#~ ":program:`mongo` shell display the Timestamp"
#~ " value as a document:"
#~ msgstr ""

# 340d4924b70843a6964cda69881c0a1d
#~ msgid ""
#~ "If the first field in the document"
#~ " is ``_id``, then you can generate"
#~ " a timestamp in the *second* field"
#~ " of a document."
#~ msgstr ""

# 45038684a8f74e55bf2869045e56c97a
#~ msgid ""
#~ "In the following example, MongoDB will"
#~ " generate a Timestamp value, even "
#~ "though the ``Timestamp()`` constructor is "
#~ "*not* in the first field in the"
#~ " document:"
#~ msgstr ""

# ef90f075b42446558405e4bb2535cde2
# 0a736d4b08884822b9a88970cf377642
# b389a9c287a64c80ad264d12b9aaaedf
# 5eed534484d4415d937cd6fd02c0dd68
#~ msgid "Example"
#~ msgstr ""

#~ msgid "Comparison/Sort Order"
#~ msgstr ""

#~ msgid "MongoDB sorts ``BinData`` in the following order:"
#~ msgstr ""

#~ msgid "First, the length or size of the data."
#~ msgstr ""

#~ msgid "Then, by the BSON one-byte subtype."
#~ msgstr ""

#~ msgid "Finally, by the data, performing a byte-by-byte comparison."
#~ msgstr ""

