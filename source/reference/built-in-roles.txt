.. _built-in-roles:

==============
Built-In Roles
==============

.. Engineering wants us to use Built-in Roles instead of System-Defined Roles. -BG 2013-12-19

.. default-domain:: mongodb

MongoDB grants access to data and commands through :ref:`role-based
authorization <roles>` and provides built-in roles that provide the different
levels of access commonly needed in a database system. You can additionally
create :ref:`user-defined roles <user-defined-roles>`.

A role grants privileges to perform sets of :ref:`actions
<security-user-actions>` on defined :ref:`resources <resource-document>`. A
given role applies to the database on which it is defined and can grant access
down to a collection level of granularity.

Each of MongoDB's built-in roles defines access at the database level for all
*non*-system collections in the role's database and at the collection level
for all :doc:`system collections </reference/system-collections>`.

MongoDB provides the built-in :ref:`database user <database-user-roles>` and
:ref:`database administration <database-administration-roles>` roles on
*every* database. MongoDB provides all other built-in roles only on the
``admin`` database.

This section describes the privileges for each built-in role. You can also
view the privileges for a built-in role at any time by issuing the
:dbcommand:`rolesInfo` command with the ``showPrivileges`` and
``showBuiltinRoles`` fields both set to ``true``.

.. _database-user-roles:

Database User Roles
-------------------

Every database includes the following client roles:

.. authrole:: read

   Provides the ability to read data on all *non*-system collections and on
   the following system collections: :data:`system.indexes
   <<database>.system.indexes>`, :data:`system.js <<database>.system.js>`, and
   :data:`system.namespaces <<database>.system.namespaces>` collections. The
   role provides read access by granting the following :ref:`actions
   <security-user-actions>`:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

.. authrole:: readWrite

   Provides all the privileges of the :authrole:`read` role plus ability to
   modify data on all *non*-system collections and the :data:`system.js
   <<database>.system.js>` collection. The role provides the following
   :ref:`actions <security-user-actions>` on those collections:

   - :authaction:`collStats`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`dropCollection`
   - :authaction:`dropIndex`
   - :authaction:`emptycapped`
   - :authaction:`find`
   - :authaction:`insert`
   - :authaction:`killCursors`
   - :authaction:`remove`
   - :authaction:`renameCollectionSameDB`
   - :authaction:`update`

.. _database-administration-roles:

Database Administration Roles
-----------------------------

Every database includes the following database administration roles:

.. authrole:: dbAdmin

   Provides the following :ref:`actions <security-user-actions>` on the
   database's :data:`system.indexes <<database>.system.indexes>`,
   :data:`system.namespaces <<database>.system.namespaces>`, and
   :data:`system.profile <<database>.system.profile>` collections:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

   Provides the following *additional* action on :data:`system.profile
   <<database>.system.profile>`:

   - :authaction:`dropCollection`

   Provides the following actions on all *non*-system collections. This role
   *does not* include full read access on non-system collections:

   - :authaction:`clean`
   - :authaction:`collMod`
   - :authaction:`collStats`
   - :authaction:`compact`
   - :authaction:`convertToCapped`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dbStats`
   - :authaction:`dropCollection`
   - :authaction:`dropDatabase`
   - :authaction:`dropIndex`
   - :authaction:`enableProfiler`
   - :authaction:`indexStats`
   - :authaction:`reIndex`
   - :authaction:`renameCollectionSameDB`
   - :authaction:`repairDatabase`
   - :authaction:`storageDetails`
   - :authaction:`validate`

.. authrole:: dbOwner

   The database owner can perform any administrative action on the database.
   This role combines the privileges granted by the :authrole:`readWrite`,
   :authrole:`dbAdmin` and :authrole:`userAdmin` roles.

.. authrole:: userAdmin

   Provides the ability to create and modify roles and users on the current
   database. This role also indirectly provides :ref:`superuser <superuser>`
   access to either the database or, if scoped to the ``admin`` database, the
   cluster. The :authrole:`userAdmin` role allows users to grant any user any
   privilege, including themselves.

   The :authrole:`userAdmin` role explicitly provides the following
   :ref:`actions <security-user-actions>`:

   - :authaction:`changeCustomData`
   - :authaction:`changePassword`
   - :authaction:`createRole`
   - :authaction:`createUser`
   - :authaction:`dropRole`
   - :authaction:`dropUser`
   - :authaction:`grantRole`
   - :authaction:`revokeRole`
   - :authaction:`viewRole`
   - :authaction:`viewUser`

.. _cluster-admin-roles:
.. _admin-roles:

Cluster Administration Roles
----------------------------

The ``admin`` database includes the following roles for administering the
whole system rather than just a single database. These roles include but are
not limited to :term:`replica set` and :term:`sharded cluster` administrative
functions.

.. authrole:: clusterAdmin

   Provides the greatest cluster-management access. This role combines the
   privileges granted by the :authrole:`clusterManager`,
   :authrole:`clusterMonitor`, and :authrole:`hostManager` roles.

   Additionally, the role provides the ability to drop any database by
   providing the following :ref:`action <security-user-actions>`:

   - :authaction:`dropDatabase`

.. authrole:: clusterManager

   Provides management and monitoring :ref:`actions <security-user-actions>`
   on the cluster. A user with this role can access the ``config`` and
   ``local`` databases, which are used in sharding and replication,
   respectively.

   Provides the following actions on the cluster as a whole:

   - :authaction:`addShard`
   - :authaction:`applicationMessage`
   - :authaction:`cleanupOrphaned`
   - :authaction:`flushRouterConfig`
   - :authaction:`listShards`
   - :authaction:`removeShard`
   - :authaction:`replSetConfigure`
   - :authaction:`replSetGetStatus`
   - :authaction:`replSetStateChange`
   - :authaction:`resync`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`enableSharding`
   - :authaction:`moveChunk`
   - :authaction:`splitChunk`
   - :authaction:`splitVector`

   On the ``config`` database, provides the following actions on the
   :data:`~config.settings` collection:

   - :authaction:`insert`
   - :authaction:`remove`
   - :authaction:`update`

   On the ``config`` database, provides the following actions on all
   configuration collections and on the :data:`system.indexes
   <<database>.system.indexes>`, :data:`system.js <<database>.system.js>`, and
   :data:`system.namespaces <<database>.system.namespaces>` collections:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

   On the ``local`` database, provides the following actions on the
   :data:`~local.system.replset` collection:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

.. authrole:: clusterMonitor

   Provides read-only access to monitoring tools, such as the `MongoDB
   Management Service (MMS) <http://mms.mongodb.com/help/>`_ monitoring agent.

   Provides the following :ref:`actions <security-user-actions>` on the
   cluster as a whole:

   - :authaction:`connPoolStats`
   - :authaction:`cursorInfo`
   - :authaction:`getCmdLineOpts`
   - :authaction:`getLog`
   - :authaction:`getParameter`
   - :authaction:`getShardMap`
   - :authaction:`hostInfo`
   - :authaction:`inprog`
   - :authaction:`listDatabases`
   - :authaction:`listShards`
   - :authaction:`netstat`
   - :authaction:`replSetGetStatus`
   - :authaction:`serverStatus`
   - :authaction:`shardingState`
   - :authaction:`top`
   - :authaction:`writeBacksQueued`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`collStats`
   - :authaction:`dbStats`
   - :authaction:`getShardVersion`

   Provides read access on all :data:`system.profile
   <<database>.system.profile>` collections in the cluster:

   - :authaction:`find`

   On the ``config`` database, provides the following actions on all
   configuration collections and on the :data:`system.indexes
   <<database>.system.indexes>`, :data:`system.js <<database>.system.js>`, and
   :data:`system.namespaces <<database>.system.namespaces>` collections:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`

.. authrole:: hostManager

   Provides the ability to monitor and manager servers.

   Provides the following :ref:`actions <security-user-actions>` on the
   cluster as a whole:

   - :authaction:`applicationMessage`
   - :authaction:`closeAllDatabases`
   - :authaction:`connPoolSync`
   - :authaction:`cpuProfiler`
   - :authaction:`diagLogging`
   - :authaction:`flushRouterConfig`
   - :authaction:`fsync`
   - :authaction:`invalidateUserCache`
   - :authaction:`killop`
   - :authaction:`logRotate`
   - :authaction:`resync`
   - :authaction:`setParameter`
   - :authaction:`shutdown`
   - :authaction:`touch`
   - :authaction:`unlock`

   Provides the following actions on *all* databases in the cluster:

   - :authaction:`killCursors`
   - :authaction:`repairDatabase`

.. _backup-and-restore-roles:

Backup and Restoration Roles
----------------------------

The ``admin`` database includes the following roles for backing up and
restoring data:

.. authrole:: backup

   Provides minimal privileges needed for backing up data.
   This role provides sufficient privileges to use the
   `MongoDB Management Service (MMS) <http://mms.mongodb.com/help/>`_
   backup agent.

   .. todo: should we document the mms.backup collection in the
            system-collections document?

   Provides the following :ref:`actions <security-user-actions>` on the
   ``mms.backup`` collection in the ``admin`` database:

   - :authaction:`insert`
   - :authaction:`update`

   Provides the following action on the cluster as a whole:

   - :authaction:`listDatabases`

   Provides the :authaction:`find` action on the following:

   - all *non*-system collections in the cluster

   - all the following system collections in the cluster:
     :data:`system.indexes <<database>.system.indexes>`,
     :data:`system.namespaces <<database>.system.namespaces>`, and
     :data:`system.js <<database>.system.js>`

   - the :data:`admin.system.users` and :data:`admin.system.roles` collections

   - legacy ``system.users`` collections from versions of MongoDB prior to 2.6

   .. todo: Also provides the :authaction:`find` action on:
             - system.new_users
             - system.backup_users
             - system.version
            Do we want to document these?

.. authrole:: restore

   Provides minimal privileges needed for restoring data from backups.
   This role provides sufficient privileges to use the
   `MongoDB Management Service (MMS) <http://mms.mongodb.com/help/>`_
   backup agent.

   Provides the following :ref:`actions <security-user-actions>` on all
   *non*-system collections and :data:`system.js <<database>.system.js>`
   collections in the cluster; on the :data:`admin.system.users` and
   :data:`admin.system.roles` collections in the ``admin`` database; and on
   legacy ``system.users`` collections from versions of MongoDB prior to 2.6:

   - :authaction:`collMod`
   - :authaction:`createCollection`
   - :authaction:`createIndex`
   - :authaction:`dropCollection`
   - :authaction:`insert`

   .. todo: Also provides the above actions on system.new_users,
            system.backup_users, system.version

   Provides the following *additional* actions on :data:`admin.system.users`
   and legacy ``system.users`` collections:

   - :authaction:`find`
   - :authaction:`remove`
   - :authaction:`update`

   Provides the following action on all the :data:`system.namespaces
   <<database>.system.namespaces>` collections in the cluster:

   - :authaction:`find`

.. _auth-any-database-roles:

All-Database Roles
------------------

The ``admin`` database provides the following roles that apply to all
databases in a :program:`mongod` instance and are roughly equivalent to their
single-database equivalents:

.. authrole:: readAnyDatabase

   Provides the same read-only permissions as :authrole:`read`, except it
   applies to *all* databases in the cluster. The role also provides the
   following :ref:`action <security-user-actions>` on the cluster as a whole:

   - :authaction:`listDatabases`

.. authrole:: readWriteAnyDatabase

   Provides the same read and write permissions as :authrole:`readWrite`,
   except it applies to *all* databases in the cluster. The role also provides
   the following :ref:`action <security-user-actions>` on the cluster as a
   whole:

   - :authaction:`listDatabases`

.. authrole:: userAdminAnyDatabase

   Provides the same access to user administration operations as
   :authrole:`userAdmin`, except it applies to *all* databases in the cluster.
   The role also provides the following :ref:`actions <security-user-actions>`
   on the cluster as a whole:

   - :authaction:`authSchemaUpgrade`
   - :authaction:`invalidateUserCache`
   - :authaction:`listDatabases`

   The role also provides the following actions on the
   :data:`admin.system.users` and :data:`admin.system.roles` collections on
   the ``admin`` database, and on legacy ``system.users`` collections from
   versions of MongoDB prior to 2.6:

   - :authaction:`collStats`
   - :authaction:`dbHash`
   - :authaction:`dbStats`
   - :authaction:`find`
   - :authaction:`killCursors`
   - :authaction:`planCacheRead`

   The :authrole:`userAdminAnyDatabase` role does not restrict the permissions
   that a user can grant. As a result, :authrole:`userAdminAnyDatabase` users
   can grant privileges themselves privileges in excess of their current
   privileges and even can grant themselves *all privileges*, even though the
   role does not explicitly authorize privileges beyond user administration.
   This role is effectively a MongoDB system :ref:`superuser <superuser>`.

   .. todo: Also provides the above actions on system.new_users, system.backup_users,
            and system.version. Do we want to document these?

.. authrole:: dbAdminAnyDatabase

   Provides the same access to database administration operations as
   :authrole:`dbAdmin`, except it applies to *all* databases in the cluster.
   The role also provides the following :ref:`action <security-user-actions>`
   on the cluster as a whole:

   - :authaction:`listDatabases`

.. _superuser:

Superuser Roles
---------------

Several roles provide either indirect or direct system-wide superuser access.

The following roles provide the ability to assign any user any privilege on
any database, which means that users with one of these roles can assign
*themselves* any privilege on any database:

- :authrole:`dbOwner` role, when scoped to the ``admin`` database

- :authrole:`userAdmin` role, when scoped to the ``admin`` database

- :authrole:`userAdminAnyDatabase` role

The following role provides full privileges on all resources:

.. authrole:: root

   Provides access to all the operations and all the resources of *of all
   other roles combined*. The role provides full privileges on all resources
   in the cluster.

Internal Role
-------------

.. authrole:: __system

   MongoDB assigns this role to user objects that represent cluster members,
   such as replica set members and :program:`mongos` instances. The role
   entitles its holder to take any action against any object in the database.
   **Do not** assign this role to user objects representing applications or
   human administrators, other than in exceptional circumstances.

.. todo: does this still apply?

.. :dbcommand:`applyOps`, :dbcommand:`eval`, and :method:`db.eval()` require
   :authrole:`readWriteAnyDatabase`, :authrole:`userAdminAnyDatabase`,
   :authrole:`dbAdminAnyDatabase` and :authrole:`clusterAdmin`.
