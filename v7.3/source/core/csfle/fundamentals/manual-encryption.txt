.. _csfle-fundamentals-manual-encryption:

===================
{+manual-enc-title+}
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. tabs-selector:: drivers

Overview
--------

.. include:: /includes/queryable-encryption/qe-csfle-manual-enc-overview.rst

{+manual-enc-first+} is available in the following MongoDB products:

- MongoDB Community Server
- MongoDB Enterprise Advanced
- MongoDB Atlas

Use {+manual-enc-title+}
-----------------------

To use {+manual-enc+} you must perform the following actions in your
{+csfle-abbrev+}-enabled application:

- :ref:`csfle-fundamentals-manual-encryption-client-enc`
- :ref:`csfle-fundamentals-manual-encryption-update-operations`
- :ref:`Manually <csfle-fundamentals-manual-encryption-manual-decryption>`
  or
  :ref:`Automatically <csfle-fundamentals-manual-encryption-automatic-decryption>`
  Decrypt Fields in Your Documents

.. _csfle-fundamentals-manual-encryption-client-enc:

Create a ClientEncryption Instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use {+manual-enc+}, you must create a ``ClientEncryption``
instance. ``ClientEncryption`` is an abstraction used across drivers and
:binary:`~bin.mongosh` that encapsulates the {+key-vault-long+}
and {+kms-abbr+} operations involved in {+manual-enc+}.

To create a ``ClientEncryption`` instance, you must specify
the following information:

- A ``MongoClient`` instance with access to your {+key-vault-long+}
- The namespace of your {+key-vault-long+}
- A ``kmsProviders`` object configured with access to the
  {+kms-abbr+} provider hosting your {+cmk-long+}

For more ``ClientEncryption`` options, see :ref:`csfle-reference-mongo-client`. 

To view code snippets that show how to create a ``ClientEncryption``
instance, see the :ref:`csfle-fundamentals-manual-encryption-example`
section of this guide.

.. _csfle-fundamentals-manual-encryption-update-operations:

Encrypt Fields in Read and Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must update read and write operations throughout your application
such that your application encrypts fields before performing
read and write operations.

To encrypt fields, use the ``encrypt`` method of your ``ClientEncryption``
instance.

To view code snippets that show how to use the ``encrypt`` method,
see the :ref:`csfle-fundamentals-manual-encryption-example`
section of this guide.

.. _csfle-fundamentals-manual-encryption-manual-decryption:

Manual Decryption
~~~~~~~~~~~~~~~~~

You can decrypt your encrypted fields manually or automatically when
using {+manual-enc+}.

To decrypt your fields manually, use the ``decrypt`` method of your
``ClientEncryption`` instance.

To view code snippets that show how to use the ``decrypt`` method,
see the :ref:`csfle-fundamentals-manual-encryption-example`
section of this guide.

.. _csfle-fundamentals-manual-encryption-automatic-decryption:

Automatic Decryption
~~~~~~~~~~~~~~~~~~~~

To decrypt your fields automatically, configure your
``MongoClient`` instance as follows:

- Specify your {+key-vault-long+}
- Specify a ``kmsProviders`` object
- If you use MongoDB Community Server, set the ``bypassAutoEncryption``
  option to ``True``


.. note:: Automatic Decryption is Available in MongoDB Community Server

   Although automatic encryption requires MongoDB Enterprise or MongoDB
   Atlas, automatic decryption is available in the following MongoDB
   products:

   - MongoDB Community Server
   - MongoDB Enterprise Advanced
   - MongoDB Atlas

To view a code snippet demonstrating how to enable automatic decryption,
select the tab corresponding to your preferred language:

.. tabs-drivers::

   .. tab::
     :tabid: java-sync

     .. literalinclude:: /includes/fundamentals/manual-encryption/bypass-auto/bypass-auto.java
        :dedent:
        :language: java

   .. tab::
     :tabid: nodejs

     .. literalinclude:: /includes/fundamentals/manual-encryption/bypass-auto/bypass-auto.js
        :dedent:
        :language: javascript

   .. tab::
     :tabid: python

     .. literalinclude:: /includes/fundamentals/manual-encryption/bypass-auto/bypass-auto.py
        :dedent:
        :language: python

   .. tab::
     :tabid: csharp

     .. literalinclude:: /includes/fundamentals/manual-encryption/bypass-auto/bypass-auto.cs
        :language: csharp
        :dedent:

   .. tab::
     :tabid: go

     .. literalinclude:: /includes/fundamentals/manual-encryption/bypass-auto/bypass-auto.go
        :language: go
        :dedent:

   .. tab::
      :tabid: shell

      .. literalinclude:: /includes/fundamentals/manual-encryption/bypass-auto/bypass-auto-shell.js
         :dedent:
         :language: javascript

.. _csfle-fundamentals-manual-encryption-example:

Example
-------

Assume you want to insert documents with the following structure into
your MongoDB instance:

.. literalinclude:: /includes/fundamentals/manual-encryption/sample.json
   :language: json

.. procedure::
   :style: normal

   .. step:: Create a MongoClient Instance

      .. include:: /includes/fundamentals/manual-encryption/example/client.rst

   .. step:: Create a ClientEncryption Instance

      .. include:: /includes/fundamentals/manual-encryption/example/clientEnc.rst

   .. step:: Encrypt Fields and Insert

      .. include:: /includes/fundamentals/manual-encryption/example/encFields.rst

   .. step:: Retrieve Document and Decrypt Fields

      .. include:: /includes/fundamentals/manual-encryption/example/decFields.rst

.. _csfle-fundamentals-manual-encryption-server-side-schema:

Server-Side Field Level Encryption Enforcement
----------------------------------------------

MongoDB supports using :ref:`schema validation
<schema-validation-overview>` to enforce encryption of specific fields
in a collection.

A client performing {+csfle+} with the {+manual-enc+}
mechanism on a MongoDB instance configured to enforce encryption
of certain fields must encrypt those fields as specified on
the MongoDB instance.

To learn how to set up server-side {+csfle-abbrev+}
enforcement, see :ref:`csfle-reference-server-side-schema`.

Learn More
----------

To learn more about {+key-vault-long+}s, {+dek-long+}s, and {+cmk-long+}s,
see :ref:`qe-reference-keys-key-vaults`.

To learn more about {+kms-abbr+} providers and ``kmsProviders`` objects,
see :ref:`qe-fundamentals-kms-providers`.
