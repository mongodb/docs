=============================
Add an Arbiter to Replica Set
=============================

.. default-domain:: mongodb

Arbiters are special :program:`mongod` instances that do not hold a
copy of the data and thus cannot become primary. Arbiters exist solely
to participate in :ref:`elections <replica-set-elections>`. Because
arbiters do not hold a copies of collection data, they have minimal
resource requirements and do not require dedicated hardware.

.. note::

   Because of their minimal system requirements, you may safely deploy an
   arbiter on a system with another workload, such as an application
   server or monitoring member.

.. warning::

   Do not run arbiter processes on a system that is an active
   :term:`primary` or :term:`secondary` of its :term:`replica set`.

Add an Arbiter
--------------

.. note::
   To prevent tied :term:`elections <election>`, do not add an arbiter
   to a set if the set already has an odd number of voting members.

1. Create a data directory for the arbiter. The :program:`mongod` uses
   this directory for configuration information. It *will not* hold
   database collection data. The following example creates the
   ``/data/arb`` data directory:

   .. code-block:: sh

      mkdir /data/arb

#. Start the arbiter, making sure to specify the replica set name and
   the data directory. Consider the following example:

   .. code-block:: sh

      mongod --port 30000 --dbpath /data/arb --replSet rs

#. In a :program:`mongo` shell connected to the :term:`primary`, add the
   arbiter to the replica set by issuing the :method:`rs.addArb()`
   method, which uses the following syntax:

   .. code-block:: javascript

      rs.addArb("<hostname><:port>")

   For example, if the arbiter runs on ``m1.example.net:30000``, you
   would issue this command:

   .. code-block:: javascript

      rs.addArb("m1.example.net:30000")
