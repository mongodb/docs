stepnum: 1
level: 4
title: "Create a new ``mongod`` configuration file."
ref: modify-config-files
pre: |

   For each :binary:`~bin.mongod` in the {{shardrole}} replica set,

   #. Copy the existing {{program}} configuration file, giving it a
      distinct name such as ``<filename>-secure.conf`` (or ``.cfg`` if
      using Windows). You will use this new configuration file to
      transition the {{program}} to enforce authentication in the
      sharded cluster. Retain the original configuration file for
      backup purposes.

   #. To the new configuration file, add the following settings:

      - :setting:`security.transitionToAuth` set to ``true``

      - :setting:`security.keyFile` set to the keyfile path.

        If using a different internal authentication mechanism, specify
        settings appropriate for the mechanism.

      .. code-block:: yaml

         security:
            transitionToAuth: true
            keyFile: <path-to-keyfile>

replacement:
   program: :binary:`~bin.mongod`
   shardrole: "config server"
---
stepnum: 2
level: 4
ref: restart-mongod
title: "One at a time, restart the ``mongod`` with the new configuration file."
pre: |

   Restart the replica set, one member at a time, starting with the
   :term:`secondary` members.

   #. To restart the :term:`secondary` members one at a time,

      a. Connect to the :binary:`~bin.mongod` and use the
         :method:`db.shutdownServer()` method against the ``admin``
         database to safely shut down the :binary:`~bin.mongod`.

         .. code-block:: javascript

            db.getSiblingDB("admin").shutdownServer()

      #. Restart the :binary:`~bin.mongod` with the {{status}} 
         configuration file, specifying the path to the config file
         using :option:`--config <mongod --config>`. For example, if the new
         configuration file were named ``mongod-secure.conf``:

         .. code-block:: shell

            mongod --config <path>/mongod-secure.conf

         where ``<path>`` represents the system path to the folder
         containing the {{status}} configuration file.

      Once this member is up, {{repeat}}.

   #. Once **all** the secondary members have restarted and are up,
      restart the primary:

      a. Connect to the :binary:`~bin.mongod`.

      #. Use the :method:`rs.stepDown()` method to step down the primary and trigger an election.

         .. code-block:: javascript

            rs.stepDown()

         You can use the :method:`rs.status()` method to ensure the
         replica set has elected a new primary.

      #. Once you step down the primary and a new primary has been 
         elected, shut down the old primary using the
         :method:`db.shutdownServer()` method against the ``admin``
         database.

         .. code-block:: javascript

            db.getSiblingDB("admin").shutdownServer()

      #. Restart the :binary:`~bin.mongod` with the {{status}} 
         configuration file, specifying the path to the config file using
         :option:`--config <mongod --config>`. For example, if the new configuration file
         were named ``mongod-secure.conf``:

         .. code-block:: shell

            mongod --config <path>/mongod-secure.conf

         where ``<path>`` represents the system path to the folder
         containing the {{status}} configuration file.

replacement:
  status: "new"
  repeat: "repeat for the next :term:`secondary` member"
...
