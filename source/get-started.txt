.. _pymongo-get-started:

========================
Get Started with {+driver-short+}
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial
 
.. meta::
   :description: Learn how to create an app to connect to MongoDB deployment by using the PyMongo driver.
   :keywords: quick start, tutorial, basics

Overview
--------

{+driver-short+} is a Python package that you can use to connect
to and communicate with MongoDB. This guide shows you how to create an
application that uses {+driver-short+} to connect to a MongoDB cluster hosted on
MongoDB Atlas.

.. tip:: 

   MongoDB Atlas is a fully managed cloud database service that hosts your MongoDB
   deployments. You can create your own free (no credit card required) MongoDB Atlas 
   deployment by following the steps in this guide.

Follow this guide to connect a sample Python application to a MongoDB Atlas
deployment. If you prefer to connect to MongoDB using a different driver or
programming language, see our :driver:`list of official drivers <>`.

.. _pymongo-get-started-download-and-install:

Download and Install
--------------------

.. note:: Alternative Installation Methods

   The following steps show you how to install {+driver-short+} by using
   `pip <https://pip.pypa.io/en/stable/installation/>`__. To install 
   {+driver-short+} from source, see
   `Install from Source <https://pymongo.readthedocs.io/en/stable/installation.html#installing-from-source>`__
   in the API documentation.

.. procedure::
   :style: connected

   .. step:: Install dependencies

      Ensure you have the following dependencies installed
      in your development environment:
      
      - `Python3 version 3.8 or later <https://www.python.org/downloads/>`__
      - `pip <https://pip.pypa.io/en/stable/installation/>`__
      - `dnspython <https://pypi.org/project/dnspython/>`__

   .. step:: Create a project directory

      In your shell, run the following command to create a 
      directory called ``pymongo-quickstart`` for this project:

      .. code-block:: bash

         mkdir pymongo-quickstart

      Select the tab corresponding to your operating system and run the following commands
      to create a ``quickstart.py`` application file in the ``pymongo-quickstart`` directory:

      .. tabs::

          .. tab:: macOS / Linux
             :tabid: create-file-mac-linux

             .. code-block:: bash

                cd pymongo-quickstart
                touch quickstart.py

          .. tab:: Windows
             :tabid: create-file-windows

             .. code-block:: bash

                cd pymongo-quickstart
                type nul > quickstart.py

   .. step:: Install {+driver-short+}

      Select the tab corresponding to your operating system and run the following commands
      to create and activate a virtual environment in which to install the driver:

      .. tabs::

          .. tab:: macOS / Linux
             :tabid: venv-mac-linux

             .. code-block:: bash

                python3 -m venv venv
                source venv/bin/activate

          .. tab:: Windows
             :tabid: venv-windows

             .. code-block:: bash

                python3 -m venv venv
                . venv\Scripts\activate
      
      With the virtual environment activated, run the following command to
      install the current version of {+driver-short+}:
      
      .. code-block:: bash

         python3 -m pip install pymongo

After you complete these steps, you have a new project directory
and the driver dependencies installed.

.. _pymongo-get-started-create-deployment:

Create a MongoDB Deployment
---------------------------

You can create a free-tier MongoDB deployment on MongoDB Atlas
to store and manage your data. MongoDB Atlas hosts and manages
your MongoDB database in the cloud.

.. procedure::
   :style: connected

   .. step:: Create a free MongoDB deployment on Atlas

      Complete the :atlas:`Get Started with Atlas </getting-started?tck=docs_driver_python>`
      guide to set up a new Atlas account and load sample data into a new free
      tier MongoDB deployment.
      
   .. step:: Save your credentials

      After you create your database user, save that user's 
      username and password to a safe location for use in an upcoming step.
  
After you complete these steps, you have a new free tier MongoDB
deployment on Atlas, database user credentials, and sample data loaded
in your database.

.. _pymongo-get-started-connection-string:

Create a Connection String
--------------------------

You can connect to your MongoDB deployment by providing a
**connection URI**, also called a *connection string*, which
instructs the driver on how to connect to a MongoDB deployment
and how to behave while connected.

The connection string includes the hostname or IP address and 
port of your deployment, the authentication mechanism, user credentials 
when applicable, and connection options.

To connect to an instance or deployment not hosted on Atlas, see
:ref:`pymongo-connection-targets`.

.. procedure::
   :style: connected

   .. step:: Find your MongoDB Atlas connection string

      To retrieve your connection string for the deployment that
      you created in the :ref:`previous step <pymongo-get-started-create-deployment>`,
      log into your Atlas account and navigate to the
      :guilabel:`Database` section and click the :guilabel:`Connect` button
      for your new deployment.

      .. figure:: /includes/figures/atlas_connection_select_cluster.png
         :alt: The connect button in the clusters section of the Atlas UI

      Proceed to the :guilabel:`Connect your application` section and select
      "Python" from the :guilabel:`Driver` selection menu and the version
      that best matches the version you installed from the :guilabel:`Version`
      selection menu.

      Select the :guilabel:`Password (SCRAM)` authentication mechanism.
      
      Deselect the :guilabel:`Include full driver code example` option to view
      the connection string.

   .. step:: Copy your connection string

      Click the button on the right of the connection string to copy it to
      your clipboard as shown in the following screenshot:

      .. figure:: /includes/figures/atlas_connection_copy_string_python.png
         :alt: The connection string copy button in the Atlas UI

   .. step:: Update the placeholders

      Paste this connection string into a file in your preferred text editor
      and replace the ``<username>`` and ``<password>`` placeholders with
      your database user's username and password.
      
      Save this file to a safe location for use in the next step.

After completing these steps, you have a connection string that
contains your database username and password.

.. _pymongo-get-started-connect-to-mongodb:

Connect to MongoDB
------------------

.. procedure::
   :style: connected

   .. step:: Create your {+driver-short+} application
      
      Copy and paste the following code into the ``quickstart.py`` file in your application:
      
      .. literalinclude:: /includes/get-started/connect-and-query.py
         :language: python
         :copyable:

   .. step:: Assign the connection string

      Replace the ``<connection string URI>`` placeholder with the 
      connection string that you copied from the :ref:`pymongo-get-started-connection-string`
      step of this guide.

   .. step:: Run your application

      In your shell, run the following command to start this application:
      
      .. code-block:: sh

         python3 quickstart.py

      The output includes details of the retrieved movie document:

      .. code-block:: none

         {
           _id: ...,
           plot: 'A young man is accidentally sent 30 years into the past...',
           genres: [ 'Adventure', 'Comedy', 'Sci-Fi' ],
           ...
           title: 'Back to the Future',
           ...
         }

      .. tip::

         If you encounter an error or see no output, check whether you specified the
         proper connection string, and that you loaded the
         sample data.

After you complete these steps, you have a working application that
uses the driver to connect to your MongoDB deployment, runs a query on
the sample data, and prints out the result.

.. _pymongo-get-started-next-steps:

Next Steps
----------

Congratulations on completing the tutorial!

In this tutorial, you created a Python application that
connects to a MongoDB deployment hosted on MongoDB Atlas
and retrieves a document that matches a query.

Learn more about {+driver-short+} from the following resources:

- Learn how to insert documents in the :ref:`<pymongo-insert>` section.
- Learn how to find documents in the :ref:`<pymongo-query>` section.
- Learn how to update documents in the :ref:`<pymongo-update>` section.
- Learn how to delete documents in the :ref:`<pymongo-delete>` section.

.. include:: /includes/get-started/quickstart-troubleshoot.rst