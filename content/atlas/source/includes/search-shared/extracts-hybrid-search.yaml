ref: why-hybrid-search 
content: | 
  A hybrid search is an aggregation of different search methods, such
  as a full-text and semantic search, for the same query criteria. While
  full-text is effective in finding exact matches for query terms,
  semantic search provides the added benefit of identifying semantically
  similar documents even if the documents don't contain the exact query
  term. This ensures that synonymous and contextually similar matches are
  also included in the combined results of both methods of search.

  Conversely, if you have tokens for proper nouns or specific keywords in
  your dataset that you don't expect to be considered in the training of
  an embedding model in the same context that they are used in your
  dataset, your vector search might benefit from being combined with a
  full-text search.   

  You can also set weights for each method of search per query. Based on
  whether full-text or semantic search results are most relevant and
  appropriate for a query, you can increase the weight for that search
  method per query.  

---
ref: what-is-semantic-boosting
content: | 
  Semantic boosting is a technique used to enhance the relevance and
  ranking of full-text search results by boosting the score of
  semantically similar documents. You can boost the score of
  :pipeline:`$search` results based on the score of documents which
  match a :pipeline:`$vectorSearch` query. 

  With semantic boosting, you can use all |fts| features, including
  :ref:`fts-facet-ref`, :ref:`sort <sort-ref>`, and :ref:`pagination
  <fts-paginate-results>`. 
  
---
ref: about-semantic-boosting-query
content: |

  The sample query boosts the :pipeline:`$search` results based on
  :pipeline:`$vectorSearch` result scores to return the most relevant
  documents. For semantic boosting, you perform the following steps:  

  1. Run the :pipeline:`$vectorSearch` query. 

     Use an *over request* value to specify the number of candidates
     more than the specified limit to consider. The *over request* allows
     you to accomplish the following:

     - Include a large number and broad pool of documents to consider in
       the initial search.
     - Refine scoring computation in subsequent stages.
     
     The query uses the following calculation to determine the number of
     candidates to consider during the vector search: 

     .. code-block:: shell 
        :copyable: false

        numCandidates = limit * over request
     
     The results are filtered based on a minimum score threshold
     (``vectorCutoff``).  

  #. Scale the vector search score to adjust the influence of the vector
     search results on the scoring and ranking of documents. 

     Use the ``vectorWeight`` parameter to set the weight and multiply
     the vector search scores by the ``vectorWeight``. This controls the
     importance of the vector search results and ensures that only the
     most semantically relevant documents are considered. 

  #. Run the :pipeline:`$search` query and boost the score of the
     documents that match the results from the vector search.

---
ref: semantic-boosting-query-variables
content: |

  The sample query defines the following variables: 
  
  - ``vectorWeight`` to add weight to the vector search score, with a
    lower number providing higher weight. 
  - ``vectorCutoff`` to set the minimum vector score for result to be
    boosted. 
  - ``numResults`` to specify the desired number of search results  
  - ``numCandidates`` to calculate the number of candidates to consider
    during the initial search. It calculates the number of candidates by
    using the following formula:

    .. code-block:: shell 
       :copyable: false

       numCandidates = numResults x overRequestFactor

---
ref: semantic-boosting-query-stages
content: |
  The sample query uses the following pipeline stages to perform a
  semantic search on the collection and retrieve the reciprocal rank of
  the documents in the results: 

  .. list-table:: 
     :widths: 30 70 

     * - :pipeline:`$vectorSearch` 
       - Searches the ``plot_embedding_voyage_3_large`` field for the
         string *star wars*, specified as vector embeddings in the
         ``queryVector`` field of the query. The query uses the
         ``voyage-3-large`` embedding model from |voyage|, which is the 
         same model used for the embeddings in the
         ``plot_embedding_voyage_3_large`` field. 

     * - :pipeline:`$search` 
       - Searches for movies that contain the term *star wars* in the
         *plot* field. For the documents in the results that match the
         ``_id`` from the vector search results, the query boosts the
         score by the adjusted vector search score for the document.

---
ref: what-is-rrf
content: | 
  Reciprocal rank fusion is a technique to combine results from different
  search methods, such as a semantic and a full-text search, into a
  single result set by performing the following actions:

  1. Calculate the reciprocal rank of the documents in the results.

     .. _calculate-reciprocal-rank: 

     For each ranked document in each search result, first add the rank
     (``r``) of the document with a constant number, ``60``, to smooth
     the score (``rank_constant``), and then divide ``1`` by the sum of
     ``r`` and ``rank_constant`` for the reciprocal rank of the document 
     in the results. 

     .. code-block:: shell 
        :copyable: false 

        reciprocal_rank = 1 / ( r + rank_constant )

     For each method of search, apply different weights (``w``) to give more
     importance to that method of search. For each document, the weighted
     reciprocal rank is calculated by multiplying the weight by the
     reciprocal rank of the document. 

     .. code-block:: shell 
        :copyable: false 

        weighted_reciprocal_rank = w x reciprocal_rank   
    
  #. Combine the rank-derived and weighted scores of the documents in the
     results. 
    
     .. _combine-reciprocal-ranks:
      
     For each document across all search results, add the calculated
     reciprocal ranks for a single score for the document. 

  #. Sort the results by the combined score of the documents in the
     results. 

     Sort the documents in the results based on the combined score across
     the results for a single, combined ranked list of documents in the
     results. 

---
ref: hybrid-search-prereq
content: | 
  Before you begin, you must have the following:

  - An |service| cluster with MongoDB version v8.0 or higher. 

    .. note:: 

       Ensure that your |service| {+cluster+} has enough memory to store
       both |fts| and {+avs+} indexes and run performant queries.

  - The :ref:`sample_mflix <sample-mflix>` data loaded into your |service| 
    cluster.
    
  - {+mongosh+} to run queries on your |service| {+cluster+}:
    
  - :authrole:`Project Data Access Admin` access to the project to create
    {+avs+} and |fts| indexes. 

---
ref: rrf-query-intro
content: | 
  The sample query retrieves the sorted search results from the
  semantic search and the full-text search, and assigns a reciprocal rank
  score to the documents in the results based on their position in the
  results array. The reciprocal rank score is calculated by using the
  following formula:  

  .. code-block:: 
     :copyable: false 

     1.0/{document position in the results + constant value} 

  The query then adds the scores from both the searches for each document,
  ranks the documents based on the combined score, and sorts the documents
  to return a single result. The value for constant is always ``60``.
  
---
ref: rrf-query-variables 
content: | 
  The sample query defines the following weights to the pipelines to
  influence that pipeline's rank contribution to the final score: 

  - ``vectorPipeline`` = 0.5
  - ``fullTextPipeline`` = 0.5

  You can adjust the weights to give more importance to one method of
  search. Note that a lower number provides higher weight. 

  The weighted reciprocal rank score is calculated by using the
  following formula:

  .. code-block:: 
     :copyable: false 

     weight x reciprocal rank 

  The ``scoreDetails.value`` shows the raw score from that pipeline
  before it is weighted and combined by using reciprocal rank fusion. The
  ``scoreDetails.details.value`` shows the weighted reciprocal rank score. 

---
ref: rrf-query-stages
content: | 
  The sample query uses the ``$rankFusion`` stage to execute the
  semantic and full text queries independently and then de-duplicate and
  combine the input query results into a final ranked results set. It
  returns a ranked set of documents based on the ranks that appear in
  their input pipelines and the pipeline weights. Specifically, this stage
  takes the following input pipelines:

  .. list-table:: 
     :widths: 30 70 

     * - ``vectorPipeline``  
       - This pipeline contains the :pipeline:`$vectorSearch` query. It
         searches the ``plot_embedding_voyage_3_large`` field for the
         string *star wars* specified as vector embeddings in the
         ``queryVector`` field of the query. The query uses the
         ``voyage-3-large`` embedding model from |voyage|, which is the 
         same model used for the embeddings in the
         ``plot_embedding_voyage_3_large`` field. The query also specifies a search for up to ``100``
         nearest neighbors and limit the results to ``20`` documents
         only. This stage returns the sorted documents from the semantic
         search in the results.

     * - ``fullTextPipeline``  
       - This pipeline contains the following stages: 
        
         - :pipeline:`$search` to search for movies that contain the term
           ``star wars`` in the ``title`` field. This stage returns the
           sorted documents from the full-text search in the results. 
         - :pipeline:`$limit` to limit the output of :pipeline:`$search`
           stage to ``20`` results only. 

  The sample query uses the following stages to combine the results of the
  semantic and text search and return a single ranked list of documents in
  the results:

  .. list-table:: 
     :widths: 30 70 

     * - :pipeline:`$project` 
       - Includes only the following fields in the results:  

         - ``_id`` 
         - ``title`` 
         - ``plot``
         - ``scoreDetails``
      
     * - :pipeline:`$limit` 
       - Limits the output to ``10`` results only.

---
ref: score-fusion-query-intro 
content: | 
  The sample query retrieves the scored search results from the
  semantic and full-text searches and applies the ``sigmoid`` expression
  to normalize the score before combining the results. It then combines
  the score from the pipelines into a single aggregated score for each
  document. 

---
ref: score-fusion-query-variables
content: | 
  The sample query applies weights to the normalized input pipeline
  scores when combining the results. It applies the weights using a
  custom aggregation expression. In this example, the query uses the ``$multiply`` expression to multiply the score from the ``searchOne`` pipeline by ``10``. This ensures that results from this pipeline contribute more to the final score than results from the ``searchTwo`` pipeline. It then uses the ``$sum``
  aggregation operator to add the scores from the two pipeline stages.

  .. code-block:: shell 
     :copyable: false

     Final Score = ($$searchOne * 10) + $$searchTwo

  .. note::
  
     If you combine the query results using an expression
     (``combination.method``: ``expression``), you can't use weight in your
     query. We recommend using ``$multiply`` as demonstrated in the
     preceding sample query.

---
ref: score-fusion-query-stages
content: | 
  The sample query uses the ``$scoreFusion`` stage to execute the
  semantic and full text queries independently and then de-duplicate and
  combine the input query results into a final scored results set. It
  returns a set of documents based on the combined score from their
  input pipelines and the combination weights. Specifically, this stage 
  takes the following input pipelines:

  .. list-table:: 
     :widths: 30 70 

     * - ``vectorPipeline``  
       - This pipeline contains the :pipeline:`$vectorSearch` query. It
         searches the ``plot_embedding_voyage_3_large`` field for the
         string *star wars* specified as vector embeddings in the
         ``queryVector`` field of the query. The query uses the
         ``voyage-3-large`` embedding model from |voyage|, which is the 
         same model used for the embeddings in the
         ``plot_embedding_voyage_3_large`` field. The query also
         specifies a search for up to ``100`` nearest neighbors and
         limit the results to ``20`` documents only. This stage returns
         the scored documents from the semantic search.

     * - ``fullTextPipeline``  
       - This pipeline contains the following stages: 
        
         - :pipeline:`$search` to search for movies that contain the term
           ``star wars`` in the ``title`` field. This stage returns the
           scored documents from the full-text search.
         - :pipeline:`$limit` to limit the output of :pipeline:`$search`
           stage to ``20`` results only. 

  The sample query uses the following stages to return the results of the
  semantic and text search as a single scored list of documents:

  .. list-table:: 
     :widths: 30 70 

     * - :pipeline:`$project` 
       - Includes only the following fields in the results:  

         - ``_id`` 
         - ``title`` 
         - ``plot``
         - ``scoreDetails``
      
     * - :pipeline:`$limit` 
       - Limits the output to ``10`` results only.

---
ref: hybrid-search-learn
content: | 
  Watch a demonstration of an application that showcases hybrid search
  queries combining |fts| full-text and vector search to return a single
  merged result set. The application implements Relative Score Fusion
  (RSF) and Reciprocal Rank Fusion (RRF) to return a merged set created by
  using a rank fusion algorithm.

  *Duration: 2.43 Minutes*

  .. video:: https://youtu.be/ipbLlUh8gwc

...
