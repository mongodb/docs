# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2019
# This file is distributed under the same license as the mongodb-manual
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/geospatial-queries.txt:3 ../source/geospatial-queries.txt:102
msgid "Geospatial Queries"
msgstr ""

#: ../source/geospatial-queries.txt:13
msgid ""
"MongoDB supports query operations on geospatial data. This section "
"introduces MongoDB's geospatial features."
msgstr ""

#: ../source/geospatial-queries.txt:19
msgid "Geospatial Data"
msgstr ""

#: ../source/geospatial-queries.txt:21
msgid ""
"In MongoDB, you can store geospatial data as :ref:`GeoJSON <geospatial-"
"geojson>` objects or as :ref:`legacy coordinate pairs <geospatial-"
"legacy>`."
msgstr ""

#: ../source/geospatial-queries.txt:28
msgid "GeoJSON Objects"
msgstr ""

#: ../source/geospatial-queries.txt:30
msgid ""
"To calculate geometry over an Earth-like sphere, store your location data"
" as :doc:`GeoJSON objects </reference/geojson>`."
msgstr ""

#: ../source/includes/extracts/geojson-specification.rst:1
msgid "To specify GeoJSON data, use an embedded document with:"
msgstr ""

#: ../source/includes/extracts/geojson-specification.rst:3
msgid ""
"a field named ``type`` that specifies the :doc:`GeoJSON object type "
"</reference/geojson>` and"
msgstr ""

#: ../source/includes/extracts/geojson-specification.rst:6
msgid "a field named ``coordinates`` that specifies the object's coordinates."
msgstr ""

#: ../source/includes/extracts/geospatial-long-lat-values.rst:1
msgid ""
"If specifying latitude and longitude coordinates, list the **longitude** "
"first and then **latitude**:"
msgstr ""

#: ../source/includes/extracts/geospatial-valid-long-lat-values.rst:1
msgid "Valid longitude values are between ``-180`` and ``180``, both inclusive."
msgstr ""

#: ../source/includes/extracts/geospatial-valid-long-lat-values.rst:4
msgid "Valid latitude values are between ``-90`` and ``90`` (both inclusive)."
msgstr ""

#: ../source/includes/extracts/geojson-specification-geospatial.rst:4
msgid "For example, to specify a :ref:`GeoJSON Point <geojson-point>`:"
msgstr ""

#: ../source/includes/extracts/geojson-specification-geospatial.rst:13
msgid ""
"For a list of the GeoJSON objects supported in MongoDB as well as "
"examples, see :doc:`GeoJSON objects </reference/geojson>`."
msgstr ""

#: ../source/includes/extracts/geojson-specification-query-calculation.rst:1
msgid ""
"MongoDB geospatial queries on GeoJSON objects calculate on a sphere; "
"MongoDB uses the :term:`WGS84` reference system for geospatial queries on"
" GeoJSON objects."
msgstr ""

#: ../source/geospatial-queries.txt:38
msgid "Legacy Coordinate Pairs"
msgstr ""

#: ../source/geospatial-queries.txt:40
msgid ""
"To calculate distances on a Euclidean plane, store your location data as "
"legacy coordinate pairs and use a :ref:`geo-2d` index. MongoDB supports "
"spherical surface calculations on legacy coordinate pairs via a :ref"
":`geo-2dsphere` index by converting the data to the GeoJSON Point type."
msgstr ""

#: ../source/includes/fact-legacy-coordinates-specification.rst:1
msgid ""
"To specify data as legacy coordinate pairs, you can use either an array "
"(*preferred*) or an embedded document."
msgstr ""

#: ../source/includes/fact-legacy-coordinates-specification.rst:16
msgid "Specify via an array (*Preferred*):"
msgstr ""

#: ../source/includes/fact-legacy-coordinates-specification.rst:9
msgid ""
"If specifying latitude and longitude coordinates, list the **longitude** "
"first and then **latitude**; i.e."
msgstr ""

#: ../source/includes/fact-legacy-coordinates-specification.rst:31
msgid "Specify via an embedded document:"
msgstr ""

#: ../source/includes/fact-legacy-coordinates-specification.rst:23
msgid ""
"If specifying latitude and longitude coordinates, the first field, "
"regardless of the field name, must contains the **longitude** value and "
"the second field, the **latitude** value ; i.e."
msgstr ""

#: ../source/includes/fact-legacy-coordinates-specification.rst:33
msgid ""
"To specify legacy coordinate pairs, arrays are preferred over an embedded"
" document as some languages do not guarantee associative map ordering."
msgstr ""

#: ../source/geospatial-queries.txt:51
msgid "Geospatial Indexes"
msgstr ""

#: ../source/geospatial-queries.txt:53
msgid ""
"MongoDB provides the following geospatial index types to support the "
"geospatial queries."
msgstr ""

#: ../source/geospatial-queries.txt:59
msgid "``2dsphere``"
msgstr ""

#: ../source/geospatial-queries.txt:61
msgid ""
":doc:`2dsphere </core/2dsphere>` indexes support queries that calculate "
":ref:`geometries on an earth-like sphere <geospatial-geometry>`."
msgstr ""

#: ../source/includes/create-2dsphere-index.rst:1
msgid ""
"To create a ``2dsphere`` index, use the "
":method:`db.collection.createIndex()` method and specify the string "
"literal ``\"2dsphere\"`` as the index type:"
msgstr ""

#: ../source/includes/create-2dsphere-index.rst:9
msgid ""
"where the ``<location field>`` is a field whose value is either a "
":ref:`GeoJSON object <geospatial-geojson>` or a :ref:`legacy coordinates "
"pair <geospatial-legacy>`."
msgstr ""

#: ../source/geospatial-queries.txt:66
msgid "For more information on the ``2dsphere`` index, see :doc:`/core/2dsphere`."
msgstr ""

#: ../source/geospatial-queries.txt:72
msgid "``2d``"
msgstr ""

#: ../source/geospatial-queries.txt:74
msgid ""
":doc:`2d </core/2d>` indexes support queries that calculate "
":ref:`geometries on a two-dimensional plane <geospatial-geometry>`. "
"Although the index can support :query:`$nearSphere` queries that "
"calculate on a sphere, if possible, use the :ref:`geo-2dsphere` index for"
" spherical queries."
msgstr ""

#: ../source/includes/create-2d-index.rst:1
msgid ""
"To create a ``2d`` index, use the :method:`db.collection.createIndex()` "
"method, specifying the location field as the key and the string literal "
"``\"2d\"`` as the index type:"
msgstr ""

#: ../source/includes/create-2d-index.rst:9
msgid ""
"where the ``<location field>`` is a field whose value is a :ref:`legacy "
"coordinates pair <geospatial-legacy>`."
msgstr ""

#: ../source/geospatial-queries.txt:82
msgid "For more information on the ``2d`` index, see :doc:`/core/2d`."
msgstr ""

#: ../source/geospatial-queries.txt:85
msgid "Geospatial Indexes and Sharded Collections"
msgstr ""

#: ../source/includes/extracts/geospatial-index-shard-key-restriction-general.rst:1
msgid ""
"You cannot use a geospatial index as a :term:`shard key` when sharding a "
"collection. However, you can create a geospatial index on a sharded "
"collection by using a different field as the shard key."
msgstr ""

#: ../source/includes/fact-near-sharded-cluster.rst:1
msgid ""
"For sharded collections, queries using |geo-operation| are not supported."
" You can instead use either the :dbcommand:`geoNear` command or the "
":pipeline:`$geoNear` aggregation stage."
msgstr ""

#: ../source/geospatial-queries.txt:93
msgid ""
"You can also query for geospatial data for a sharded cluster using "
":query:`$geoWithin` and :query:`$geoIntersect`."
msgstr ""

#: ../source/geospatial-queries.txt:97
msgid "Covered Queries"
msgstr ""

#: ../source/includes/fact-geospatial-index-covered-query.rst:1
msgid ""
":ref:`Geospatial indexes <index-feature-geospatial>` cannot :ref:`cover a"
" query <covered-queries>`."
msgstr ""

#: ../source/includes/extracts/geospatial-queries-longitude-values.rst:2
msgid "For spherical queries, use the ``2dsphere`` index result."
msgstr ""

#: ../source/includes/extracts/geospatial-queries-longitude-values.rst:4
msgid ""
"The use of ``2d`` index for spherical queries may lead to incorrect "
"results, such as the use of the ``2d`` index for spherical queries that "
"wrap around the poles."
msgstr ""

#: ../source/geospatial-queries.txt:109
msgid "Geospatial Query Operators"
msgstr ""

#: ../source/geospatial-queries.txt:111
msgid "MongoDB provides the following geospatial query operators:"
msgstr ""

#: ../source/includes/toc/table-operator-query-geospatial.rst:2
msgid "Name"
msgstr ""

#: ../source/geospatial-queries.txt:127 ../source/geospatial-queries.txt:151
#: ../source/includes/toc/table-operator-query-geospatial.rst:2
msgid "Description"
msgstr ""

#: ../source/geospatial-queries.txt:256
#: ../source/includes/toc/table-operator-query-geospatial.rst:4
msgid ":query:`$geoIntersects`"
msgstr ""

#: ../source/includes/toc/table-operator-query-geospatial.rst:4
msgid ""
"Selects geometries that intersect with a :term:`GeoJSON` geometry. The "
":doc:`2dsphere </core/2dsphere>` index supports :query:`$geoIntersects`."
msgstr ""

#: ../source/includes/toc/table-operator-query-geospatial.rst:9
msgid ":query:`$geoWithin`"
msgstr ""

#: ../source/includes/toc/table-operator-query-geospatial.rst:9
msgid ""
"Selects geometries within a bounding :ref:`GeoJSON geometry <geospatial-"
"indexes-store-geojson>`. The :doc:`2dsphere </core/2dsphere>` and "
":doc:`2d </core/2d>` indexes support :query:`$geoWithin`."
msgstr ""

#: ../source/includes/toc/table-operator-query-geospatial.rst:15
msgid ":query:`$near`"
msgstr ""

#: ../source/includes/toc/table-operator-query-geospatial.rst:15
msgid ""
"Returns geospatial objects in proximity to a point. Requires a geospatial"
" index.  The :doc:`2dsphere </core/2dsphere>` and :doc:`2d </core/2d>` "
"indexes support :query:`$near`."
msgstr ""

#: ../source/includes/toc/table-operator-query-geospatial.rst:21
msgid ":query:`$nearSphere`"
msgstr ""

#: ../source/includes/toc/table-operator-query-geospatial.rst:21
msgid ""
"Returns geospatial objects in proximity to a point on a sphere. Requires "
"a geospatial index.  The :doc:`2dsphere </core/2dsphere>` and :doc:`2d "
"</core/2d>` indexes support :query:`$nearSphere`."
msgstr ""

#: ../source/geospatial-queries.txt:115
msgid "For more details, including examples, see the individual reference page."
msgstr ""

#: ../source/geospatial-queries.txt:118
msgid "Geospatial Command"
msgstr ""

#: ../source/geospatial-queries.txt:120
msgid "MongoDB provides the following geospatial command:"
msgstr ""

#: ../source/geospatial-queries.txt:126
msgid "Command"
msgstr ""

#: ../source/geospatial-queries.txt:129
msgid ":dbcommand:`geoNear`"
msgstr ""

#: ../source/geospatial-queries.txt:131
msgid ""
"Performs a geospatial query that returns the documents closest to a given"
" point."
msgstr ""

#: ../source/includes/extracts/geoNear-command-index-requirement.rst:1
msgid ""
":dbcommand:`geoNear` requires a :doc:`geospatial index </core/geospatial-"
"indexes>`."
msgstr ""

#: ../source/geospatial-queries.txt:136
msgid ""
"For more details, including examples, see :dbcommand:`geoNear` reference "
"page."
msgstr ""

#: ../source/geospatial-queries.txt:140
msgid "Geospatial Aggregation Stage"
msgstr ""

#: ../source/geospatial-queries.txt:142
msgid ""
"MongoDB provides the following geospatial :doc:`aggregation pipeline "
"stage </core/aggregation-pipeline>`:"
msgstr ""

#: ../source/geospatial-queries.txt:149
msgid "Stage"
msgstr ""

#: ../source/geospatial-queries.txt:153
msgid ":pipeline:`$geoNear`"
msgstr ""

#: ../source/includes/extracts/geoNear-stage-toc-description.rst:1
msgid ""
"Returns an ordered stream of documents based on the proximity to a "
"geospatial point. Incorporates the functionality of :pipeline:`$match`, "
":pipeline:`$sort`, and :pipeline:`$limit` for geospatial data. The output"
" documents include an additional distance field and can include a "
"location identifier field."
msgstr ""

#: ../source/includes/extracts/geoNear-stage-index-requirement.rst:1
msgid ""
":pipeline:`$geoNear` requires a :doc:`geospatial index </core/geospatial-"
"indexes>`."
msgstr ""

#: ../source/geospatial-queries.txt:159
msgid ""
"For more details, including examples, see :pipeline:`$geoNear` reference "
"page."
msgstr ""

#: ../source/geospatial-queries.txt:165
msgid "Geospatial Models"
msgstr ""

#: ../source/geospatial-queries.txt:167
msgid ""
"MongoDB geospatial queries can interpret geometry on a flat surface or a "
"sphere."
msgstr ""

#: ../source/geospatial-queries.txt:170
msgid ""
"``2dsphere`` indexes support only spherical queries (i.e. queries that "
"interpret geometries on a spherical surface)."
msgstr ""

#: ../source/geospatial-queries.txt:173
msgid ""
"``2d`` indexes support flat queries (i.e. queries that interpret "
"geometries on a flat surface) and some spherical queries. While ``2d`` "
"indexes support some spherical queries, the use of ``2d`` indexes for "
"these spherical queries can result in error. If possible, use "
"``2dsphere`` indexes for spherical queries."
msgstr ""

#: ../source/geospatial-queries.txt:179
msgid ""
"The following table lists the geospatial query operators, supported "
"query, used by each geospatial operations:"
msgstr ""

#: ../source/geospatial-queries.txt:186
msgid "Operation"
msgstr ""

#: ../source/geospatial-queries.txt:188
msgid "Spherical/Flat Query"
msgstr ""

#: ../source/geospatial-queries.txt:190
msgid "Notes"
msgstr ""

#: ../source/geospatial-queries.txt:192
msgid ""
":query:`$near` (:ref:`GeoJSON <geospatial-geojson>` centroid point in "
"this line and the following line, :ref:`2dsphere <geo-2dsphere>` index)"
msgstr ""

#: ../source/geospatial-queries.txt:196 ../source/geospatial-queries.txt:210
#: ../source/geospatial-queries.txt:222 ../source/geospatial-queries.txt:228
#: ../source/geospatial-queries.txt:252 ../source/geospatial-queries.txt:258
#: ../source/geospatial-queries.txt:263 ../source/geospatial-queries.txt:271
msgid "Spherical"
msgstr ""

#: ../source/geospatial-queries.txt:198
msgid ""
"See also the :query:`$nearSphere` operator, which provides the same "
"functionality when used with :ref:`GeoJSON <geospatial-geojson>` and a "
":ref:`2dsphere <geo-2dsphere>` index."
msgstr ""

#: ../source/geospatial-queries.txt:202
msgid ""
":query:`$near` (:ref:`legacy coordinates <geospatial-legacy>`, :ref:`2d "
"<geo-2d>` index)"
msgstr ""

#: ../source/geospatial-queries.txt:204 ../source/geospatial-queries.txt:234
#: ../source/geospatial-queries.txt:240 ../source/geospatial-queries.txt:246
#: ../source/geospatial-queries.txt:267 ../source/geospatial-queries.txt:275
msgid "Flat"
msgstr ""

#: ../source/geospatial-queries.txt:208
msgid ""
":query:`$nearSphere` (:ref:`GeoJSON <geospatial-geojson>` point, "
":ref:`2dsphere <geo-2dsphere>` index)"
msgstr ""

#: ../source/geospatial-queries.txt:212
msgid ""
"Provides the same functionality as :query:`$near` operation that uses "
":ref:`GeoJSON <geospatial-geojson>` point and a :ref:`2dsphere <geo-"
"2dsphere>` index."
msgstr ""

#: ../source/geospatial-queries.txt:216
msgid ""
"For spherical queries, it may be preferable to use :query:`$nearSphere` "
"which explicitly specifies the spherical queries in the name rather than "
":query:`$near` operator."
msgstr ""

#: ../source/geospatial-queries.txt:220
msgid ""
":query:`$nearSphere` (:ref:`legacy coordinates <geospatial-legacy>`, "
":ref:`2d <geo-2d>` index)"
msgstr ""

#: ../source/geospatial-queries.txt:224
msgid "Use :term:`GeoJSON` points instead."
msgstr ""

#: ../source/geospatial-queries.txt:226
msgid ":query:`$geoWithin` : { :query:`$geometry`: ... }"
msgstr ""

#: ../source/geospatial-queries.txt:232
msgid ":query:`$geoWithin` : { :query:`$box`: ... }"
msgstr ""

#: ../source/geospatial-queries.txt:238
msgid ":query:`$geoWithin` : { :query:`$polygon`: ... }"
msgstr ""

#: ../source/geospatial-queries.txt:244
msgid ":query:`$geoWithin` : { :query:`$center`: ... }"
msgstr ""

#: ../source/geospatial-queries.txt:250
msgid ":query:`$geoWithin` : { :query:`$centerSphere`: ... }"
msgstr ""

#: ../source/geospatial-queries.txt:262
msgid ":dbcommand:`geoNear` (:ref:`2dsphere <geo-2dsphere>` index)"
msgstr ""

#: ../source/geospatial-queries.txt:266
msgid ":dbcommand:`geoNear` (:ref:`2d <geo-2d>` index)"
msgstr ""

#: ../source/geospatial-queries.txt:270
msgid ":pipeline:`$geoNear` (:ref:`2dsphere <geo-2dsphere>` index)"
msgstr ""

#: ../source/geospatial-queries.txt:274
msgid ":pipeline:`$geoNear` (:ref:`2d <geo-2d>` index)"
msgstr ""

#: ../source/geospatial-queries.txt:279
msgid "Example"
msgstr ""

#: ../source/geospatial-queries.txt:281
msgid "Create a collection ``places`` with the following documents:"
msgstr ""

#: ../source/geospatial-queries.txt:301
msgid ""
"The following operation creates a ``2dsphere`` index on the ``location`` "
"field:"
msgstr ""

#: ../source/geospatial-queries.txt:308
msgid ""
"The following query uses the :query:`$near` operator to return documents "
"that are at least 1000 meters from and at most 5000 meters from the "
"specified GeoJSON point, sorted in order from nearest to farthest:"
msgstr ""

#: ../source/geospatial-queries.txt:328
msgid ""
"The following operation uses the :dbcommand:`geoNear` command to return "
"documents that match the query filter ``{ category: \"Parks\" }``, sorted"
" in order of nearest to farthest to the specified GeoJSON point:"
msgstr ""

