#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/2d.txt:3
msgid "``2d`` Indexes"
msgstr ""

#: ../source/core/2d.txt:13
msgid ""
"Use a ``2d`` index for data stored as points on a two-dimensional plane. "
"The ``2d`` index is intended for :ref:`legacy coordinate pairs "
"<geospatial-legacy>` used in MongoDB 2.2 and earlier."
msgstr ""

#: ../source/core/2d.txt:17
msgid "Use a ``2d`` index if:"
msgstr ""

#: ../source/core/2d.txt:19
msgid ""
"your database has legacy :ref:`legacy coordinate pairs <geospatial-"
"legacy>` from MongoDB 2.2 or earlier, *and*"
msgstr ""

#: ../source/core/2d.txt:22
msgid "you do not intend to store any location data as :term:`GeoJSON` objects."
msgstr ""

#: ../source/core/2d.txt:24
msgid ""
"For more information on geospatial queries, see :doc:`/geospatial-"
"queries`."
msgstr ""

#: ../source/core/2d.txt:28
msgid "Considerations"
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
msgid ""
"The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline "
"stage require that a collection have *at most* only one |first-geo-index|"
" and/or only one |second-geo-index| whereas :ref:`geospatial query "
"operators <geospatial-query-selectors>` (e.g. :query:`$near` and "
":query:`$geoWithin`) permit collections to have multiple geospatial "
"indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
msgid ""
"The geospatial index restriction for the :dbcommand:`geoNear` command and"
" the :pipeline:`$geoNear` pipeline stage exists because neither the "
":dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage "
"syntax includes the location field. As such, index selection among "
"multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
msgid ""
"No such restriction applies for :ref:`geospatial query operators "
"<geospatial-query-selectors>` since these operators take a location "
"field, eliminating the ambiguity."
msgstr ""

#: ../source/core/2d.txt:34
msgid ""
"Do not use a ``2d`` index if your location data includes GeoJSON objects."
" To index on both :ref:`legacy coordinate pairs <geospatial-legacy>` "
"*and* :ref:`GeoJSON objects <geospatial-geojson>`, use a :doc:`2dsphere "
"</core/2dsphere>` index."
msgstr ""

#: ../source/includes/extracts/geospatial-index-shard-key-restriction-2d.rst:1
msgid ""
"You cannot use a ``2d`` index as a :term:`shard key` when sharding a "
"collection. However, you can create a geospatial index on a sharded "
"collection by using a different field as the shard key."
msgstr ""

#: ../source/core/2d.txt:42
msgid "Behavior"
msgstr ""

#: ../source/core/2d.txt:44
msgid ""
"The ``2d`` index supports calculations on a :ref:`flat, Euclidean plane "
"<geospatial-geometry>`. The ``2d`` index also supports *distance-only* "
"calculations on a sphere (i.e. :query:`$nearSphere`), but for *geometric*"
" calculations on a sphere (e.g. :query:`$geoWithin`), store data as "
":ref:`GeoJSON objects <geospatial-geojson>` and use a ``2dsphere`` index."
msgstr ""

#: ../source/core/2d.txt:51
msgid ""
"A ``2d`` index can reference two fields. The first must be the location "
"field. A ``2d`` compound index constructs queries that select first on "
"the location field, and then filters those results by the additional "
"criteria. A compound ``2d`` index can cover queries."
msgstr ""

#: ../source/core/2d.txt:57
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/2d.txt:59
msgid ""
"``2d`` indexes are always :doc:`sparse </core/index-sparse>` and ignore "
"the :doc:`sparse </core/index-sparse>` option. If a document lacks a "
"``2d`` index field (or the field is ``null`` or an empty array), MongoDB "
"does not add an entry for the document to the ``2d`` index. For inserts, "
"MongoDB inserts the document but does not add to the ``2d`` index."
msgstr ""

#: ../source/core/2d.txt:66
msgid ""
"For a compound index that includes a ``2d`` index key along with keys of "
"other types, only the ``2d`` index field determines whether the index "
"references a document."
msgstr ""

#: ../source/core/2d.txt:71
msgid "Collation Option"
msgstr ""

#: ../source/core/2d.txt:73
msgid ""
"``2d`` indexes only support simple binary comparison and do not support "
"the :ref:`collation <collation>` option."
msgstr ""

#: ../source/core/2d.txt:76
msgid ""
"To create a ``2d`` index on a collection that has a non-simple collation,"
" you must explicitly specify ``{collation: {locale: \"simple\"} }`` when "
"creating the index."
msgstr ""

#~ msgid ""
#~ "Use a ``2d`` index for data stored"
#~ " as points on a two-dimensional "
#~ "plane. The ``2d`` index is intended "
#~ "for legacy coordinate pairs used in "
#~ "MongoDB 2.2 and earlier."
#~ msgstr ""

#~ msgid ""
#~ "your database has legacy location data"
#~ " from MongoDB 2.2 or earlier, *and*"
#~ msgstr ""

#~ msgid ""
#~ "See the :doc:`/reference/operator/query-geospatial`"
#~ " for the query operators that support"
#~ " geospatial queries."
#~ msgstr ""

#~ msgid ""
#~ "Do not use a ``2d`` index if "
#~ "your location data includes GeoJSON "
#~ "objects. To index on both legacy "
#~ "coordinate pairs *and* GeoJSON objects, "
#~ "use a :doc:`2dsphere </core/2dsphere>` index."
#~ msgstr ""

#~ msgid ""
#~ "You cannot use a ``2d`` index as"
#~ " a shard key when sharding a "
#~ "collection. However, you can create and"
#~ " maintain a geospatial index on a "
#~ "sharded collection by using a different"
#~ " field as the shard key."
#~ msgstr ""

#~ msgid ""
#~ "The ``2d`` index supports calculations "
#~ "on a flat, Euclidean plane. The "
#~ "``2d`` index also supports *distance-"
#~ "only* calculations on a sphere, but "
#~ "for *geometric* calculations (e.g. "
#~ ":query:`$geoWithin`) on a sphere, store "
#~ "data as GeoJSON objects and use "
#~ "the ``2dsphere`` index type."
#~ msgstr ""

#~ msgid "Points on a 2D Plane"
#~ msgstr ""

#~ msgid ""
#~ "To store location data as legacy "
#~ "coordinate pairs, use an array or "
#~ "an embedded document. When possible, use"
#~ " the array format:"
#~ msgstr ""

#~ msgid "Consider the embedded document form:"
#~ msgstr ""

#~ msgid ""
#~ "Arrays are preferred as certain "
#~ "languages do not guarantee associative "
#~ "map ordering."
#~ msgstr ""

#~ msgid ""
#~ "For all points, if you use "
#~ "longitude and latitude, store coordinates "
#~ "in **longitude, latitude** order."
#~ msgstr ""

#~ msgid ""
#~ "``2d`` indexes are :doc:`sparse </core"
#~ "/index-sparse>` by default and ignores "
#~ "the :doc:`sparse: true </core/index-sparse>`"
#~ " option. If a document lacks a "
#~ "``2d`` index field (or the field "
#~ "is ``null`` or an empty array), "
#~ "MongoDB does not add an entry for"
#~ " the document to the ``2d`` index."
#~ " For inserts, MongoDB inserts the "
#~ "document but does not add to the"
#~ " ``2d`` index."
#~ msgstr ""

#~ msgid "On this page"
#~ msgstr ""

