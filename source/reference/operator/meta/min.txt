====
$min
====

.. default-domain:: mongodb

Definition
----------

.. operator:: $min

   Specify a :operator:`$min` value to specify the *inclusive* lower
   bound for a specific index in order to constrain the results of
   :method:`~db.collection.find()`.

Shell Method
------------

The :program:`mongo` shell provides the :method:`~cursor.min()`
wrapper method:

.. code-block:: javascript

   db.collection.find( { <query> } ).min( { field1: <min value>, ... fieldN: <min valueN>} )

You can also specify the option with either of the two forms:

.. code-block:: javascript

   db.collection.find( { <query> } )._addSpecial( "$min", { field1: <min value1>, ... fieldN: <min valueN> } )
   db.collection.find( { $query: { <query> }, $min: { field1: <min value1>, ... fieldN: <min valueN> } } )

The :operator:`$min` specifies the lower bound for *all* keys of a
specific index *in order*.

Consider the following operations on a collection named
``collection`` that has an index ``{ age: 1 }``:

.. code-block:: javascript

   db.collection.find().min( { age: 20 } )

This operation limits the query to those documents where the
field ``age`` is more than ``20`` and forces a query plan which scans the
``{ age: 1 }`` index from 20 to :bsontype:`MaxKey <data_maxkey>`.

You can explicitly specify the corresponding index with
:method:`~cursor.hint()`. Otherwise, MongoDB selects the index using
the fields in the :operator:`$max` and :operator:`$min` bounds; however, if
multiple indexes exist on same fields with different sort orders, the selection
of the index may be ambiguous.

Consider a collection named ``collection`` that has the following
two indexes:

.. code-block:: javascript

   { age: 1, type: -1 }
   { age: 1, type: 1 }

Without explicitly using :method:`~cursor.hint()`, it is unclear
which index the following operation will select:

.. code-block:: javascript

   db.collection.find().min( { age: 20, type: 'C' } )

You can use :operator:`$min` in conjunction with :operator:`$max` to
limit results to a specific range for the *same* index, as in the
following example:

.. code-block:: javascript

   db.collection.find().min( { age: 20 } ).max( { age: 25 } )

.. note::

   Because :method:`~cursor.min()` requires an index on a field, and
   forces the query to use this index, you may prefer the
   :query:`$gte` operator for the query if possible. Consider the
   following example:

   .. code-block:: javascript

      db.collection.find( { _id: 7 } ).min( { age: 25 } )

   The query will use the index on the ``age`` field, even if the
   index on ``_id`` may be better.

Behavior
--------

.. include:: /includes/fact-query-min-max.rst
