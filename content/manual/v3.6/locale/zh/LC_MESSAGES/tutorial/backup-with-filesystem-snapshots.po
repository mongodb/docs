#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:3
msgid "Back Up and Restore with Filesystem Snapshots"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:13
msgid ""
"This document describes a procedure for creating backups of MongoDB "
"systems using system-level tools, such as :term:`LVM` or storage "
"appliance, as well as the corresponding restoration strategies."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:17
msgid ""
"These filesystem snapshots, or \"block-level\" backup methods, use system"
" level tools to create copies of the device that holds MongoDB's data "
"files. These methods complete quickly and work reliably, but require "
"additional system configuration outside of MongoDB."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:24
msgid ""
"MongoDB 3.2 added support for volume-level back up of MongoDB instances "
"using the :doc:`WiredTiger </core/wiredtiger>` storage engine when the "
"MongoDB instance's data files and journal files reside on separate "
"volumes."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:29
msgid ""
"Prior to MongoDB 3.2, creating volume-level backups of MongoDB instances "
"using WiredTiger required that the data files and journal reside on the "
"same volume."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:33
msgid ":doc:`/core/backups` and :doc:`/tutorial/backup-and-restore-tools`."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:39
msgid "Snapshots Overview"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:41
msgid ""
"Snapshots work by creating pointers between the live data and a special "
"snapshot volume. These pointers are theoretically equivalent to \"hard "
"links.\" As the working data diverges from the snapshot, the snapshot "
"process uses a copy-on-write strategy. As a result, the snapshot only "
"stores modified data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:47
msgid ""
"After making the snapshot, you mount the snapshot image on your file "
"system and copy data from the snapshot. The resulting backup contains a "
"full copy of all data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:52
msgid "Considerations"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:55
msgid "Valid Database at the Time of Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:57
msgid ""
"The database must be valid when the snapshot takes place. This means that"
" all writes accepted by the database need to be fully written to disk: "
"either to the :term:`journal` or to data files."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:61
msgid ""
"If there are writes that are not on disk when the backup occurs, the "
"backup will not reflect these changes."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:64
msgid ""
"For the :doc:`MMAPv1 storage engine </core/mmapv1>`, if writes are *in "
"progress* when the backup occurs, the data files will reflect an "
"inconsistent state. With :ref:`journaling <journaling-mmapv1>`, all data "
"file states resulting from in-progress writes are recoverable; without "
"journaling, you must flush all pending writes to disk before running the "
"back up operation and must ensure that no writes occur during the entire "
"back up procedure. If you do use journaling, the journal **must** reside "
"on the same volume as the data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:73
msgid ""
"For the :doc:`WiredTiger storage engine </core/wiredtiger>`, the data "
"files reflect a consistent state as of the last :ref:`checkpoint "
"<storage-wiredtiger-checkpoints>`. Checkpoints occur with every 2 GB of "
"data or every minute."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:79
msgid "Entire Disk Image"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:81
msgid ""
"Snapshots create an image of an entire disk image. Unless you need to "
"back up your entire system, consider isolating your MongoDB data files, "
"journal (if applicable), and configuration on one logical disk that "
"doesn't contain any other data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:86
msgid ""
"Alternately, store all MongoDB data files on a dedicated device so that "
"you can make backups without duplicating extraneous data."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:90
msgid "Site Failure Precaution"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:92
msgid ""
"Ensure that you copy data from snapshots onto other systems. This ensures"
" that data is safe from site failures."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:96
msgid "No Incremental Backups"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:98
msgid ""
"This tutorial does not include procedures for incremental backups. "
"Although different snapshot methods provide different features, the LVM "
"method outlined below does not provide any capacity for capturing "
"incremental backups."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:106
msgid "Snapshots With Journaling"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:108
msgid ""
"If your :binary:`~bin.mongod` instance has journaling enabled, then you "
"can use any kind of file system or volume/block level snapshot tool to "
"create backups."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:112
msgid ""
"If you manage your own infrastructure on a Linux-based system, configure "
"your system with :term:`LVM` to provide your disk packages and provide "
"snapshot capability. You can also use LVM-based setups *within* a "
"cloud/virtualized environment."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:119
msgid ""
"Running :term:`LVM` provides additional flexibility and enables the "
"possibility of using snapshots to back up MongoDB."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:123
msgid "Snapshots with Amazon EBS in a RAID 10 Configuration"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:125
msgid ""
"If your deployment depends on Amazon's Elastic Block Storage (EBS) with "
"RAID configured within your instance, it is impossible to get a "
"consistent state across all disks using the platform's snapshot tool. As "
"an alternative, you can do one of the following:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:130
msgid ""
"Flush all writes to disk and create a write lock to ensure consistent "
"state during the backup process."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:133
msgid "If you choose this option see :ref:`backup-without-journaling`."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:135
msgid ""
"Configure :term:`LVM` to run and hold your MongoDB data files on top of "
"the RAID within your system."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:138
msgid ""
"If you choose this option, perform the LVM backup operation described in "
":ref:`lvm-backup-operation`."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:144
msgid "Back Up and Restore Using LVM on Linux"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:146
msgid ""
"This section provides an overview of a simple backup process using "
":term:`LVM` on a Linux system. While the tools, commands, and paths may "
"be (slightly) different on your system the following steps provide a high"
" level overview of the backup operation."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:153
msgid ""
"Only use the following procedure as a guideline for a backup system and "
"infrastructure. Production backup systems must consider a number of "
"application specific requirements and factors unique to specific "
"environments."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:161
msgid "Create a Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:165
#: ../source/tutorial/backup-with-filesystem-snapshots.txt:326
msgid ""
"Starting in MongoDB 3.2, for the purpose of volume-level backup of "
"MongoDB instances using WiredTiger, the data files and the journal are no"
" longer required to reside on a single volume."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:169
msgid ""
"To create a snapshot with :term:`LVM`, issue a command as root in the "
"following format:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:176
msgid ""
"This command creates an :term:`LVM` snapshot (with the ``--snapshot`` "
"option) named ``mdb-snap01`` of the ``mongodb`` volume in the ``vg0`` "
"volume group."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:180
msgid ""
"This example creates a snapshot named ``mdb-snap01`` located at "
"``/dev/vg0/mdb-snap01``. The location and paths to your systems volume "
"groups and devices may vary slightly depending on your operating system's"
" :term:`LVM` configuration."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:185
msgid ""
"The snapshot has a cap of at 100 megabytes, because of the parameter "
"``--size 100M``. This size does not reflect the total amount of the data "
"on the disk, but rather the quantity of differences between the current "
"state of ``/dev/vg0/mongodb`` and the creation of the snapshot (i.e. "
"``/dev/vg0/mdb-snap01``.)"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:193
msgid ""
"Ensure that you create snapshots with enough space to account for data "
"growth, particularly for the period of time that it takes to copy data "
"out of the system or to a temporary image."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:197
msgid ""
"If your snapshot runs out of space, the snapshot image becomes unusable. "
"Discard this logical volume and create another."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:200
msgid ""
"The snapshot will exist when the command returns. You can restore "
"directly from the snapshot at any time or by creating a new logical "
"volume and restoring from this snapshot to the alternate image."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:204
msgid ""
"While snapshots are great for creating high quality backups quickly, they"
" are not ideal as a format for storing backup data. Snapshots typically "
"depend and reside on the same storage infrastructure as the original disk"
" images. Therefore, it's crucial that you archive these snapshots and "
"store them elsewhere."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:211
msgid "Archive a Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:213
msgid ""
"After creating a snapshot, mount the snapshot and copy the data to "
"separate storage. Your system might try to compress the backup images as "
"you move them offline. Alternatively, take a block level copy of the "
"snapshot image, such as with the following procedure:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:223
msgid "The above command sequence does the following:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:225
msgid ""
"Ensures that the ``/dev/vg0/mdb-snap01`` device is not mounted.  Never "
"take a block level copy of a filesystem or filesystem snapshot that is "
"mounted."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:229
msgid ""
"Performs a block level copy of the entire snapshot image using the ``dd``"
" command and compresses the result in a gzipped file in the current "
"working directory."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:235
msgid ""
"This command will create a large ``gz`` file in your current working "
"directory. Make sure that you run this command in a file system that has "
"enough free space."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:242
msgid "Restore a Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:244
msgid ""
"To restore a snapshot created with :term:`LVM`, issue the following "
"sequence of commands:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:253
msgid "The above sequence does the following:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:255
msgid ""
"Creates a new logical volume named ``mdb-new``, in the ``/dev/vg0`` "
"volume group. The path to the new device will be ``/dev/vg0/mdb-new``."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:260
msgid ""
"This volume will have a maximum size of 1 gigabyte. The original file "
"system must have had a total size of 1 gigabyte or smaller, or else the "
"restoration will fail."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:264
msgid "Change ``1G`` to your desired volume size."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:266
msgid ""
"Uncompresses and unarchives the ``mdb-snap01.gz`` into the ``mdb-new`` "
"disk image."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:269
msgid ""
"Mounts the ``mdb-new`` disk image to the ``/srv/mongodb`` directory. "
"Modify the mount point to correspond to your MongoDB data file location, "
"or other location as needed."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:275
msgid ""
"The restored snapshot will have a stale ``mongod.lock`` file. If you do "
"not remove this file from the snapshot, and MongoDB may assume that the "
"stale lock file indicates an unclean shutdown. If you're running with "
":setting:`storage.journal.enabled` enabled, and you *do not* use "
":method:`db.fsyncLock()`, you do not need to remove the ``mongod.lock`` "
"file. If you use :method:`db.fsyncLock()` you will need to remove the "
"lock."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:286
msgid "Restore Directly from a Snapshot"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:288
msgid ""
"To restore a backup without writing to a compressed ``gz`` file, use the "
"following sequence of commands:"
msgstr ""

#: ../source/includes/fact-uuid-restore-from-backup.rst:3
msgid "*New in version 3.6:*"
msgstr ""

#: ../source/includes/fact-uuid-restore-from-backup.rst:5
msgid ""
"All MongoDB collections have :abbr:`UUIDs (Universally unique "
"identifiers)` by default. When MongoDB restores collections, the restored"
" collections retain their original UUIDs. When restoring a collection "
"where no UUID was present, MongoDB generates a UUID for the restored "
"collection."
msgstr ""

#: ../source/includes/fact-uuid-restore-from-backup.rst:11
msgid ""
"For more information on collection UUIDs, see `Collections "
"<https://docs.mongodb.com/v3.6/core/databases-and-"
"collections/#collections>`_."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:301
msgid "Remote Backup Storage"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:303
msgid ""
"You can implement off-system backups using the :ref:`combined process "
"<backup-restore-from-snapshot>` and SSH."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:306
msgid ""
"This sequence is identical to procedures explained above, except that it "
"archives and compresses the backup on a remote system using SSH."
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:309
msgid "Consider the following procedure:"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:322
msgid ""
"Back up Instances with Journal Files on Separate Volume or without "
"Journaling"
msgstr ""

#: ../source/tutorial/backup-with-filesystem-snapshots.txt:330
msgid ""
"If your :binary:`~bin.mongod` instance is either running without "
"journaling or has the journal files on a separate volume, you must flush "
"all writes to disk and lock the database to prevent writes during the "
"backup process. If you have a :term:`replica set` configuration, then for"
" your backup use a :term:`secondary` which is not receiving reads (i.e. "
":term:`hidden member`)."
msgstr ""

#: ../source/includes/steps/backup-without-journaling.rst:8
msgid "Flush writes to disk and lock the database to prevent further writes."
msgstr ""

#: ../source/includes/steps/backup-without-journaling.rst:10
#: ../source/includes/steps/backup-without-journaling.rst:28
msgid ""
"To flush writes to disk and to \"lock\" the database, issue the "
":method:`db.fsyncLock()` method in the :binary:`~bin.mongo` shell:"
msgstr ""

#: ../source/includes/steps/backup-without-journaling.rst:26
msgid ""
"Step 1: Flush writes to disk and lock the database to prevent further "
"writes."
msgstr ""

#: ../source/includes/steps/backup-without-journaling.rst:44
msgid "Perform the backup operation described in :ref:`lvm-backup-operation`."
msgstr ""

#: ../source/includes/steps/backup-without-journaling.rst:53
msgid ""
"Step 2: Perform the backup operation described in :ref:`lvm-backup-"
"operation`."
msgstr ""

#: ../source/includes/steps/backup-without-journaling.rst:62
msgid "After the snapshot completes, unlock the database."
msgstr ""

#: ../source/includes/steps/backup-without-journaling.rst:64
#: ../source/includes/steps/backup-without-journaling.rst:82
msgid ""
"To unlock the database after the snapshot has completed, use the "
"following command in the :binary:`~bin.mongo` shell:"
msgstr ""

#: ../source/includes/steps/backup-without-journaling.rst:80
msgid "Step 3: After the snapshot completes, unlock the database."
msgstr ""

#: ../source/includes/extracts/additional-resources-backup-tutorials.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-backup-tutorials.rst:6
msgid ""
"`MongoDB Atlas: For a simple way to run, monitor, and maintain cloud-"
"hosted MongoDB deployments "
"<https://www.mongodb.com/cloud/atlas?jmp=docs>`_"
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Snapshots have the following limitations:"
#~ msgstr ""

#~ msgid "Backup and Restore Using LVM on a Linux System"
#~ msgstr ""

#~ msgid "Create Backups on Instances that do not have Journaling Enabled"
#~ msgstr ""

#~ msgid "This procedure is only supported with the MMAPv1 storage engine."
#~ msgstr ""

#~ msgid "Backup and Restore with Filesystem Snapshots"
#~ msgstr ""

#~ msgid ""
#~ "Snapshots work by creating pointers "
#~ "between the live data and a "
#~ "special snapshot volume. These pointers "
#~ "are theoretically equivalent to \"hard "
#~ "links.\" As the working data diverges"
#~ " from the snapshot, the snapshot "
#~ "process uses a copy-on-write "
#~ "strategy. As a result the snapshot "
#~ "only stores modified data."
#~ msgstr ""

#~ msgid ""
#~ "While snapshots are great for creating"
#~ " high quality backups very quickly, "
#~ "they are not ideal as a format "
#~ "for storing backup data. Snapshots "
#~ "typically depend and reside on the "
#~ "same storage infrastructure as the "
#~ "original disk images. Therefore, it's "
#~ "crucial that you archive these snapshots"
#~ " and store them elsewhere."
#~ msgstr ""

#~ msgid ""
#~ "To restore a snapshot created with "
#~ "the above method, issue the following"
#~ " sequence of commands:"
#~ msgstr ""

#~ msgid ""
#~ "Starting in MongoDB 3.2, the data "
#~ "files as well as the journal files"
#~ " can reside on separate volumes to"
#~ " create volume-level backup of "
#~ "MongoDB instances using the :doc:`WiredTiger"
#~ " </core/wiredtiger>` storage engine. With "
#~ "previous versions, for the purpose of"
#~ " volume-level backup of MongoDB "
#~ "instances using WiredTiger, the data "
#~ "files and the journal must reside "
#~ "on a single volume."
#~ msgstr ""

#~ msgid ""
#~ "If all writes are not on disk "
#~ "when the backup occurs, the backup "
#~ "will not reflect these changes."
#~ msgstr ""

#~ msgid ""
#~ "For the :doc:`MMAPv1 storage engine "
#~ "</core/mmapv1>`, if writes are *in "
#~ "progress* when the backup occurs, the"
#~ " data files will reflect an "
#~ "inconsistent state. With :ref:`journaling "
#~ "<journaling-mmapv1>`, all data-file states"
#~ " resulting from in-progress writes "
#~ "are recoverable; without journaling, you "
#~ "must flush all pending writes to "
#~ "disk before running the backup operation"
#~ " and must ensure that no writes "
#~ "occur during the entire backup "
#~ "procedure. If you do use journaling, "
#~ "the journal **must** reside on the "
#~ "same volume as the data."
#~ msgstr ""

#~ msgid ""
#~ "For the :doc:`WiredTiger storage engine "
#~ "</core/wiredtiger>`, the data files reflect"
#~ " a consistent state as of the "
#~ "last :ref:`checkpoint <storage-wiredtiger-"
#~ "checkpoints>`, which occurs with every 2"
#~ " GB of data or every minute."
#~ msgstr ""

#~ msgid ""
#~ "This tutorial does not include "
#~ "procedures for incremental backups. Although"
#~ " different snapshots methods provide "
#~ "different capability, the LVM method "
#~ "outlined below does not provide any "
#~ "capacity for capturing incremental backups."
#~ msgstr ""

#~ msgid "Back up and Restore Using LVM on Linux"
#~ msgstr ""

# de995b2e358343529be22aa89ade0569
#~ msgid "On this page"
#~ msgstr ""

# 77cf83f84a6d4e47883fe4ac2cfd40c3
#~ msgid ""
#~ "If your :program:`mongod` instance has "
#~ "journaling enabled, then you can use "
#~ "any kind of file system or "
#~ "volume/block level snapshot tool to "
#~ "create backups."
#~ msgstr ""

# 78d5451ad58f4ce688532e2693aa5a18
#~ msgid ""
#~ "If your :program:`mongod` instance is "
#~ "either running without journaling or has"
#~ " the journal files on a separate "
#~ "volume, you must flush all writes "
#~ "to disk and lock the database to"
#~ " prevent writes during the backup "
#~ "process. If you have a :term:`replica"
#~ " set` configuration, then for your "
#~ "backup use a :term:`secondary` which is"
#~ " not receiving reads (i.e. :term:`hidden"
#~ " member`)."
#~ msgstr ""

# 4555b30d55ec4376af318d8cb58817c9
#~ msgid ""
#~ "In the following procedure to create "
#~ "backups, you **must** issue the "
#~ ":method:`db.fsyncLock()` and :method:`db.fsyncUnlock()`"
#~ " operations on the same connection. "
#~ "The client that issues "
#~ ":method:`db.fsyncLock()` is solely responsible "
#~ "for issuing a :method:`db.fsyncUnlock()` "
#~ "operation and must be able to "
#~ "handle potential error conditions so "
#~ "that it can perform the "
#~ ":method:`db.fsyncUnlock()` before terminating the"
#~ " connection."
#~ msgstr ""

# 26ab6ecbe29c4788a831a5950b5daaa4
#~ msgid "See also |mms-home| for seamless automation, backup, and monitoring."
#~ msgstr ""

