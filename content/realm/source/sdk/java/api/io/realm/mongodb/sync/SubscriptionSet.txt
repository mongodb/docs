.. meta::
   :robots: noindex, nosnippet


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Interface SubscriptionSet
^^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_mongodb_sync_SubscriptionSet:



io.realm.mongodb.sync
=====================

**Implemented interfaces:**



- `java.lang.Iterable <https://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html>`__ 


A subscription set is an immutable view of all current :ref:`Subscription <io_realm_mongodb_sync_Subscription>` s for a given Realm that has been configured for flexible sync.

Flexible Sync is a way of defining which data gets synchronized to and from the device using :ref:`RealmQuery <io_realm_RealmQuery>` s. The query and its metadata are represented by a :ref:`Subscription <io_realm_mongodb_sync_Subscription>` .



A subscription set thus defines all the data that is available to the device and being synchronized with the server. If the subscription set encounters an error, e.g. by containing an invalid query, the entire subscription set will enter an :ref:`SubscriptionSet.State.ERROR <io_realm_mongodb_sync_SubscriptionSet_State_ERROR>`  state, and no synchronization will happen until the error has been fixed.



If a subscription is removed, so is the corresponding data, but it is only removed from the device. It isn't deleted on the server.

It is possible to modify a subscription set while offline, but modification isn't accepted by the server before :ref:`getState() <io_realm_mongodb_sync_SubscriptionSet_getState__>`  returns :ref:`SubscriptionSet.State.COMPLETE <io_realm_mongodb_sync_SubscriptionSet_State_COMPLETE>` .



It is possible to force the subscription set to be synchronized with the server by using :ref:`waitForSynchronization() <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization__>`  and its variants.






Nested Class Summary
====================

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Class and Description
   
   * - ``public static final`` 
     - :ref:`SubscriptionSet.State <io_realm_mongodb_sync_SubscriptionSet_State>` 
       
   
   * - ``public static interface`` 
     - :ref:`SubscriptionSet.UpdateCallback <io_realm_mongodb_sync_SubscriptionSet_UpdateCallback>` 
       
   
   * - ``public static interface`` 
     - :ref:`SubscriptionSet.UpdateAsyncCallback <io_realm_mongodb_sync_SubscriptionSet_UpdateAsyncCallback>` 
       
   
   * - ``public static interface`` 
     - :ref:`SubscriptionSet.StateChangeCallback <io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback>` 
       
   
   


Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public :ref:`Subscription <io_realm_mongodb_sync_Subscription>` 
     - | :ref:`find <io_realm_mongodb_sync_SubscriptionSet_find>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  name
       | )
       
       
       Find the subscription with a given name.
       
       
       
   
   * - public :ref:`Subscription <io_realm_mongodb_sync_Subscription>` 
     - | :ref:`find <io_realm_mongodb_sync_SubscriptionSet_find>` (
       |  :ref:`io.realm.RealmQuery <io_realm_RealmQuery>`  query
       | )
       
       
       Find the first subscription that contains the given query.
       
       
       
   
   * - public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__ 
     - | :ref:`getErrorMessage <io_realm_mongodb_sync_SubscriptionSet_getErrorMessage>` ()
       | 
       
       
       If :ref:`getState() <io_realm_mongodb_sync_SubscriptionSet_getState__>`  returns :ref:`State.ERROR <io_realm_mongodb_sync_SubscriptionSet_State_ERROR>` , this method will return the reason.
       
       
       
       
       
   
   * - public :ref:`SubscriptionSet.State <io_realm_mongodb_sync_SubscriptionSet_State>` 
     - | :ref:`getState <io_realm_mongodb_sync_SubscriptionSet_getState>` ()
       | 
       
       
       Returns the current state of the SubscriptionSet.
       
       
       
   
   * - public **int**
     - | :ref:`size <io_realm_mongodb_sync_SubscriptionSet_size>` ()
       | 
       
       
       Returns how many subscriptions are currently in this subscription set.
       
       
       
   
   * - public :ref:`SubscriptionSet <io_realm_mongodb_sync_SubscriptionSet>` 
     - | :ref:`update <io_realm_mongodb_sync_SubscriptionSet_update>` (
       |  :ref:`SubscriptionSet.UpdateCallback <io_realm_mongodb_sync_SubscriptionSet_UpdateCallback>`  action
       | )
       
       
       Modify the subscription set.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` 
     - | :ref:`updateAsync <io_realm_mongodb_sync_SubscriptionSet_updateAsync>` (
       |  :ref:`SubscriptionSet.UpdateAsyncCallback <io_realm_mongodb_sync_SubscriptionSet_UpdateAsyncCallback>`  callback
       | )
       
       
       Asynchronously modify the subscription set.
       
       
       
   
   * - public **boolean**
     - | :ref:`waitForSynchronization <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization>` (
       |  `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__  timeOut, 
       |  `TimeUnit <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html>`__  unit
       | )
       
       
       Wait for the subscription set to synchronize with the server.
       
       
       
   
   * - public **boolean**
     - | :ref:`waitForSynchronization <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization>` ()
       | 
       
       
       Wait for the subscription set to synchronize with the server.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` 
     - | :ref:`waitForSynchronizationAsync <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync>` (
       |  `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__  timeOut, 
       |  `TimeUnit <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html>`__  unit, 
       |  :ref:`SubscriptionSet.StateChangeCallback <io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback>`  callback
       | )
       
       
       Asynchronously wait for the subscription set to synchronize with the server.
       
       
       
   
   * - public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>` 
     - | :ref:`waitForSynchronizationAsync <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync>` (
       |  :ref:`SubscriptionSet.StateChangeCallback <io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback>`  callback
       | )
       
       
       Asynchronously wait for the subscription set to synchronize with the server.
       
       
       
   
   


Inherited Methods
=================



Method Detail
=============

.. _find:

.. _find__:

.. _SubscriptionSet_find:

.. _SubscriptionSet_find__:

.. _io_realm_mongodb_sync_SubscriptionSet_find:

.. _io_realm_mongodb_sync_SubscriptionSet_find__:



find
----

.. _io_realm_mongodb_sync_SubscriptionSet_find_java_lang_String_:

.. _io_realm_mongodb_sync_SubscriptionSet_find_String_:

.. _find_java_lang_String_:

.. _find_String_:

.. _SubscriptionSet_find_java_lang_String_:

.. _SubscriptionSet_find_String_:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`Subscription <io_realm_mongodb_sync_Subscription>`  :ref:`find <io_realm_mongodb_sync_SubscriptionSet_find>` (
       |  `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  name
       | )
       
       
       
   
   * - Find the subscription with a given name.
       
       
       
       
       **Parameters**
       
       - ``name`` - name of subscription to search for.
          
          
          
       
       
       
       
       **Returns**
       
       the matching subscription or ``null``  if no subscription with that name was found.
       
       
       
       
       
       
       
       
       
   
   
.. _io_realm_mongodb_sync_SubscriptionSet_find_io_realm_RealmQuery_:

.. _io_realm_mongodb_sync_SubscriptionSet_find_RealmQuery_:

.. _find_io_realm_RealmQuery_:

.. _find_RealmQuery_:

.. _SubscriptionSet_find_io_realm_RealmQuery_:

.. _SubscriptionSet_find_RealmQuery_:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`Subscription <io_realm_mongodb_sync_Subscription>`  :ref:`find <io_realm_mongodb_sync_SubscriptionSet_find>` (
       |  :ref:`io.realm.RealmQuery <io_realm_RealmQuery>`  query
       | )
       
       
       
   
   * - Find the first subscription that contains the given query. It is possible for multiple named subscriptions to contain the same query.
       
       
       
       
       **Parameters**
       
       - ``query`` - query to search for.
          
          
          
       
       
       
       
       **Returns**
       
       the first subscription containing the query or ``null``  if no match was found.
       
       
       
       
       
       
       
       
       
   
   


.. _getErrorMessage:

.. _getErrorMessage__:

.. _SubscriptionSet_getErrorMessage:

.. _SubscriptionSet_getErrorMessage__:

.. _io_realm_mongodb_sync_SubscriptionSet_getErrorMessage:

.. _io_realm_mongodb_sync_SubscriptionSet_getErrorMessage__:



getErrorMessage
---------------

.. list-table::
   :header-rows: 1
   
   * - | public `String <https://docs.oracle.com/javase/7/docs/api/java/lang/String.html>`__  :ref:`getErrorMessage <io_realm_mongodb_sync_SubscriptionSet_getErrorMessage>` ()
       | 
       
       
       
   
   * - If :ref:`getState() <io_realm_mongodb_sync_SubscriptionSet_getState__>`  returns :ref:`State.ERROR <io_realm_mongodb_sync_SubscriptionSet_State_ERROR>` , this method will return the reason. Errors can be fixed by modifying the subscription accordingly and then calling :ref:`waitForSynchronization() <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization__>` .
       
       
       
       
       
       
       
       
       **Returns**
       
       the underlying error if the subscription set is in the :ref:`State.ERROR <io_realm_mongodb_sync_SubscriptionSet_State_ERROR>`  state. For all other states ``null``  will be returned.
       
       
       
       
       
       
       
       
       
   
   


.. _getState:

.. _getState__:

.. _SubscriptionSet_getState:

.. _SubscriptionSet_getState__:

.. _io_realm_mongodb_sync_SubscriptionSet_getState:

.. _io_realm_mongodb_sync_SubscriptionSet_getState__:



getState
--------

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`SubscriptionSet.State <io_realm_mongodb_sync_SubscriptionSet_State>`  :ref:`getState <io_realm_mongodb_sync_SubscriptionSet_getState>` ()
       | 
       
       
       
   
   * - Returns the current state of the SubscriptionSet. See :ref:`SubscriptionSet.State <io_realm_mongodb_sync_SubscriptionSet_State>`  for more details about each state.
       
       
       
       
       
       
       
       
       **Returns**
       
       current state of the SubscriptionSet.
       
       
       
       
       
       
       
   
   


.. _size:

.. _size__:

.. _SubscriptionSet_size:

.. _SubscriptionSet_size__:

.. _io_realm_mongodb_sync_SubscriptionSet_size:

.. _io_realm_mongodb_sync_SubscriptionSet_size__:



size
----

.. list-table::
   :header-rows: 1
   
   * - | public **int** :ref:`size <io_realm_mongodb_sync_SubscriptionSet_size>` ()
       | 
       
       
       
   
   * - Returns how many subscriptions are currently in this subscription set.
       
       
       
       
       
       
       **Returns**
       
       the number of of subscriptions in the subscription set.
       
       
       
       
       
       
       
   
   


.. _update:

.. _update__:

.. _SubscriptionSet_update:

.. _SubscriptionSet_update__:

.. _io_realm_mongodb_sync_SubscriptionSet_update:

.. _io_realm_mongodb_sync_SubscriptionSet_update__:



update
------

.. _io_realm_mongodb_sync_SubscriptionSet_update_io_realm_mongodb_sync_SubscriptionSet_UpdateCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_update_UpdateCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_update_SubscriptionSet_UpdateCallback_:

.. _update_io_realm_mongodb_sync_SubscriptionSet_UpdateCallback_:

.. _update_UpdateCallback_:

.. _update_SubscriptionSet_UpdateCallback_:

.. _SubscriptionSet_update_io_realm_mongodb_sync_SubscriptionSet_UpdateCallback_:

.. _SubscriptionSet_update_UpdateCallback_:

.. _SubscriptionSet_update_SubscriptionSet_UpdateCallback_:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`SubscriptionSet <io_realm_mongodb_sync_SubscriptionSet>`  :ref:`update <io_realm_mongodb_sync_SubscriptionSet_update>` (
       |  :ref:`SubscriptionSet.UpdateCallback <io_realm_mongodb_sync_SubscriptionSet_UpdateCallback>`  action
       | )
       
       
       
   
   * - Modify the subscription set. If an exception is thrown during the update, no changes will be applied. If the update succeeds, this subscription set is updated with the modified state.
       
       
       
       
       **Parameters**
       
       - ``action`` - the block that modifies the subscription set. It will run on the caller thread.
          
          
          
       
       
       
       
       **Returns**
       
       this subscription set, that now has been updated.
       
       
       
       
       **Throws**
       
       - `Exception <https://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html>`__  - any exception thrown during the update, will propagate back.
          
          
          
       
       
       
       
       
   
   


.. _updateAsync:

.. _updateAsync__:

.. _SubscriptionSet_updateAsync:

.. _SubscriptionSet_updateAsync__:

.. _io_realm_mongodb_sync_SubscriptionSet_updateAsync:

.. _io_realm_mongodb_sync_SubscriptionSet_updateAsync__:



updateAsync
-----------

.. _io_realm_mongodb_sync_SubscriptionSet_updateAsync_io_realm_mongodb_sync_SubscriptionSet_UpdateAsyncCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_updateAsync_UpdateAsyncCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_updateAsync_SubscriptionSet_UpdateAsyncCallback_:

.. _updateAsync_io_realm_mongodb_sync_SubscriptionSet_UpdateAsyncCallback_:

.. _updateAsync_UpdateAsyncCallback_:

.. _updateAsync_SubscriptionSet_UpdateAsyncCallback_:

.. _SubscriptionSet_updateAsync_io_realm_mongodb_sync_SubscriptionSet_UpdateAsyncCallback_:

.. _SubscriptionSet_updateAsync_UpdateAsyncCallback_:

.. _SubscriptionSet_updateAsync_SubscriptionSet_UpdateAsyncCallback_:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`  :ref:`updateAsync <io_realm_mongodb_sync_SubscriptionSet_updateAsync>` (
       |  :ref:`SubscriptionSet.UpdateAsyncCallback <io_realm_mongodb_sync_SubscriptionSet_UpdateAsyncCallback>`  callback
       | )
       
       
       
   
   * - Asynchronously modify the subscription set. If an exception is thrown during the update, no changes will be applied. \*
       
       
       
       
       **Parameters**
       
       - ``callback`` - callback that controls the asynct ask. Succces or failure will be reported here.
          
          
          
       
       
       
       
       **Returns**
       
       task controlling the async execution.
       
       
       
       
       
       
       
   
   


.. _waitForSynchronization:

.. _waitForSynchronization__:

.. _SubscriptionSet_waitForSynchronization:

.. _SubscriptionSet_waitForSynchronization__:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization__:



waitForSynchronization
----------------------

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization_java_lang_Long_java_util_concurrent_TimeUnit_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization_java_lang_Long__java_util_concurrent_TimeUnit_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization_java_lang_Long_TimeUnit_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization_java_lang_Long__TimeUnit_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization_Long_java_util_concurrent_TimeUnit_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization_Long__java_util_concurrent_TimeUnit_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization_Long_TimeUnit_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization_Long__TimeUnit_:

.. _waitForSynchronization_java_lang_Long_java_util_concurrent_TimeUnit_:

.. _waitForSynchronization_java_lang_Long__java_util_concurrent_TimeUnit_:

.. _waitForSynchronization_java_lang_Long_TimeUnit_:

.. _waitForSynchronization_java_lang_Long__TimeUnit_:

.. _waitForSynchronization_Long_java_util_concurrent_TimeUnit_:

.. _waitForSynchronization_Long__java_util_concurrent_TimeUnit_:

.. _waitForSynchronization_Long_TimeUnit_:

.. _waitForSynchronization_Long__TimeUnit_:

.. _SubscriptionSet_waitForSynchronization_java_lang_Long_java_util_concurrent_TimeUnit_:

.. _SubscriptionSet_waitForSynchronization_java_lang_Long__java_util_concurrent_TimeUnit_:

.. _SubscriptionSet_waitForSynchronization_java_lang_Long_TimeUnit_:

.. _SubscriptionSet_waitForSynchronization_java_lang_Long__TimeUnit_:

.. _SubscriptionSet_waitForSynchronization_Long_java_util_concurrent_TimeUnit_:

.. _SubscriptionSet_waitForSynchronization_Long__java_util_concurrent_TimeUnit_:

.. _SubscriptionSet_waitForSynchronization_Long_TimeUnit_:

.. _SubscriptionSet_waitForSynchronization_Long__TimeUnit_:

.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`waitForSynchronization <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization>` (
       |  `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__  timeOut, 
       |  `TimeUnit <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html>`__  unit
       | )
       
       
       
   
   * - Wait for the subscription set to synchronize with the server. It will return when the server either accepts the set of queries and has downloaded data for them, or if an error has occurred. Note, that you will either need to manually call **Realm.refresh()** or wait for change listeners to trigger to see the downloaded data. If an error occurred, the underlying reason can be found through :ref:`getErrorMessage() <io_realm_mongodb_sync_SubscriptionSet_getErrorMessage__>` .
       
       
       
       
       
       
       **Parameters**
       
       - ``timeOut`` - how long to wait for the synchronization to either succeed or fail.
          
          
          
       - ``unit`` - unit of time used for the timeout.
          
          
          
       
       
       
       
       **Returns**
       
       ``true``  if all current subscriptions were accepted by the server and data has been downloaded, or ``false``  if an error occurred.
       
       
       
       
       
       
       **Throws**
       
       - `RuntimeException <https://docs.oracle.com/javase/7/docs/api/java/lang/RuntimeException.html>`__  - if the timeout is exceeded.
          
          
          
       
       
       
       
       
   
   
.. list-table::
   :header-rows: 1
   
   * - | public **boolean** :ref:`waitForSynchronization <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronization>` ()
       | 
       
       
       
   
   * - Wait for the subscription set to synchronize with the server. It will return when the server either accepts the set of queries and has downloaded data for them, or if an error has occurred. Note, that you will either need to manually call **Realm.refresh()** or wait for change listeners to trigger to see the downloaded data. If an error occurred, the underlying reason can be found through :ref:`getErrorMessage() <io_realm_mongodb_sync_SubscriptionSet_getErrorMessage__>` .
       
       
       
       
       
       
       
       
       **Returns**
       
       ``true``  if all current subscriptions were accepted by the server and data has been downloaded, or ``false``  if an error occurred.
       
       
       
       
       
       
       
       
       
   
   


.. _waitForSynchronizationAsync:

.. _waitForSynchronizationAsync__:

.. _SubscriptionSet_waitForSynchronizationAsync:

.. _SubscriptionSet_waitForSynchronizationAsync__:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync__:



waitForSynchronizationAsync
---------------------------

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_TimeUnit_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__TimeUnit__StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long__TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long_TimeUnit_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long__TimeUnit__StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_Long__TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long__TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long_TimeUnit_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long__TimeUnit__StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_java_lang_Long__TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__StateChangeCallback_:

.. _waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long__TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long_TimeUnit_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long__TimeUnit__StateChangeCallback_:

.. _waitForSynchronizationAsync_Long_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_Long__TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_java_util_concurrent_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__java_util_concurrent_TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_TimeUnit_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__TimeUnit__StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_java_lang_Long__TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long_java_util_concurrent_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long__java_util_concurrent_TimeUnit__SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long_TimeUnit_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long__TimeUnit__io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long_TimeUnit_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long__TimeUnit__StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long_TimeUnit_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_Long__TimeUnit__SubscriptionSet_StateChangeCallback_:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`  :ref:`waitForSynchronizationAsync <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync>` (
       |  `Long <https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html>`__  timeOut, 
       |  `TimeUnit <https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html>`__  unit, 
       |  :ref:`SubscriptionSet.StateChangeCallback <io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback>`  callback
       | )
       
       
       
   
   * - Asynchronously wait for the subscription set to synchronize with the server. The callback is invoked when the server either accepts the set of queries and has downloaded data for them, or if an error has occurred. Note, that you will either need to manually call **Realm.refresh()** or wait for change listeners to trigger to see the downloaded data. If an error occurred, the underlying reason can be found through :ref:`getErrorMessage() <io_realm_mongodb_sync_SubscriptionSet_getErrorMessage__>` .
       
       
       
       
       
       
       **Parameters**
       
       - ``timeOut`` - how long to wait for the synchronization to either succeed or fail.
          
          
          
       - ``unit`` - unit of time used for the timeout.
          
          
          
       - ``callback`` - callback to trigger when the synchronization either succeed or fail. Results will be reported on the UI thread.
          
          
          
       
       
       
       
       **Returns**
       
       ``true``  if all current subscriptions were accepted by the server and data has been downloaded, or ``false``  if an error occurred.
       
       
       
       
       
       
       
       
       
   
   
.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_StateChangeCallback_:

.. _io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _waitForSynchronizationAsync_StateChangeCallback_:

.. _waitForSynchronizationAsync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_StateChangeCallback_:

.. _SubscriptionSet_waitForSynchronizationAsync_SubscriptionSet_StateChangeCallback_:

.. list-table::
   :header-rows: 1
   
   * - | public :ref:`RealmAsyncTask <io_realm_RealmAsyncTask>`  :ref:`waitForSynchronizationAsync <io_realm_mongodb_sync_SubscriptionSet_waitForSynchronizationAsync>` (
       |  :ref:`SubscriptionSet.StateChangeCallback <io_realm_mongodb_sync_SubscriptionSet_StateChangeCallback>`  callback
       | )
       
       
       
   
   * - Asynchronously wait for the subscription set to synchronize with the server. It will invoke the callback when the server either accepts the set of queries and has downloaded data for them, or if an error has occurred. Note, that you will either need to manually call **Realm.refresh()** or wait for change listeners to trigger to see the downloaded data. If an error occurred, the underlying reason can be found through :ref:`getErrorMessage() <io_realm_mongodb_sync_SubscriptionSet_getErrorMessage__>` .
       
       
       
       
       
       
       **Parameters**
       
       - ``callback`` - callback to trigger when the synchronization either succeed or fail. Results will be reported on the UI thread.
          
          
          
       
       
       
       
       **Returns**
       
       ``true``  if all current subscriptions were accepted by the server and data has been downloaded, or ``false``  if an error occurred.
       
       
       
       
       
       
       
       
       
   
   



