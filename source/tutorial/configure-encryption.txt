====================
Configure Encryption
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionadded:: 3.2

Overview
--------

.. include:: /includes/fact-enterprise-only-admonition.rst

.. important::

   Available for the WiredTiger Storage Engine Only.

.. note:: Changed in version 4.0


   .. include:: /includes/fact-aes.rst

MongoDB Enterprise 3.2 introduces a native encryption option for the
WiredTiger storage engine. With storage encryption, the secure
management of the encryption keys is critical.

Only the master key is external to the server and requires external
management. To manage the master key, MongoDB's encrypted storage
engine supports two key management options:

- Integration with a third party key management appliance via the Key
  Management Interoperability Protocol (KMIP). **Recommended**

- Use of local key management via a keyfile.

The following tutorial outlines the procedures to configure MongoDB for
encryption and key management.

Key Manager
-----------

MongoDB Enterprise supports secure transfer of keys with compatible key
management appliances. Using a key manager allows for the keys to be
stored in the key manager.

MongoDB Enterprise supports secure transfer of keys with Key Management
Interoperability Protocol (KMIP) compliant key management appliances.
Any appliance vendor that provides support for KMIP is expected
to be compatible.

.. include:: /includes/partners-security.rst

.. tip:: Recommended

   Using a key manager meets regulatory key management guidelines, such
   as HIPAA, PCI-DSS, and FERPA, and is recommended over the local key
   management.

Prerequisites
~~~~~~~~~~~~~

- Your key manager must support the KMIP communication protocol.

- To authenticate MongoDB to a KMIP server, you must have a valid
  certificate issued by the key management appliance.

.. _encrypt-with-new-key:

Encrypt Using a New Key
~~~~~~~~~~~~~~~~~~~~~~~

To create a new key, connect :binary:`~bin.mongod` to the key manager by starting
:binary:`~bin.mongod` with the following options:

- :option:`--enableEncryption <mongod --enableEncryption>`
- :option:`--kmipServerName <mongod --kmipServerName>`
- :option:`--kmipPort <mongod --kmipPort>`
- :option:`--kmipServerCAFile <mongod --kmipServerCAFile>`
- :option:`--kmipClientCertificateFile <mongod --kmipClientCertificateFile>`

.. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst

The following  operation creates a new master key in your key manager which
:binary:`~bin.mongod` uses to encrypt the keys :binary:`~bin.mongod` generates
for each database.

.. code-block:: sh

   mongod --enableEncryption --kmipServerName <KMIP Server HostName> \
     --kmipPort <KMIP server port> --kmipServerCAFile ca.pem \
     --kmipClientCertificateFile client.pem

When connecting to the KMIP server, the :binary:`~bin.mongod` verifies
that the specified :option:`--kmipServerName <mongod --kmipServerName>`
matches the Subject Alternative Name ``SAN`` (or, if ``SAN`` is not
present, the Common Name ``CN``) in the certificate presented by the
KMIP server. [#san]_ If ``SAN`` is present, :binary:`~bin.mongod` does
not match against the ``CN``. If the hostname does not match the
``SAN`` (or ``CN``), the :binary:`~bin.mongod` will fail to connect.

To verify that the key creation and usage was successful, check the log
file. If successful, the process will log the following messages:

.. code-block:: sh

   [initandlisten] Created KMIP key with id: <UID>
   [initandlisten] Encryption key manager initialized using master key with id: <UID>

.. seealso:: :ref:`encryption-key-management-options`

.. _encrypt-with-existing-key:

Encrypt Using an Existing Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use an existing master key your KMIP server created and
manages. To use an existing key, connect :binary:`~bin.mongod` to the
key manager by starting :binary:`~bin.mongod` with the following options:

- :option:`--enableEncryption <mongod --enableEncryption>`
- :option:`--kmipServerName <mongod --kmipServerName>`
- :option:`--kmipPort <mongod --kmipPort>`
- :option:`--kmipServerCAFile <mongod --kmipServerCAFile>`
- :option:`--kmipClientCertificateFile <mongod --kmipClientCertificateFile>`
- :option:`--kmipKeyIdentifier <mongod --kmipKeyIdentifier>`

.. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst


.. code-block:: sh

   mongod --enableEncryption --kmipServerName <KMIP Server HostName> \
     --kmipPort <KMIP server port> --kmipServerCAFile ca.pem \
     --kmipClientCertificateFile client.pem --kmipKeyIdentifier <UID>

When connecting to the KMIP server, the :binary:`~bin.mongod` verifies
that the specified :option:`--kmipServerName <mongod --kmipServerName>`
matches the Subject Alternative Name ``SAN`` (or, if ``SAN`` is not
present, the Common Name ``CN``) in the certificate presented by the
KMIP server. [#san]_ If ``SAN`` is present, :binary:`~bin.mongod` does not
match against the ``CN``. If the hostname does not match the ``SAN``
(or ``CN``), the :binary:`~bin.mongod` will fail to connect.

.. seealso:: :ref:`encryption-key-management-options`

.. [#san]

   .. include:: /includes/extracts/4.2-changes-SAN-matching.rst

.. _encrypt-local-key-mgmt:

Local Key Management
--------------------

.. important::

   Using the keyfile method does not meet most regulatory key
   management guidelines and requires users to securely manage their
   own keys.

   The safe management of the keyfile is critical.

To encrypt using a keyfile, you must have a base64 encoded keyfile that
contains a single 16 or 32 character string. The keyfile must only be
accessible by the owner of the :binary:`~bin.mongod` process.

#. Create the base64 encoded keyfile with the 16 or 32 character
   string. You can generate the encoded keyfile using any method you
   prefer. For example,

   .. code-block:: sh

      openssl rand -base64 32 > mongodb-keyfile

#. Update the file permissions.

   .. code-block:: sh

      chmod 600 mongodb-keyfile

#. To use the key file, start :binary:`~bin.mongod` with the following
   options:

   - ``--enableEncryption``,

   - ``--encryptionKeyFile <path to keyfile>``,

   .. code-block:: sh

      mongod --enableEncryption --encryptionKeyFile  mongodb-keyfile

   .. include:: /includes/extracts/default-bind-ip-security-additional-command-line.rst

#. Verify if the encryption key manager successfully initialized with
   the keyfile. If the operation was successful, the process will log the
   following message:

   .. code-block:: sh

      [initandlisten] Encryption key manager initialized with key file: <path to keyfile>

.. seealso:: :ref:`encryption-key-management-options`

