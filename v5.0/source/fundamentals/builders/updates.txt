================
Updates Builders
================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code example, change data, nested class

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _updates-builders:

Overview
--------

In this guide, you can learn how to specify **updates** by using
:doc:`builders </fundamentals/builders/>` in the {+driver-long+}.

The ``Updates`` builder provides helper methods for the following types of updates:

- :ref:`Field Updates <field_updates>`
- :ref:`Array Updates <array_updates>`
- :ref:`Combining Multiple Update Operators <multiple_updates>`

Some methods that expect updates are:

- ``updateOne()``
- ``updateMany()``
- ``bulkWrite()``

The ``Updates`` class provides static factory methods for all the MongoDB update
operators. Each method returns an instance of the :ref:`BSON <bson>`
type, which you can pass to any method that expects an update argument.

.. tip::

   For brevity, you may choose to import the methods of the `Updates <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html>`__ class:

   .. code-block:: kotlin

      import com.mongodb.client.model.Updates.*

The examples in this guide use the following document:

.. code-block:: json

   {
      "_id": 1,
      "color": "red",
      "qty": 5,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

This example is modeled by the following data class unless otherwise noted:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.example-data-class.kt
   :language: kotlin

.. _field_updates:

Field Updates
-------------

Set
~~~

Use the `set() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#set(java.lang.String,TItem)>`__
method to assign the value of a field in an update operation.

The following example sets the value of the ``qty`` field to ``11``:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.set-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 11,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Unset
~~~~~

Use the `unset() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#unset(java.lang.String)>`__ method
to delete the value of a field in an update operation.

The following example deletes the ``qty`` field:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.unset-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Set On Insert
~~~~~~~~~~~~~

Use the `setOnInsert() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#setOnInsert(java.lang.String,TItem)>`__
method to assign the value of a field in an update operation on an
insert of a document.

The following example sets the value of the ``color`` field to ``"pink"`` if
the operation resulted in the insert of a document:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.set-on-insert-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "pink"
   }

.. note::

   If the document is not inserted, no change will occur.

Increment
~~~~~~~~~

Use the `inc() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#inc(java.lang.String,java.lang.Number)>`__
method to increment the value of a numeric field in an update operation.

The following example increments the value of the ``qty`` field, which was ``5``, by ``3``:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.inc-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 8,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Multiply
~~~~~~~~

Use the `mul() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#mul(java.lang.String,java.lang.Number)>`__
method to multiply the value of a numeric field in an update operation.

The following example multiplies the value of the ``qty`` field, which
was ``5``, by ``2``:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.mul-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 10,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Rename
~~~~~~

Use the `rename() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#rename(java.lang.String,java.lang.String)>`__
method to rename the value of a field in an update operation.

The following example renames the ``qty`` field to ``quantity``:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.rename-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" },
      "quantity": 5,
   }

Min
~~~

Use the `min() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#min(java.lang.String,TItem)>`__
method to set the value of the field to the given value if the given value is
less than the current value of the field.

The following example updates the ``qty`` field to ``2`` because ``2``
is less than the current value of the ``qty`` field (``5``):

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.min-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 2,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Max
~~~

Use the `max() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#max(java.lang.String,TItem)>`__
method to update the value of a field with the larger number of the two
specified in an update operation.

The following example updates the ``qty`` field to ``8`` because ``8``
is greater than the current value of the ``qty`` field (``5``):

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.max-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 8,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Current Date
~~~~~~~~~~~~

Use the `currentDate() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#currentDate(java.lang.String)>`__
method to assign the value of a field in an update operation to the
current date as a :manual:`BSON date </reference/bson-types/#date>`.

The following example sets the value of the ``lastModified`` field to
the current date as a BSON date:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.current-date-update.kt
   :language: kotlin

Since we wrote this page on June 16, 2023, the preceding example updates
the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 5,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "$date": "2023-06-16T17:13:06.373Z"
   }

Current Timestamp
~~~~~~~~~~~~~~~~~

Use the `currentTimestamp() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#currentTimestamp(java.lang.String)>`__
method to assign the value of a field in an update operation to the
current date as a :manual:`timestamp </reference/bson-types/#timestamps>`.

The following example sets the value of the ``lastModified`` field to
the current date as a BSON timestamp:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.current-timestamp-update.kt
   :language: kotlin

Since we wrote this page on June 16, 2023, the preceding example updates
the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 5,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "$timestamp": { "t": 1686935654, "i": 3 }
   }

Bit
~~~

Use the `bitwiseOr() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#bitwiseOr(java.lang.String,int)>`__,
`bitwiseAnd() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#bitwiseAnd(java.lang.String,int)>`__,
and `bitwiseXor() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#bitwiseXor(java.lang.String,int)>`__
methods to perform a bitwise update of the integer value of a field in
an update operation.

The following example performs a bitwise ``OR`` between the number
``10`` and the integer value of the ``qty`` field (``5``):

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.bitwise-or-update.kt
   :language: kotlin

The bitwise operation results in ``15``:

.. code-block:: none
   :copyable: false

   0101 // bit representation of 5
   1010 // bit representation of 10
   ----
   1111 // bit representation of 15

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 15,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

.. _array_updates:

Array Updates
-------------

Add to Set
~~~~~~~~~~

Use the `addToSet() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#addToSet(java.lang.String,TItem)>`__
method to append a value to an array if the value is not already present
in an update operation.

The following example adds a ``Vendor`` instance that has a ``name``
value of ``"C"`` to the ``vendor`` array:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.add-to-set-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 5,
      "vendor": [
         { "name": "A" }, 
         { "name": "D" }, 
         { "name": "M" },
         { "name": "C" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Pop
~~~

Use the `popFirst() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#popFirst(java.lang.String)>`__
method to remove the first element of an array and the
`popLast() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#popLast(java.lang.String)>`__
method to remove the last element of an array in an update operation.

The following example removes the first entry of the ``vendor`` array:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.pop-first-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 5,
      "vendor": [
         { "name": "D" },
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Pull All
~~~~~~~~

Use the `pullAll() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#pullAll(java.lang.String,java.util.List)>`__
method to remove all instances of specified values from an existing array in
an update operation.

The following example removes ``Vendor`` instances that have ``name`` values
of ``"A"`` and ``"M"`` from the ``vendor`` array:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.pull-all-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 5,
      "vendor": [
         { "name": "D" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Pull
~~~~

Use the `pull() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#pull(java.lang.String,TItem)>`__
method to remove all instances of a specified value from an existing array in
an update operation.

The following example removes ``Vendor`` instances that have a ``name``
value of ``"D"`` from the ``vendor`` array:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.pull-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 5,
      "vendor": [
         { "name": "A" }, 
         { "name": "M" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

Push
~~~~

Use the `push() <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Updates.html#push(java.lang.String,TItem)>`__
method to append a value to an array in an update operation.

The following example adds a ``Vendor`` instance that has a ``name``
value of ``"Q"`` to the ``vendor`` array:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.push-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "red",
      "qty": 5,
      "vendor": [ 
         { "name": "A" },
         { "name": "D" }, 
         { "name": "M" },
         { "name": "Q" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }

.. _multiple_updates:

Combining Multiple Update Operators
-----------------------------------

An application can update multiple fields of a single document by
combining two or more of the update operators described in the preceding
sections.

The following example increments the value of the ``qty`` field by ``6``, sets
the value of the ``color`` field to ``"purple"``, and adds a ``Vendor``
instance that has a ``name`` value of ``"R"`` to the ``vendor`` field:

.. literalinclude:: /examples/generated/UpdatesBuildersTest.snippet.combine-update.kt
   :language: kotlin

The preceding example updates the original document to the following state:

.. code-block:: json
   :copyable: false

   {
      "_id": 1,
      "color": "purple",
      "qty": 11,
      "vendor": [
         { "name": "A" },
         { "name": "D" }, 
         { "name": "M" },
         { "name": "R" }
      ],
      "lastModified": { "$date": "2000-01-01T07:00:00.000Z" }
   }
