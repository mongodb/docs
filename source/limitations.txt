.. _entity-framework-limitations:

===========
Limitations
===========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta:: 
   :keywords: EF, EF Core, support

Overview
--------

On this page, you can find a list of {+framework+} and MongoDB features that
the {+provider-short+} does not support. Because the provider is in active
development, some features listed on this page might be considered for future
releases based on customer demand.

Unsupported {+framework-core+} Features
-------------------------------------------

The following sections describe {+framework-core+} features that the {+provider-short+}
does not support.

Select Projections
~~~~~~~~~~~~~~~~~~

Select projections use the ``Select()`` method in a LINQ query to
change the structure of the created object. The projection changes the object by
performing groupings, or selecting fields into anonymous types or alternative
types not recognized by {+framework+}.

This version of the {+provider-short+} does not support
Select Projections.

Type Discriminators
~~~~~~~~~~~~~~~~~~~

A type discriminator is an element in a document that the {+provider-short+}
uses to decide which {+language+} type to create for the document during deserialization.

This version of the {+provider-short+} does not support type discriminators.

Scalar Aggregations
~~~~~~~~~~~~~~~~~~~

Top-level scalar aggregations are operations you can perform on a query, such as
``Count()``, ``Min()``, and ``Max()``. This version of the {+provider-short+}
supports only the following scalar aggregation operations:

- ``Count()``
- ``LongCount()``
- ``Any()``, with or without predicates

This version of the {+provider-short+} does not support other scalar aggregation
operations.

Transactions
~~~~~~~~~~~~

Transactions ensure that all updates in a set of changes either succeed, or fail
together so the database is not left in an inconsistent state. 

This version of the {+provider-short+} does not support the {+framework-core+}
transaction model.

Migrations
~~~~~~~~~~

Migrations in {+framework-core+} are designed for relational databases. Because
MongoDB is a document database, migrations are not supported by the
{+provider-short+}.

Database-First Development
~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB is designed to be flexible and does not require a database schema.
Because of MongoDB's schemaless design, database-first development is not supported
in the {+provider-short+}. 

Foreign Keys
~~~~~~~~~~~~

Because MongoDB is a document database, the {+provider-short+} does not support foreign keys.

Alternate Keys
~~~~~~~~~~~~~~

Because MongoDB is a document database, the {+provider-short+} does not support alternate keys.

Table Splitting
~~~~~~~~~~~~~~~

MongoDB is a document database and does not have normalized tables.
Because of this, table splitting is not supported by the
{+provider-short+}.

Temporal Tables
~~~~~~~~~~~~~~~

The {+provider-short+} does not support temporal tables.

Spatial Data
~~~~~~~~~~~~

The {+provider-short+} does not support spatial data.

Unsupported MongoDB Features
----------------------------

The following sections describe MongoDB features that the {+provider-short+}
does not support.

Time Series
~~~~~~~~~~~

The {+provider-short+} does not support time series data or time series
collections. These are MongoDB-exclusive features that are not available in {+framework-core+}.

Atlas Search
~~~~~~~~~~~~

The {+provider-short+} does not support MongoDB Atlas search. Atlas Search is a
MongoDB-exclusive feature with no similar feature available in {+framework-core+}.

Vector Search
~~~~~~~~~~~~~

The {+provider-short+} does not support MongoDB Atlas Vector search. Atlas Vector Search is a
MongoDB-exclusive feature with no similar feature available in {+framework-core+}.