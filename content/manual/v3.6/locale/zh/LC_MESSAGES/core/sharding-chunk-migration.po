#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-chunk-migration.txt:5
msgid "Chunk Migration Across Shards"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:15
msgid ""
"Chunk migration moves the chunks of a sharded collection from one shard to "
"another and is part of the :doc:`balancer </core/sharding-balancing>` "
"process."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:24
msgid "Chunk Migration"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:26
msgid ""
"MongoDB migrates chunks in a :term:`sharded cluster` to distribute the "
"chunks of a sharded collection evenly among shards. Migrations may be "
"either:"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:30
msgid ""
"Manual. Only use manual migration in limited cases, such as to distribute "
"data during bulk inserts. See :doc:`Migrating Chunks Manually </tutorial"
"/migrate-chunks-in-sharded-cluster>` for more details."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:34
msgid ""
"Automatic. The :doc:`balancer </core/sharding-balancing>` process "
"automatically migrates chunks when there is an uneven distribution of a "
"sharded collection's chunks across the shards. See :ref:`Migration "
"Thresholds <sharding-migration-thresholds>` for more details."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:42
msgid "Chunk Migration Procedure"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:44
msgid "All chunk migrations use the following procedure:"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:46
msgid ""
"The balancer process sends the :dbcommand:`moveChunk` command to the source "
"shard."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:49
msgid ""
"The source starts the move with an internal :dbcommand:`moveChunk` command. "
"During the migration process, operations to the chunk route to the source "
"shard. The source shard is responsible for incoming write operations for the"
" chunk."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:54
msgid ""
"The destination shard builds any indexes required by the source that do not "
"exist on the destination."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:57
msgid ""
"The destination shard begins requesting documents in the chunk and starts "
"receiving copies of the data."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:60
msgid ""
"After receiving the final document in the chunk, the destination shard "
"starts a synchronization process to ensure that it has the changes to the "
"migrated documents that occurred during the migration."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:64
msgid ""
"When fully synchronized, the destination shard connects to the :term:`config"
" database` and updates the cluster metadata with the new location for the "
"chunk."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:68
msgid ""
"After the destination shard completes the update of the metadata, and once "
"there are no open cursors on the chunk, the source shard deletes its copy of"
" the documents."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:81
msgid ""
"The source shard automatically archives the migrated documents by default. "
"For more information, see :ref:`moveChunk-directory`."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:74
msgid ""
"If the balancer needs to perform additional chunk migrations from the source"
" shard, the balancer can start the next chunk migration without waiting for "
"the current migration process to finish this deletion step. See :ref:`chunk-"
"migration-queuing`."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:84
msgid ""
"The migration process ensures consistency and maximizes the availability of "
"chunks during balancing."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:90
msgid "Chunk Migration Queuing"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:92
msgid ""
"To migrate multiple chunks from a shard, the balancer migrates the chunks "
"one at a time. However, the balancer does not wait for the current "
"migration's delete phase to complete before starting the next chunk "
"migration. See :ref:`sharding-chunk-migration` for the chunk migration "
"process and the delete phase."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:98
msgid ""
"This queuing behavior allows shards to unload chunks more quickly in cases "
"of heavily imbalanced cluster, such as when performing initial data loads "
"without pre-splitting and when adding new shards."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:102
msgid ""
"This behavior also affect the :dbcommand:`moveChunk` command, and migration "
"scripts that use the :dbcommand:`moveChunk` command may proceed more "
"quickly."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:106
msgid ""
"In some cases, the delete phases may persist longer. If multiple delete "
"phases are queued but not yet complete, a crash of the replica set's primary"
" can orphan data from multiple migrations."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:110
msgid ""
"The ``_waitForDelete``, available as a setting for the balancer as well as "
"the :dbcommand:`moveChunk` command, can alter the behavior so that the "
"delete phase of the current migration blocks the start of the next chunk "
"migration. The ``_waitForDelete`` is generally for internal testing "
"purposes. For more information, see :ref:`wait-for-delete-setting`."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:120
msgid "Chunk Migration and Replication"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:124
msgid ""
"The default value ``secondaryThrottle`` became ``true`` for all chunk "
"migrations."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:132
msgid ""
"By default, each document operation during chunk migration propagates to at "
"least one secondary before the balancer proceeds with the next document, "
"which is equivalent to a write concern of ``{ w: 2 }``. You can set the "
"``writeConcern`` option on the balancer configuration to set different write"
" concern semantics."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:138
msgid ""
"To override this behavior and allow the balancer to continue without waiting"
" for replication to a secondary, set the ``_secondaryThrottle`` parameter to"
" ``false``. See :ref:`sharded-cluster-config-secondary-throttle` to update "
"the ``_secondaryThrottle`` parameter for the balancer."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:143
msgid ""
"For the :dbcommand:`moveChunk` command, the ``secondaryThrottle`` parameter "
"is independent of the ``_secondaryThrottle`` parameter for the balancer."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:147
msgid ""
"Independent of the ``secondaryThrottle`` setting, certain phases of the "
"chunk migration have the following replication policy:"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:150
msgid ""
"MongoDB briefly pauses all application writes to the source shard before "
"updating the config servers with the new location for the chunk, and resumes"
" the application writes after the update. The chunk move requires all writes"
" to be acknowledged by majority of the members of the replica set both "
"before and after committing the chunk move to config servers."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:157
msgid ""
"When an outgoing chunk migration finishes and cleanup occurs, all writes "
"must be replicated to a majority of servers before further cleanup (from "
"other outgoing migrations) or new incoming migrations can proceed."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:165
msgid "``moveChunk`` directory"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:167
msgid ""
"Starting in MongoDB 2.6, :setting:`sharding.archiveMovedChunks` is enabled "
"by default. With :setting:`sharding.archiveMovedChunks` enabled, the source "
"shard archives the documents in the migrated chunks in a directory named "
"after the collection namespace under the ``moveChunk`` directory in the "
":setting:`storage.dbPath`."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:176
msgid "Jumbo Chunks"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:178
msgid ""
"During chunk migration, if the chunk exceeds the :ref:`specified chunk size "
"<sharding-chunk-size>` or if the number of documents in the chunk exceeds "
":limit:`Maximum Number of Documents Per Chunk to Migrate`, MongoDB does not "
"migrate the chunk. Instead, MongoDB attempts to :doc:`split </core/sharding-"
"chunk-splitting>` the chunk. If the split is unsuccessful, MongoDB labels "
"the chunk as *jumbo* to avoid repeated attempts to migrate the chunk."
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:1
msgid "balancing"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:1
msgid "migration"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/sharding-chunk-migration.txt:127
msgid ""
"The new ``writeConcern`` field in the balancer configuration document allows"
" you to specify a :doc:`write concern </reference/write-concern>` semantics "
"with the ``_secondaryThrottle`` option."
msgstr ""

#~ msgid ""
#~ "The new ``writeConcern`` field in the balancer configuration  document "
#~ "allows you to specify a :doc:`write concern </core/write-concern>` semantics"
#~ " the ``_secondaryThrottle`` option."
#~ msgstr ""

#~ msgid ""
#~ "In previous versions, the balancer did not wait for the document move to "
#~ "replicate to a secondary. For details, see :v2.2:`Secondary Throttle in the "
#~ "v2.2 Manual </tutorial/configure-sharded-cluster-balancer/#sharded-cluster-"
#~ "config-secondary-throttle>`."
#~ msgstr ""
