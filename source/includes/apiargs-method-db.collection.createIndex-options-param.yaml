arg_name: param
description: |
  Builds the {{indexPhrase}} in the background so the operation does
  *not* block other database activities. Specify ``true`` to build in
  the background. The default value is ``false``.
replacement:
  indexPhrase: "index"
interface: method
name: background
operation: db.collection.createIndex
optional: true
position: 1
type: boolean
---
arg_name: param
description: |
  Creates a unique index so that the collection will not accept
  insertion or update of documents where the index key value matches an existing
  value in the index.
post: |
  Specify ``true`` to create a unique index. The
  default value is ``false``.

  The option is *unavailable* for :doc:`hashed </core/index-hashed>`
  indexes.
interface: method
name: unique
operation: db.collection.createIndex
optional: true
position: 2
type: boolean
---
arg_name: param
description: |
  The name of the index. If unspecified, MongoDB generates an index name
  by concatenating the names of the indexed fields and the sort order.

  Whether user specified or MongoDB generated, index names including
  their full namespace (i.e. ``database.collection``) cannot be longer
  than the :limit:`Index Name Limit <Index Name Length>`.
interface: method
name: name
operation: db.collection.createIndex
optional: true
position: 3
type: string
---
arg_name: param
description: |
  If specified, the index only references documents that match the
  filter expression. See :doc:`/core/index-partial` for more information.
post: |
  A filter expression can include:

  .. include:: /includes/fact-partial-filter-expression-operators.rst

  You can specify a ``partialFilterExpression`` option for all MongoDB
  :ref:`index types <index-types>`.

  .. versionadded:: 3.2

interface: method
name: partialFilterExpression
operation: db.collection.createIndex
optional: true
type: document
---
arg_name: param
description: |
  If ``true``, the {{indexPhrase}} with the specified
  {{field}}. These indexes use less space but behave differently in some
  situations (particularly sorts). The default value is ``false``.
  See :doc:`/core/index-sparse` for more information.

  .. versionchanged:: 3.2 

     Starting in MongoDB 3.2, MongoDB provides the option to create
     :ref:`partial indexes <index-type-partial>`. Partial indexes
     offer a superset of the functionality of sparse indexes. If you
     are using MongoDB 3.2 or later, :ref:`partial indexes
     <index-type-partial>` should be preferred over sparse indexes.

  .. versionchanged:: 2.6

     :doc:`2dsphere </core/2dsphere>` indexes are sparse by default and
     ignore this option. For a compound index that includes
     ``2dsphere`` index key(s) along with keys of other types, only the
     ``2dsphere`` index fields determine whether the index references a
     document.

     :doc:`2d </core/2d>`, :doc:`geoHaystack </core/geohaystack>`, and
     :doc:`text </core/index-text>` indexes behave similarly to the
     :doc:`2dsphere </core/2dsphere>` indexes.
replacement:
  indexPhrase: "index only references documents"
  field: "field"
interface: method
name: sparse
operation: db.collection.createIndex
optional: true
type: boolean
---
arg_name: param
description: |
  Specifies a value, in seconds, as a :term:`TTL` to control how long
  MongoDB retains documents in this collection. See
  :doc:`/tutorial/expire-data` for more information on this
  functionality. This applies only to :term:`TTL` indexes.
interface: method
name: expireAfterSeconds
operation: db.collection.createIndex
optional: true
type: integer
---
arg_name: param
description: |
  Allows users to configure the storage engine on a
  per-index basis when creating an index. 
post: |
  The ``storageEngine`` option should take the following form:

  .. code-block:: javascript

     storageEngine: { <storage-engine-name>: <options> }

  Storage engine configuration options specified when creating indexes are
  validated and logged to the :term:`oplog` during replication to
  support replica sets with members that use different storage
  engines.

  .. versionadded:: 3.0

interface: method
name: storageEngine
operation: db.collection.createIndex
optional: true
type: document
...
