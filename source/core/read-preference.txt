.. index:: read preference
.. index:: read preference; background
.. _read-preference:
.. _replica-set-read-preference:
.. _replica-set-read-preference-background:

===============
Read Preference
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/introduction-read-preference.rst

Read preference consists of the :ref:`read preference mode
<read-pref-modes-summary>`, and optionally, a :ref:`tag set
<replica-set-read-preference-tag-sets>` and
:ref:`replica-set-read-preference-max-staleness`.

.. _read-pref-summary:
.. _read-pref-modes-summary:

.. include:: /includes/read-preference-modes-table.rst

Behavior
--------

- All read preference modes except :readmode:`primary` may return
  stale data because :term:`secondaries <secondary>` replicate
  operations from the primary in an asynchronous process.
  [#edge-cases-2-primaries]_ Ensure that your application can
  tolerate stale data if you choose to use a non-:readmode:`primary`
  mode.

- Read preference does not affect the visibility of data;
  i.e. clients can see the results of writes before they are
  acknowledged or have propagated to a majority of replica set
  members. For details, see
  :doc:`/core/read-isolation-consistency-recency`.

- Read preference does not affect
  :ref:`causal consistency <causal-consistency>`. The
  :ref:`causal consistency guarantees <sessions>` provided by
  causally consistent sessions for read operations with
  :readconcern:`"majority"` read concern and write	operations with
  :writeconcern:`"majority"` write concern hold across all members
  of the MongoDB deployment.	

.. _replica-set-read-preference-modes:

Read Preference Modes
---------------------

.. readmode:: primary

   All read operations use only the current replica set
   :term:`primary`. [#edge-cases-2-primaries]_ This is the default read
   mode. If the primary is unavailable, read operations produce an
   error or throw an exception.

   The :readmode:`primary` read preference mode is not compatible with
   read preference modes that use :ref:`tag sets
   <replica-set-read-preference-tag-sets>` or :ref:`maxStalenessSeconds 
   <replica-set-read-preference-max-staleness>`. 
   If you specify tag sets or a ``maxStalenessSeconds`` value
   with :readmode:`primary`, the driver will produce an error.

   .. include:: /includes/extracts/transactions-read-pref.rst

.. readmode:: primaryPreferred

   In most situations, operations read from the :term:`primary` member
   of the set. However, if the primary is unavailable, as is the case
   during :term:`failover` situations, operations read from :term:`secondary`
   members that satisfy the read preference's ``maxStalenessSeconds`` and
   tag sets.

   .. include:: /includes/extracts/maxStaleness-primaryPreferred.rst

   .. include:: /includes/extracts/tagSets-primaryPreferred.rst

   .. include:: /includes/extracts/maxStaleness-and-tagSets-general.rst

   .. include:: /includes/extracts/secondary-reads-stale-data-primaryPreferred.rst
   
.. readmode:: secondary

   Operations read *only* from the :term:`secondary` members of the set.
   If no secondaries are available, then this read operation produces an
   error or exception.

   Most replica sets have at least one secondary, but there are
   situations where there may be no available secondary. For example, a
   replica set with a :term:`primary`, a secondary, and an
   :term:`arbiter` may not have any secondaries if a member is in
   recovering state or unavailable.

   .. include:: /includes/extracts/maxStaleness-secondary.rst
   
   .. include:: /includes/extracts/tagSets-secondary.rst
   
   .. include:: /includes/extracts/maxStaleness-and-tagSets-general.rst
   
   .. include:: /includes/extracts/secondary-reads-stale-data-secondary.rst

.. readmode:: secondaryPreferred

   In most situations, operations read from :term:`secondary` members,
   but in situations where the set consists of a single
   :term:`primary` (and no other members), the read operation will use
   the replica set's primary.

   .. include:: /includes/extracts/maxStaleness-secondaryPreferred.rst

   .. include:: /includes/extracts/tagSets-secondaryPreferred.rst

   .. include:: /includes/extracts/maxStaleness-and-tagSets-general.rst

   .. include:: /includes/extracts/secondary-reads-stale-data-secondaryPreferred.rst

.. readmode:: nearest

   The driver reads from a member whose network latency falls within
   the acceptable latency window. Reads in the :readmode:`nearest` mode
   do not consider whether a member is a primary or secondary when
   routing read operations: primaries and secondaries are treated
   equivalently. The read preference :ref:`member selection
   <replica-set-read-preference-behavior-nearest>` documentation
   describes the process in detail.

   Set this mode to minimize the effect of network latency
   on read operations without preference for current or stale data.

   When the read preference includes a :ref:`maxStalenessSeconds value
   <replica-set-read-preference-max-staleness>`, the client estimates
   how stale each secondary is by comparing the secondary's last write
   to that of the primary, if available, or to the secondary with the
   most recent write if there is no primary. The client will then
   filter out any secondary whose estimated lag is greater than
   ``maxStalenessSeconds`` and randomly direct the read to a remaining
   member (primary or secondary) whose network latency falls within the
   :ref:`acceptable latency window
   <replica-set-read-preference-behavior-nearest>`.

   If you specify a :ref:`tag set
   <replica-set-read-preference-tag-sets>`, the client attempts to
   find a replica set member that matches the specified tag sets and
   directs reads to an arbitrary member from among the :ref:`nearest
   group <replica-set-read-preference-behavior-nearest>`.

   .. include:: /includes/extracts/maxStaleness-and-tagSets-nearest.rst

   .. include:: /includes/extracts/secondary-reads-stale-data-nearest.rst

   .. note::

      All operations read from a member of the nearest group of the
      replica set that matches the specified read preference mode. The
      :readmode:`nearest` mode differs in that it prefers low latency
      reads over a member's :term:`primary` or :term:`secondary` status.

      For :readmode:`nearest`, the client assembles a list of
      acceptable hosts based on ``maxStalenessSeconds`` and tag sets
      and then narrows that list to the host with the shortest ping
      time and all other members of the set that are within the "local
      threshold," or acceptable latency. See
      :ref:`replica-set-read-preference-behavior-nearest` for more
      information.

.. seealso::

   To learn about use cases for specific read preference settings,
   see :ref:`read-preference-use-cases`. 

Configure Read Preference
-------------------------

When using a MongoDB driver, you can specify the read preference when
:ref:`connecting to the replica set or sharded cluster
<connections-read-preference>`. For example, see :ref:`connection
string <connections-read-preference>`. You can also specify the read
preference at a more granular level. For details, see your driver's
:ecosystem:`api documentation</drivers>`.

For a given read preference, the MongoDB drivers use the same
:ref:`member selection logic
<replica-set-read-preference-behavior-member-selection>`.

When using the :binary:`mongo` shell, see :method:`cursor.readPref()`
and :method:`Mongo.setReadPref()`.  For example:

.. code-block:: javascript

   db.collection.find({}).readPref( "secondary",  [ { "region": "South" } ] )

Read Preference and Transactions
--------------------------------

.. include:: /includes/extracts/transactions-read-pref.rst

Additional Considerations
-------------------------

For :doc:`aggregation pipeline </core/aggregation-pipeline>`
operations that include the :pipeline:`$out` or :pipeline:`$merge`
stages, the pipeline runs on the :term:`primary` member regardless of
read preference setting.

For :dbcommand:`mapReduce` operations, only "inline"
:dbcommand:`mapReduce` operations that do not write data support read
preference. Otherwise, :dbcommand:`mapReduce` operations run on the
:term:`primary` member.

.. [#edge-cases-2-primaries]

   .. include:: /includes/footnote-two-primaries-edge-cases.rst

.. toctree::
   :titlesonly:
   :hidden:
   
   Tag Sets </core/read-preference-tags>
   maxStalenessSeconds </core/read-preference-staleness>
   /core/read-preference-use-cases
