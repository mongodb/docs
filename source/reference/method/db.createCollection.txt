=====================
db.createCollection()
=====================

.. default-domain:: mongodb

Definition
----------

.. method:: db.createCollection(name, options)

   Creates a new collection explicitly.

   Because MongoDB creates a collection implicitly when the collection
   is first referenced in a command, this method is used primarily for
   creating new collections that use specific options. For example, you use
   :method:`db.createCollection()` to create a :term:`capped collection
   <capped collection>`, or to create a new collection that uses
   :doc:`document validation </core/document-validation>`. :method:`db.createCollection()` is also
   used to pre-allocate space for an ordinary collection.

   The :method:`db.createCollection()` method has the following prototype form:

   .. code-block:: javascript

      db.createCollection(<name>, { capped: <boolean>,
                                    autoIndexId: <boolean>,
                                    size: <number>,
                                    max: <number>,
                                    storageEngine: <document>,
                                    validator: <document>,
                                    validationLevel: <string>,
                                    validationAction: <string> } )

   The :method:`db.createCollection()` method has the following parameters:

   .. include:: /includes/apiargs/method-db.createCollection-param.rst

   The ``options`` document creates a capped collection, preallocates
   space in a new ordinary collection, or specifies :doc:`document validation
   </core/document-validation>` criteria. The ``options`` document contains
   the following fields:

   .. include:: /includes/apiargs/method-db.createCollection-options-param.rst

Examples
--------

Create a Capped Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~

Capped collections
have maximum size or document counts that prevent them from growing
beyond maximum thresholds. All capped collections must specify a maximum
size and may also specify a maximum document count. MongoDB removes
older documents if a collection reaches the maximum size limit before it
reaches the maximum document count. Consider the following example:

.. code-block:: javascript

   db.createCollection("log", { capped : true, size : 5242880, max : 5000 } )

This command creates a collection named ``log`` with a maximum size of 5
megabytes and a maximum of 5000 documents.

The following command simply pre-allocates a 2-gigabyte, uncapped
collection named ``people``:

.. code-block:: javascript

   db.createCollection("people", { size: 2147483648 } )

This command provides a wrapper around the database command
:dbcommand:`create`. See :doc:`/core/capped-collections` for more
information about capped collections.

Create a Collection with Document Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2

Collections with validation compare each inserted or updated document
against the criteria specified in the ``validator`` option. Depending
on the ``validationLevel`` and ``validationAction``, MongoDB either
returns a warning, or refuses to insert or update the document if it
fails to meet the specified criteria.

The following example creates a ``contacts`` collection with a validator
that specifies that inserted or updated documents should match at least
one of three following conditions:

- the ``phone`` field is a string
- the ``email`` field matches the regular expression
- the ``status`` field is either ``Unknown`` or ``Incomplete``.

.. code-block:: javascript

   db.createCollection( "contacts",
      {
         validator: { $or:
            [
               { phone: { $type: "string" } },
               { email: { $regex: /@mongodb\.com$/ } },
               { status: { $in: [ "Unknown", "Incomplete" ] } }
            ]
         }
      }
   )

With the validator in place, the following insert operation fails validation:

.. code-block:: javascript

   db.contacts.insert( { name: "Amanda", status: "Updated" } )

The method returns the error in the ``WriteResult``:

.. code-block:: javascript

   WriteResult({
      "nInserted" : 0,
      "writeError" : {
         "code" : 121,
         "errmsg" : "Document failed validation"
      }
   })

.. _create-collection-storage-engine-options:

Specify Storage Engine Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.0

You can specify collection-specific storage engine configuration
options when you create a collection with
:method:`db.createCollection()`. Consider the following operation:

.. code-block:: javascript

   db.createCollection( 
      "users", 
      { storageEngine: { wiredTiger: { configString: "<option>=<setting>" } } }
   )

This operation creates a new collection named ``users`` with a
specific configuration string that MongoDB will pass to the
``wiredTiger`` storage engine. See the `WiredTiger documentation of
collection level options <http://source.wiredtiger.com/2.4.1/struct_w_t___s_e_s_s_i_o_n.html#a358ca4141d59c345f401c58501276bbb>`_
for specific ``wiredTiger`` options.
