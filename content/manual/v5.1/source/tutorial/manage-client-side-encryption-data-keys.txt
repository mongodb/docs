===========================
Manage Data Encryption Keys
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. versionadded:: 4.2

Client-side field level encryption uses data encryption keys for
encryption and decryption. The :binary:`~bin.mongosh` helper method
:method:`getKeyVault()` returns a key vault object for creating,
modifying, and deleting data encryption keys. 

This page documents client-side field level encryption using
:binary:`~bin.mongosh`, and does *not* refer to any official MongoDB
4.2+ compatible driver. See the relevant :ref:`documentation
<field-level-encryption-drivers>` for driver-specific data encryption
key management methods and syntax.

.. _field-level-encryption-data-key-create:

Create a Data Encryption Key
----------------------------

The following procedure uses :binary:`~bin.mongosh` to create a
data encryption key for use with client-side field level encryption and
decryption. For guidance on data encryption key management using a
4.2+ compatible driver, see the `driver documentation
<https://docs.mongodb.com/drivers/>`__ instead.

Use the tabs below to select the :abbr:`KMS (Key Management Service)`
appropriate for your deployment:

.. tabs::

   .. tab:: Amazon Web Services KMS
      :tabid: aws-kms

      .. include:: /includes/steps/csfle-shell-aws-create-key.rst

   .. tab:: Azure Key Vault
      :tabid: azure-vault
      
      .. include:: /includes/steps/csfle-shell-azure-create-key.rst

   .. tab:: Google Cloud KMS
      :tabid: gcp-kms

      .. include:: /includes/steps/csfle-shell-gcp-create-key.rst

   .. tab:: Local Keyfile
      :tabid: local-keyfile

      .. include:: /includes/steps/csfle-shell-local-create-key.rst

.. _field-level-encryption-data-key-manage:

Manage a Data Encryption Key's Alternate Name
---------------------------------------------

The following procedure uses :binary:`~bin.mongosh` to manage
the alternate names of a data encryption key. For guidance on data
encryption key management using a 4.2+ compatible driver, see the
`driver documentation <https://docs.mongodb.com/drivers/>`__ instead.

If you are still within your configured :binary:`~bin.mongosh` session
from the :ref:`field-level-encryption-data-key-create` steps above, you
can skip directly to step 5.

Use the tabs below to select the :abbr:`KMS (Key Management Service)`
appropriate for your deployment:

.. tabs::

   .. tab:: Amazon Web Services KMS
      :tabid: aws-kms

      .. include:: /includes/steps/csfle-shell-aws-manage-key-altname.rst

   .. tab:: Azure Key Vault
      :tabid: azure-vault
      
      .. include:: /includes/steps/csfle-shell-azure-manage-key-altname.rst

   .. tab:: Google Cloud KMS
      :tabid: gcp-kms

      .. include:: /includes/steps/csfle-shell-gcp-manage-key-altname.rst

   .. tab:: Local Keyfile
      :tabid: local-keyfile

      .. include:: /includes/steps/csfle-shell-local-manage-key-altname.rst

.. _field-level-encryption-data-key-delete:

Remove a Data Encryption Key
----------------------------

.. warning::

    Deleting a data encryption key renders all fields encrypted using
    that key as permanently unreadable.

The following procedure uses :binary:`~bin.mongosh` to remove a
data encryption key from the key vault. For guidance on data encryption
key management using a 4.2+ compatible driver, see the
`driver documentation <https://docs.mongodb.com/drivers/>`__ instead.

If you are still within your configured :binary:`~bin.mongosh` session
from the :ref:`field-level-encryption-data-key-create` steps above, you
can skip directly to step 5.

Use the tabs below to select the :abbr:`KMS (Key Management Service)`
appropriate for your deployment:

.. tabs::

   .. tab:: Amazon Web Services KMS
      :tabid: aws-kms

      .. include:: /includes/steps/csfle-shell-aws-delete-key.rst

   .. tab:: Azure Key Vault
      :tabid: azure-vault
      
      .. include:: /includes/steps/csfle-shell-azure-delete-key.rst

   .. tab:: Google Cloud KMS
      :tabid: gcp-kms

      .. include:: /includes/steps/csfle-shell-gcp-delete-key.rst

   .. tab:: Local Keyfile
      :tabid: local-keyfile

      .. include:: /includes/steps/csfle-shell-local-delete-key.rst

.. _field-level-encryption-data-key-retrieve:

Retrieve an Existing Data Encryption Key
----------------------------------------

To retrieve an existing data encryption key document from the key vault,
either:

- Use :method:`getKey() <KeyVault.getKey()>` to retrieve the created
  key by its :abbr:`UUID (Universally unique identifier)`, or
- Use :method:`getKeyByAltName() <KeyVault.getKeyByAltName()>` to
  retrieve the key by its alternate name, if specified. For more
  information on working with alternate names, see
  :ref:`field-level-encryption-data-key-manage`.

If providing the data encryption key to an official 4.2+ compatible
driver in order to configure
:ref:`automatic client-side field level encryption
<field-level-encryption-json-schema>`, you must use the ``base64``
representation of the UUID string.

You can run the following operation in :binary:`~bin.mongosh` to convert
a ``UUID`` hexadecimal string to its ``base64`` representation:

.. code-block:: javascript

   UUID("b4b41b33-5c97-412e-a02b-743498346079").base64()

Supply the ``UUID`` of your own data encryption key to this command.
