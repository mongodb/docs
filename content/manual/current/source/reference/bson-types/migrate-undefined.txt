.. _migrate-undefined-data-types:

==================================
Migrate Undefined Data and Queries
==================================

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/null-undefined-query-match.rst

To account for this behavior change, you can:

- :ref:`null-migrate-remove-undefined-values`.

- :ref:`null-migrate-update-values`.

- :ref:`null-migrate-update-queries`.

.. note::

   ``undefined`` is a deprecated BSON type. Recent versions of the
   MongoDB Shell and drivers automatically convert ``undefined`` values
   to ``null`` when performing inserts and updates. The guidance on this
   page applies to deployments that have ``undefined`` values from older
   driver versions or legacy ``mongo`` shell.

.. _null-migrate-remove-undefined-values:

Remove Undefined Fields
-----------------------

If you don't need to keep fields with ``undefined`` values in your
documents, you can remove those fields. MongoDB's flexible data model
means your collection's document fields do not need to be consistent, so
you can remove a particular field from a subset of documents.

How to remove undefined fields from your documents depends on whether
you know the field name to remove. If you know the field name, the
operation is more performant because it can use an index.

See either:

- :ref:`null-migrate-remove-undefined-values-known`
- :ref:`null-migrate-remove-undefined-values-unknown`

.. _null-migrate-remove-undefined-values-known:

Remove Field with Known Name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you know the name of the field that contains ``undefined`` values
that you want to remove, use the following example. The example updates
the ``people`` collection to remove:

- The ``name`` field if its value is the scalar value ``undefined``.
- ``undefined`` array elements in the ``name`` field.

.. code-block:: javascript

   db.people.updateMany(
      { name: { $type: "undefined" } },
      [ {
         $set: {
            "name": {
               $cond: {
                  // When "name" is an array, convert { name: [ "Alice", undefined ] }
                  // to { name: [ "Alice" ] }
                  if: {
                     $eq: [ { $type: "$name" }, "array" ]
                  },
                  then: {
                     $filter: {
                        input: "$name",
                        cond: {
                           $not: { $eq: [ { $type: "$$this" }, "undefined" ] }
                        }
                     },
                  },
                  // When "name" is scalar undefined, remove it
                  else: "$$REMOVE"
               }
            }
         }
      } ]
   )

After you run the operation, the ``people`` collection contains these
documents:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 3-4

   [
      { _id: 1, name: null },
      { _id: 2 },
      { _id: 3, name: [ "Gabriel" ] }
      { _id: 4, names: [ "Alice", "Charu" ] }
   ]

.. _null-migrate-remove-undefined-values-unknown:

Remove Fields with Unknown Names
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you don't know which fields contain ``undefined`` values, use the
following example to remove all ``undefined`` top-level fields.

.. include:: /includes/migrate-null-values-no-index.rst

The following example removes top-level document fields from the
``people`` collection where the value is ``undefined``:

.. code-block:: javascript

   db.people.updateMany(
      { },
      [ {
         $replaceWith: {
            // Detect undefined top-level fields under the root and remove them
            $arrayToObject: {
               $filter: {
                  input: { $objectToArray: "$$ROOT" },
                  cond: {
                     $not: { $eq: [ { $type: "$$this.v" }, "undefined" ] }
                  }
               }
            }
         }
      } ]
   )

After you run the operation, the ``people`` collection contains these
documents:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 3

   [
      { _id: 1, name: null },
      { _id: 2 },
      { _id: 3, name: [ "Gabriel", undefined ] }
      { _id: 4, names: [ "Alice", "Charu" ] }
   ]

.. include:: /includes/migrate-null-values-top-level-fields.rst

.. _null-migrate-update-values:

Update Undefined Values to Null
-------------------------------

You can update ``undefined`` data values to the ``null`` data type. Use
this approach to migrate your data off of the deprecated ``undefined``
data type while retaining your document fields.

How to update undefined fields depends on whether you know the field
name to update. If you know the field name, the operation is more
performant because it can use an index.

See either:

- :ref:`null-migrate-update-undefined-values-known`
- :ref:`null-migrate-update-undefined-values-unknown`

.. _null-migrate-update-undefined-values-known:

Update Field with Known Name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you know the name of the field that contains ``undefined`` values
that you want to set to ``null``, use the following example. The example
updates the ``people`` collection to set the following values to
``null``:

- The ``name`` field if its value is the scalar value ``undefined``.
- ``undefined`` array elements that appear in the ``name`` field.

.. code-block:: javascript

   db.people.updateMany(
      { name: { $type: "undefined" } },
      [ {
         $set: {
            "name": {
               $cond: {
                  // When "name" is an array, convert { name: [ "Alice", undefined ] }
                  // to { name: [ "Alice", null ] }
                  if: {
                     $eq: [ { $type: "$name" }, "array" ]
                  },
                  then: {
                     $map: {
                        input: "$name",
                        in: { 
                           $cond: {
                              if: { $eq: [ { $type: "$$this" }, "undefined" ] },
                              then: null,
                              else: "$$this"
                           }
                        }
                     },
                  },
                  // When "name" is the scalar undefined, convert to null
                  else: null
               }
            }
         }
      } ]
   )

After you run the operation, the ``people`` collection contains these
documents:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 3-4

   [
      { _id: 1, name: null },
      { _id: 2, name: null },
      { _id: 3, name: [ "Gabriel", null ] }
      { _id: 4, names: [ "Alice", "Charu" ] }
   ]

.. _null-migrate-update-undefined-values-unknown:

Update Fields with Unknown Names
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you don't know which fields contain ``undefined`` values, use the
following example to set all ``undefined`` top-level fields to ``null``.

.. include:: /includes/migrate-null-values-no-index.rst

The following example updates the ``people`` collection to set
``undefined`` top-level document fields to ``null``:

.. code-block:: javascript

   db.people.updateMany(
      { },
      [ {
         $replaceWith: {
            // Detect undefined top-level fields under the root and replace them with null
            $arrayToObject: {
               $map: {
                  input: { $objectToArray: "$$ROOT" },
                  in: {
                     $cond: {
                        if: { $eq: [ { $type: "$$this.v" }, "undefined" ] },
                        then: { k: "$$this.k", v: null },
                        else: "$$this"
                     }
                  }
               }
            }
         }
      } ]
   )

After you run the operation, the ``people`` collection contains these
documents:

.. code-block:: javascript
   :copyable: false
   :emphasize-lines: 3

   [
      { _id: 1, name: null },
      { _id: 2, name: null },
      { _id: 3, name: [ "Gabriel", undefined ] }
      { _id: 4, names: [ "Alice", "Charu" ] }
   ]

.. include:: /includes/migrate-null-values-top-level-fields.rst

.. _null-migrate-update-queries:

Update Queries to Match Undefined Values
----------------------------------------

If you can't migrate your data types from ``null`` to ``undefined``, you
can rewrite your queries to match undefined values. If you use this
approach, your data will still contain the deprecated ``undefined`` BSON
type.

To have queries for ``null`` match undefined values, add a query
predicate that explicitly matches the ``undefined`` type. For example,
the following query matches documents where ``name`` is ``undefined``,
``null``, or missing:

.. code-block:: javascript

   db.people.find( { 
      $or: [
         { name: null },
         { name: { $type: "undefined" } }
      ]
   } )

The query returns all documents in the ``people`` collection:

.. code-block:: javascript
   :copyable: false

   [
      { _id: 1, name: null },
      { _id: 2, name: undefined },
      { _id: 3, name: [ "Gabriel", undefined ],
      { _id: 4, names: [ "Alice", "Charu" ] }
   ]

Learn More
----------

- :ref:`bson-types`
- :query:`$type`
- :expression:`$ifNull`
