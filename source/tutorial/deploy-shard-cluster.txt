:orphan:

.. _sharding-procedure-setup:

========================
Deploy a Sharded Cluster
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

This tutorial involves creating a new sharded cluster that consists of a
:binary:`~bin.mongos`, the config server replica set, and two shard replica sets.

For instructions specific to sharding a collection, see
:ref:`deploy-hashed-sharded-cluster-shard-collection` or
:ref:`deploy-ranged-sharded-cluster-shard-collection`.

Considerations
--------------

Connectivity
~~~~~~~~~~~~

Each member of a sharded cluster must be able to connect to *all* other
members in the cluster. This includes all shards and config servers.
Ensure that network and security systems, including all interface and
firewalls, allow these connections.

CloudManager and OpsManager
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are currently using or are planning to use Cloud Manager or
Ops Manager, consider using their built-in features for
deploying a :term:`sharded cluster`.

See ``Deploy a Sharded Cluster`` in the
:mms-docs:`Cloud Manager manual</tutorial/deploy-sharded-cluster>` or in the
:opsmgr:`Ops Manager manual</tutorial/deploy-sharded-cluster>`.

Operating System
~~~~~~~~~~~~~~~~

This tutorial uses the :binary:`~bin.mongod` and :binary:`~bin.mongos`
programs. Windows users should use the :binary:`~bin.mongod.exe` and
:binary:`~bin.mongos.exe` programs instead.

Security
~~~~~~~~

This tutorial does *not* include the required steps for configuring
:doc:`/core/security-internal-authentication` or :doc:`/core/authorization`.
See :doc:`/tutorial/deploy-sharded-cluster-with-keyfile-access-control` for a
tutorial on deploying a sharded cluster with a
:ref:`keyfile <internal-auth-keyfile>`.

In production environments, sharded clusters should employ at
minimum :doc:`/core/security-x.509` security for internal authentication
and client access.

For details on using x.509 for internal authentication, see
:doc:`/tutorial/configure-x509-member-authentication`.

For details on using x.509 for client authentication, see
:doc:`/tutorial/configure-x509-client-authentication`.

.. note::

   Enabling internal authentication also enables
   :doc:`/core/authorization`.

Host Identifier
~~~~~~~~~~~~~~~

If you use either ``localhost`` or ``127.0.0.1`` as the hostname portion of
any host identifier, you *must* use that identifier as the host setting
for any other MongoDB component in the cluster.

For example, the :method:`sh.addShard()` method takes a ``host`` parameter for
the hostname of the target shard. If you set ``host`` to ``localhost``, you
must then use ``localhost`` as the host for all other shards in the cluster.

.. _deploy-sharded-cluster:
.. _sharding-deploy-sharded-cluster:

Deploy Sharded Cluster
----------------------

.. _sharding-setup-start-cfgsrvr:

Create the Config Server Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following steps deploys a config server replica set.

For a production deployment, deploy a config server replica set with at
least three members. For testing purposes, you can create a
single-member replica set.

.. note::

   The config server replica set must not use the same name as any of the
   shard replica sets.

.. include:: /includes/steps/deploy-sharded-cluster-config-server-noauth.rst

Once the config server replica set (CSRS) is initiated and up, proceed
to creating the shard replica sets.

Create the Shard Replica Sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For a production deployment, use a replica set with at least three
members. For testing purposes, you can create a single-member replica
set.

.. note::

   Shard replica sets must not use the same name as the config server replica
   set.

.. include:: /includes/steps/deploy-sharded-cluster-shard-replica-noauth.rst

.. _sharding-setup-start-mongos:

Connect a ``mongos`` to the Sharded Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/deploy-sharded-cluster-connect-noauth.rst

.. _sharding-setup-add-shards:

Add Shards to the Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~

Use the :method:`sh.addShard()` method to add each shard to the cluster. If
the shard is a replica set, specify the name of the replica set and specify a
member of the set. In production deployments, *all* shards should be replica
sets.

The following operation adds a single shard replica set to the cluster:

.. code-block:: javascript

   sh.addShard( "<replSetName>/s1-mongo1.example.net:27017")

The following operation is an example of adding a standalone :binary:`~bin.mongod`
shard to the cluster:

.. code-block:: javascript

   sh.addShard( "s1-mongo1.example.net:27017")

Repeat these steps until the cluster includes all shards.

.. _sharding-setup-enable-sharding:

Enable Sharding for a Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To proceed, you must be connected to a :binary:`~bin.mongos` associated to the
target sharded cluster.

Before you can shard a collection, you must enable sharding for the
collection's database. Enabling sharding for a database does not redistribute
data but make it possible to shard the collections in that database.

Once you enable sharding for a database, MongoDB assigns a :term:`primary
shard` for that database where MongoDB stores all data in that
database.

Use the :method:`sh.enableSharding()` method to enable sharding on the target
database.

.. code-block:: javascript

   sh.enableSharding("<database>")

.. _sharding-setup-shard-collection:

Shard a Collection
------------------

This section contains an overall description of the sharding process.

For instructions specific to :ref:`sharding-ranged` sharding,
see :ref:`deploy-ranged-sharded-cluster-shard-collection`.

For instructions specific to :ref:`sharding-hashed` sharding,
see :ref:`deploy-hashed-sharded-cluster-shard-collection`

To proceed, you must be connected to a :binary:`~bin.mongos` associated to the
target sharded cluster.

To shard a collection, use the :method:`sh.shardCollection()` method. You must
specify the full namespace of the collection and a document containing the
shard key. The database must have sharding
:ref:`enabled<deploy-ranged-sharded-cluster-shard-database>`.

Your selection of shard key affects the efficiency of sharding, as well as
your ability to take advantage of certain sharding features such as
:ref:`zones <zone-sharding>`. See the selection considerations listed
in the :ref:`sharding-shard-key-selection`.

If the collection already contains data, you must create an index on the
:term:`shard key` using the :method:`db.collection.createIndex()` method before
using :method:`~sh.shardCollection()`.

If the collection is empty, MongoDB creates the index as part of
:method:`sh.shardCollection()`.

The following operation shards the target collection:

.. code-block:: javascript

   sh.shardCollection("<database>.<collection>", { <key> : <direction> } )
