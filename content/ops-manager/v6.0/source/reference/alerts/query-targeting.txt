.. meta::
   :robots: noindex, nosnippet 

.. _query-targeting-resolution:

================
Fix Query Issues
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

``Query Targeting`` alerts indicate inefficient query or queries. 

Alert Conditions
----------------

You can configure the following alert conditions in the project-level 
:ref:`alert settings <configure-alerts>` page to trigger alerts.

:ref:`Query Targeting: Scanned / Returned <query-targeting>` occurs if the
number of index keys examined to fulfill a query relative to the actual
number of returned documents meets or is above a certain threshold.

:ref:`Query Targeting: Scanned Objects / Returned <query-targeting>` 
occurs if the number of documents examined to fulfill a query relative 
to the actual number of returned documents meets or is above a certain 
threshold.

Common Triggers
---------------

- No index that supports a given query or queries.

- Existing index can only partially support a query or queries.

Fix the Immediate Problem
-------------------------

The :ref:`Performance Advisor <performance-advisor>` provides the
easiest and quickest way to create an index. The Performance Advisor
monitors queries that MongoDB considers slow and recommends indexes to
improve performance.

Click :guilabel:`Create Index` on a slow query for instructions on how
to create the recommended index.

.. note::
    
   It is possible to receive a Query Targeting alert for an
   inefficient query without receiving index suggestions from the
   Performance Advisor if the query exceeds the slow query threshold and
   the ratio of scanned to returned documents is greater than the
   threshold specified in the alert.

In addition, you can use the following resources to determine which 
query generated the alert:

- The :ref:`Real-Time Performance Panel <monitor-cluster-metrics>`
  monitors and displays current network traffic and database operations
  on machines hosting MongoDB in your |service| clusters.

- The :ref:`MongoDB logs <mongodb-logs>` maintain an account of 
  activity,
  including queries, for each ``mongod`` instance in your |service|
  clusters.

- The :manual:`cursor.explain() </reference/method/cursor.explain/>`
  command for {+mongosh+} provides performance details for
  all queries.

- The :manual:`Data Profiler 
  </tutorial/manage-the-database-profiler>`
  records operations that |service| considers slow when compared to
  average execution time for all operations on your cluster.

  .. note::
     
     Enabling the Database Profiler incurs a performance overhead.


Implement a Long-Term Solution
------------------------------

To learn more about query performance, see:

- :manual:`MongoDB Indexing Strategies </applications/indexes>`
- :manual:`Analyze Query Plan </tutorial/analyze-query-plan/>`

Monitor Your Progress
---------------------

|mms| provides two methods to visualize query targeting:

- Query Targeting
  :ref:`metrics <monitor-cluster-metrics>`, which highlight high ratios
  of objects scanned to objects returned.

- The :ref:`Profiler <profile-databases>`, which describes specific
  inefficient queries executed on the cluster.
