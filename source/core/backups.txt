==========================
Backing up MongoDB Systems
==========================

.. default-domain:: mongodb

.. contents::
   :backlinks: none
   :local:

A backup plan is an important part of any operational disaster recovery
plan. A good backup plan can bring services back up and running with
minimal data loss as quickly as possible. A good backup plan also
involves *testing* the recovery process before it's needed, to make
future recovery a predictable process.

MongoDB supports features like :term:`replica sets <replica set>`
and :term:`journaling`, that :doc:`make it possible to recover
transparently </tutorials/maintain-valid-data-files>` from many
types of disasters without downtime or data loss. In some cases,
an appropriate backup solution may simply be to expand your usage of
MongoDB's native replication features.

All deployments should use replication and journaling, regardless
of backup plan. But replication and journaling may not always be
sufficient. Your application may require a more traditional approach
to backups.

MongoDB provides tools and procedures to automate appropriate backups
of the state of your data at a known time; to confirm that your
backups are complete and correct; and to restore backed up data to
a fresh server in case of need.

When designing a backup plan, bear in mind that to produce any backup
requires CPU cycles and other computing resources. Schedule backups
during times of low application load. Look for ways to reduce the
total size of backups by backing up less critical data less frequently.

Consider the type of database to back up. Replica sets and standalone
instances are more straightforward to back up than sharded clusters. In
addition to backing up data, sharded cluster backups must also include
the contents of the config servers, as well as the scripts that will
recreate the cluster and restore the data.

Consider the type of disaster that may necessitate recovering from
backups. Should the backup hardware run on different power lines than
the main servers? Should they be stored in a different building, or
perhaps in an even more distant location? Choose the backup approach
that best meets these needs.

MMS Backups
-----------

.. include:: /includes/fact-mms-backup-service-notice.rst

Filesystem Snapshots
--------------------

Use snapshots to make a backup of a complete filesystem,
including MongoDB data and any other data that may reside on that
filesystem. Snapshots use a copy-on-write approach, to track data
writes as they occur during the backup.

A benefit of using filesystem snapshots is that they are faster and
use fewer computing resources than other approaches. The drawbacks
are each of the constraints and requirements that follow:

:doc:`MongoDB snapshots
</tutorial/backup-and-restore-with-filesystem-snapshots>` require
journaling to be enabled on each :program:`mongod` instance being
backed up. Journaling ensures that the data files remain valid while
being copied into backups.

If you intend to allow application writes during the snapshot
operation, the journal file must be on the same filesystem as the data
files. [XXX why?] Otherwise, you must disable application writes for
the duration of the snapshot.

Not all filesystem types support taking snapshots. Before deciding on
snapshots as part of any backup strategy, ensure that the underlying
filesystem supports snapshots.

Snapshots are most easily made for :term:`replica sets
<replica set>` and standalone :program:`mongod` instances,
because in those cases the database files sit on just a single
filesystem. Making a :doc:`snapshot of a full sharded cluster
</tutorial/backup-sharded-cluster-with-filesystem-snapshots>` is more
complex, because data in sharded clusters can migrate from one shard to
another. You can still snapshots a sharded cluster, but you must turn
off the :term:`balancer` during the snapshot operation. Otherwise chunk
migrations could result in a single chunk showing up in the snapshots
of two different filesystems, rendering the backup files invalid.

``mongodump``
-------------

While filesystem snapshots rely largely on third-party tools to
create the backup, you may also :doc:`create a backup with mongodump
</tutorial/backup-and-restore-with-binary-database-dumps>`. The
:program:`mongodump` tool uses MongoDB's native querying
operations to extract collection data from data files. By default,
:program:`mongodump` output does not represent a specific point-in-time
backup. If you need to back up data relative to a specific point
in time, :program:`mongodump` supports using the :option:`--oplog
<mongodump --oplog>` option to ensure that the backup matches the
state of the database at the time :program:`mongodump` terminates.

A benefit of using :program:`mongodump` is its ability to back
up only the collections you want to back up, rather than the whole
filesystem. This allows for smaller backups and more efficient use of
computing resources. A related benefit is that :program:`mongorestore`
can restore subsets of data rather than the full data set.

The drawback of using :program:`mongodump` is that even when
restricting a backup to only certain collections, the operation may use
more computing resources than a filesystem snapshot. Another drawback
is that while :program:`mongodump` can be used to back up a replica
set, it should never be used to back up a standalone :program:`mongod`
instance. [XXX why not?]

Testing and Restoring Backups
-----------------------------

Regardless of whether you ever need to invoke a disaster recovery
plan, you should test your backups using whatever disaster recovery
procedure you develop. This could involve :doc:`restoring a single
replica set </tutorial/restore-replica-set-from-backup>`,
:doc:`restoring just a single shard of a cluster
</tutorial/restore-single-shard>`, or :doc:`restoring a complete
sharded cluster </tutorial/restore-sharded-cluster>`.


