.. _aggregation-pipeline-operator-reference:

===========================
Aggregation Pipeline Stages
===========================

.. default-domain:: mongodb

In the :method:`db.collection.aggregate` method and
:method:`db.aggregate` method, :doc:`pipeline
</core/aggregation-pipeline>` stages appear in an array. Documents pass
through the stages in sequence.

Stages
------

``db.collection.aggregate()`` Stages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All except the :pipeline:`$out`, :pipeline:`$merge`, and :pipeline:`$geoNear` stages can
appear multiple times in a pipeline.

.. include:: /includes/extracts/operators-toc-explanation.rst

.. code-block:: javascript

   db.collection.aggregate( [ { <stage> }, ... ] )

.. include:: /includes/extracts/agg-stages-db.collection.aggregate.rst

For aggregation expression operators to use in the pipeline stages, see
:doc:`/reference/operator/aggregation`.

``db.aggregate()`` Stages
~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in version 3.6, MongoDB also provides the
:method:`db.aggregate` method:

.. code-block:: javascript

   db.aggregate( [ { <stage> }, ... ] )

.. include:: /includes/extracts/agg-stages-db.aggregate.rst

Stages Available for Updates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, you can use the aggregation pipeline for
updates in: 

.. include:: /includes/table-update-with-aggregation-availability.rst

For the updates, the pipeline can consist of the following stages:

.. include:: /includes/list-update-agg-stages.rst

Alphabetical Listing of Stages
------------------------------

.. list-table::
   :widths: 30,70
   :header-rows: 1

   * - Name

     - Description

   * - :pipeline:`$addFields`

     - Adds new fields to documents. Outputs documents that
       contain all existing fields from the input documents and newly
       added fields.
   

   * - :pipeline:`$bucket`

     - Categorizes incoming documents into groups, called buckets, based on
       a specified expression and bucket boundaries.
   

   * - :pipeline:`$bucketAuto`

     - Categorizes incoming documents into a specific number of groups,
       called buckets, based on a specified expression. Bucket
       boundaries are automatically determined in an attempt to evenly
       distribute the documents into the specified number of buckets.
   

   * - :pipeline:`$collStats`

     - Returns statistics regarding a collection or view.
   

   * - :pipeline:`$count`

     - Returns a count of the number of documents at this stage of the
       aggregation pipeline.
   

   * - :pipeline:`$currentOp`

     - Returns information on active and/or dormant operations for the
       MongoDB deployment. To run, use the :method:`db.aggregate()` method.
   

   * - :pipeline:`$facet`

     - Processes multiple :ref:`aggregation pipelines
       <aggregation-pipeline>` within a single stage on the same set of
       input documents. Enables the creation of multi-faceted
       aggregations capable of characterizing data across multiple
       dimensions, or facets, in a single stage.
   

   * - :pipeline:`$geoNear`

     - .. include:: /includes/extracts/geoNear-stage-toc-description.rst
   

   * - :pipeline:`$graphLookup`

     - Performs a recursive search on a collection. To each output document,
       adds a new array field that contains the traversal results of the
       recursive search for that document.
   

   * - :pipeline:`$group`

     - Groups input documents by a specified identifier expression and
       applies the accumulator expression(s), if specified, to each group.
       Consumes all input documents and outputs one document per each
       distinct group. The output documents only contain the identifier
       field and, if specified, accumulated fields.
   

   * - :pipeline:`$indexStats`

     - Returns statistics regarding the use of each index for the
       collection.
   

   * - :pipeline:`$limit`

     - Passes the first *n* documents unmodified to the pipeline
       where *n* is the specified limit. For each input document, outputs
       either one document (for the first *n* documents) or zero documents
       (after the first *n* documents).
   

   * - :pipeline:`$listLocalSessions`

     - Lists all active sessions recently in use on the currently connected
       :binary:`~bin.mongos` or :binary:`~bin.mongod` instance. These sessions may
       have not yet propagated to the ``system.sessions`` collection.
   

   * - :pipeline:`$listSessions`

     - Lists all sessions that have been active long enough to propagate to
       the ``system.sessions`` collection.
   

   * - :pipeline:`$lookup`

     - Performs a left outer join to another collection in the *same*
       database to filter in documents from the "joined" collection for
       processing.
   

   * - :pipeline:`$match`

     - Filters the document stream to allow only matching documents
       to pass unmodified into the next pipeline stage. :pipeline:`$match`
       uses standard MongoDB queries. For each input document, outputs
       either one document (a match) or zero documents (no match).
   

   * - :pipeline:`$merge`

     -
       Writes the resulting documents of the aggregation pipeline to a
       collection. The stage can incorporate (insert new documents, merge
       documents, replace documents, keep existing documents, fail the
       operation, process documents with a custom update pipeline) the
       results into an output collection. To use the :pipeline:`$merge`
       stage, it must be the last stage in the pipeline.
   
       .. versionadded:: 4.2
   

   * - :pipeline:`$out`

     - Writes the resulting documents of the aggregation pipeline to a
       collection. To use the :pipeline:`$out` stage, it must be the last
       stage in the pipeline.
   

   * - :pipeline:`$planCacheStats`

     - Returns :doc:`plan cache </core/query-plans>` information for a
       collection.
   

   * - :pipeline:`$project`

     - Reshapes each document in the stream, such as by adding new fields or
       removing existing fields. For each input document, outputs one
       document.
   

   * - :pipeline:`$redact`

     - Reshapes each document in the stream by restricting the content for
       each document based on information stored in the documents
       themselves. Incorporates the functionality of :pipeline:`$project`
       and :pipeline:`$match`. Can be used to implement field level
       redaction. For each input document, outputs either one or zero
       documents.
   

   * - :pipeline:`$replaceRoot`

     - Replaces a document with the specified embedded document. The
       operation replaces all existing fields in the input document,
       including the ``_id`` field. Specify a document embedded in the
       input document to promote the embedded document to the top level.
   

   * - :pipeline:`$replaceWith`

     - Replaces a document with the specified embedded document. The
       operation replaces all existing fields in the input document,
       including the ``_id`` field. Specify a document embedded in the
       input document to promote the embedded document to the top level.
   
       Alias for :pipeline:`$replaceRoot`.
   

   * - :pipeline:`$sample`

     - Randomly selects the specified number of documents from its input.
   

   * - :pipeline:`$set`

     - Adds new fields to documents. Outputs documents that
       contain all existing fields from the input documents and newly
       added fields.
   
       Alias for :pipeline:`$addFields`.
   

   * - :pipeline:`$skip`

     - Skips the first *n* documents where *n* is the specified skip number
       and passes the remaining documents unmodified to the pipeline. For
       each input document, outputs either zero documents (for the first *n*
       documents) or one document (if after the first *n* documents).
   

   * - :pipeline:`$sort`

     - Reorders the document stream by a specified sort key. Only the order
       changes; the documents remain unmodified. For each input document,
       outputs one document.
   

   * - :pipeline:`$sortByCount`

     - Groups incoming documents based on the value of a specified
       expression, then computes the count of documents in each distinct
       group.

   * - :pipeline:`$unionWith`

     - Performs a union of two collections; i.e. combines pipeline
       results from two collections into a single result set.

       .. versionadded:: 4.4

   * - :pipeline:`$unset`

     - Removes/exludes fields from documents.
   
       Alias for :pipeline:`$project` stage that excludes/removes fields.
   

   * - :pipeline:`$unwind`

     - Deconstructs an array field from the input documents to output a
       document for *each* element. Each output document replaces the array
       with an element value. For each input document, outputs *n* documents
       where *n* is the number of array elements and can be zero for an
       empty array.

.. toctree::
   :titlesonly: 
   :hidden: 

   /reference/operator/aggregation/addFields
   /reference/operator/aggregation/bucket
   /reference/operator/aggregation/bucketAuto
   /reference/operator/aggregation/collStats
   /reference/operator/aggregation/count
   /reference/operator/aggregation/currentOp
   /reference/operator/aggregation/facet
   /reference/operator/aggregation/geoNear
   /reference/operator/aggregation/graphLookup
   /reference/operator/aggregation/group
   /reference/operator/aggregation/indexStats
   /reference/operator/aggregation/limit
   /reference/operator/aggregation/listLocalSessions
   /reference/operator/aggregation/listSessions
   /reference/operator/aggregation/lookup
   /reference/operator/aggregation/match
   /reference/operator/aggregation/merge
   /reference/operator/aggregation/out
   /reference/operator/aggregation/planCacheStats
   /reference/operator/aggregation/project
   /reference/operator/aggregation/redact
   /reference/operator/aggregation/replaceRoot
   /reference/operator/aggregation/replaceWith
   /reference/operator/aggregation/sample
   /reference/operator/aggregation/set
   /reference/operator/aggregation/skip
   /reference/operator/aggregation/sort
   /reference/operator/aggregation/sortByCount
   /reference/operator/aggregation/unionWith
   /reference/operator/aggregation/unset
   /reference/operator/aggregation/unwind

