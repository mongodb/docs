.. meta::
   :robots: nosnippet

.. _read-metadata:
.. _user-objects:

==================
Read User Metadata
==================

.. facet::
   :name: genre 
   :values: tutorial

.. meta:: 
   :description: View metadata associated with a specific App Services user, such as device info, provider info, or user activity.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Atlas App Services represents each application user internally with a
**User Object** that includes a unique ID and additional
metadata that describes the user. You can access user
objects:

- With the App Services UI, CLI, or Admin API to :ref:`find <find-users>` 
  and :ref:`filter <filter-users>` users.
- In the App Services UI by :ref:`viewing user data <view-user-data>`.
- In a :doc:`Function </functions>` by accessing the :ref:`context.user
  <context-user>` interface.
- In a :ref:`rule expression <expressions>` with the :json-expansion:`%%user`
  expansion.
- In :ref:`Android <java-authenticate>`, :ref:`iOS
  <ios-authenticate-users>`, :ref:`Node <node-authenticate-users>`,
  :ref:`React Native <react-native-authenticate-users>`, and 
  :ref:`.NET <dotnet-authenticate>` client applications using a Realm SDK.

Schema
------

User objects have the following form:

.. code-block:: json

   {
     "id": "<Unique User ID>",
     "type": "<User Type>",
     "data": {
       "<Metadata Field>": <Value>,
       ...
     },
     "custom_data": {
       "<Custom Data Field>": <Value>,
       ...
     },
     "identities": [
       {
         "id": <Unique Identity ID>,
         "provider_type": "<Authentication Provider>",
         "data": {
           "<Metadata Field>": <Value>,
           ...
         }
       }
     ]
   }

.. include:: /includes/user-object-fields.rst

.. note::

   In general, App Services creates a user object for a given user
   the first time that they authenticate. If you create a
   test :doc:`Email/Password </users/create>`
   user through the App Services UI, App Services creates that user's user
   object immediately.

.. _find-users:

Find Users
----------

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      To find information about one or more users, click :guilabel:`App Users`
      in the left navigation menu. The page opens to the :guilabel:`Users` tab which has
      a list of users associated with your Atlas App Services App:
      
      .. figure:: /images/show-users-ui.png
         :figwidth: 750px
         :alt: The Users screen in the UI, which shows a filterable list of all users
      
      .. tip::
         
         If you already know the ID of the user you want to find, you can search
         for their ID in the :guilabel:`Users` table search bar.
   
   .. tab::
      :tabid: cli
      
      To find information about one or more users, call ``{+cli-bin+} users
      list``. The CLI will prompt you for your App ID and list users in that app
      for you to select.
      
      .. code-block:: bash
         
         {+cli-bin+} users list
      
      You can also specify the arguments when you call the program:
      
      .. code-block:: bash
         
         {+cli-bin+} users list --app=<Your App ID>

   .. tab::
      :tabid: api

      To find information about one or more users, create a ``GET`` request 
      in the following format. You must specify the Group and App ID.

      .. code-block:: sh

         curl --request GET \
           --header 'Authorization: Bearer <access_token>' \
           https://services.cloud.mongodb.com/api/admin/v3.0/groups/<groupId>/apps/<appId>/users

      If you already know the ID of the user you want to find, you can append 
      the ID to the request URL:

      .. code-block:: sh
         :emphasize-lines: 3

         curl --request GET \
           --header 'Authorization: Bearer <access_token>' \
           https://services.cloud.mongodb.com/api/admin/v3.0/groups/<groupId>/apps/<appId>/users/<userId>

      .. seealso::
      
        :admin-api-endpoint:`Admin API Documentation <tag/users>`

.. _filter-users:

Filter Users
------------

You can specify filters that limit a list of users to a subset of users that
satisfy the filter conditions.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      Use the :guilabel:`filter bar` at the top of the :guilabel:`Users` table
      to define filters. You can filter by:
      
      - :guilabel:`Provider type`
        
        - Anonymous
        - Email/Password
        - API Key
        - Facebook
        - Google
        - Apple
        - Custom JWT
        - Custom Function
      
      - :guilabel:`Status`
      
        - Confirmed
        - Pending
      
      - :guilabel:`State`
      
        - Enabled
        - Disabled
   
   .. tab::
      :tabid: cli

      You can filter user operations with the following flags and arguments:
      
      - ``--pending``: If included, lists only pending users. Otherwise, lists only confirmed users.
      
      - ``--state``: Lists only users in the specified state
        
        - ``"enabled"``
        - ``"disabled"``
      
      - ``--provider``:
        
        - ``"anon-user"``
        - ``"local-userpass"``
        - ``"api-key"``
        - ``"oauth2-facebook"``
        - ``"oauth2-google"``
        - ``"oauth2-apple"``
        - ``"custom-token"``
        - ``"custom-function"``
      
      .. example::
         
         The following command limits the output to only :ref:`pending
         <confirm-user>` (unconfirmed) email/password users:
         
         .. code-block:: shell
            
            {+cli-bin+} users list --pending --provider="local-userpass"
      
      .. example::
         
         The following command limits the output to only :ref:`disabled
         <disable-user>` users:
         
         .. code-block:: shell
            
            {+cli-bin+} users list --state="disabled"

   .. tab::
      :tabid: api

      You can filter user operations with the following query parameters:

      .. list-table::
         :header-rows: 1
         :widths: 15 15 70
      
         * - Parameter
           - Type
           - Description

         * - ``after``
           - string
           - The ``id`` of the last user returned by a previous paginated request.
            
         * - ``sort``	
           - string
           - The field name to sort results by. The only valid value is the 
             default: ``_id``.

         * - ``desc``	
           - boolean
           - If ``true``, returns sorted results in descending order. If not specified or 
             set to false, results return in ascending order.

      .. example::
                
         The following request returns users in descending order by their ``_id``:

         .. code-block:: shell
            
            curl --request GET \
              --header 'Authorization: Bearer <access_token>' \
              https://services.cloud.mongodb.com/api/admin/v3.0/groups/<groupId>/apps/<appId>/users?desc=true
      
      You can also limit results to only :ref:`pending <confirm-user>` (unconfirmed) 
      email/password users. Create a ``GET`` request in the following format:

      .. code-block:: shell

         curl --request GET \
           --header 'Authorization: Bearer <access_token>' \
           https://services.cloud.mongodb.com/api/admin/v3.0/groups/<groupId>/apps/<appId>/user_registrations/pending_users
   
      .. seealso::
      
        :admin-api-endpoint:`Admin API Documentation <tag/users>`

.. _view-user-data:

View User Data
--------------

View a User's Devices
~~~~~~~~~~~~~~~~~~~~~

When a user connects to your application, Atlas App Services
:ref:`logs information <authentication-logs>` similar to the following:

.. figure:: /images/show-devices-ui.png
   :figwidth: 750px
   :alt: A detail view for a specific user that lists devices they've used with your app

Logged information includes:

- The device platform, which will be either an http client
  ("chrome", "firefox", "phantomjs", etc.) or a mobile OS ("ios",
  "android", etc.)
- The platform version.
- Your app version on the device.
- A unique device ID.

To view this information, from the list of users:

#. Find the user whose devices you want to view.

#. Click :guilabel:`...` to open the options menu, and select 
   :guilabel:`View Devices`.

.. _view-provider-data:

View a User's Provider Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Whenever a user connects to your application and authenticates using one
of the authentication providers you have enabled, App Services logs the
provider data.

.. figure:: /images/show-providers-ui.png
   :figwidth: 750px
   :alt: A detail view for a specific user that lists metadata about them from an authentication provider

To view this information, from the list of users:

#. Find the user whose provider data you want to view.

#. Click :guilabel:`...` to open the options menu, and select 
   :guilabel:`View Provider Data`.

.. _view-user-log:

View a User's Activity Log
~~~~~~~~~~~~~~~~~~~~~~~~~~

App Services logs every request made by each of your App
users, including executed function calls.  Also, if a function writes to
the log using ``console.log``, ``console.warn``, or ``console.error``,
these entries will be included within the function's log output.

.. figure:: /images/show-user-logs.png
   :figwidth: 750px
   :alt: A detail view for a specific user that shows a log of their interactions with your app

To view this information, from the list of users:

#. Find the user whose activity data you want to view.

#. Click :guilabel:`View Activity`. This redirects you to a log of requests 
   made by that specific user. You can expand an entry to view details for 
   that request.

Summary
-------

- The user object contains relevant information about the user that you can use in your app logic.
- The exact information contained in the user object depends on the :ref:`authentication providers <authentication-providers>` used.
- You can search for users in the ``Users`` page of the App Services UI.
- App Services logs information such as user's connected devices,
  provider data, and activity log.
