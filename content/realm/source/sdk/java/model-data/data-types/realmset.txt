.. meta::
   :robots: noindex, nosnippet

.. _java-realmset:

===================
RealmSet - Java SDK
===================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.6.0

You can use the :java-sdk:`RealmSet <io/realm/RealmSet.html>` data type
to manage a collection of unique keys. ``RealmSet`` implements Java's
``Set`` interface, so it works just like the built-in ``HashSet`` class,
except managed ``RealmSet`` instances persist their contents to a
realm. ``RealmSet`` instances that contain Realm objects
actually only store references to those objects, so deleting a
Realm object from a realm also deletes that object from
any ``RealmSet`` instances that contain the object.

Because ``RealmSet`` implements ``RealmCollection``, it has some useful
mathematical methods, such as ``sum``, ``min``, and ``max``. For a complete
list of available ``RealmSet`` methods, see: :java-sdk:`the RealmSet API 
reference <io/realm/RealmSet.html>`.

Method Limitations
------------------

You cannot use the following ``Realm`` methods on objects that contain
a field of type ``RealmSet``:

- ``Realm.insert()``
- ``Realm.insertOrUpdate()``
- ``Realm.createAllFromJson()``
- ``Realm.createObjectFromJson()``
- ``Realm.createOrUpdateAllFromJson()``
- ``Realm.createOrUpdateObjectFromJson()``

Usage
-----

To create a field of type ``RealmSet``, define an object property of
type ``RealmSet<E>``, where ``E`` defines the keys you would like to
store in your ``RealmSet``.

- Add an object to a ``RealmSet`` with
  :java-sdk:`RealmSet.add() <io/realm/RealmSet.html#add-E->`

- Add multiple objects with
  :java-sdk:`RealmSet.addAll() <io/realm/RealmSet.html#addAll-Collection->`

- Check if the set contains a specific object with
  :java-sdk:`RealmSet.contains() <io/realm/RealmSet.html#contains-Object->`

- Check if the set contains all of multiple objects with
  :java-sdk:`RealmSet.containsAll() <io/realm/RealmSet.html#containsAll-Collection->`

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/local/FrogSetKt.snippet.complete.kt
         :language: kotlin
         :copyable: false

      .. literalinclude:: /examples/generated/java/local/SnackKt.snippet.complete.kt
         :language: kotlin
         :copyable: false

      .. literalinclude:: /examples/generated/java/local/DataTypesTest.snippet.realmSet.kt
         :language: kotlin
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/local/FrogSet.snippet.complete.java
         :language: java
         :copyable: false

      .. literalinclude:: /examples/generated/java/local/Snack.snippet.complete.java
         :language: java
         :copyable: false

      .. literalinclude:: /examples/generated/java/local/DataTypesTest.snippet.realmSet.java
         :language: java
         :copyable: false

Notifications
-------------

To subscribe to changes to a ``RealmSet``, pass a
:java-sdk:`SetChangeListener <io/realm/SetChangeListener.html>`
implementation to the :java-sdk:`RealmSet.addChangeListener <io/realm/RealmSet.html#addChangeListener-io.realm.SetChangeListener->` method.
Your ``SetChangeListener`` implementation must define an
``onChange()`` method, which accepts a reference to the changed ``RealmSet``
and a set of changes as parameters. You can access the number of items
added to the set as well as the number of items removed from the set
through the ``SetChangeSet`` parameter.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/java/local/DataTypesTest.snippet.realmset-notifications.kt
         :language: kotlin
         :copyable: false

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/java/local/DataTypesTest.snippet.realmset-notifications.java
         :language: java
         :copyable: false