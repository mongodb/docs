.. _configuration-file:

===============================
Run-time Database Configuration
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The :doc:`command line </reference/program/mongod>` and :doc:`configuration
file </reference/configuration-options>` interfaces provide MongoDB
administrators with a large number of options and settings for
controlling the operation of the database system. This document
provides an overview of common configurations and examples of
best-practice configurations for common use cases.

While both interfaces provide access to the same collection of options
and settings, this document primarily uses the configuration file
interface. If you installed MongoDB with a package manager such as
``yum`` or ``apt`` on Linux, or ``brew`` on macOS, a default
:doc:`configuration file </reference/configuration-options>` has been
provided as part of your installation:

- On Linux, a default :file:`/etc/mongod.conf` configuration file is
  included when using a package manager to install MongoDB.

- On Windows, a default :file:`<install directory>/bin/mongod.cfg`
  configuration file is included during the installation.

- On macOS, a default :file:`/usr/local/etc/mongod.conf`
  configuration file is included when installing from MongoDB's
  official Homebrew tap.

For package installations of MongoDB on Linux or macOS, an
initialization script which uses this default configuration file is also
provided. This initialization script can be used to start the
:binary:`~bin.mongod` on these platforms in the following manner:

- On Linux systems that use the **systemd** init system (the
  ``systemctl`` command):

  .. code-block:: sh

     sudo systemctl start mongod

- On Linux systems that use the **SystemV init** init system (the
  ``service`` command):

  .. code-block:: sh

     sudo service mongod start

- On macOS, using the ``brew`` package manger:

  .. code-block:: sh

     brew services start mongodb-community@{+version+}

If you installed MongoDB using a ``TGZ`` or ``ZIP`` file, you will need
to create your own configuration file. A
:ref:`basic example configuration<base-config>` can be found later in
this document. Once you have created a configuration file, you can start
a MongoDB instance with this configuration file by using either the
:option:`--config <mongod --config>` or :option:`-f <mongod --config>`
options to :binary:`~bin.mongod`:

.. code-block:: sh

   mongod --config /etc/mongod.conf
   mongod -f /etc/mongod.conf

Modify the values in the ``/etc/mongod.conf`` file on your system to
control the configuration of your database instance.

.. _base-config:

Configure the Database
----------------------

Consider the following basic configuration:

.. code-block:: yaml

   processManagement:
      fork: true
   net:
      bindIp: 127.0.0.1
      port: 27017
   storage:
      dbPath: /var/lib/mongo
   systemLog:
      destination: file
      path: "/var/log/mongodb/mongod.log"
      logAppend: true
   storage:
      journal:
         enabled: true

For most standalone servers, this is a sufficient base
configuration. It makes several assumptions, but consider the
following explanation:

- :setting:`~processManagement.fork` is ``true``, which enables a
  :term:`daemon` mode for :binary:`~bin.mongod`, which detaches (i.e. "forks")
  the MongoDB from the current session and allows you to run the
  database as a conventional server.

- :setting:`~net.bindIp` is ``127.0.0.1``, which forces the
  server to only listen for requests on the localhost IP. Only bind to
  secure interfaces that the application-level systems can access with
  access control provided by system network filtering
  (i.e. ":term:`firewall`").

  .. |mongodb-package| replace:: :binary:`~bin.mongod`

- :setting:`~net.port` is ``27017``, which is the default
  MongoDB port for database instances. MongoDB can bind to any
  port. You can also filter access based on port using network
  filtering tools.

  .. note::

     UNIX-like systems require superuser privileges to attach processes
     to ports lower than 1024.

- :setting:`~systemLog.quiet` is ``true``. This disables all but
  the most critical entries in output/log file, and is *not*
  recommended for production systems. If you do set this option, you
  can use :dbcommand:`setParameter` to modify this setting during
  run time.

- :setting:`~storage.dbPath` is ``/var/lib/mongo``, which
  specifies where MongoDB will store its data files.
  
  If you installed MongoDB on Linux using a package manager,
  such as ``yum`` or ``apt``, the ``/etc/mongod.conf`` file provided
  with your MongoDB installation sets the following default ``dbPath``,
  depending on your Linux distro:

  .. list-table::
      :header-rows: 1
      :widths: 35 30 35

      * - Platform
        - Package Manager
        - Default ``dbPath``

      * - :abbr:`RHEL (Red Hat Enterprise Linux)` / CentOS and Amazon
        - ``yum``
        - ``/var/lib/mongo``

      * - SUSE
        - ``zypper``
        - ``/var/lib/mongo``

      * - Ubuntu and Debian
        - ``apt``
        - ``/var/lib/mongodb``

      * - macOS
        - ``brew``
        - ``/usr/local/var/mongodb``
  
  The user account that
  :binary:`~bin.mongod` runs under will need read and write access to
  this directory.

- :setting:`systemLog.path` is ``/var/log/mongodb/mongod.log``
  which is where :binary:`~bin.mongod` will write its output. If you do not set
  this value, :binary:`~bin.mongod` writes all output to standard output
  (e.g. ``stdout``.)

- :setting:`~systemLog.logAppend` is ``true``, which ensures that
  :binary:`~bin.mongod` does not overwrite an existing log file
  following the server start operation.

- :setting:`storage.journal.enabled` is ``true``, which enables
  :term:`journaling <journal>`.  Journaling ensures single instance
  write-durability. 64-bit builds of :binary:`~bin.mongod` enable
  journaling by default. Thus, this setting may be redundant.

Given the default configuration, some of these values may be
redundant. However, in many situations explicitly stating the
configuration increases overall system intelligibility.

.. _configuration-security:

Security Considerations
-----------------------

The following configuration options are useful for limiting access to a
:binary:`~bin.mongod` instance:

.. code-block:: yaml

   net:
      bindIp: 127.0.0.1,10.8.0.10,192.168.4.24,/tmp/mongod.sock
   security:
      authorization: enabled

:setting:`net.bindIp`
  This example provides four values to the :setting:`~net.bindIp`
  option:

  - ``127.0.0.1``, the localhost interface;
  - ``10.8.0.10``, a private IP address typically used for local
    networks and VPN interfaces;
  - ``192.168.4.24``, a private network interface typically used for
    local networks; and
  - ``/tmp/mongod.sock``, a Unix domain socket path.

  Because production MongoDB instances need to be accessible from
  multiple database servers, it is important to bind MongoDB to
  multiple interfaces that are accessible from your application
  servers. At the same time it's important to limit these interfaces
  to interfaces controlled and protected at the network layer.


:setting:`security.authorization`
  Setting this option to ``true`` enables the authorization
  system within MongoDB. If enabled you will need to log in by
  connecting over the ``localhost`` interface for the first time to
  create user credentials.

.. seealso:: :doc:`/security`

Replication and Sharding Configuration
--------------------------------------

Replication Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~

:term:`Replica set` configuration is straightforward, and only
requires that the :setting:`~replication.replSetName` have a value that is consistent
among all members of the set. Consider the following:

.. code-block:: yaml

   replication:
      replSetName: set0

Use descriptive names for sets. Once configured, use the
:binary:`~bin.mongo` shell to add hosts to the replica set.

.. seealso::
   :ref:`Replica set reconfiguration
   <replica-set-reconfiguration-usage>`.

To enable authentication for the :term:`replica set`, add the
following :setting:`~security.keyFile` option:

.. code-block:: yaml

   security:
      keyFile: /srv/mongodb/keyfile

Setting :setting:`~security.keyFile` enables authentication and specifies a key
file for the replica set member use to when authenticating to each
other. The content of the key file is arbitrary, but must be the same
on all members of the :term:`replica set` and :binary:`~bin.mongos`
instances that connect to the set. The keyfile must be less than one
kilobyte in size and may only contain characters in the base64 set and
the file must not have group or "world" permissions on UNIX systems.

.. seealso::
   The :ref:`Replica Set Security <replica-set-security>` section for
   information on configuring authentication with replica sets.

   The :doc:`/replication` document for more information
   on replication in MongoDB and replica set configuration in general.

Sharding Configuration
~~~~~~~~~~~~~~~~~~~~~~

Sharding requires :binary:`~bin.mongod` instances with different
:binary:`~bin.mongod` configurations for the :ref:`config servers
<sharded-cluster-config-server>` and the :doc:`shards
</core/sharded-cluster-shards>`. The config servers store the cluster's
metadata, while the shards store the data.

To configure the config server :binary:`~bin.mongod` instances, in the
configuration file, specify ``configsvr`` for the
:setting:`sharding.clusterRole` setting.

.. versionchanged:: 3.4

   Starting in version 3.4, MongoDB removes support for :ref:`mirrored
   config servers <3.4-compat-remove-sccc>` and config servers must be
   deployed as a replica set.

.. code-block:: yaml

   sharding:
      clusterRole: configsvr
   net:
      bindIp: 10.8.0.12
      port: 27001
  replication:
      replSetName: csRS

To deploy config servers as a replica set, the config servers must run
the :ref:`storage-wiredtiger`. :method:`Initiate <rs.initiate()>` the
replica set and add members.

To configure the shard :binary:`~bin.mongod` instances, specify
``shardsvr`` for the :setting:`sharding.clusterRole` setting, and if
running as a replica set, the replica set name:

.. code-block:: yaml

   sharding:
      clusterRole: shardsvr
   replication:
      replSetName: shardA

If running as a replica set, :method:`initiate <rs.initiate()>` the
shard replica set and add members.

For the router (i.e. :binary:`~bin.mongos`), configure at least one
:binary:`~bin.mongos` process with the following :doc:`setting
</reference/configuration-options>`:

.. code-block:: yaml

   sharding:
      configDB: csRS/10.8.0.12:27001

You can specify additional members of the config server replica set by
specifying hostnames and ports in the form of a comma separated list
after the replica set name.

.. seealso:: The :doc:`/sharding` section of the manual for more
   information on sharding and cluster configuration.

Run Multiple Database Instances on the Same System
--------------------------------------------------

In many cases running multiple instances of :binary:`~bin.mongod` on a
single system is not recommended. On some types of deployments
[#multimongod]_ and for testing purposes you may need to run more than
one :binary:`~bin.mongod` on a single system.

In these cases, use a :ref:`base configuration <base-config>` for each
instance, but consider the following configuration values:

.. code-block:: yaml

   storage:
      dbPath: /var/lib/mongo/db0/
   processManagement:
      pidFilePath: /var/lib/mongo/db0.pid

The :setting:`~storage.dbPath` value controls the location of the
:binary:`~bin.mongod` instance's data directory. Ensure that each database
has a distinct and well labeled data directory. The
:setting:`~processManagement.pidFilePath` controls where :binary:`~bin.mongod` process
places it's :term:`process id <pid>` file. As this tracks the specific
:binary:`~bin.mongod` file, it is crucial that file be unique and well
labeled to make it easy to start and stop these processes.

Create additional :term:`init scripts <init script>` and/or
adjust your existing MongoDB configuration and init script as
needed to control these processes.

.. [#multimongod] Single-tenant systems with :term:`SSD` or other high
   performance disks may provide acceptable performance levels for
   multiple :binary:`~bin.mongod` instances. Additionally, you may find that
   multiple databases with small working sets may function acceptably
   on a single system.

Diagnostic Configurations
-------------------------

The following configuration options control various :binary:`~bin.mongod`
behaviors for diagnostic purposes:

- :setting:`operationProfiling.mode` sets the :ref:`database profiler
  <database-profiling>` level. The profiler is not active by default
  because of the possible impact on the profiler itself on performance.
  Unless this setting is on, queries are not profiled.

- | :setting:`operationProfiling.slowOpThresholdMs` configures the
    threshold which determines whether a query is "slow" for the
    purpose of the logging system and the :ref:`profiler
    <database-profiling>`. The default value is 100 milliseconds. Set
    to a lower value if the logging system and the database profiler do
    not return useful results or set to a higher value to only log the
    longest running queries.

  |

  .. include:: /includes/fact-slow-oplog-log-message-footnote.rst

- :setting:`systemLog.verbosity` controls the amount of logging output that
  :binary:`~bin.mongod` write to the log. Only use this option if you are
  experiencing an issue that is not reflected in the normal logging
  level.

  Starting in MongoDB 3.0, you can also specify verbosity level for
  specific components using the
  ``systemLog.component.<name>.verbosity`` setting. For the available
  components, see :setting:`component verbosity settings
  <systemLog.component.accessControl.verbosity>`.

For more information, see also :ref:`database-profiling` and
:doc:`/administration/analyzing-mongodb-performance`.
