ref: 3.4-downgrade-feature-compatibility
content: |

   Downgrade the ``featureCompatibilityVersion`` to ``"3.2"``.

   .. code-block:: javascript

      db.adminCommand({setFeatureCompatibilityVersion: "3.2"})

   This command must perform writes to an internal system collection.
   If for any reason the command does not complete successfully, you
   can safely retry the command on the |target| as the operation is
   idempotent.
---
ref: 3.4-downgrade-views
content: |

   To find views, you can run the following in the :binary:`~bin.mongo` shell:

   .. code-block:: javascript

      db.adminCommand("listDatabases").databases.forEach(function(d){ 
         let mdb = db.getSiblingDB(d.name); 
         mdb.getCollectionInfos({type: "view"}).forEach(function(c){
            print(mdb[c.name]); 
         });
      });

   In each database that contains views, drop the ``system.views``
   collection to drop all views in that database.

   If running with access control, you must have privileges to drop the
   ``system.views`` collection for the database. See
   :ref:`create-role-for-system-views`.

---
ref: 3.4-downgrade-collation-collections
content: |

   To find collections with collation specifications, you can run the
   following in the :binary:`~bin.mongo` shell:

   .. code-block:: javascript

      db.adminCommand("listDatabases").databases.forEach(function(d){
         let mdb = db.getSiblingDB(d.name);
         mdb.getCollectionInfos( { "options.collation": { $exists: true } } ).forEach(function(c){
            print(mdb[c.name]); 
         });
      });

   You can migrate the content of the collection to a new collection
   without the collation specification (one way is via the
   aggregation pipeline stage :pipeline:`$out`).
---
ref: 3.4-downgrade-collation-indexes
content: |
   
   To find indexes with collation specification, you can run the
   following in the :binary:`~bin.mongo` shell:

   .. code-block:: javascript

      db.adminCommand("listDatabases").databases.forEach(function(d){ 
         let mdb = db.getSiblingDB(d.name);
         mdb.getCollectionInfos().forEach(function(c){
            let currentCollection = mdb.getCollection(c.name);
            currentCollection.getIndexes().forEach(function(i){
               if (i.collation){
                  printjson(i);
               }
            });
         });
      });

   Drop the indexes with a collation specification. After the downgrade,
   recreate the dropped indexes.
---
ref: 3.4-downgrade-v2-indexes
content: |

   To find indexes with ``v: 2``, you can run the following in the
   :binary:`~bin.mongo` shell:

   .. code-block:: javascript

      db.adminCommand("listDatabases").databases.forEach(function(d){ 
         let mdb = db.getSiblingDB(d.name);
         mdb.getCollectionInfos().forEach(function(c){
            let currentCollection = mdb.getCollection(c.name);
            currentCollection.getIndexes().forEach(function(i){
               if (i.v === 2){
                  printjson(i);
               }
            });
         });
      });
         
---
ref: 3.4-downgrade-decimal
content: |

   Convert any data of :ref:`decimal <3.4-decimal>` type. In versions
   of MongoDB earlier than 3.4, operations against documents that
   contain :ref:`decimal <3.4-decimal>` type may fail. For some
   possible conversion options, see
   :doc:`/tutorial/model-monetary-data`.

   To detect the presence of decimal, you can run
   :method:`db.collection.validate(true) <db.collection.validate()>`
   against the collections which may contain decimal data.

   :method:`db.collection.validate(true) <db.collection.validate()>`
   reports on decimal data only when ``featureCompatibilityVersion`` is
   ``"3.2"``.

...
