=========================
Replica Set Configuration
=========================

.. default-domain:: mongodb

Synopsis
--------

This reference provides an overview of replica set
configuration options and settings.

Use :method:`rs.conf()` in the :program:`mongo` shell to retrieve this
configuration. Note that default values are not explicitly displayed.

.. _replica-set-configuration-document:

Example Configuration Document
------------------------------

The following document provides a representation of a replica set
configuration document. Angle brackets (e.g. ``<`` and ``>``) enclose
all optional fields.

.. code-block:: javascript

   {
     _id : <setname>,
     version: <int>,
     members: [
       {
         _id : <ordinal>,
         host : hostname<:port>,
         <arbiterOnly : <boolean>,>
         <buildIndexes : <boolean>,>
         <hidden : <boolean>,>
         <priority: <priority>,>
         <tags: { <document> },>
         <slaveDelay : <number>,>
         <votes : <number>>
       }
       , ...
     ],
     <settings: {
       <getLastErrorDefaults : <lasterrdefaults>,>
       <chainingAllowed : <boolean>,>
       <getLastErrorModes : <modes>>
     }>
   }

.. _replica-set-configuration-variables:

Configuration Variables
-----------------------

.. data:: local.system.replset._id

   **Type**: string

   **Value**: <setname>

   An ``_id`` field holding the name of the replica set. This reflects
   the set name configured with :setting:`replSet` or
   :option:`mongod --replSet`.

.. data:: local.system.replset.members

   **Type**: array

   Contains an array holding an embedded :term:`document` for each
   member of the replica set. The ``members`` document contains a
   number of fields that describe the configuration of each member of
   the replica set.

   The :data:`~local.system.replset.members` field in the replica set
   configuration document is a zero-indexed array.

.. data:: local.system.replset.members[n]._id

   **Type**: ordinal

   Provides the zero-indexed identifier of every member in the replica
   set.

   .. note::

      .. include:: /includes/fact-rs-conf-array-index.rst

.. data:: local.system.replset.members[n].host

   **Type**: <hostname><:port>

   Identifies the host name of the set member with a hostname and port
   number. This name must be resolvable for every host in the replica
   set.

   .. warning::

      :data:`~local.system.replset.members[n].host` cannot hold a value that resolves to
      ``localhost`` or the local interface unless *all* members of the
      set are on hosts that resolve to localhost.

.. data:: local.system.replset.members[n].arbiterOnly

   *Optional*.

   **Type**: boolean

   **Default**: false

   Identifies an arbiter. For arbiters, this value is ``true``, and
   is automatically configured by :method:`rs.addArb()`".

.. data:: local.system.replset.members[n].buildIndexes

   *Optional*.

   **Type**: boolean

   **Default**: true

   Determines whether the :program:`mongod` builds :term:`indexes
   <index>` on this member. Do not set to ``false`` for instances that
   receive queries from clients.

   Omitting index creation, and thus this setting, may be useful,
   **if**:

   - You are only using this instance to perform backups using
     :program:`mongodump`,

   - this instance will receive no queries, *and*

   - index creation and maintenance overburdens the host
     system.

   If set to ``false``, secondaries configured with this option *do*
   build indexes on the ``_id`` field, to facilitate operations
   required for replication.

   .. warning::

      You may only set this value when adding a member to a replica
      set. You may not reconfigure a replica set to change the value of
      the :data:`~local.system.replset.members[n].buildIndexes` field
      after adding the member to the set.

      :data:`~local.system.replset.members[n].buildIndexes` is only
      valid when :term:`priority` is ``0`` to prevent these members from
      becoming :term:`primary`. Make all instances that do not build
      indexes hidden.

      Other secondaries cannot replicate from a members where
      :data:`~local.system.replset.members[n].buildIndexes` is
      false.

.. data:: local.system.replset.members[n].hidden

   *Optional*.

   **Type**: boolean

   **Default**: false

   When this value is ``true``, the replica set hides this instance,
   and does not include the member in the output of
   :method:`db.isMaster()` or :dbcommand:`isMaster`. This
   prevents read operations (i.e. queries) from ever reaching this
   host by way of secondary :term:`read preference`.

   .. seealso:: :ref:`Hidden Replica Set Members <replica-set-hidden-members>`

.. data:: local.system.replset.members[n].priority

   *Optional*.

   **Type**: Number, between 0 and 100.0 including decimals.

   **Default**: 1

   .. todo:: add/remove note for 2.4

      .. versionchanged:: 2.4
         :data:`~local.system.replset.members[n].priority` now accepts values between 0
         and 1000.

   Specify higher values to make a member *more* eligible to become
   :term:`primary`, and lower values to make the member *less* eligible
   to become primary. Priorities are only used in comparison to each
   other. Members of the set will veto election requests from members when
   another eligible member has a higher priority
   value. Changing the balance of priority in a replica set will trigger
   an election.

   A :data:`~local.system.replset.members[n].priority` of ``0`` makes it impossible for a
   member to become primary.

   .. seealso:: :data:`~local.system.replset.members[n].priority` and
      :ref:`Replica Set Elections <replica-set-elections>`.

.. data:: local.system.replset.members[n].tags

   *Optional*.

   **Type**: :term:`MongoDB Document <document>`

   **Default**: none

   Used to represent arbitrary values for describing or tagging members
   for the purposes of extending :term:`write concern`
   to allow configurable data center
   awareness.

   Use in conjunction with
   :data:`~local.system.replset.settings.getLastErrorModes` and
   :data:`~local.system.replset.settings.getLastErrorDefaults` and
   :method:`db.getLastError()` (i.e. :dbcommand:`getLastError`.)

   For procedures on configuring tag sets, see
   :doc:`/tutorial/configure-replica-set-tag-sets`.

   .. include:: /includes/fact-tag-sets-must-be-strings.rst

.. data:: local.system.replset.members[n].slaveDelay

   *Optional*.

   **Type**: Integer. (seconds.)

   **Default**: 0

   Describes the number of seconds "behind" the primary that this
   replica set member should "lag." Use this option to create
   :ref:`delayed members <replica-set-delayed-members>`, that
   maintain a copy of the data that reflects the state of the data set
   at some amount of time in the past, specified in seconds. Typically such delayed members
   help protect against human error, and provide some measure
   of insurance against the unforeseen consequences of changes and
   updates.

.. data:: local.system.replset.members[n].votes

   *Optional*.

   **Type**: Integer

   **Default**: 1

   Controls the number of votes a server will cast in a :ref:`replica set
   election <replica-set-elections>`. The number of votes each member
   has can be any non-negative integer, but it is highly recommended
   each member has 1 or 0 votes.

   If you need more than 7 members in one replica set, use this setting to add additional
   non-voting members with a :data:`~local.system.replset.members[n].votes` value of ``0``.

   For most deployments and most members, use the default value,
   ``1``, for :data:`~local.system.replset.members[n].votes`.

.. data:: local.system.replset.settings

   *Optional*.

   **Type**: :term:`MongoDB Document <document>`

   The ``settings`` document configures options that apply to the whole
   replica set.

.. data:: local.system.replset.settings.chainingAllowed

   *Optional*.

   **Type**: boolean

   **Default**: true

   .. versionadded:: 2.2.4

   When :data:`~local.system.replset.settings.chainingAllowed` is
   ``true``, the replica set allows :term:`secondary` members to
   replicate from other secondary members. When
   :data:`~local.system.replset.settings.chainingAllowed` is
   ``false``, secondaries can replicate only from the :term:`primary`.

   When you run :method:`rs.config()` to view a replica set's
   configuration, the
   :data:`~local.system.replset.settings.chainingAllowed` field
   appears only when set to ``false``. If not set,
   :data:`~local.system.replset.settings.chainingAllowed` is ``true``.

   .. seealso:: :doc:`/tutorial/manage-chained-replication`

.. data:: local.system.replset.settings.getLastErrorDefaults

   *Optional*.

   **Type**: :term:`MongoDB Document <document>`

   Specify arguments to :dbcommand:`getLastError` that
   members of this replica set will use when
   :dbcommand:`getLastError` has no arguments. If you specify *any*
   arguments, :dbcommand:`getLastError`, ignores these defaults.

.. data:: local.system.replset.settings.getLastErrorModes

   *Optional*.

   **Type**: :term:`MongoDB Document <document>`

   Defines the names and combination of
   :data:`~local.system.replset.members` for use by the application layer
   to guarantee :term:`write concern` to database using the
   :dbcommand:`getLastError` command to provide :term:`data-center
   awareness`.

.. _replica-set-reconfiguration-usage:

Example Reconfiguration Operations
----------------------------------

Most modifications of :term:`replica set` configuration use the
:program:`mongo` shell. Consider the following reconfiguration
operation:

.. example::

   Given the following replica set configuration:

   .. code-block:: javascript

      {
          "_id" : "rs0",
          "version" : 1,
          "members" : [
                        {
                           "_id" : 0,
                           "host" : "mongodb0.example.net:27017"
                        },
                        {
                           "_id" : 1,
                           "host" : "mongodb1.example.net:27017"
                        },
                        {
                           "_id" : 2,
                           "host" : "mongodb2.example.net:27017"
                        }
           ]
      }

   The following reconfiguration operation updates the
   :data:`~local.system.replset.members[n].priority` of the replica set
   members:

   .. code-block:: javascript

      cfg = rs.conf()
      cfg.members[0].priority = 0.5
      cfg.members[1].priority = 2
      cfg.members[2].priority = 2
      rs.reconfig(cfg)

   First, this operation sets the local variable ``cfg`` to the current
   replica set configuration using the :method:`rs.conf()` method. Then
   it adds priority values to the ``cfg`` :term:`document` for the
   three sub-documents in the :data:`~local.system.replset.members`
   array, accessing each replica set member with the array index and
   **not** the replica set member's
   :data:`~local.system.replset.members[n]._id` field. Finally, it
   calls the :method:`rs.reconfig()` method with the argument of
   ``cfg`` to initialize this new configuration. The replica set
   configuration after this operation will resemble the following:

   .. code-block:: javascript

      {
          "_id" : "rs0",
          "version" : 1,
          "members" : [
                        {
                           "_id" : 0,
                           "host" : "mongodb0.example.net:27017",
                           "priority" : 0.5
                        },
                        {
                           "_id" : 1,
                           "host" : "mongodb1.example.net:27017",
                           "priority" : 2
                        },
                        {
                           "_id" : 2,
                           "host" : "mongodb2.example.net:27017",
                           "priority" : 1
                        }
           ]
      }


Using the "dot notation" demonstrated in the above example, you can
modify any existing setting or specify any of optional :ref:`replica
set configuration variables
<replica-set-configuration-variables>`. Until you run
``rs.reconfig(cfg)`` at the shell, no changes will take effect. You
can issue ``cfg = rs.conf()`` at any time before using
:method:`rs.reconfig()` to undo your changes and start from the current
configuration. If you issue ``cfg`` as an operation at any point, the
:program:`mongo` shell at any point will output the complete
:term:`document` with modifications for your review.

The :method:`rs.reconfig()` operation has a "force" option, to make it
possible to reconfigure a replica set if a majority of the replica set
is not visible, and there is no :term:`primary` member of the set.
use the following form:

.. code-block:: javascript

   rs.reconfig(cfg, { force: true } )

.. warning::

   Forcing a :method:`rs.reconfig()` can lead to :term:`rollback`
   situations and other difficult to recover from situations. Exercise
   caution when using this option.

.. note::

   The :method:`rs.reconfig()` shell method can force the current
   primary to step down and triggers an election in some
   situations. When the primary steps down, all clients will
   disconnect. This is by design. Since this typically takes 10-20
   seconds, attempt to make such changes during scheduled maintenance
   periods.
