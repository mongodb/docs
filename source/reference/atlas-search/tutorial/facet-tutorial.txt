.. _facet-tutorial:

============================
How to use Facets with |fts| 
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. note:: Preview

   .. include:: /includes/fact-fts-facets-preview.rst

.. important:: 

   .. include:: /includes/fact-searchMeta-shared-tier.rst

This tutorial describes how to create an index with a :ref:`facet 
definition <fts-facet-definition>` on string, date, and numeric fields 
in the ``sample_mflix.movies`` collection. It shows how to run an |fts| 
query against those fields for results grouped by values for the string 
field and by ranges for the date and numeric fields, including the 
count for each of those groups. It takes you through the following 
steps: 

1. Set up an |fts| index with facet definition on the ``genres``, 
   ``released``, and ``year`` fields in the ``sample_mflix.movies`` 
   collection.
#. Run |fts| query against the ``released`` field in the 
   ``sample_mflix.movies`` collection for results grouped by values for 
   the ``genres`` field and by ranges for the ``year`` field.

Prerequisites 
-------------

To complete these tutorials, you must have the following: 

- An |service| cluster running one of the following versions:

  - MongoDB 4.4.11 or later
  - MongoDB 5.0.4 or later

- The :doc:`sample datasets </sample-data>` loaded into your |service| 
  cluster. You will use a collection with movie data from the |service| 
  sample dataset.
- {+mongosh+} on your local machine.

Create the |fts| Index for Facet 
--------------------------------

In this section, you will create an |fts| index on the ``genres``, 
``year``, and ``released`` fields in the ``sample_mflix.movies`` 
collection. 

.. include:: /includes/steps/fts-facet-tutorial-create-index.rst

Search the Collection 
---------------------

You can use :ref:`fts-facet-ref` in queries that use the 
:pipeline:`$search` and :pipeline:`$searchMeta` stages. In this 
section, connect to your |service| cluster and the run the sample query 
against the ``sample_mflix.movies`` collection using the 
:pipeline:`$searchMeta` stage. MongoDB recommends using the 
:pipeline:`$searchMeta` stage to retrieve metadata results only.

----------

.. |arrow| unicode:: U+27A4

|arrow| Use the **Select your language** drop-down menu to set the 
language for the examples in this section.

----------

.. tabs-selector:: drivers

The following query searches for movies released :ref:`near 
<near-ref>` November 11, 1921. It specifies a ``pivot`` distance from 
``origin`` of approximately three months. It requests metadata on the 
``genres`` and ``year`` field. The query requests a count of the: 

- Number of movies in each genre in the ``genres`` string array field
- Number of movies in the years 1910 to 1939, inclusive

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. tip::

         Run the following command at {+mongosh+} prompt to use the
         ``sample_mflix`` database:

         .. code-block:: shell

            use sample_mflix

      .. literalinclude:: /includes/fts-tutorial/facet/tutorial-shell.js
         :language: js
         :dedent:

   .. tab::
      :tabid: compass

      .. include:: /includes/fts-tutorial/facet/tutorial.rst

   .. tab:: 
      :tabid: go

      .. literalinclude:: /includes/fts-tutorial/facet/tutorial.go
         :language: go
         :dedent:

   .. tab:: 
      :tabid: java-sync 

      .. literalinclude:: /includes/fts-tutorial/facet/tutorial.java
         :language: java
         :dedent:

   .. tab::
      :tabid: nodejs

      .. literalinclude:: /includes/fts-tutorial/facet/tutorial.js
         :language: js
         :dedent:

   .. tab::
      :tabid: python

      .. literalinclude:: /includes/fts-tutorial/facet/tutorial.py
         :language: python
         :dedent:

This query returns the following results:

.. tabs-drivers::

   .. tab::
      :tabid: shell

      .. code-block:: javascript
         :copyable: false
         :linenos:

         {
           count: { lowerBound: Long("23026") },
           facet: {
             genresFacet: {
               buckets: [
                 { _id: 'Drama', count: Long("13527") },
                 { _id: 'Comedy', count: Long("6922") },
                 { _id: 'Romance', count: Long("3615") },
                 { _id: 'Crime', count: Long("2649") },
                 { _id: 'Thriller', count: Long("2603") },
                 { _id: 'Action', count: Long("2505") },
                 { _id: 'Documentary', count: Long("2041") },
                 { _id: 'Adventure', count: Long("2016") },
                 { _id: 'Horror', count: Long("1662") },
                 { _id: 'Biography', count: Long("1373") }
               ]
             },
             yearFacet: {
               buckets: [
                 { _id: 1910, count: Long("23") },
                 { _id: 1920, count: Long("89") },
                 { _id: 1930, count: Long("308") }
               ]
             }
           }
         }

   .. tab::
      :tabid: compass

      .. code-block:: javascript
         :copyable: false
         :linenos:

         {
           count: { lowerBound: 23026 },
           facet: {
             genresFacet: {
               buckets: [
                 { _id: "Drama", count: 13527 },
                 { _id: "Comedy", count: 6922 },
                 { _id: "Romance", count: 3615 },
                 { _id: "Crime", count: 2649 },
                 { _id: "Thriller", count: 2603 },
                 { _id: "Action", count: 2505 },
                 { _id: "Documentary", count: 2041 },
                 { _id: "Adventure", count: 2016 },
                 { _id: "Horror", count: 1662 },
                 { _id: "Biography", count: 1373 }
               ]
             },
             yearFacet: {
               buckets: [
                 { _id: 1910, count: 23 },
                 { _id: 1920, count: 89 },
                 { _id: 1930, count: 308 }
               ]
             }
           }
         }

   .. tab:: 
      :tabid: go

      .. code-block:: go
         :copyable: false
         :linenos:
         
         [{count [{lowerBound 23026}]} 
         {facet [
            {genresFacet [
               {buckets [
                  [{_id Drama} {count 13527}] 
                  [{_id Comedy} {count 6922}] 
                  [{_id Romance} {count 3615}] 
                  [{_id Crime} {count 2649}] 
                  [{_id Thriller} {count 2603}] 
                  [{_id Action} {count 2505}] 
                  [{_id Documentary} {count 2041}] 
                  [{_id Adventure} {count 2016}] 
                  [{_id Horror} {count 1662}] 
                  [{_id Biography} {count 1373}]]}]} 
            {yearFacet [
               {buckets [
                  [{_id 1910} {count 23}] 
                  [{_id 1920} {count 89}] 
                  [{_id 1930} {count 308}]]}]}]}]

   .. tab:: 
      :tabid: java-sync 

      .. code-block:: json
         :copyable: false
         :linenos:

         {"count": {"lowerBound": 23026}, 
         "facet": {
            "genresFacet": {
               "buckets": [
                  {"_id": "Drama", "count": 13527}, 
                  {"_id": "Comedy", "count": 6922}, 
                  {"_id": "Romance", "count": 3615}, 
                  {"_id": "Crime", "count": 2649}, 
                  {"_id": "Thriller", "count": 2603}, 
                  {"_id": "Action", "count": 2505}, 
                  {"_id": "Documentary", "count": 2041}, 
                  {"_id": "Adventure", "count": 2016}, 
                  {"_id": "Horror", "count": 1662}, 
                  {"_id": "Biography", "count": 1373}]}, 
            "yearFacet": {
               "buckets": [
                  {"_id": 1910, "count": 23}, 
                  {"_id": 1920, "count": 89}, 
                  {"_id": 1930, "count": 308}]}}}

   .. tab::
      :tabid: nodejs

      .. code-block:: none
         :copyable: false
         :linenos:

         '{"count":{"lowerBound":23026},
         "facet":{
            "genresFacet":{
               "buckets":[
                  {"_id":"Drama","count":13527},
                  {"_id":"Comedy","count":6922},
                  {"_id":"Romance","count":3615},
                  {"_id":"Crime","count":2649},
                  {"_id":"Thriller","count":2603},
                  {"_id":"Action","count":2505},
                  {"_id":"Documentary","count":2041},
                  {"_id":"Adventure","count":2016},
                  {"_id":"Horror","count":1662},
                  {"_id":"Biography","count":1373}]},
            "yearFacet":{
               "buckets":[
                  {"_id":1910,"count":23},
                  {"_id":1920,"count":89},
                  {"_id":1930,"count":308}]}}}'

   .. tab::
      :tabid: python

      .. code-block:: python
         :copyable: false
         :linenos:

         {'count': {'lowerBound': 23026}, 
         'facet': {
            'genresFacet': {
               'buckets': [
                  {'count': 13527, '_id': 'Drama'}, 
                  {'count': 6922, '_id': 'Comedy'}, 
                  {'count': 3615, '_id': 'Romance'}, 
                  {'count': 2649, '_id': 'Crime'}, 
                  {'count': 2603, '_id': 'Thriller'}, 
                  {'count': 2505, '_id': 'Action'}, 
                  {'count': 2041, '_id': 'Documentary'}, 
                  {'count': 2016, '_id': 'Adventure'}, 
                  {'count': 1662, '_id': 'Horror'}, 
                  {'count': 1373, '_id': 'Biography'}]}, 
            'yearFacet': {
               'buckets': [
                  {'count': 23, '_id': 1910}, 
                  {'count': 89, '_id': 1920}, 
                  {'count': 308, '_id': 1930}]}}}

The results show metadata results for two types of facet search. The 
``genresFacet`` document shows the number of movies in each genre and 
the ``yearFacet`` document shows a count of the number of movies 
within the boundaries: 

- ``1910``, inclusive lower bound the ``1910`` bucket
- ``1920``, exclusive upper bound for the ``1910`` bucket and inclusive lower bound for the ``1920`` bucket
- ``1930``, exclusive upper bound for the ``1920`` bucket and inclusive lower bound for the ``1930`` bucket
