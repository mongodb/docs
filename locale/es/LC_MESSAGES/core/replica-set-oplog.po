# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: 2014-04-08 19:29+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 6c46f6aa1bc94f209ac29520c0e9c27d
#: ../source/core/replica-set-oplog.txt:5
msgid "Replica Set Oplog"
msgstr ""

# 9f6772259ecd4f07bc3e57d2bb9a5322
#: ../source/core/replica-set-oplog.txt
msgid "On this page"
msgstr ""

# efec5628f5ec48ddad8d6468205c319c
#: ../source/core/replica-set-oplog.txt:15
msgid ""
"The :term:`oplog` (operations log) is a special :term:`capped collection`"
" that keeps a rolling record of all operations that modify the data "
"stored in your databases. MongoDB applies database operations on the "
":term:`primary` and then records the operations on the primary's oplog. "
"The :term:`secondary` members then copy and apply these operations in an "
"asynchronous process. All replica set members contain a copy of the "
"oplog, in the :data:`local.oplog.rs` collection, which allows them to "
"maintain the current state of the database."
msgstr ""

# 6e3e4d38a3da448ab0793c3d931a5c38
#: ../source/core/replica-set-oplog.txt:24
msgid ""
"To facilitate replication, all replica set members send heartbeats "
"(pings) to all other members. Any member can import oplog entries from "
"any other member."
msgstr ""

# 88f20fa647ec4f499481a91af80b8395
#: ../source/core/replica-set-oplog.txt:28
msgid ""
"Each operation in the oplog is :term:`idempotent`. That is, oplog "
"operations produce the same results whether applied once or multiple "
"times to the target dataset."
msgstr ""

# a88ba384d4cf4b62894b9712aa357031
#: ../source/core/replica-set-oplog.txt:35
msgid "Oplog Size"
msgstr ""

# e3b3714439724c839cb18725e8ffb083
#: ../source/core/replica-set-oplog.txt:37
msgid ""
"When you start a replica set member for the first time, MongoDB creates "
"an oplog of a default size."
msgstr ""

# b86d45f1a7154c359c544b0c9cd2938d
#: ../source/core/replica-set-oplog.txt:68
msgid "For Unix and Windows systems"
msgstr ""

# 8eaf15281e01462d8e96fbbf0af8d2d2
#: ../source/core/replica-set-oplog.txt:41
msgid "The default oplog size depends on the storage engine:"
msgstr ""

# cf83f4e8d009476289bf9c396a63cfc3
# bf9109a08ed84d239cef73b1f2c7b788
#: ../source/core/replica-set-oplog.txt:47
#: ../source/core/replica-set-oplog.txt:78
msgid "Storage Engine"
msgstr ""

# 19b00f4d2cb04f33b523b7472faaf0f0
# 69e0c8515ef2404fb799fc77e11ae0fd
#: ../source/core/replica-set-oplog.txt:48
#: ../source/core/replica-set-oplog.txt:79
msgid "Default Oplog Size"
msgstr ""

# 17f2a079d4f9432a9004cc75c1073602
#: ../source/core/replica-set-oplog.txt:49
msgid "Lower Bound"
msgstr ""

# 12fbff156c6440d0bc28a3d12726b49b
#: ../source/core/replica-set-oplog.txt:50
msgid "Upper Bound"
msgstr ""

# 2bb97a34fabe4de2937574e1d17be684
# 1776016e9b334418979cf1899e0d45c5
#: ../source/core/replica-set-oplog.txt:52
#: ../source/core/replica-set-oplog.txt:81
msgid ":doc:`/core/inmemory`"
msgstr ""

# b0bd1a54d8544679927cd8cc34ca454e
#: ../source/core/replica-set-oplog.txt:54
#, python-format
msgid "5% of physical memory"
msgstr ""

# f9d0fd3c60294e4db7762be67b79801a
#: ../source/core/replica-set-oplog.txt:56
msgid "50 MB"
msgstr ""

# 1895f548f6254d9ea1de9b65758a5b0c
# 6cfd3a6677974db8b27d62a6726fa2d7
# e5a9b7dbcb7947c79e317602192125a0
#: ../source/core/replica-set-oplog.txt:58
#: ../source/core/replica-set-oplog.txt:63
#: ../source/core/replica-set-oplog.txt:68
msgid "50 GB"
msgstr ""

# 11a24f31bf794b478c82440fa1db2e9f
# bed49f04ab9842898770fc054d2ef636
#: ../source/core/replica-set-oplog.txt:60
#: ../source/core/replica-set-oplog.txt:85
msgid ":doc:`/core/wiredtiger`"
msgstr ""

# 4476349d5f2841b2be9d0fb3540b3b26
# 388beacae34a4643b40c8dba072e7f95
#: ../source/core/replica-set-oplog.txt:61
#: ../source/core/replica-set-oplog.txt:66
#, python-format
msgid "5% of free disk space"
msgstr ""

# c1bb78f8135e436e97263c24e1df4677
# d25fbbc2e53a49218c9b7f20dd54ce4d
#: ../source/core/replica-set-oplog.txt:62
#: ../source/core/replica-set-oplog.txt:67
msgid "990 MB"
msgstr ""

# 979c0474bdfc4d7e9b7a450209c026b6
# b3e626632a264a3ab7a5a39933f05dd5
#: ../source/core/replica-set-oplog.txt:65
#: ../source/core/replica-set-oplog.txt:88
msgid ":doc:`/core/mmapv1`"
msgstr ""

# 41ce46a66dbc4f24876c7dbaf5e17ee6
#: ../source/core/replica-set-oplog.txt:89
msgid "For 64-bit OS X systems"
msgstr ""

# 57693a75a86246219bcd78975bbd623d
#: ../source/core/replica-set-oplog.txt:71
msgid ""
"The default oplog size is 192 MB of either physical memory or free disk "
"space depending on the storage engine:"
msgstr ""

# 09084d99aed6463bb4886c7fd66c2c52
#: ../source/core/replica-set-oplog.txt:83
msgid "192 MB of physical memory"
msgstr ""

# 5589623488f04fc88147e61ac10c60ea
# f7c0ba855d654d8cbb664449b2c3e9b9
#: ../source/core/replica-set-oplog.txt:86
#: ../source/core/replica-set-oplog.txt:89
msgid "192 MB of free disk space"
msgstr ""

# 1e95043bfbf24a27ad33619eaf1491b2
#: ../source/core/replica-set-oplog.txt:91
#, python-format
msgid ""
"In most cases, the default oplog size is sufficient. For example, if an "
"oplog is 5% of free disk space and fills up in 24 hours of operations, "
"then secondaries can stop copying entries from the oplog for up to 24 "
"hours without becoming too stale to continue replicating. However, most "
"replica sets have much lower operation volumes, and their oplogs can hold"
" much higher numbers of operations."
msgstr ""

# c663bbdd0e9740bd889bc718fdfd0d87
#: ../source/core/replica-set-oplog.txt:98
msgid ""
"Before :program:`mongod` creates an oplog, you can specify its size with "
"the :setting:`~replication.oplogSizeMB` option. However, after you have "
"started a replica set member for the first time, you can only change the "
"size of the oplog using the :doc:`/tutorial/change-oplog-size` procedure."
msgstr ""

# 289d7225f82a4d19a8c9b7e9fa3101a5
#: ../source/core/replica-set-oplog.txt:104
msgid "Workloads that Might Require a Larger Oplog Size"
msgstr ""

# 38a30d2b4aac4621951ad1afb4095c3e
#: ../source/core/replica-set-oplog.txt:106
msgid ""
"If you can predict your replica set's workload to resemble one of the "
"following patterns, then you might want to create an oplog that is larger"
" than the default. Conversely, if your application predominantly performs"
" reads with a minimal amount of write operations, a smaller oplog may be "
"sufficient."
msgstr ""

# b13e85562a2c42f6bb55e856bc16cba4
#: ../source/core/replica-set-oplog.txt:112
msgid "The following workloads might require a larger oplog size."
msgstr ""

# 720f780c6cd74e3b9c7e99cb1aa9929c
#: ../source/core/replica-set-oplog.txt:115
msgid "Updates to Multiple Documents at Once"
msgstr ""

# 54f18d22190a4431b3d4305b1c36d2db
#: ../source/core/replica-set-oplog.txt:117
msgid ""
"The oplog must translate multi-updates into individual operations in "
"order to maintain :term:`idempotency <idempotent>`. This can use a great "
"deal of oplog space without a corresponding increase in data size or disk"
" use."
msgstr ""

# 6cba01d8119a4dcbab42b160c1282f2a
#: ../source/core/replica-set-oplog.txt:123
msgid "Deletions Equal the Same Amount of Data as Inserts"
msgstr ""

# 44072af60e784ed8a94e973fe52c97eb
#: ../source/core/replica-set-oplog.txt:125
msgid ""
"If you delete roughly the same amount of data as you insert, the database"
" will not grow significantly in disk use, but the size of the operation "
"log can be quite large."
msgstr ""

# f9026afdfb4c4331b1968782a6cbe897
#: ../source/core/replica-set-oplog.txt:130
msgid "Significant Number of In-Place Updates"
msgstr ""

# 795b13aa33f54204af996e407fdaa900
#: ../source/core/replica-set-oplog.txt:132
msgid ""
"If a significant portion of the workload is updates that do not increase "
"the size of the documents, the database records a large number of "
"operations but does not change the quantity of data on disk."
msgstr ""

# a301545ec47b477abfd97908cccb7a77
#: ../source/core/replica-set-oplog.txt:137
msgid "Oplog Status"
msgstr ""

# 851de41379ce42ca940d7dd1970d173e
#: ../source/core/replica-set-oplog.txt:139
msgid ""
"To view oplog status, including the size and the time range of "
"operations, issue the :method:`rs.printReplicationInfo()` method. For "
"more information on oplog status, see :ref:`replica-set-troubleshooting-"
"check-oplog-size`."
msgstr ""

# a3f3f1724a19486fb09bb02f3ee8acc0
#: ../source/core/replica-set-oplog.txt:144
msgid ""
"Under various exceptional situations, updates to a :term:`secondary's "
"<secondary>` oplog might lag behind the desired performance time.  Use "
":method:`db.getReplicationInfo()` from a secondary member and the "
":doc:`replication status </reference/method/db.getReplicationInfo>` "
"output to assess the current state of replication and determine if there "
"is any unintended replication delay."
msgstr ""

# 9079754bc3e548d8a8933d1d995932f7
#: ../source/core/replica-set-oplog.txt:151
msgid ""
"See :ref:`Replication Lag <replica-set-replication-lag>` for more "
"information."
msgstr ""

#~ msgid ""
#~ "The :term:`oplog` (operations log) is a"
#~ " special :term:`capped collection` that "
#~ "keeps a rolling record of all "
#~ "operations that modify the data stored"
#~ " in your databases. MongoDB applies "
#~ "database operations on the :term:`primary` "
#~ "and then records the operations on "
#~ "the primary's oplog. The :term:`secondary` "
#~ "members then copy and apply these "
#~ "operations in an asynchronous process. "
#~ "All replica set members contain a "
#~ "copy of the oplog, allowing them "
#~ "to maintain the current state of "
#~ "the database."
#~ msgstr ""

#~ msgid ""
#~ "For 64-bit Linux, Solaris, FreeBSD, and"
#~ " Windows systems, MongoDB allocates 5% "
#~ "of the available free disk space "
#~ "to the oplog. If this amount is"
#~ " smaller than a gigabyte, then "
#~ "MongoDB allocates 1 gigabyte of space."
#~ msgstr ""

# 4bf3ec7948c04faebe63f90d10df18fb
#~ msgid ""
#~ "Whether applied once or multiple times"
#~ " to the target dataset, each "
#~ "operation in the oplog produces the "
#~ "same results, i.e. each operation in "
#~ "the oplog is :term:`idempotent`. For "
#~ "proper replication operations, entries in "
#~ "the oplog must be idempotent:"
#~ msgstr ""

# 74c3a7749bca45b8b1359acc73fa6f3d
#~ msgid "initial sync"
#~ msgstr ""

# e27b8ffbbe98459fb2159cb3fd1ede2a
#~ msgid "post-rollback catch-up"
#~ msgstr ""

# a3d12629fc5c43b798ea82b456ace9aa
#~ msgid "sharding chunk migrations"
#~ msgstr ""

# 12b729c7abc64b7d90fcae9112780ad2
#~ msgid ""
#~ "When you start a replica set "
#~ "member for the first time, MongoDB "
#~ "creates an oplog of a default "
#~ "size. The size depends on the "
#~ "architectural details of your operating "
#~ "system."
#~ msgstr ""

# caac8e653e1f41e58feda2f97042f00d
#~ msgid "By default, the size of the oplog is as follows:"
#~ msgstr ""

# a8c99d5b0ad243959d26bdb09a1c21cc
#~ msgid ""
#~ "For 64-bit OS X systems, MongoDB "
#~ "allocates 183 megabytes of space to "
#~ "the oplog."
#~ msgstr ""

# e726ddfd09014822bcfbbf31efa6c5d3
#~ msgid ""
#~ "For 32-bit systems, MongoDB allocates "
#~ "about 48 megabytes of space to the"
#~ " oplog."
#~ msgstr ""

# de739f5dc2784613ac9c728952c28dd8
#~ msgid ""
#~ "If a significant portion of the "
#~ "workload is in-place updates, the "
#~ "database records a large number of "
#~ "operations but does not change the "
#~ "quantity of data on disk."
#~ msgstr ""

#~ msgid ""
#~ "For 64-bit Linux, Solaris, FreeBSD, and"
#~ " Windows systems, MongoDB allocates 5% "
#~ "of the available free disk space, "
#~ "but will always allocate at least "
#~ "1 gigabyte and never more than 50"
#~ " gigabytes."
#~ msgstr ""

