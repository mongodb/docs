==========================
Configuration File Options
==========================

.. default-domain:: mongodb

.. When editing this file make sure that the man pages for the
   binaries reflect all changes that you've made.

   That is:

        - /reference/mongod.txt
        - /reference/mongos.txt


Synopsis
--------

Administrators and users can control :program:`mongod` or
:program:`mongos` instances at runtime either directly from
:doc:`mongod's command line arguments </reference/mongod>` or using a
configuration file.

While both methods are functionally equivalent and all settings are
similar, the configuration file method is preferable. If you
installed from a package and have started MongoDB using your system's
:term:`control script`, you're already using a configuration file.

To start :program:`mongod` or :program:`mongos` using a config file,
use one of the following forms:

.. code-block:: sh

   mongod --config /etc/mongodb.conf
   mongod -f /etc/mongodb.conf
   mongos --config /srv/mongodb/mongos.conf
   mongos -f /srv/mongodb/mongos.conf

Declare all settings in this file using the following form:

.. code-block:: sh

   <setting> = <value>

.. versionadded:: 2.0
   *Before* version 2.0, Boolean (i.e. ``true|false``) or "flag"
   parameters, register as true, if they appear in the configuration
   file, regardless of their value.

Settings
--------

.. setting:: verbose

   *Default:* false

   Increases the amount of internal reporting returned on standard
   output or in the log file generated by :setting:`logpath`.

   .. setting:: v

      *Default:* false

      Alternate form of :setting:`verbose`.

   .. setting:: vv

      *Default:* false

      Additional increase in verbosity of output and logging.

   .. setting:: vvv

      *Default:* false

      Additional increase in verbosity of output and logging.

   .. setting:: vvvv

      *Default:* false

      Additional increase in verbosity of output and logging.

   .. setting:: vvvvv

      *Default:* false

      Additional increase in verbosity of output and logging.

.. setting:: quiet

   *Default:* false

   Runs the :program:`mongod` or :program:`mongos` instance in a quiet
   mode that attempts to limit the amount of output.

.. setting:: port

   *Default:* 27017

   Specifies a TCP port for the :program:`mongod` or :program:`mongos`
   instance to listen for client connections. UNIX-like systems
   require root access for ports with numbers lower than 1000.

.. setting:: bind_ip

   *Default:* All interfaces.

   Set this option to configure the :program:`mongod` or
   :program:`mongos` process to bind to and listen for connections
   from applications on this address. You may attach :program:`mongod`
   or :program:`mongos` instances to any interface; however, if you
   attach the process to a publicly accessible interface, implement
   proper authentication or firewall restrictions to protect the
   integrity of your database.

   You may set this value multiple times to bind :program:`mongod` to
   multiple IP addresses.

.. setting:: maxConns

   *Default:* depends on system (i.e. ulimit and file descriptor)
   limits. Unless set MongoDB will not limit its own connections.

   Specifies a value to set the maximum number of simultaneous
   connections that :program:`mongod` or :program:`mongos` will
   accept. This setting has no effect if it is higher than your
   operating system's configured maximum connection tracking
   threshold.

   This is particularly useful for :program:`mongos` if you have a
   client that creates a number of collections but allows them to
   timeout rather than close the collections. When you set
   :setting:`maxConns`, ensure the value is slightly higher than the
   size of the connection pool or the total number of connections to
   prevent erroneous connection spikes from propagating to the members
   of a :term:`shard` cluster.

.. setting:: objcheck

   *Default:* false

   Set to ``true`` to force :program:`mongod` to validate all requests
   from clients upon receipt to ensure that invalid :term:`BSON`
   objects are never inserted into the database. :program:`mongod`
   does not enable this by default because of the required overhead.

.. setting:: logpath

   *Default:* None. (i.e. ``/dev/stdout``)

   Specify the path to a file name for the log file that will hold all
   diagnostic logging information.

   Unless specified, :program:`mongod` will output all log information
   to the standard output. Unless :setting:`logappend` is ``true``,
   the logfile will be overwritten when the process restarts.

   .. note::

      Currently, MongoDB will overwrite the contents of the log file
      if the :setting:`logappend` is not used. This behavior may
      change in the future depending on the outcome of
      :issue:`SERVER-4499`.

.. setting:: logappend

   *Default:* false

   Set to ``true`` to add new entries to the end of the logfile rather
   than overwriting the content of the log when the process restarts.

   If this setting is not specified, then MongoDB will overwrite the
   existing logfile upon start up.

   .. note::

      The behavior of the logging system may change in the near
      future in response to the :issue:`SERVER-4499` case.

.. setting:: syslog

   .. versionadded: 2.1.0

   Sends all logging output to the host's :term:`syslog` system rather
   than to standard output or a log file as with :setting:`logpath`.

   .. warning:: You cannot use :setting:`syslog` with :setting:`logpath`.

.. setting:: pidfilepath

   *Default:* None.

   Specify a file location to hold the ":term:`PID`" or process ID of the
   :program:`mongod` process. Useful for tracking the :program:`mongod` process in
   combination with the :setting:`fork` setting.

   Without this option, :program:`mongod` creates no PID file.

.. setting:: keyFile

   *Default:* None.

   Specify the path to a key file to store authentication
   information. This option is only useful for the connection between
   replica set members.

   .. seealso:: ":ref:`Replica Set Security <replica-set-security>`"
      and ":doc:`/administration/replica-sets`."

.. setting:: nounixsocket

   *Default:* false

   Set to ``true`` to disable listening on the UNIX socket. Unless set
   to false, :program:`mongod` and :program:`mongos` provide a
   UNIX-socket.

.. setting:: unixSocketPrefix

   *Default:* ``/tmp``

   Specifies a path for the UNIX socket. Unless this option has a
   value, :program:`mongod` and :program:`mongos`, create a socket
   with the ``/tmp`` as a prefix.

.. setting:: fork

   *Default:* false

   Set to ``true`` to enable a :term:`daemon` mode for
   :program:`mongod` that runs the process in the background.

.. setting:: auth

   *Default:* false

   Set to ``true`` to enable database authentication for users
   connecting from remote hosts. Configure users via the :doc:`mongo
   shell </reference/mongo>`. If no users exist, the localhost
   interface will continue to have access to the database until the
   you create the first user.

.. setting:: cpu

   *Default:* false

   Set to ``true`` to force :program:`mongod` to report every four
   seconds CPU utilization and the amount of time that the processor
   waits for I/O operations to complete (i.e. I/O wait.) MongoDB writes
   this data to standard output, or the logfile if using the
   :setting:`logpath` option.

.. setting:: dbpath

   *Default:* ``/data/db/``

   Set this value to designate a directory for the :program:`mongod`
   instance to store its data. Typical locations include:
   ``/srv/mongodb``, ``/var/lib/mongodb`` or ``/opt/mongodb``

   Unless specified, :program:`mongod` will look for data files in the
   default ``/data/db`` directory. (Windows systems use the
   ``\data\db`` directory.) If you installed using a package
   management system. Check the ``/etc/mongodb.conf`` file provided by
   your packages to see the configuration of the :setting:`dbpath`.

.. setting:: diaglog

   *Default:* 0

   Creates a very verbose, diagnostic log for troubleshooting and
   recording various errors. MongoDB writes these log files in the
   :setting:`dbpath` in a series of files that begin with the string
   ``diaglog``.

   The value of this setting configures the level of
   verbosity. Possible values, and their impact are as follows.

   =========  ===================================
   **Value**  **Setting**
   ---------  -----------------------------------
      0       off. No logging.
      1       Log write operations.
      2       Log read operations.
      3       Log both read and write operations.
      7       Log write and some read operations.
   =========  ===================================

   You can use the :program:`mongosniff` tool to replay this output
   for investigation. Given a typical diaglog file, located at
   ``/data/db/diaglog.4f76a58c``, you might use a command in the
   following form to read these files:

   .. code-block:: sh

      mongosniff --source DIAGLOG /data/db/diaglog.4f76a58c

   :setting:`diaglog` is for internal use and not intended for most
   users.

.. setting:: directoryperdb

   *Default:* false

   Set to ``true`` to modify the storage pattern of the data directory
   to store each database's files in a distinct folder. This option
   will create directories within the :setting:`dbpath` named for each
   directory.

   Use this option in conjunction with your file system and device
   configuration so that MongoDB will store data on a number of
   distinct disk devices to increase write throughput or disk
   capacity.

.. _setting-journal:

.. setting:: journal

   *Default:* (on 64-bit systems) true

   *Default:* (on 32-bit systems) false

   Set to true to enable operation journaling to ensure write
   durability and data consistency.

   Set to false to prevent the overhead of journaling in situations
   where durability is not required. To reduce the impact of the
   journaling on disk usage, you can leave :setting:`journal`
   enabled, and set :setting:`smallfiles` to true to reduce the size
   of the data and journal files.

.. setting:: journalCommitInterval

   *Default:* 100

   Set this value to specify the maximum amount of time for
   :program:`mongod` to allow between journal operations. The default
   value is 100 milliseconds. Lower values increase the durability of
   the journal, at the possible expense of disk performance.

   This option accepts values between 2 and 300 milliseconds.

.. setting:: ipv6

   *Default:* false

   Set to ``true`` to IPv6 support to allow clients to connect to
   :program:`mongod` using IPv6 networks. :program:`mongod` disables
   IPv6 support by default in :program:`mongod` and all utilities.

.. setting:: jsonp

   *Default:* false

   Set to ``true`` to permit :term:`JSONP` access via an HTTP
   interface. Consider the security implications of allowing this
   activity before setting this option.

.. setting:: noauth

   *Default:* true

   Disable authentication. Currently the default. Exists for future
   compatibility and clarity.

   For consistency use the :setting:`auth` option.

.. setting:: nohttpinterface

   *Default:* false

   Set to ``true`` to disable the HTTP interface. This command will
   override the :setting:`rest` and disable the HTTP interface if you
   specify both.

   .. versionchanged:: 2.1.2
      The :setting:`nohttpinterface` option is not available for :program:`mongos` instances before 2.1.2

.. setting:: nojournal

   *Default:* (on 64-bit systems) false

   *Default:* (on 32-bit systems) true

   Set ``nojournal = true`` to disable durability journaling. By
   default, :program:`mongod` enables journaling in 64-bit versions
   after v2.0.

.. setting:: noprealloc

   *Default:* false

   Set ``noprealloc = true`` to disable the preallocation of data
   files. This will shorten the start up time in some cases, but can
   cause significant performance penalties during normal operations.

.. setting:: noscripting

   *Default:* false

   Set ``noscripting = true`` to disable the scripting engine.

.. setting:: notablescan

   *Default:* false

   Set ``notablescan = true`` to forbid operations that require a
   table scan.

.. setting:: nssize

   *Default:* 16

   Specify this value in megabytes.

   Use this setting to control the default size for all newly created
   namespace files (i.e ``.ns``). This option has no impact on the
   size of existing namespace files.

   The default value is 16 megabytes, this provides for effectively
   12,000 possible namespace. The maximum size is 2 gigabytes.

.. setting:: profile

   *Default:* 0

   Modify this value to changes the level of database profiling, which
   inserts information about operation performance into output of
   :program:`mongod` or the log file if specified by
   :setting:`logpath`. The following levels are available:

   =========  ==================================
   **Level**  **Setting**
   ---------  ----------------------------------
      0       Off. No profiling.
      1       On. Only includes slow operations.
      2       On. Includes all operations.
   =========  ==================================

   By default, :program:`mongod` disables profiling. Database profiling
   can impact database performance because the profiler must record
   and process all database operations. Enable this option only after
   careful consideration.

.. setting:: quota

   *Default:* false

   Set to ``true`` to enable a maximum limit for the number data files
   each database can have. The default quota is 8 data files, when
   ``quota`` is true. Adjust the quota size with the with the
   :setting:`quotaFiles` setting.

.. setting:: quotaFiles

   *Default:* 8

   Modify limit on the number of data files per database. This option
   requires the :setting:`quota` setting.

.. setting:: rest

   *Default:* false

   Set to ``true`` to enable a simple :term:`REST` interface.

.. setting:: repair

   *Default:* false

   Set to ``true`` to run a repair routine on all databases following
   start up. In general you should set this option on the command line
   and *not* in the :doc:`configuration file
   </administration/configuration>` or in a :term:`control script`.

   Use the :option:`mongod --repair` option to access this
   functionality.

   .. note::

      Because :program:`mongod` rewrites all of the database files
      during the repair routine, if you do not run :setting:`repair`
      under the same user account as :program:`mongod` usually runs,
      you will need to run ``chown`` on your database files to correct
      the permissions before starting :program:`mongod` again.

.. setting:: repairpath

   *Default:* :setting:`dbpath`

   Specify the path to the directory containing MongoDB data files, to
   use in conjunction with the :setting:`repair` setting or
   :option:`mongod --repair` operation. Defaults to the value
   specified by :setting:`dbpath`.

.. setting:: slowms

   *Default:* 100

   Specify values in milliseconds.

   Sets the threshold for :program:`mongod` to consider a query "slow"
   for the database profiler. The database logs all slow queries to
   the log, even when the profiler is not turned on. When the database
   profiler is on, :program:`mongod` the profiler writes to the
   ``system.profile`` collection.

   .. seealso:: ":setting:`profile`"

.. setting:: smallfiles

   *Default:* false

   Set to ``true`` to modify MongoDB to use a smaller default data
   file size. Specifically, :setting:`smallfiles` reduces the initial
   size for data files and limits them to 512
   megabytes. The :setting:`smallfiles` setting also reduces the size of each
   :term:`journal` files from 1 gigabyte to 128 megabytes.

   Use the :setting:`smallfiles` setting if you have a large number of databases
   that each hold a small quantity of data. The :setting:`smallfiles` setting can
   lead :program:`mongod` to create many files,
   which may affect performance for larger databases.

.. setting:: syncdelay

   *Default:* 60

   This setting controls the maximum number of seconds between flushes
   of pending writes to disk. While :program:`mongod` is always
   writing data to disk, this setting controls the maximum guaranteed
   interval between a successful write operation and the next time the
   database flushes data to disk.

   In many cases, the actual interval between write operations and
   disk flushes is much shorter than the value

   If set to ``0``, :program:`mongod` flushes all operations to disk
   immediately, which may have a significant performance impact. If
   :setting:`journal` is ``true``, all writes will be durable, by way
   of the journal within the time specified by
   :setting:`journalCommitInterval`.

.. setting:: sysinfo

   *Default:* false

   When set to ``true``, :program:`mongod` returns diagnostic system
   information regarding the page size, the number of physical pages,
   and the number of available physical pages to standard output.

   More typically, run this operation by way of the :option:`mongod --sysinfo`
   command. When running with the :setting:`sysinfo`, only
   :program:`mongod` only outputs the page information and no database
   process will start.

.. setting:: upgrade

   *Default:* false

   When set to ``true`` this option upgrades the on-disk data format
   of the files specified by the :setting:`dbpath` to the latest
   version, if needed.

   This option only affects the operation of :program:`mongod` if the
   data files are in an old format.

   When specified for a :program:`mongos` instance, this option updates
   the meta data format used by the :term:`config database`.

   .. note::

      In most cases you should **not** set this value, so you can
      exercise the most control over your upgrade process. See the MongoDB
      `release notes <http://www.mongodb.org/downloads>`_ (on the
      download page) for more information about the upgrade process.

.. setting:: traceExceptions

   *Default:* false

   For internal diagnostic use only.

Replication Options
```````````````````

.. setting:: replSet

   *Default:* <none>

   *Form:* <setname>

   Use this setting to configure replication with replica
   sets. Specify a replica set name as an argument to this set. All
   hosts must have the same set name.

   .. seealso:: ":doc:`/replication`,"
      ":doc:`/administration/replica-sets`," and
      ":doc:`/reference/replica-configuration`"

.. setting:: oplogSize

   Specifies a maximum size in megabytes for the replication operation
   log (e.g. :term:`oplog`.) :program:`mongod` creates an oplog
   based on the maximum amount of space available. For 64-bit systems,
   the oplog is typically 5% of available disk space.

   Once the :program:`mongod` has created the oplog for the first
   time, changing :setting:`oplogSize` will not affect the size of the
   oplog.

.. setting:: fastsync

   *Default:* false

   In the context of :term:`replica set` replication, set this option
   to ``true`` if you have seeded this replica with a snapshot of the
   :term:`dbpath` of another member of the set. Otherwise the
   :program:`mongod` will attempt to perform a full sync.

   .. warning::

      If the data is not perfectly synchronized *and*
      :program:`mongod` starts with :setting:`fastsync`, then the
      secondary or slave will be permanently out of sync with the
      primary, which may cause significant consistency problems.

.. setting:: replIndexPrefetch

   .. versionadded:: 2.2

   *Default:* ``all``

   *Values:* ``all``, ``none``, and ``_id_only``

   You must use :setting:`replIndexPrefetch` in conjunction with
   :setting:`replSet`.

   By default :term:`secondary` members of a :term:`replica set` will
   load all indexes related to an operation into memory before
   applying operations from the oplog. You can modify this behavior so
   that the secondaries will only load the ``_id`` index. Specify
   ``_id_only`` or ``none`` to prevent the :program:`mongod` from
   loading *any* index into memory.

Master/Slave Replication
````````````````````````

.. setting:: master

   *Default:* false

   Set to ``true`` to configure the current instance to act as
   :term:`master` instance in a replication configuration.

.. setting:: slave

   *Default:* false

   Set to ``true`` to configure the current instance to act as
   :term:`slave` instance in a replication configuration.

.. setting:: source

   *Default:* <>

   *Form:* <host>:<port>

   Used with the :setting:`slave` setting to specify the
   :term:`master` instance from which this :term:`slave` instance will
   replicate

.. setting:: only

   *Default:* <>

   Used with the :setting:`slave` option, the ``only`` setting
   specifies only a single :term:`database` to replicate.

.. setting:: slavedelay

   *Default:* 0

   Used with the :setting:`slave` setting, the ``slavedelay`` setting
   configures a "delay" in seconds, for this slave to wait to apply
   operations from the :term:`master` instance.

.. setting:: autoresync

   *Default:* false

   Used with the :setting:`slave` setting, set ``autoresync`` to
   ``true`` to force the :term:`slave` to automatically resync if the
   is more than 10 seconds behind the master. This setting may be
   problematic if the :option:`--oplogSize <mongod --oplogSize>`
   :term:`oplog` is too small (controlled by the :option:`--oplogSize
   <mongod --oplogSize>` option.) If the :term:`oplog` not large
   enough to store the difference in changes between the master's
   current state and the state of the slave, this instance will forcibly
   resync itself unnecessarily. When you set the :setting:`autoresync`
   option, the slave will not attempt an automatic resync more than
   once in a ten minute period.

Sharding Cluster Options
````````````````````````

.. setting:: configsvr

   *Default:* false

   Set this value to ``true`` to configure this :program:`mongod`
   instance to operate as the :term:`config database` of a shard
   cluster. The default port for :program:`mongod` with this option is
   ``27019`` and :program:`mongod` writes all data files to the
   ``/configdb`` sub-directory of the :setting:`dbpath` directory.

.. setting:: shardsvr

   *Default:* false

   Set this value to ``true`` to configure this :program:`mongod`
   instance as a shard in a partitioned cluster. The default port for
   these instances is ``27018``.

.. setting:: noMoveParanoia

   *Default:* false

   Disables a "paranoid mode" for data writes for the
   :dbcommand:`moveChunk` command when set to ``true``.

.. setting:: configdb

   *Default:* None.

   *Format:* ``<config1>,<config2><:port>,<config3>``

   Set this option to specify a configuration database
   (i.e. :term:`config database`) for the :term:`shard cluster`. You
   must specify either 1 configuration server or 3 configuration
   servers, in a comma separated list.

   This setting only affects :program:`mongos` processes.

.. setting:: test

   *Default:* false

   Only runs unit tests and does not start a :program:`mongos` instance.

   This setting only affects :program:`mongos` processes and is for
   internal testing use only.

.. setting:: chunkSize

   *Default:* 64

   The value of this option determines the size of each :term:`chunk`
   of data distributed around the :term:`shard cluster`. The default
   value is 64 megabytes. Larger chunks may lead to an uneven
   distribution of data, while smaller chunks may lead to frequent and
   unnecessary migrations. However, in some circumstances it may be
   necessary to set a different chunk size.

   This setting only affects :program:`mongos` processes. Furthermore,
   :setting:`chunkSize` *only* sets the chunk size when initializing
   the cluster for the first time. If you modify the run-time option
   later, the new value will have no effect. See the
   ":ref:`sharding-balancing-modify-chunk-size`" procedure if you
   need to change the chunk size on an existing shard cluster.

.. setting:: localThreshold

   .. versionadded:: 2.2

   :setting:`localThreshold` affects the logic that program:`mongos`
   uses when selecting :term:`replica set` members to pass reads
   operations to from clients. Specify a value to
   :setting:`localThreshold` in milliseconds. The default value is
   ``15``, which corresponds to the default value in all of the client
   :doc:`drivers </applications/drivers>`.

   This setting only affects :program:`mongos` processes.

   When :program:`mongos` receives a request that permits reads to
   :term:`secondary` members, the :program:`mongos` will:

    - find the nearest suitable member of the set, in terms of ping time.

    - construct a list of replica set members that is within a ping
      time of 15 milliseconds of the nearest suitable member of the
      set.

      If you specify a value for :setting:`localThreshold`,
      :program:`mongos` will construct the list of replica members
      that are within the latency allowed by this value.

    - The :program:`mongos` will select a member to read from at
      random from this list.

   See the :ref:`replica-set-read-preference-behavior-member-selection`
   section of the :ref:`read preference <replica-set-read-preference>`
   documentation for more information.
