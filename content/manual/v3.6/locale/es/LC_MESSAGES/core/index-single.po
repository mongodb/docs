# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: 2014-04-08 19:28+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/core/index-single.txt:3
msgid "Single Field Indexes"
msgstr ""

#: ../source/core/index-single.txt:13
msgid ""
"MongoDB provides complete support for indexes on any field in a "
":term:`collection` of :term:`documents <document>`. By default, all "
"collections have an index on the :ref:`_id field <index-type-id>`, and "
"applications and users may add additional indexes to support important "
"queries and operations."
msgstr ""

#: ../source/core/index-single.txt:19
msgid "This document describes ascending/descending indexes on a single field."
msgstr ""

#: ../source/core/index-single.txt:24
msgid "Create an Ascending Index on a Single Field"
msgstr ""

#: ../source/core/index-single.txt:26 ../source/core/index-single.txt:70
#: ../source/core/index-single.txt:101
msgid ""
"Consider a collection named ``records`` that holds documents that "
"resemble the following sample document:"
msgstr ""

#: ../source/core/index-single.txt:37
msgid ""
"The following operation creates an ascending index on the ``score`` field"
" of the ``records`` collection:"
msgstr ""

#: ../source/includes/fact-index-specification-field-value.rst:1
msgid ""
"The value of the field in the index specification describes the kind of "
"index for that field. For example, a value of ``1`` specifies an index "
"that orders items in ascending order. A value of ``-1`` specifies an "
"index that orders items in descending order. For additional index types, "
"see :ref:`index types <index-types>`."
msgstr ""

#: ../source/core/index-single.txt:46
msgid ""
"The created index will support queries that select on the field "
"``score``, such as the following:"
msgstr ""

#: ../source/core/index-single.txt:60
msgid "Create an Index on an Embedded Field"
msgstr ""

#: ../source/core/index-single.txt:62
msgid ""
"You can create indexes on fields within embedded documents, just as you "
"can index top-level fields in documents. Indexes on embedded fields "
"differ from :ref:`indexes on embedded documents <index-embedded-"
"documents>`, which include the full content up to the maximum "
":limit:`index size <Index Key>` of the embedded document in the index. "
"Instead, indexes on embedded fields allow you to use a \"dot notation,\" "
"to introspect into embedded documents."
msgstr ""

#: ../source/core/index-single.txt:81
msgid "The following operation creates an index on the ``location.state`` field:"
msgstr ""

#: ../source/core/index-single.txt:88
msgid ""
"The created index will support queries that select on the field "
"``location.state``, such as the following:"
msgstr ""

#: ../source/core/index-single.txt:97
msgid "Create an Index on Embedded Document"
msgstr ""

#: ../source/core/index-single.txt:99
msgid "You can also create indexes on embedded document as a whole."
msgstr ""

#: ../source/core/index-single.txt:112
msgid ""
"The ``location`` field is an embedded document, containing the embedded "
"fields ``city`` and ``state``. The following command creates an index on "
"the ``location`` field as a whole:"
msgstr ""

#: ../source/core/index-single.txt:120
msgid "The following query can use the index on the ``location`` field:"
msgstr ""

#: ../source/core/index-single.txt:126
msgid ""
"Although the query can use the index, the result set does not include the"
" sample document above. When performing equality matches on embedded "
"documents, field order matters and the embedded documents must match "
"exactly. See :ref:`query-embedded-documents` for more information "
"regarding querying on embedded documents."
msgstr ""

#: ../source/core/index-single.txt:133
msgid "Additional Considerations"
msgstr ""

#: ../source/includes/index-tutorials-considerations.rst:1
msgid ""
"If your collection holds a large amount of data, and your application "
"needs to be able to access the data while building the index, consider "
"building the index in the background, as described in :ref:`index-"
"creation-background`."
msgstr ""

#: ../source/includes/note-build-indexes-on-replica-sets.rst:1
msgid ""
"To build or rebuild indexes for a :term:`replica set`, see :ref:`index-"
"building-replica-sets`."
msgstr ""

#: ../source/includes/index-tutorials-considerations.rst:8
msgid ""
"Some drivers may specify indexes, using ``NumberLong(1)`` rather than "
"``1`` as the specification. This does not have any affect on the "
"resulting index."
msgstr ""

# 420d521bad734934a615c874bfff7934
#~ msgid ""
#~ "MongoDB supports indexes that contain "
#~ "either a single field *or* multiple "
#~ "fields depending on the operations that"
#~ " this index-type supports. This "
#~ "document describes indexes that contain "
#~ "a single field. Consider the following"
#~ " illustration of a single field "
#~ "index."
#~ msgstr ""

# 3e0e8d48400a49b392f6d2d4eb338b21
#~ msgid ""
#~ ":doc:`/core/index-compound` for information "
#~ "about indexes that include multiple "
#~ "fields, and :doc:`/core/indexes-introduction` "
#~ "for a higher level introduction to "
#~ "indexing in MongoDB."
#~ msgstr ""

# 2a242f4c66994142b512a1a280de53fc
#~ msgid "Example"
#~ msgstr ""

# 4ae683601dc948d98683db2271db825c
#~ msgid "Given the following document in the ``friends`` collection:"
#~ msgstr ""

# 8e31e608721e474cac80745a160db4e8
#~ msgid "The following command creates an index on the ``name`` field:"
#~ msgstr ""

# 0907c4a7358544c89ecaf2283d502998
#~ msgid "Cases"
#~ msgstr ""

# 9efe58a785a94750883ca945cf62d964
#~ msgid "``_id`` Field Index"
#~ msgstr ""

# acf404cf51204c4cbdc9205132fd09e0
#~ msgid ""
#~ "MongoDB creates the ``_id`` index, which"
#~ " is an ascending :ref:`unique index "
#~ "<index-type-unique>` on the ``_id`` "
#~ "field, for all collections when the "
#~ "collection is created. You cannot remove"
#~ " the index on the ``_id`` field."
#~ msgstr ""

# eb4fb53bdfa04f02921d8c53d9739ad6
#~ msgid ""
#~ "Think of the ``_id`` field as the"
#~ " :term:`primary key` for a collection. "
#~ "Every document *must* have a unique "
#~ "``_id`` field. You may store any "
#~ "unique value in the ``_id`` field. "
#~ "The default value of ``_id`` is an"
#~ " :term:`ObjectId` which is generated when"
#~ " the client inserts the document. An"
#~ " :term:`ObjectId` is a 12-byte unique "
#~ "identifier suitable for use as the "
#~ "value of an ``_id`` field."
#~ msgstr ""

# 1612ab7e780b4bcfb914550c640cb387
#~ msgid ""
#~ "In :term:`sharded clusters <sharded cluster>`,"
#~ " if you do *not* use the "
#~ "``_id`` field as the :term:`shard key`,"
#~ " then your application **must** ensure "
#~ "the uniqueness of the values in "
#~ "the ``_id`` field to prevent errors."
#~ "  This is most-often done by "
#~ "using a standard auto-generated "
#~ ":term:`ObjectId`."
#~ msgstr ""

# 57aab22f77994ffcafb2ad5a80203d07
#~ msgid ""
#~ "Before version 2.2, :term:`capped collections"
#~ " <capped collection>` did not have an"
#~ " ``_id`` field. In version 2.2 and"
#~ " newer, capped collections do have an"
#~ " ``_id`` field, except those in the"
#~ " ``local`` :term:`database`. See :ref:`Capped "
#~ "Collections Recommendations and Restrictions "
#~ "<capped-collections-recommendations-and-"
#~ "restrictions>` for more information."
#~ msgstr ""

# 4a640aa4f2f743a89f4d6ab2f2e6540b
#~ msgid "Indexes on Embedded Fields"
#~ msgstr ""

# dccf5f547b6f4399b4370efbcdd01695
#~ msgid ""
#~ "You can create indexes on fields "
#~ "embedded in sub-documents, just as "
#~ "you can index top-level fields in"
#~ " documents. Indexes on embedded fields "
#~ "differ from :ref:`indexes on sub-"
#~ "documents <index-sub-documents>`, which "
#~ "include the full content up to the"
#~ " maximum :limit:`index size <Index Key>`"
#~ " of the sub-document in the "
#~ "index. Instead, indexes on embedded "
#~ "fields allow you to use a \"dot"
#~ " notation,\" to introspect into sub-"
#~ "documents."
#~ msgstr ""

# 5d5b364a28ce4d4aae2f9f7e256e7058
#~ msgid ""
#~ "Consider a collection named ``people`` "
#~ "that holds documents that resemble the"
#~ " following example document:"
#~ msgstr ""

# 0ca95c6883b44c4bb61de6bc9dbb1899
#~ msgid ""
#~ "You can create an index on the "
#~ "``address.zipcode`` field, using the following"
#~ " specification:"
#~ msgstr ""

# e4b75e260545438ab43838b61920b3b3
#~ msgid "Indexes on Subdocuments"
#~ msgstr ""

# 5aa330025d46455484a1ebed897a0a7d
#~ msgid "You can also create indexes on subdocuments."
#~ msgstr ""

# db16ab36ab4a4047b4e3e2501215a663
#~ msgid ""
#~ "For example, the ``factories`` collection "
#~ "contains documents that contain a "
#~ "``metro`` field, such as:"
#~ msgstr ""

# 10b27638f052404288d19929fb5ab7d0
#~ msgid ""
#~ "The ``metro`` field is a subdocument,"
#~ " containing the embedded fields ``city``"
#~ " and ``state``. The following command "
#~ "creates an index on the ``metro`` "
#~ "field as a whole:"
#~ msgstr ""

# ae7ff0552a6a47f5b60dbc97fda5f9fd
#~ msgid "The following query can use the index on the ``metro`` field:"
#~ msgstr ""

# d871c326bce44300923a4ed117f017c0
#~ msgid ""
#~ "This query returns the above document."
#~ " When performing equality matches on "
#~ "subdocuments, field order matters and "
#~ "the subdocuments must match exactly. For"
#~ " example, the following query does "
#~ "not match the above document:"
#~ msgstr ""

# aebb5c0c14f44ff9934979bc5b7d513a
#~ msgid ""
#~ "See :ref:`query-subdocuments` for more "
#~ "information regarding querying on "
#~ "subdocuments."
#~ msgstr ""

# b9f815ba21b44596aa920add232c303a
#~ msgid "_id index"
#~ msgstr ""

# 342d5b81ac9848f1a404012eaa03e797
# ddae4a03bf9e4c6985d61ebaa9ca3341
#~ msgid "_id"
#~ msgstr ""

# ddae4a03bf9e4c6985d61ebaa9ca3341
# e74b87093787482783c754c9496e4ebd
# fbd173bfad6d4013bc44a6fa5287475c
#~ msgid "index"
#~ msgstr ""

# b2081512c08c49e9a7e96fbe8583f18d
#~ msgid "index types"
#~ msgstr ""

# b2081512c08c49e9a7e96fbe8583f18d
#~ msgid "primary key"
#~ msgstr ""

# e74b87093787482783c754c9496e4ebd
#~ msgid "embedded fields"
#~ msgstr ""

# fbd173bfad6d4013bc44a6fa5287475c
#~ msgid "subdocuments"
#~ msgstr ""

