.. _java-fundamentals-insert:

=================
Insert Operations
=================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: add, save, code example
   :description: Learn about how to insert documents in the {+driver-long+}.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to insert documents with the MongoDB Java
driver. 

You can use MongoDB to retrieve, update, and delete information. To
perform any of those operations, that information, such as user profiles
and orders, needs to exist in MongoDB. For that information to exist,
first perform an insert operation.

An insert operation inserts a single or multiple documents into MongoDB
using the  ``insertOne()``, ``insertMany()``, and ``bulkWrite()``
methods. 

The following sections focus on ``insertOne()`` and
``insertMany()``. For information on how to use the ``bulkWrite()``
method, see our
:ref:`guide on Bulk Operations <java-fundamentals-bulkwrite>`. 

.. note:: The ``id_`` Field in Insert Operations

   When inserting a document, MongoDB enforces one constraint on your
   documents by default: each document *must* contain a unique ``_id`` value.
   Duplicate ``_id`` values violate unique index constraints, resulting in a
   ``WriteError``. 

   There are two ways to manage this field:

   - You can manage this field yourself, ensuring each value you use is unique.
   - You can let the driver automatically generate unique ObjectId values.

   Unless you have provided strong guarantees for uniqueness, we recommend
   you let the driver automatically generate ``_id`` values.  
   
   For more information about unique indexes, see the manual entry on 
   :manual:`Unique Indexes </core/index-unique/>`.

.. _java-insertone:

Insert a Single Document
------------------------

Use the ``insertOne()`` method when you want to insert a single
document. 

On successful insertion, the method returns an ``InsertOneResult``
instance representing the ``_id`` of the new document. 

Example
~~~~~~~

The following example creates and inserts a document using the
``insertOne()`` method: 

.. literalinclude:: /includes/fundamentals/code-snippets/Insert.java
   :language: java
   :dedent:
   :start-after: begin insertOneExample
   :end-before: end insertOneExample

The output of the preceding code resembles the following:

.. code-block:: none
   :copyable: false

   Inserted a document with the following id: 60930c39a982931c20ef6cd6

For more information about the methods and classes mentioned in this section,
see the following resources: 

- `insertOne() <{+driver-api+}/MongoCollection.html#insertOne(TDocument)>`__ API Documentation
- `InsertOneResult <{+core-api+}/client/result/InsertOneResult.html>`__ API Documentation
- Manual Explanation on :manual:`insertOne() </reference/method/db.collection.insertOne/>`
- Runnable :ref:`Insert a Document Example <java-usage-insertone>` 

Insert Multiple Documents
-------------------------

Use the ``insertMany()`` method when you want to insert multiple
documents. This method inserts documents in the order specified until an
exception occurs, if any.

For example, assume you want to insert the following documents:

.. code-block:: json

   { "_id": 3, "color": "red", "qty": 5 }
   { "_id": 4, "color": "purple", "qty": 10 }
   { "_id": 3, "color": "yellow", "qty": 3 }
   { "_id": 6, "color": "blue", "qty": 8 }

If you attempt to insert these documents, a ``WriteError`` occurs at the
third document and the documents prior to the error get inserted into
your collection. 

.. tip::

   Use a try-catch block to get an acknowledgment for successfully
   processed documents before the error occurs:

   .. literalinclude:: /includes/fundamentals/code-snippets/Insert.java
      :language: java
      :dedent:
      :start-after: begin insertManyErrorExample
      :end-before: end insertManyErrorExample

   The output consists of documents MongoDB can process and should look
   something like this:

   .. code-block:: 
      :copyable: false
      
      A MongoBulkWriteException occurred, but there are successfully processed 
      documents with the following ids: [3, 4, 6] 
   
   If you look inside your collection, you should see the following documents:
   
   .. code-block:: json
      :copyable: false

      { "_id": 3, "color": "red", "qty": 5 }
      { "_id": 4, "color": "purple", "qty": 10 }

On successful insertion, the method returns an ``InsertManyResult``
instance representing the ``_id`` of each new document. 

Example
~~~~~~~

The following example creates and adds two documents to a ``List``, and
inserts the ``List`` using the ``insertMany()`` method: 

.. literalinclude:: /includes/fundamentals/code-snippets/Insert.java
   :language: java
   :dedent:
   :start-after: begin insertManyExample
   :end-before: end insertManyExample

The output of the preceding code resembles the following:

.. code-block::
   :copyable: false

   Inserted documents with the following ids: [60930c3aa982931c20ef6cd7,
   60930c3aa982931c20ef6cd8] 

.. _java-usage-insertmany:
.. _java-usage-insertone:

Insert Example: Full File
-------------------------

.. include:: /includes/crud/example-intro.rst

The following code is a complete, standalone file that performs an insert one
operation and an insert many operation: 

.. io-code-block::

   .. input:: /includes/crud/Insert.java
      :language: java
      :dedent:

   .. output:: 
      :language: none
      :visible: false

      insertOne() document id: BsonObjectId{value=...}
      insertMany() document ids: {0=BsonObjectId{value=...}, 1=BsonObjectId{value=...}}

Additional Information
----------------------

API Documentation
~~~~~~~~~~~~~~~~~

For more information about the methods and classes used to insert documents, see the following API documentation: 

- `insertOne() <{+driver-api+}/MongoCollection.html#insertOne(TDocument)>`__
- `InsertOneResult <{+core-api+}/client/result/InsertOneResult.html>`__
- `insertMany() <{+driver-api+}/MongoCollection.html#insertMany(java.util.List)>`__
- `InsertManyResult <{+core-api+}/client/result/InsertManyResult.html>`__ 

Server Manual Entries
~~~~~~~~~~~~~~~~~~~~~

- :manual:`db.collection.insertOne() </reference/method/db.collection.insertOne/>`
- :manual:`db.collection.insertMany() </reference/method/db.collection.insertMany/>`
