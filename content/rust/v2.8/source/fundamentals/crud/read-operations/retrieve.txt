.. _rust-retrieve-guide:

=============
Retrieve Data
=============

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: find one, find many, pipeline, code example 

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
collections using **read operations**. Read operations are commands that
retrieve documents from the server.

There are two types of read operations:

- Find operations, which allow you to retrieve documents from your collections
- Aggregation operations, which allow you to transform the data in your collections

This guide includes the following sections:

- :ref:`Sample Data for Examples <rust-retrieve-sample-data>` presents
  the sample data that is used by the read operation examples

- :ref:`Find Operations <rust-retrieve-find>` describes how to use the
  driver to execute find operations

- :ref:`Aggregation Operations <rust-retrieve-aggregation>` describes how to use the
  driver to execute aggregation operations

- :ref:`Additional Information <rust-crud-retrieve-addtl-info>`
  provides links to resources and API documentation for types
  and methods mentioned in this guide

.. _rust-retrieve-sample-data:

Sample Data for Examples
------------------------

The examples in this guide use the following sample documents. Each
document represents an item in a store's inventory and contains
information about its categorization and unit price:

.. literalinclude:: /includes/fundamentals/code-snippets/crud/retrieve.rs
   :language: rust
   :dedent:
   :start-after: start-sample
   :end-before: end-sample

.. _rust-retrieve-find:

Find Operations
---------------

Use find operations to retrieve data from MongoDB. Find operations
consist of the ``find()`` and ``find_one()`` methods.

Find All Matching Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To find *all the documents* that match your criteria, use the
``find()`` method. This method takes a query filter as a parameter. A
query filter consists of the fields and values that form criteria for
documents to match.

The method returns a ``Cursor`` type that you can iterate through to
retrieve any documents that match the filter criteria.

To see an example that uses this method to retrieve data, see
the :ref:`find() example <rust-find-example>`.

To learn more about specifying a query, see the :ref:`rust-query-guide` guide.

Find One Document
~~~~~~~~~~~~~~~~~

To find *the first document* that matches your criteria, use the
``find_one()`` method. This method takes a query filter as a parameter. A
query filter consists of the fields and values that form criteria for
documents to match.

If a document matches the filter criteria, the method returns a
``Result<Option<T>>`` type with a value of ``Some``. If no documents
match the filter criteria, ``find_one()`` returns a ``Result<Option<T>>``
type with a value of ``None``.

To see an example that uses this method to retrieve data, see
the :ref:`find_one() example <rust-find-one-example>`.

.. _rust-retrieve-options:

Modify Find Behavior
~~~~~~~~~~~~~~~~~~~~

You can modify the behavior of ``find()`` by passing
a ``FindOptions`` instance as a parameter, and you can modify the
behavior of ``find_one()`` by passing a ``FindOneOptions`` instance.

To use default values for each setting, specify the value ``None`` as
the options parameter.

The following table describes commonly used settings that you can specify in
``FindOptions`` and ``FindOneOptions``:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Setting
     - Description

   * - ``collation`` 
     - | The collation to use when sorting results. To learn more about collations,
         see the :ref:`rust-collations` guide.
       |
       | Type: ``Collation``
       | Default: ``None``

   * - ``hint`` 
     - | The index to use for the operation. To learn more about
         indexes, see :manual:`Indexes </indexes/>` in the Server
         manual.
       |
       | Type: ``Hint``
       | Default: ``None``

   * - ``projection`` 
     - | The projection to use when returning results.
       |
       | Type: ``Document``
       | Default: ``None``

   * - ``read_concern`` 
     - | The read concern to use for the find operation. If you don't
         set this option, the operation inherits the read concern set for the
         collection. To learn more about read concerns, see
         :manual:`Read Concern </reference/read-concern/>`
         in the Server manual.
       |
       | Type: ``ReadConcern``

   * - ``skip`` 
     - | The number of documents to skip when returning results. To learn more 
         about how to use the ``skip()`` builder method, see :ref:`rust-skip-guide`.
       |
       | Type: ``u64``
       | Default: ``None``

   * - ``sort`` 
     - | The sort to use when returning results. By default, the driver
         returns documents in their natural order, or as they appear in
         the database. To learn more, see :manual:`natural order </reference/glossary/#std-term-natural-order>`
         in the Server manual glossary. To learn more about how to use the
         ``sort()`` builder method, see :ref:`rust-sort-guide`.
       |
       | Type: ``Document``
       | Default: ``None``

.. TODO link to projection fundamentals page under projection setting

.. note:: Instantiating Options
   
   The {+driver-short+} implements the Builder design pattern for the
   creation of many different types, such as ``FindOneOptions`` or
   ``FindOptions``. You can use each type's ``builder()`` method to
   construct an options instance by chaining option builder functions
   one at a time.

For a full list of settings you can specify for each type, see the API
documentation for `FindOptions
<{+api+}/options/struct.FindOptions.html>`__ and `FindOneOptions
<{+api+}/options/struct.FindOneOptions.html>`__.

Examples
~~~~~~~~

The following sections contain examples that use the ``find()`` and
``findOne()`` methods to retrieve sample documents that match filter
criteria.

.. _rust-find-example:

find() Example
``````````````

This example shows how to call the ``find()`` method with the
following parameters:

- A query filter that matches documents where the value of ``unit_price``
  is less than ``12.00`` and the value of ``category`` is not ``"kitchen"``
- A ``FindOptions`` instance that sorts matched documents by
  ``unit_price`` in descending order

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/crud/retrieve.rs
      :start-after: begin-find-many
      :end-before: end-find-many
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      Inventory { item: "watering can", category: "garden", unit_price: 11.99 }
      Inventory { item: "candle", category: "decor", unit_price: 2.89 }

.. _rust-find-one-example:

find_one() Example
``````````````````

This example shows how to call the ``find_one()`` method with the
following parameters:

- A query filter that matches documents where the value of ``unit_price``
  is less than or equal to ``20.00``
- A ``FindOneOptions`` instance that skips the first two matched documents

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/crud/retrieve.rs
      :start-after: begin-find-one
      :end-before: end-find-one
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      Some(
          Inventory {
              item: "watering can",
              category: "garden",
              unit_price: 11.99,
          },
      )

.. _rust-retrieve-aggregation:

Aggregation Operations
----------------------

Use aggregation operations to retrieve and transform data from your
collections. You can perform aggregation operations by using the ``aggregate()``
method.

Aggregate Document Data
~~~~~~~~~~~~~~~~~~~~~~~

The ``aggregate()`` method takes an **aggregation pipeline** as a
parameter. An aggregation pipeline includes one or more **stages** that
specify how to transform data. A stage includes an aggregation operator
(prefixed with a ``$``) and any required parameters for that operator.

To learn more about aggregations and view aggregation examples, see the :ref:`rust-aggregation` guide.

The method returns the resulting documents in a ``Cursor`` type. If
your aggregation pipeline does not contain a :manual:`$match
</reference/operator/aggregation/match/>` stage, the pipeline processes
all the documents in the collection.

Modify Aggregation Behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can modify the behavior of ``aggregate()`` by passing
an ``AggregateOptions`` instance as an optional parameter.

To use default values for each setting, specify the value ``None`` as
the options parameter.

The following table describes commonly used settings that you can specify in
``AggregateOptions``:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Setting
     - Description

   * - ``allow_disk_use`` 
     - | Enables writing to temporary files. If ``true``,
         aggregation stages can write data to the ``_tmp`` subdirectory in the
         ``dbPath`` directory.
       |
       | Type: ``bool``
       | Default: ``false``

   * - ``batch_size`` 
     - | Specifies the maximum number of documents the server returns per
         cursor batch. This option sets the number of documents the cursor
         keeps in memory rather than the number of documents the cursor
         returns.
       |
       | Type: ``u32``
       | Default: ``101`` documents initially, ``16 MB`` maximum for
         subsequent batches

   * - ``collation``
     - | The collation to use when sorting results. To learn more about collations,
         see the :ref:`rust-collations` guide.
       |
       | Type: ``Collation``
       | Default: ``None``

   * - ``hint`` 
     - | The index to use for the operation. To learn more about
         indexes, see :manual:`Indexes </indexes/>` in the Server
         manual.
       |
       | Type: ``Hint``
       | Default: ``None``

   * - ``read_concern`` 
     - | The read concern to use for the find operation. If you don't
         set this option, the operation inherits the read concern set for the
         collection. To learn more about read concerns, see
         :manual:`Read Concern </reference/read-concern/>`
         in the Server manual.
       |
       | Type: ``ReadConcern``

   * - ``write_concern``
     - | The write concern for the operation. If you don't set this
         option, the operation inherits the write concern set for
         the collection. To learn more about write concerns, see
         :manual:`Write Concern </reference/write-concern/>` in the
         Server manual.
       |
       | Type: ``WriteConcern``

For a full list of settings, see the API
documentation for `AggregateOptions <{+api+}/options/struct.AggregateOptions.html>`__.

Example
~~~~~~~

This example shows how to call the ``aggregate()`` method with a
pipeline that contains the following stages:

- A ``$group`` stage to group documents by the ``category`` field and
  calculate the average of the ``unit_price`` field by ``category``
- A ``$sort`` stage to by ``avg_price`` in ascending order

.. io-code-block::
   :copyable: true

   .. input:: /includes/fundamentals/code-snippets/crud/retrieve.rs
      :start-after: begin-agg
      :end-before: end-agg
      :language: rust
      :dedent:

   .. output::
      :language: console
      :visible: false

      Document({"_id": Document({"category": String("decor")}), "avg_price": Double(2.890000104904175)})
      Document({"_id": Document({"category": String("kitchen")}), "avg_price": Double(20.840000867843628)})
      Document({"_id": Document({"category": String("garden")}), "avg_price": Double(11.989999771118164)})

.. _rust-crud-retrieve-addtl-info:

Additional Information
----------------------

For runnable examples of the find operations, see the following usage
examples:

- :ref:`rust-find-one-usage`
- :ref:`rust-find-usage`

To learn more about the operations in this guide, see the
following documentation:

- :ref:`rust-query-guide` guide
- :ref:`rust-cursor-guide` guide
- :ref:`rust-aggregation` guide
- :ref:`rust-sort-guide` guide
- :ref:`rust-skip-guide` guide
- :ref:`rust-limit-guide` guide
.. - :ref:`rust-project-guide`
.. - :ref:`rust-collations-guide`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about the methods and types mentioned in this
guide, see the following API documentation:

- `find_one() <{+api+}/struct.Collection.html#method.find_one>`__
- `find() <{+api+}/struct.Collection.html#method.find>`__
- `FindOptions <{+api+}/options/struct.FindOptions.html>`__
- `FindOneOptions <{+api+}/options/struct.FindOneOptions.html>`__
- `Cursor <{+api+}/struct.Cursor.html>`__
- `aggregate() <{+api+}/struct.Collection.html#method.aggregate>`__
- `AggregateOptions <{+api+}/options/struct.AggregateOptions.html>`__