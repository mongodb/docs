.. _entity-framework-faq:

===
FAQ
===

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: questions, errors, problems
   :description: Discover the differences between the .NET/C# Driver and the EF Core Provider for MongoDB, including their features and use cases.

This page contains frequently asked questions and their corresponding answers.

.. tip::

   If you can't find an answer to your problem on this page,
   see the :ref:`entity-framework-issues-help` page for next steps and more
   resources.

What is the Difference Between the {+csharp-driver-short+} and the {+provider-short+}?
-----------------------------------------------------------------------------------------

The :driver:`{+csharp-driver-long+} </csharp>` is a library that exposes MongoDB functionality
directly and includes a LINQ provider with projections, group
operations, and flexible mapping. The driver includes features such as the
following:

- Transactions
- Bulk operations
- LINQ queries
- Operations that directly modify the database
- Aggregation operations
- Custom mapping

The {+provider-short+} allows you to use Microsoft's {+framework-core+} with
MongoDB in your {+dotnet-csharp+} applications. The {+provider-short+} supports
change tracking, entity-based LINQ operations, and modeling familiar to
{+framework-core+} users. The provider includes features such as the following:

- Intelligent object tracking
- Entity-based LINQ operations
- Entity Framework modeling and mapping with the fluent API
- Automatic database updates through change tracking

How Can I Manage Indexes with the {+provider-short+}?
-----------------------------------------------------

You can create indexes with the {+provider-short+} by calling the ``HasIndex()``
method in the ``OnModelCreating()`` method of your ``DbContext`` class. To learn
more about how to create indexes with the {+provider-short+}, see the
:ref:`Indexes <entity-framework-indexes>` guide.

Because the {+provider-short+} is built on top of the {+csharp-driver-short+},
you can also manage indexes in your application by using the {+csharp-driver-short+}
directly. To use driver methods in your {+provider-short+}
application, call them on the ``MongoClient`` used to set up your
``DbContext``.

The following example creates indexes on the ``movies`` collection by using
{+csharp-driver-short+} methods:

.. literalinclude:: /includes/code-examples/faq.cs
   :language: csharp
   :start-after: start-create-index
   :end-before: end-create-index

To learn more about creating indexes by using the driver, see the
`Indexes guide <{+driver-docs-root+}/fundamentals/indexes/>`__ in the
{+csharp-driver-long+} documentation.

Can I Access {+csharp-driver-short+} Features in the {+provider-short+}?
------------------------------------------------------------------------

You can use the {+csharp-driver-short+} directly in your {+provider-short+}
application by calling driver methods on the ``MongoClient`` used to set up
your ``DbContext``. The {+provider-short+} is built on top of the
{+csharp-driver-short+}, so you can use all driver features in your
application. For example, you can use the driver to perform an Atlas Search
query as shown in the following example:

.. literalinclude:: /includes/code-examples/faq.cs
   :language: csharp
   :start-after: start-atlas-search
   :end-before: end-atlas-search

To learn more about performing Atlas Search queries with the
{+csharp-driver-short+}, see the `Atlas Search guide <{+driver-docs-root+}/fundamentals/atlas-search/>`__ in the
driver documentation.