====
$and
====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. query:: $and

   *Syntax*: ``{ $and: [ { <expression1> }, { <expression2> } , ... , { <expressionN> } ] }``

   :query:`$and` performs a logical ``AND`` operation on an array
   of *one or more* expressions (e.g. ``<expression1>``,
   ``<expression2>``, etc.) and selects the documents that satisfy
   *all* the expressions in the array. The :query:`$and` operator
   uses *short-circuit evaluation*. If the first expression
   (e.g. ``<expression1>``) evaluates to ``false``, MongoDB will not
   evaluate the remaining expressions.

   .. note::

      MongoDB provides an implicit ``AND`` operation when specifying a
      comma separated list of expressions.  Using an explicit ``AND``
      with the :query:`$and` operator is necessary when the same field
      or operator has to be specified in multiple expressions.

Examples
--------

``AND`` Queries With Multiple Expressions Specifying the Same Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider the following example:

.. code-block:: javascript

   db.inventory.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } )

This query will select all documents in the ``inventory``
collection where:

- the ``price`` field value is not equal to ``1.99`` **and**
- the ``price`` field exists.

This query can be also be constructed with an implicit ``AND``
operation by combining the operator expressions for the ``price``
field.  For example, this query can be written as:

.. code-block:: javascript

   db.inventory.find( { price: { $ne: 1.99, $exists: true } } )

``AND`` Queries With Multiple Expressions Specifying the Same Operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider the following example:

.. code-block:: javascript

   db.inventory.find( {
       $and : [
           { $or : [ { price : 0.99 }, { price : 1.99 } ] },
           { $or : [ { sale : true }, { qty : { $lt : 20 } } ] }
       ]
   } )

This query will select all documents where:

- the ``price`` field value equals ``0.99`` or ``1.99``, **and**
- the ``sale`` field value is equal to ``true`` **or** the ``qty``
  field value is less than ``20``.

This query cannot be constructed using an implicit ``AND`` operation,
because it uses the :query:`$or` operator more than once.

.. seealso::

   :method:`~db.collection.find()`, :method:`~db.collection.update()`,
   :query:`$ne`, :query:`$exists`, :update:`$set`.
