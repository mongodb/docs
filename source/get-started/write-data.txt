.. _django-get-started-write:

=====================
Write Data to MongoDB
=====================

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: app, odm, code example

You can use your application's models to update documents
stored in the ``sample_mflix`` database. To update documents,
enter the Python interactive shell and call create, update,
and delete functions on your model objects.

.. procedure::
   :style: connected

   .. step:: Start a Python shell

      From your project's root directory, run the following command to 
      enter the Python shell:

      .. code-block:: bash

         python manage.py shell

   .. step:: Import the required classes and modules

      From your Python shell, run the following code to import
      your models and the module for creating a ``datetime`` object:

      .. literalinclude:: /includes/get-started/read-write-data.py
         :start-after: start-imports
         :end-before: end-imports
         :language: python
         :copyable:

   .. step:: Insert a movie into the database

      Run the following code to create an ``Movie`` object that
      stores data about a movie titled ``"Minari"``, including
      its awards in an ``Award`` object:

      .. literalinclude:: /includes/get-started/read-write-data.py
         :start-after: start-insert-movie
         :end-before: end-insert-movie
         :language: python
         :copyable:

   .. step:: Update your Movie object

      The ``Movie`` object created in the previous step has inaccurate data:
      the ``runtime`` value is ``217``, but the correct ``runtime`` value is ``117``.

      Run the following code to update the object's ``runtime`` value:

      .. literalinclude:: /includes/get-started/read-write-data.py
         :start-after: start-update-movie
         :end-before: end-update-movie
         :language: python
         :copyable:

   .. step:: Insert a Viewer into the database

      You can also use your ``Viewer`` model to insert documents into the
      ``sample_mflix.users`` collection. Run the following code to create
      a ``Viewer`` object that stores data about a movie viewer named ``"Abigail Carter"``:

      .. literalinclude:: /includes/get-started/read-write-data.py
         :start-after: start-insert-viewer
         :end-before: end-insert-viewer
         :language: python
         :copyable:

   .. step:: Delete a Viewer object

      One movie viewer named "Alliser Thorne" no longer uses the movie streaming
      site. To remove this viewer's corresponding document from the database,
      run the following code:

      .. literalinclude:: /includes/get-started/read-write-data.py
         :start-after: start-delete-viewer
         :end-before: end-delete-viewer
         :language: python
         :copyable:

   .. step:: Start the development server

      Exit the Python shell by running the following code:

      .. code-block:: python
         
         exit()

      Then, start your server by running the following command
      from your project's root directory:

      .. code-block:: bash
         
         python manage.py runserver

   .. step:: Render your new objects

      To ensure that you inserted a ``Movie`` object into the database,
      visit the http://127.0.0.1:8000/recent_movies/ URL.
      You can see a list of five movies in the ``sample_mflix.movies``
      database, with your new movie listed at the top.

      Then, ensure that you inserted a ``Viewer`` object into the
      database by visiting the http://127.0.0.1:8000/viewers_list/
      URL. You can see a list of ten viewer names in the ``sample_mflix.users``
      database, with your new viewer listed at the top. Ensure that the
      viewer named "Alliser Thorne", deleted in a previous step, does not appear
      in this list.

After completing these steps, you have inserted and edited documents
in the ``sample_mflix`` sample database.