=============================
db.collection.createIndexes()
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.createIndexes( [ keyPatterns ], options )

   .. versionadded:: 3.2

   Creates one or more indexes on a collection.


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``keyPatterns``
   
        - document
   
        - An array containing index specification documents. Each document
          contains field and value pairs where the field is
          the index key and the value describes the type of index for that
          field. For an ascending index on a field, specify a value of ``1``; for
          descending index, specify a value of ``-1``.
          
          MongoDB supports several different index types including
          :ref:`text <index-feature-text>`, :ref:`geospatial
          <index-feature-geospatial>`, and :ref:`hashed
          <index-type-hashed>` indexes. See :ref:`index types <index-types>`
          for more information.
          
          
   
      * - ``options``
   
        - document
   
        - Optional. A document that contains a set of options that controls the creation
          of the indexes. See :ref:`createIndexes-options` for details.
          
          
   


   The :method:`db.collection.createIndexes()` is a wrapper around the
   :dbcommand:`createIndexes` command.

   To minimize the impact of building an index on replica sets and sharded
   clusters, use a rolling index build procedure
   as described on :doc:`/tutorial/build-indexes-on-replica-sets`.

.. _createIndexes-options:

Options
-------

The ``options`` document contains a set of options that control the
creation of the indexes. Different index types can have additional
options specific for that type.

Multiple index options can be specified in the same document. However,
if you specify mutiple option documents the :method:`db.collection.createIndexes()`
operation will fail.

Consider the following :method:`db.collection.createIndexes()` operation:

.. code-block:: javascript

   db.collection.createIndexes(
      [
        {
          "a": 1
        },
        {
          "b": 1
        }
      ],
      {
        unique: true,
        sparse: true,
        expireAfterSeconds: 3600
      }
    )

If the options specification had been split into multiple documents
like this:
``{ unique: true }, { sparse: true, expireAfterSeconds: 3600 }``
the index creation operation would have failed.

.. important::

   When you specify options to
   :method:`db.collection.createIndexes()`, the options apply to
   *all* of the specified indexes. For example, if you specify a
   collation option, all of the created indexes will include that
   collation.
   
   :method:`db.collection.createIndexes()` will return an error if you
   attempt to create indexes with incompatible options or too many
   arguments. Refer to the option descriptions for more information.

Options for All Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for all index types unless
otherwise specified:

.. include:: /includes/fact-remove-dropDups-option.rst


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``background``

     - boolean

     - Optional. Builds the indexes in the background so the operation does
       *not* block other database activities. Specify ``true`` to build in
       the background. The default value is ``false``.
       
       

   * - ``unique``

     - boolean

     - Optional. Specifies that each index specified in the ``keyPatterns`` array
       is a :doc:`unique index </core/index-unique>`. Unique indexes will not
       accept insertion or update of documents where the index key value matches an
       existing value in the index.
       
       
       Specify ``true`` to create a unique index. The
       default value is ``false``.
       
       The option is *unavailable* for :doc:`hashed </core/index-hashed>`
       indexes.
       
       
       

   * - ``name``

     - string

     - Optional. The name of the index. If unspecified, MongoDB generates an index name
       by concatenating the names of the indexed fields and the sort order.
       
       Whether user specified or MongoDB generated, index names including
       their full namespace (i.e. ``database.collection``) cannot be longer
       than the :limit:`Index Name Limit <Index Name Length>`.
       
       
       Options specified to :method:`db.collection.createIndexes` apply to **all** of the index
       specifications included in the key pattern array. Since index names
       must be unique, you may
       only specify name if you are creating a single index using
       :method:`db.collection.createIndexes`.
       
       

   * - ``partialFilterExpression``

     - document

     - Optional. If specified, the indexes only reference documents that match the
       filter expression. See :doc:`/core/index-partial` for more
       information.
       
       
       A filter expression can include:
       
       .. include:: /includes/fact-partial-filter-expression-operators.rst
       
       You can specify a ``partialFilterExpression`` option for all MongoDB
       :ref:`index types <index-types>`.
       
       .. versionadded:: 3.2
       
       
       

   * - ``sparse``

     - boolean

     - Optional. If ``true``, the indexes only reference documents with the specified
       fields. These indexes use less space but behave differently in some
       situations (particularly sorts). The default value is ``false``.
       See :doc:`/core/index-sparse` for more information.
       
       .. versionchanged:: 3.2 
       
          Starting in MongoDB 3.2, MongoDB provides the option to create
          :ref:`partial indexes <index-type-partial>`. Partial indexes
          offer a superset of the functionality of sparse indexes. If you
          are using MongoDB 3.2 or later, :ref:`partial indexes
          <index-type-partial>` should be preferred over sparse indexes.
       
       .. versionchanged:: 2.6
       
          :doc:`2dsphere </core/2dsphere>` indexes are sparse by default and
          ignore this option. For a compound index that includes
          ``2dsphere`` index key(s) along with keys of other types, only the
          ``2dsphere`` index fields determine whether the index references a
          document.
       
          :doc:`2d </core/2d>`, :doc:`geoHaystack </core/geohaystack>`, and
          :doc:`text </core/index-text>` indexes behave similarly to the
          :doc:`2dsphere </core/2dsphere>` indexes.
       
       

   * - ``expireAfterSeconds``

     - integer

     - Optional. Specifies a value, in seconds, as a :term:`TTL` to control how long
       MongoDB retains documents in this collection. See
       :doc:`/tutorial/expire-data` for more information on this
       functionality. This applies only to :term:`TTL` indexes.
       
       

   * - ``storageEngine``

     - document

     - Optional. Allows users to configure the storage engine for the created
       indexes.
       
       
       The ``storageEngine`` option should take the following form:
       
       .. code-block:: javascript
       
          storageEngine: { <storage-engine-name>: <options> }
       
       Storage engine configuration options specified when creating indexes are
       validated and logged to the :term:`oplog` during replication to
       support replica sets with members that use different storage
       engines.
       
       .. versionadded:: 3.0
       
       
       



.. _create-indexes-collation:

Option for Collation
~~~~~~~~~~~~~~~~~~~~


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``collation``

     - document

     - Optional. Specifies the :ref:`collation <collation>` for the index.
       
       .. include:: /includes/extracts/collation-description.rst
       
       .. include:: /includes/extracts/collation-index-collection.rst
       
       .. include:: /includes/extracts/collation-option-specification.rst
       
       .. versionadded:: 3.4
       
       



.. include:: /includes/extracts/collation-index-type-restrictions.rst

.. include:: /includes/extracts/collation-index-type-restrictions-addendum.rst

Collation and Index Use
```````````````````````

.. include:: /includes/extracts/collation-index.rst

Options for ``text`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :doc:`text </core/index-text>`
indexes only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``weights``

     - document

     - Optional. For :doc:`text </core/index-text>` indexes, a document that contains
       field and weight pairs. The weight is an integer ranging from 1 to
       99,999 and denotes the significance of the field relative to the
       other indexed fields in terms of the score. You can specify weights
       for some or all the indexed fields. See
       :doc:`/tutorial/control-results-of-text-search` to adjust the scores.
       The default value is ``1``.
       
       

   * - ``default_language``

     - string

     - Optional. For :doc:`text </core/index-text>` indexes, the language that
       determines the list of stop words and the rules for the stemmer and
       tokenizer. See :ref:`text-search-languages` for the available
       languages and :doc:`/tutorial/specify-language-for-text-index` for
       more information and examples. The default value is ``english``.
       
       

   * - ``language_override``

     - string

     - Optional. For :doc:`text </core/index-text>` indexes, the name of the field, in
       the collection's documents, that contains the override language for
       the document. The default value is ``language``. See
       :ref:`specify-language-field-text-index-example` for an example.
       
       

   * - ``textIndexVersion``

     - integer

     - Optional. The ``text`` index version number. Users can use this option to
       override the default version number.
       
       For available versions, see :ref:`text-versions`.
       
       .. versionadded:: 2.6
       
       



Options for ``2dsphere`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :doc:`2dsphere </core/2dsphere>`
indexes only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``2dsphereIndexVersion``

     - integer

     - Optional. The ``2dsphere`` index version number. Users can use this option to
       override the default version number.
       
       For the available versions, see :ref:`2dsphere-v2`.
       
       .. versionadded:: 2.6
       
       



Options for ``2d`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following options are available for :doc:`2d </core/2d>` indexes
only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``bits``

     - integer

     - Optional. For :doc:`2d </core/2d>` indexes, the number of precision of the
       stored :term:`geohash` value of the location data.
       
       The ``bits`` value ranges from 1 to 32 inclusive. The default value
       is ``26``.
       
       

   * - ``min``

     - number

     - Optional. For :doc:`2d </core/2d>` indexes, the lower inclusive boundary for
       the longitude and latitude values. The default value is ``-180.0``.
       
       

   * - ``max``

     - number

     - Optional. For :doc:`2d </core/2d>` indexes, the upper inclusive boundary for
       the longitude and latitude values. The default value is ``180.0``.
       
       



Options for ``geoHaystack`` Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following option is available for :doc:`geoHaystack </core/geohaystack>`
indexes only:


.. list-table::
   :header-rows: 1
   :widths: 20 20 80

   * - Parameter

     - Type

     - Description

   * - ``bucketSize``

     - number

     - For :doc:`geoHaystack </core/geohaystack>` indexes, specify the
       number of units within which to group the location values; i.e. group
       in the same bucket those location values that are within the
       specified number of units to each other.
       
       The value must be greater than 0.
       
       



Behaviors
---------

The :method:`~db.collection.createIndexes()` method has the following
behaviors.

.. warning::

   Foreground index builds block all other operations on the database.

.. include:: /includes/extracts/createIndexes-behavior.rst

-  .. include:: /includes/fact-index-key-length-operation-behaviors.rst
      :start-after: index-field-limit-ensureIndex
      :end-before: .. index-field-limit-reIndex

   .. |limit| replace:: :limit:`Maximum Index Key Length <Index Key>`

Example
-------

.. seealso:: :method:`db.collection.createIndex()` for examples of
   various index specifications.

Create Indexes Without Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a ``restaurants`` collection containing documents that
resemble the following:

.. code-block:: javascript

   {
      location: {
         type: "Point",
         coordinates: [-73.856077, 40.848447]
      },
      name: "Morris Park Bake Shop",
      cuisine: "Cafe",
      borough: "Bronx",
   }

The following example creates two indexes on the ``restaurants``
collection: an ascending index on the ``borough`` field and a
:doc:`2dsphere </core/2dsphere>` index on the ``location`` field.

.. code-block:: sh

   db.restaurants.createIndexes([{"borough": 1}, {"location": "2dsphere"}])

Create Indexes with Collation Specified
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example creates two indexes on the ``products``
collection: an ascending index on the ``manufacturer`` field and an
ascending index on the ``category`` field. Both indexes use a :ref:`collation
<create-index-collation>` that specifies the locale ``fr`` and
comparison strength ``2``:

.. code-block:: javascript

   db.products.createIndexes( [ { "manufacturer": 1}, { "category": 1 } ],
      { collation: { locale: "fr", strength: 2 } })

For queries or sort operations on the indexed keys that uses the same collation
rules, MongoDB can use the index. For details, see :ref:`createIndex-collation-index-use`.


Additional Information
----------------------

For additional information about indexes, refer to:

- The :doc:`/indexes` section of this manual for full
  documentation of indexes and indexing in MongoDB.

- :method:`db.collection.getIndexes()` to view the specifications of
  existing indexes for a collection.

- :doc:`/core/index-text` for details on creating ``text``
  indexes.

- :ref:`index-feature-geospatial` and
  :ref:`index-geohaystack-index` for geospatial queries.

- :ref:`index-feature-ttl` for expiration of data.
