.. _entity-framework-quick-reference:

===============
Quick Reference
===============

This page shows the provider syntax for several commands and links to
their related API documentation.

.. list-table::
   :header-rows: 1
   :widths: 25 75

   * - Command
     - Syntax

   * - | **Configure a DBContext**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext>`__
       | :ref:`Fundamentals <entity-framework-configure>`

     - .. literalinclude:: /includes/code-examples/quick-reference.cs
          :start-after: // start-db-context
          :end-before: // end-db-context
          :language: csharp
          :dedent:

   * - | **Create an Instance of the DBContext**
       |
       | :ref:`Fundamentals <entity-framework-db-context>`

     - .. literalinclude:: /includes/code-examples/quick-reference.cs
          :start-after: // start-create-instance
          :end-before: // end-create-instance
          :language: csharp
          :dedent:

   * - | **Find an Entity**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.query.queryablemethods.firstordefaultwithpredicate>`__
       | :ref:`Fundamentals <entity-framework-find-one>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var planet = db.Planets.FirstOrDefault(p => p.name == "Mercury");
             
             Console.WriteLine(planet.name);

          .. output::
             :language: json
             :visible: false

             Mercury

   * - | **Find Multiple Entities**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.query.queryablemethods.where>`__
       | :ref:`Fundamentals <entity-framework-find-multiple>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var planets = db.Planets.Where(p => p.hasRings == true);

             foreach (var p in planets)
             {
                Console.WriteLine(p.name);
             }

          .. output::
             :language: json
             :visible: false

             Neptune
             Uranus
             Saturn
             Jupiter

   * - | **Insert an Entity**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext.add>`__
       | :ref:`Fundamentals <entity-framework-insert-one>`

     - .. literalinclude:: /includes/code-examples/quick-reference.cs
          :start-after: // start-insert-one
          :end-before: // end-insert-one
          :language: csharp
          :dedent:

   * - | **Insert Multiple Entities**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext.addrange>`__
       | :ref:`Fundamentals <entity-framework-insert-multiple>`

     - .. literalinclude:: /includes/code-examples/quick-reference.cs
          :start-after: // start-insert-many
          :end-before: // end-insert-many
          :language: csharp
          :dedent:

   * - | **Update an Entity**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext.update>`__
       | :ref:`Fundamentals <entity-framework-update>`

     - .. literalinclude:: /includes/code-examples/quick-reference.cs
          :start-after: // start-update-one
          :end-before: // end-update-one
          :language: csharp
          :dedent:

   * - | **Update Multiple Entities**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext.updaterange>`__
       | :ref:`Fundamentals <entity-framework-update>`

     - .. literalinclude:: /includes/code-examples/quick-reference.cs
          :start-after: // start-update-many
          :end-before: // end-update-many
          :language: csharp
          :dedent:

   * - | **Delete an Entity**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext.remove>`__
       | :ref:`Fundamentals <entity-framework-delete-one>`

     - .. literalinclude:: /includes/code-examples/quick-reference.cs
          :start-after: // start-delete-one
          :end-before: // end-delete-one
          :language: csharp
          :dedent:

   * - | **Delete Multiple Entities**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext.removerange>`__
       | :ref:`Fundamentals <entity-framework-delete-multiple>`

     - .. literalinclude:: /includes/code-examples/quick-reference.cs
          :start-after: // start-delete-many
          :end-before: // end-delete-many
          :language: csharp
          :dedent:

   * - | **Specify the Order in Which to Retrieve Entities**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.query.queryablemethods.orderby>`__
       | :ref:`Fundamentals <entity-framework-sort>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var planetList = db.Planets.OrderBy(p => p.orderFromSun);
    
             foreach (var p in planetList)
             {
                 Console.WriteLine(p.name);
             }

          .. output::
             :language: json
             :visible: false

             Mercury
             Venus
             Earth
             Mars
             Jupiter
             Saturn
             Uranus
             Neptune

   * - | **Specify Multiple Orderings to Retrieve Entities**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.query.queryablemethods.thenby>`__
       | :ref:`Fundamentals <entity-framework-sort>`

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var planetList = db.Planets.OrderBy(o => o.hasRings).ThenBy(o => o.name);
    
             foreach (var p in planetList)
             {
                 Console.WriteLine("Has rings: " + p.hasRings + ", Name: " + p.name);
             }

          .. output::
             :language: json
             :visible: false

             Has rings: False, Name: Earth
             Has rings: False, Name: Mars
             Has rings: False, Name: Mercury
             Has rings: False, Name: Venus
             Has rings: True, Name: Jupiter
             Has rings: True, Name: Neptune
             Has rings: True, Name: Saturn
             Has rings: True, Name: Uranus


   * - | **Specify the Number of Entities to Retrieve**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.query.queryablemethods.take>`__

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var planetList = db.Planets.Take(3);
    
             foreach (var p in planetList)
             {
                 Console.WriteLine(p.name);
             }

          .. output::
             :language: json
             :visible: false

             Neptune
             Mercury
             Mars

   * - | **Specify the Number of Entities to Skip when Retrieving**
       |
       | `API Documentation <https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.query.queryablemethods.skip>`__

     - .. io-code-block::
          :copyable: true

          .. input::
             :language: csharp

             var planetList = db.Planets.OrderBy(p => p.orderFromSun).Skip(5);
    
             foreach (var p in planetList)
             {
                 Console.WriteLine(p.name);
             }

          .. output::
             :language: json
             :visible: false

             Saturn
             Uranus
             Neptune
