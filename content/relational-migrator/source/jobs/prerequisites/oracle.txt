.. _rm-prereq-oracle:

============================================
Configure Migration Prerequisites for Oracle
============================================

.. meta::
   :description: Configure Oracle database prerequisites for migration with Relational Migrator, including setting user permissions and enabling archive and supplemental logging.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

When you migrate data from an Oracle source database, {+rel-mig+} 
automatically checks your database for needed configuration changes and 
generates a SQL script to implement them. Have a Database Administrator (DBA)
review the script and run the commands on the database server.

Oracle configuration depends on the type of migration job:

.. include:: /includes/fact-short-sync-job-desc.rst

For details on supported versions of Oracle, see 
:ref:`supported-databases`.

About this Task
---------------

- If you're migrating from an Oracle 12c instance, you must run commands as 
  the SYSDBA role.
- Oracle 12c introduced the concept of a pluggable database (PDB). Some
  commands can be run on a PDB, while commands like enabling ``ARCHIVELOG``
  must be run on the container/master database (CDB). For details on each
  architecture, see `Overview of Container Databases and Pluggable Databases <https://oracle-base.com/articles/12c/multitenant-overview-container-database-cdb-12cr1>`__.
- Some commands differ based on whether the database is single or
  multi-tenant. In a multi-tenant database, permissions must
  include the suffix ``CONTAINER=ALL``. To check whether the database is 
  multi-tenant or not, run the following SQL query:

  .. code-block:: sql
      :copyable: true

      SELECT cdb AS is_multitenant FROM v$database;

- You can't run a continuous migration job against Oracle Database Express 
  Edition (XE), because XE doesn't support the necessary logs.

Steps
-----

.. tabs::

   .. tab:: Snapshot Jobs
      :tabid: enable-snapshot-jobs

      .. procedure::
         :style: normal

         .. step:: Set up user permissions

            .. include:: /includes/fact-data-prep-oracle-step1.rst

   .. tab:: Continuous Jobs
      :tabid: enable-continuous-jobs

      .. procedure::
         :style: normal

         .. step:: Set up user permissions

            .. include:: /includes/fact-data-prep-oracle-step1.rst

            d. Grant additional permissions to the service account 
               to run continuous migration jobs. 
               
               Append ``CONTAINER=ALL`` if you're migrating a multi-tenant container database.

               .. code-block:: sql
                  :copyable: true

                  GRANT SET CONTAINER TO <user>;
                  GRANT EXECUTE_CATALOG_ROLE TO <user>;
                  GRANT SELECT ANY TRANSACTION TO <user>;
                  GRANT LOGMINING TO <user>;
                  GRANT CREATE TABLE TO <user>;
                  GRANT LOCK ANY TABLE TO <user>;
                  GRANT CREATE SEQUENCE TO <user>;
                  GRANT SELECT ON DBA_TABLESPACES TO <user>;
                  GRANT EXECUTE ON DBMS_LOGMNR TO <user>;
                  GRANT EXECUTE ON DBMS_LOGMNR_D TO <user>;
                  GRANT SELECT ON V_$LOG TO <user>;
                  GRANT SELECT ON V_$LOG_HISTORY TO <user>;
                  GRANT SELECT ON V_$LOGMNR_LOGS TO <user>;
                  GRANT SELECT ON V_$LOGMNR_CONTENTS TO <user>;
                  GRANT SELECT ON V_$LOGMNR_PARAMETERS TO <user>;
                  GRANT SELECT ON V_$LOGFILE TO <user>;
                  GRANT SELECT ON V_$ARCHIVED_LOG TO <user>;
                  GRANT SELECT ON V_$ARCHIVE_DEST_STATUS TO <user>;
                  GRANT SELECT ON V_$TRANSACTION TO <user>;
                  GRANT SELECT ON V_$MYSTAT TO <user>;
                  GRANT SELECT ON V_$STATNAME TO <user>;

         .. step:: Turn on archive logging
            
            a. To check if archive logging is already enabled, run the following query:

               .. code-block:: sql
                  :copyable: true

                  SELECT LOG_MODE FROM V$DATABASE;

               This outputs ``ARCHIVELOG`` if logging is enabled, or
               ``NOARCHIVELOG`` if it isn't.
            
            #. If archive logging isn't already enabled,  enable it. 
            
               {+rel-mig+} can automatically generate code to enable
               logging. The following code is an example. If you're migrating a
               multi-tenant database, run these commands on the container/
               master database.

               .. code-block:: sql
                  :copyable: true

                  ALTER SYSTEM SET db_recovery_file_dest_size = 10G;
                  ALTER SYSTEM SET db_recovery_file_dest = '/opt/oracle/oradata/recovery_area' scope=spfile;
                  SHUTDOWN IMMEDIATE;
                  STARTUP MOUNT
                  ALTER DATABASE ARCHIVELOG;
                  ALTER DATABASE OPEN;

         .. step:: Enable supplemental logging

            a. Enable supplemental logging on the database:

               .. code-block:: sql
                  :copyable: true

                  ALTER DATABASE ADD SUPPLEMENTAL LOG DATA; 

            #. Enable supplemental logging for every table in the migration:

               .. code-block:: sql
                  :copyable: true

                  ALTER TABLE schemaName.tableName ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
                  /* Additional ALTER TABLE STATEMENTS... */

         .. step:: Create tablespaces

            a. Create the required tablespaces:

               .. code-block:: sql
                  :copyable: true

                  CONNECT sys/oraclepw@PDB_NAME as sysdba;
                  CREATE TABLESPACE logminer_tbs DATAFILE '/opt/oracle/oradata/CDB_NAME/PDB_NAME/logminer_tbs.dbf'
                  SIZE 25M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED

                  CONNECT sys/password@CDB_NAME as sysdba;
                  CREATE TABLESPACE logminer_tbs DATAFILE '/opt/oracle/oradata/CDB_NAME/logminer_tbs.dbf'
                  SIZE 25M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED;

               A continuous migration in a multi-tenant architecture requires 
               a tablespace in each pluggable database and in the container 
               database.

            #. Assign quota for the tablespaces to the service user:

               .. code-block:: sql
                  :copyable: true

                  ALTER USER <user> DEFAULT TABLESPACE LOGMINER_TBS QUOTA UNLIMITED ON LOGMINER_TBS CONTAINER=ALL;

   .. tab:: Continuous Jobs (Amazon RDS)
      :tabid: enable-continuous-jobs-rds

      .. important::
      
         This procedure applies to Oracle instances which are hosted on 
         Amazon RDS.
      
      .. procedure::
         :style: normal

         .. step:: Set up user permissions
            
            .. include:: /includes/fact-data-prep-oracle-step1.rst

            d. Grant additional permissions to the service account 
               to run continuous migration jobs. 
               
               Append ``CONTAINER=ALL`` if you're migrating a multi-tenant container database.

               .. code-block:: sql
                  :copyable: true

                  GRANT FLASHBACK ANY TABLE TO <user>;
                  GRANT EXECUTE_CATALOG_ROLE TO <user>;
                  GRANT SELECT ANY TRANSACTION TO <user>;
                  GRANT LOGMINING TO <user>;
                  GRANT CREATE TABLE TO <user>;
                  GRANT LOCK ANY TABLE TO <user>;
                  GRANT CREATE SEQUENCE TO <user>;

                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$DATABASE', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('DBA_LOG_GROUPS', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('DBMS_LOGMNR', '<user>', 'EXECUTE');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('DBMS_LOGMNR_D', '<user>', 'EXECUTE');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$LOG', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$LOG_HISTORY', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$LOGMNR_LOGS', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$LOGMNR_CONTENTS', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$LOGMNR_PARAMETERS', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$LOGFILE', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$ARCHIVED_LOG', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$ARCHIVE_DEST_STATUS', '<user>', 'SELECT');
                  CALL rdsadmin.rdsadmin_util.grant_sys_object('V_$TRANSACTION', '<user>', 'SELECT');

               If an RDS instance is multi-tenant, an additional permission is required for tablespaces:

               .. code-block:: sql
                  :copyable: true

                  CALL rdsadmin.rdsadmin_util.grant_sys_object('DBA_TABLESPACES', '<user>', 'SELECT');

         .. step:: Turn on archive logging
            
            a. To check if archive logging is already enabled, run the following query:

               .. code-block:: sql
                  :copyable: true

                  SELECT LOG_MODE FROM V$DATABASE;

               This outputs ``ARCHIVELOG`` if logging is enabled, or
               ``NOARCHIVELOG`` if it isn't.
            
            #. If archive logging isn't already enabled,  enable it. 
            
               Relational Migrator can automatically generate code to enable
               logging. The following code is an example. If you're migrating a
               multi-tenant database, run these commands on the container/
               master database.

               .. code-block:: sql
                  :copyable: true

                  CALL rdsadmin.rdsadmin_util.set_configuration('archivelog retention hours', 24);

         .. step:: Enable supplemental logging

            a. Enable supplemental logging on the database:

               .. code-block:: sql
                  :copyable: true

                  CALL rdsadmin.rdsadmin_util.alter_supplemental_logging('ADD'); 

            #. Enable supplemental logging for every table in the migration:

               .. code-block:: sql
                  :copyable: true

                  ALTER TABLE schemaName.tableName ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;
                  /* Additional ALTER TABLE STATEMENTS... */
         
         .. step:: Create tablespaces

            Create the required tablespaces:
            
            .. code-block:: sql
               :copyable: true

               CREATE TABLESPACE logminer_tbs;
               CALL rdsadmin.rdsadmin_util.alter_default_tablespace(tablespace_name => 'logminer_tbs');

            A continuous migration in a multi-tenant architecture requires a 
            tablespace in each pluggable database and in the container database. 
            Assign the service user a quota on those tablespaces.

Learn More
----------

- {+rel-mig+} relies on the open-source Debezium connector to 
  capture row-level changes. For more details, see `Debezium Oracle 
  <https://debezium.io/documentation/reference/stable/connectors/oracle.html#_preparing_the_databas>`__
- For details on enabling archive logging, see `Managing Archived Redo Logs 
  <https://docs.oracle.com/cd/B19306_01/server.102/b14231/archredo.htm>`__.
- For additional troubleshooting and debugging information, see the 
  `Debezium Oracle help blog post
  <https://debezium.io/blog/2022/09/30/debezium-oracle-series-part-1/#configure-oracle-users>`__.
