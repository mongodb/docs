========================
sh.removeShardFromZone()
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: sh.removeShardFromZone(shard, zone)

   Removes the association between a :term:`zone` and a shard.


   .. |dbcommand| replace:: :dbcommand:`removeShardFromZone` command
   .. include:: /includes/fact-mongosh-shell-method-alt.rst

   This method has the following parameters:

   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - :ref:`shard <method-removeShardFromZone-shard>`
   
        - string
   
        - .. _method-removeShardFromZone-shard:
        
          The name of the shard from which to remove the :ref:`zone
          <method-removeShardFromZone-zone>` association.
          
   
      * - :ref:`zone <method-removeShardFromZone-zone>`
   
        - string
   
        - .. _method-removeShardFromZone-zone:
        
          The name of the zone whose association with the :ref:`shard
          <method-removeShardFromZone-shard>`  you want to remove.


   Only issue :method:`sh.removeShardFromZone()` when connected to a
   :binary:`~bin.mongos` instance.

Compatibility
-------------

This method is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-free.rst

.. include:: /includes/fact-environments-onprem-only.rst

Behavior
--------

:method:`sh.removeShardFromZone()` does not remove ranges associated with the
zone.

To completely remove a zone from the cluster, you must run
:method:`sh.removeShardFromZone()` on each shard associated with the zone.

If the shard specified is the last shard associated with the zone, you
must ensure there are no remaining ranges associated with the zone. Use
:dbcommand:`updateZoneKeyRange` to remove any existing ranges associated to
the zone before running :method:`sh.removeShardFromZone()`.

See the :ref:`zone <zone-sharding>` manual page for more information on zones
in sharded clusters.

Balancer
~~~~~~~~

Removing the association between a zone and a shard removes the constraints
keeping chunks covered by the zone on the shard. During the next balancer
round, the balancer may migrate chunks that previously covered by the zone.

See the :ref:`sharded cluster balancer <sharding-balancing>` manual page
for more information on how migrations work in a sharded cluster.

Security
~~~~~~~~

For sharded clusters that enforce :doc:`access control
</tutorial/enable-authentication>`, you must authenticate either as:

- a user whose privileges include:

  - :authaction:`update` on the ``shards`` collection in the ``config``
    database, and

  - :authaction:`find` on the ``tags`` collection in the ``config``
    database;

  or, alternatively,

- a user whose privileges include :authaction:`enableSharding` on the
  :ref:`cluster <resource-specific-collection>` resource.

The :authrole:`clusterAdmin` or :authrole:`clusterManager` built-in roles have
the appropriate permissions for issuing :method:`sh.removeShardFromZone()`.
See the :ref:`Role-Based Access Control <authorization>` manual page for more
information.

Example
-------

The following example removes the association between ``shard0000`` and the
``NYC`` zone:

.. code-block:: javascript

   sh.removeShardFromZone("shard0000", "NYC")

.. seealso::

   :method:`sh.addShardToZone()`
   :method:`sh.updateZoneKeyRange()`
   :method:`sh.removeRangeFromZone()`
