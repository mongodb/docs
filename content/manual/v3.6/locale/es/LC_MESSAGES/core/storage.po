# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual
# package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: 2014-04-08 19:41+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language: es\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-"
"manual/language/es/)\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# f5c443113cfd4de6956c5265d1222bb9
#: ../source/core/storage.txt:3
msgid "Storage"
msgstr ""

# 17a36f23cd6048508c477f383943fbe8
#: ../source/core/storage.txt:7
msgid ""
"MongoDB adds support for additional storage engines. MongoDB's original "
"storage engine, known as ``mmapv1`` remains the default in 3.0, but the "
"new ``wiredTiger`` engine is available and can offer additional "
"flexibility and improved throughput for many workloads."
msgstr ""

# ce86c5acce944e548d37d8ff6bfeded4
#: ../source/core/storage.txt:14
msgid "Data Model"
msgstr ""

# 0447f8e3a6d5467eaa63ad006b9a8d19
#: ../source/core/storage.txt:16
msgid ""
"MongoDB stores data in the form of :term:`BSON` documents, which are rich"
" mappings of keys, or field names, to values. BSON supports a rich "
"collection of types, and fields in BSON documents may hold arrays of "
"values or embedded documents. All documents in MongoDB must be less than "
"16MB, which is the :limit:`BSON document size <BSON Document Size>`."
msgstr ""

# 60b2f1ff537949cbb47e5d1d526ae24a
#: ../source/core/storage.txt:22
msgid ""
"All documents are part of a :term:`collection`, which are a logical "
"groupings of documents in a MongoDB database. The documents in a "
"collection share a set of indexes, and typically these documents share "
"common fields and structure."
msgstr ""

# eb0c256331b74b6a89f1b077edb9a4e6
#: ../source/core/storage.txt:27
msgid ""
"In MongoDB the :term:`database` construct is a group of related "
"collections. Each database has a distinct set of data files and can "
"contain a large number of collections. A single MongoDB deployment may "
"have many databases."
msgstr ""

# 734852e72107424ca23835e423706f7f
#: ../source/core/storage.txt:35
msgid "WiredTiger Storage Engine"
msgstr ""

# cf96a9df8a604d289bd77fd7c765b97f
#: ../source/core/storage.txt:39
msgid ""
"WiredTiger is a storage engine that is optionally available in the 64-bit"
" build of MongoDB 3.0. It excels at read and insert workloads as well as "
"more complex update workloads."
msgstr ""

# 9ffc040f95524228b250b32d6375daef
#: ../source/core/storage.txt:44
msgid "Document Level Locking"
msgstr ""

# c2ce8fdbc56e4790a371883abe6c546b
#: ../source/core/storage.txt:46
msgid ""
"With WiredTiger, all write operations happen within the context of a "
"*document* level lock. As a result, multiple clients can modify more than"
" one document in a single collection at the same time. With this very "
"granular concurrency control, MongoDB can more effectively support "
"workloads with read, write and updates as well as high-throughput "
"concurrent workloads."
msgstr ""

# f99d1fb06aa24376ac554e39f0cc495a
# f72eed0710874593a9cd8ca377a78a27
#: ../source/core/storage.txt:56 ../source/core/storage.txt:127
msgid "Journal"
msgstr ""

# cb79e07547074d9c9ed7ce8c2916a239
#: ../source/core/storage.txt:58
msgid ""
"WiredTiger uses a write-ahead transaction log in combination with "
"checkpoints to ensure data persistence. With WiredTiger, MongoDB will "
"commit a checkpoint to disk every 60 seconds or when there are 2 "
"gigabytes of data to write. Between and during checkpoints the data files"
" are *always* valid."
msgstr ""

# bbe28635f8f0431fa14974a58f59f188
#: ../source/core/storage.txt:64
msgid ""
"The WiredTiger journal persists all data modifications between "
"checkpoints. If MongoDB exits between checkpoints, it uses the journal to"
" replay all data modified since the last checkpoint. By default, the"
msgstr ""

# e4f1d20e42664337ae788dba69c640ff
#: ../source/core/storage.txt:68
msgid ""
"WiredTiger journal is compressed using the :term:`snappy` compression "
"library. To specify an alternate compression algorithm or no compression,"
" use the :setting:`storage.wiredTiger.engineConfig.journalCompressor` "
"setting."
msgstr ""

# e986f3a5b50c4d89a8b547d51eb8c959
#: ../source/core/storage.txt:73
msgid ""
"You can disable journaling by setting :setting:`storage.journal.enabled` "
"to ``false``, which can reduce the overhead of maintaining the journal. "
"For :term:`standalone` instances, not using the journal means that you "
"will lose some data modifications when MongoDB exits unexpectedly between"
" checkpoints. For members of :term:`replica sets <replica set>`, the "
"replication process may provide sufficient durability guarantees."
msgstr ""

# 2d8af93a13ac4d75b82ce6fc7a4bb1df
#: ../source/core/storage.txt:84
msgid "Compression"
msgstr ""

# dba320bad9144a9c91803012d1e04584
#: ../source/core/storage.txt:86
msgid ""
"With WiredTiger, MongoDB supports compression for all collections and "
"indexes. Compression minimizes storage use at the expense of additional "
"CPU."
msgstr ""

# 0ae677f85e4d4f89827edffb7c760a2a
#: ../source/core/storage.txt:90
msgid ""
"By default, WiredTiger uses block compression with the :term:`snappy` "
"compression library for all collections and :term:`prefix compression` "
"for all indexes."
msgstr ""

# 46f4efbe57db431a8ebff4e84a1f8ab8
#: ../source/core/storage.txt:94
msgid ""
"For collections, block compression with :term:`zlib` is also available. "
"To specify an alternate compression algorithm or no compression, use the "
":setting:`storage.wiredTiger.collectionConfig.blockCompressor` setting."
msgstr ""

# e876b70426b440cfbb282a0091422111
#: ../source/core/storage.txt:99
msgid ""
"For indexes, to disable :term:`prefix compression`, use the "
":setting:`storage.wiredTiger.indexConfig.prefixCompression` setting."
msgstr ""

# ba15e2f64c32414e90ba7203dcb8c0a1
#: ../source/core/storage.txt:102
msgid ""
"Compression settings are also configurable on a per-collection and per-"
"index basis during collection and index creation. See :ref:`create-"
"collection-storage-engine-options` and :ref:`db.collection.createIndex() "
"storageEngine option <createIndex-options>`."
msgstr ""

# 1cf6f44936ca4389bbe757da240d806f
#: ../source/core/storage.txt:108
msgid ""
"For most workloads, the default compression settings balance storage "
"efficiency and processing requirements."
msgstr ""

# 042e2b186e6840318bc3f2137b6118bc
#: ../source/core/storage.txt:111
msgid ""
"The WiredTiger journal is also compressed by default. For information on "
"journal compression, see :ref:`storage-wiredtiger-journal`."
msgstr ""

# cac6e612d448436c951679a37b92e0e6
#: ../source/core/storage.txt:114
msgid "`<http://wiredtiger.com>`_"
msgstr ""

# 675025e1c9e6456989fc9e98a3ab6c56
#: ../source/core/storage.txt:119
msgid "MMAPv1 Storage Engine"
msgstr ""

# 40108ecd78e24d77a34e8af55d86d124
#: ../source/core/storage.txt:121
msgid ""
"MMAPv1 is MongoDB's original storage engine based on memory mapped files."
" It excels at workloads with high volume inserts, reads, and in-place "
"updates. MMAPv1 is the default storage engine in MongoDB 3.0 and all "
"previous versions."
msgstr ""

# 3b2f2437ff804e1a83fed9e04f2db734
#: ../source/core/storage.txt:129
msgid ""
"In order to ensure that all modifications to a MongoDB data set are "
"durably written to disk, MongoDB records all modifications to a journal "
"that it writes to disk more frequently than it writes the data files. The"
" journal allows MongoDB to successfully recover data from data files "
"after a :program:`mongod` instance exits without flushing all changes."
msgstr ""

# eb9bb22ad704458da4b2acc6b90ef9f8
#: ../source/core/storage.txt:136
msgid ""
"See :doc:`/core/journaling` for more information about the journal in "
"MongoDB."
msgstr ""

# d3cd160cafb944b697bbfd095423c09f
#: ../source/core/storage.txt:140
msgid "Record Storage Characteristics"
msgstr ""

# b24241bb054e44c985aa7651741a2ee2
#: ../source/core/storage.txt:142
msgid ""
"All records are contiguously located on disk, and when a document becomes"
" larger than the allocated record, MongoDB must allocate a new record. "
"New allocations require MongoDB to move a document and update all indexes"
" that refer to the document, which takes more time than in-place updates "
"and leads to storage fragmentation."
msgstr ""

# 5aa629ef0db348c89d097f5a897e2fab
#: ../source/core/storage.txt:151
msgid ""
"By default, MongoDB uses :ref:`power-of-2-allocation` so that every "
"document in MongoDB is stored in a *record* which contains the document "
"itself and extra space, or :term:`padding`. Padding allows the document "
"to grow as the result of updates while minimizing the likelihood of "
"reallocations."
msgstr ""

# cdd378a55a9d4980a0e6fb105e796ad8
#: ../source/core/storage.txt:160
msgid "Record Allocation Strategies"
msgstr ""

# 5e9da269d9874f4988d2468967ea2930
#: ../source/core/storage.txt:162
msgid ""
"MongoDB supports multiple record allocation strategies that determine how"
" :program:`mongod` adds padding to a document when creating a record. "
"Because documents in MongoDB may grow after insertion and all records are"
" contiguous on disk, the padding can reduce the need to relocate "
"documents on disk following updates. Relocations are less efficient than "
"in-place updates and can lead to storage fragmentation. As a result, all "
"padding strategies trade additional space for increased efficiency and "
"decreased fragmentation."
msgstr ""

# 276c0e8e99274c0fb6ced5f09b91b2fc
#: ../source/core/storage.txt:171
msgid ""
"Different allocation strategies support different kinds of workloads: the"
" :ref:`power of 2 allocations <power-of-2-allocation>` are more efficient"
" for insert/update/delete workloads; while :ref:`exact fit allocations "
"<exact-fit-allocation>` is ideal for collections *without* update and "
"delete workloads."
msgstr ""

# d99bd530ca544c109ade11ff8561c0ac
#: ../source/core/storage.txt:180
msgid "Power of 2 Sized Allocations"
msgstr ""

# c09c5009b48340298f578568610a1d9f
#: ../source/core/storage.txt:184
msgid ""
"MongoDB 3.0 uses the power of 2 sizes allocation as the default record "
"allocation strategy for MMAPv1. With the power of 2 sizes allocation "
"strategy, each record has a size in bytes that is a power of 2 (e.g. 32, "
"64, 128, 256, 512 ... 2MB). For documents larger than 2MB, the allocation"
" is rounded up to the nearest multiple of 2MB."
msgstr ""

# c4d6e29993bc41a7866584f94cd0b595
#: ../source/core/storage.txt:190
msgid "The power of 2 sizes allocation strategy has the following key properties:"
msgstr ""

# 21385c394e6847a2970468f68e958ef3
#: ../source/core/storage.txt:193
msgid ""
"Can efficiently reuse freed records to reduce fragmentation. Quantizing "
"record allocation sizes into a fixed set of sizes increases the "
"probability that an insert will fit into the free space created by an "
"earlier document deletion or relocation."
msgstr ""

# 03bef98c74a742e58c227336191904e4
#: ../source/core/storage.txt:198
msgid ""
"Can reduce moves. The added padding space gives a document room to grow "
"without requiring a move. In addition to saving the cost of moving, this "
"results in less updates to indexes. Although the power of 2 sizes "
"strategy can minimize moves, it does not eliminate them entirely."
msgstr ""

# fc1ee554848a4e67b839430cacb06800
#: ../source/core/storage.txt:207
msgid "No Padding Allocation Strategy"
msgstr ""

# 0c9bfd0418ad4aa7a77e58cded7cef0c
#: ../source/core/storage.txt:211
msgid ""
"For collections whose workloads do not change the document sizes, such as"
" workloads that consist of insert-only operations or update operations "
"that do not increase document size (such as incrementing a counter), you "
"can disable the :ref:`power of 2 allocation <power-of-2-allocation>` "
"using the :dbcommand:`collMod` command with the :collflag:`noPadding` "
"flag or the :method:`db.createCollection()` method with the ``noPadding``"
" option."
msgstr ""

# 49f8e1d3385d44e9bc61cc142d415f0c
#: ../source/core/storage.txt:219
msgid ""
"Prior to version 3.0.0, MongoDB used an allocation strategy that included"
" a dynamically calculated :data:`padding <collStats.paddingFactor>` as a "
"factor of the document size."
msgstr ""

# 36379339c49644beba6eeafdf98b0731
#: ../source/core/storage.txt:224
msgid "Capped Collections"
msgstr ""

# b00846144c5a4228a007fd34bdd43407
#: ../source/core/storage.txt:226
msgid ""
":term:`Capped collections <capped collection>` are fixed-size collections"
" that support high-throughput operations that store records in insertion "
"order. Capped collections work like circular buffers: once a collection "
"fills its allocated space, it makes room for new documents by overwriting"
" the oldest documents in the collection."
msgstr ""

# 3523238a1e364644a9b1f3fbf1f0744f
#: ../source/core/storage.txt:232
msgid "See :doc:`/core/capped-collections` for more information."
msgstr ""

# 29935ca881254a66bf516ee84bed6233
#: ../source/includes/extracts/additional-resources-storage.rst:4
msgid "Additional Resources"
msgstr ""

# c66178e2a08046958e992dc98a6becad
#: ../source/includes/extracts/additional-resources-storage.rst:6
msgid ""
"`Blog Post: New Compression Options in MongoDB 3.0 "
"<https://www.mongodb.com/blog/post/new-compression-options-"
"mongodb-30?jmp=docs>`_"
msgstr ""

#~ msgid ""
#~ "MongoDB supports multiple record allocation"
#~ " strategies that determine how "
#~ ":program:`mongod` adds padding to a "
#~ "document when creating a :term:`record`. "
#~ "Because documents in MongoDB may grow"
#~ " after insertion and all records are"
#~ " contiguous on disk, the padding can"
#~ " reduce the need to relocate "
#~ "documents on disk following updates. "
#~ "Relocations are less efficient than "
#~ "in-place updates, and can lead to "
#~ "storage fragmentation. As a result, all"
#~ " padding strategies trade additional space"
#~ " for increased efficiency and decreased "
#~ "fragmentation."
#~ msgstr ""

#~ msgid ""
#~ "The exact fit allocation strategy "
#~ "allocates record sizes based on the "
#~ "size of the document and an "
#~ "additional *padding factor*. Each collection"
#~ " has its own padding factor, which"
#~ " defaults to ``0`` when you insert"
#~ " the first document in a collection,"
#~ " and may grow incrementally to ``2``"
#~ " as as documents grow as a "
#~ "result of updates."
#~ msgstr ""

#~ msgid ""
#~ "Multiply the size of a document by"
#~ " the padding factor to determine the"
#~ " total record size. That is:"
#~ msgstr ""

# 3f9513d797f74ca1b82007e297c513c1
#~ msgid ""
#~ "Every document in MongoDB is stored "
#~ "in a *record* which contains the "
#~ "document itself and extra space, or "
#~ ":term:`padding`, which allows the document "
#~ "to grow as the result of updates."
#~ msgstr ""

# b5aa21a399b14d558e48639580a3a976
#~ msgid ""
#~ "All records are part of a "
#~ ":term:`collection`, which is a logical "
#~ "grouping of documents in a MongoDB "
#~ "database. The documents in a collection"
#~ " share a set of indexes, and "
#~ "typically these documents share common "
#~ "fields and structure."
#~ msgstr ""

# 97d4212d8cf740b1b5354cb6e8ab445c
#~ msgid ""
#~ "In MongoDB the :term:`database` construct "
#~ "is a group of related collections. "
#~ "Each database has a distinct set "
#~ "of data files and can contain a"
#~ " large number of collections. Also, "
#~ "each database has one distinct write "
#~ "lock, that blocks operations to the "
#~ "database during write operations. A "
#~ "single MongoDB deployment may have many"
#~ " databases."
#~ msgstr ""

# ce93130b8a7c457997eb1c7bbda5ef40
#~ msgid ""
#~ "For all new collections, "
#~ ":collflag:`usePowerOf2Sizes` became the default "
#~ "allocation strategy. To change the "
#~ "default allocation strategy, use the "
#~ ":parameter:`newCollectionsUsePowerOf2Sizes` parameter."
#~ msgstr ""

# b71ffab07f0b4c58b79a7eebadf6b376
#~ msgid ""
#~ ":program:`mongod` uses an allocation strategy"
#~ " called :collflag:`usePowerOf2Sizes` where each"
#~ " record has a size in bytes "
#~ "that is a power of 2 (e.g. "
#~ "32, 64, 128, 256, 512...16777216.) The"
#~ " smallest allocation for a document "
#~ "is 32 bytes. The power of 2 "
#~ "sizes allocation strategy has two key"
#~ " properties:"
#~ msgstr ""

# 1195e862696b4585a6aa119e16f0aa7a
#~ msgid ""
#~ "there are a limited number of "
#~ "record allocation sizes, which makes it"
#~ " easier for :program:`mongod` to reuse "
#~ "existing allocations, which will reduce "
#~ "fragmentation in some cases."
#~ msgstr ""

# 6c1bb561d0994b9b9815499089f1f522
#~ msgid ""
#~ "in many cases, the record allocations"
#~ " are significantly larger than the "
#~ "documents they hold. This allows "
#~ "documents to grow while minimizing or"
#~ " eliminating the chance that the "
#~ ":program:`mongod` will need to allocate "
#~ "a new record if the document "
#~ "grows."
#~ msgstr ""

# d1ab57ce0d534d418be0583cab43e4a1
#~ msgid ""
#~ "The :collflag:`usePowerOf2Sizes` strategy does "
#~ "not *eliminate* document reallocation as "
#~ "a result of document growth, but "
#~ "it minimizes its occurrence in many "
#~ "common operations."
#~ msgstr ""

# 8a958572e334499ba2c437831c78ba14
#~ msgid "Exact Fit Allocation"
#~ msgstr ""

# 36d58b4d57f24905be141b4600f7e061
#~ msgid ""
#~ "The size of each record in a "
#~ "collection reflects the size of the "
#~ "padding factor at the time of "
#~ "allocation. See the :data:`~collStats.paddingFactor`"
#~ " field in the output of "
#~ ":method:`db.collection.stats()` to see the "
#~ "current padding factor for a collection."
#~ msgstr ""

# 2836ac42ef4c440cb718b0e43474a834
#~ msgid ""
#~ "On average, this exact fit allocation"
#~ " strategy uses less storage space "
#~ "than the :collflag:`usePowerOf2Sizes` strategy "
#~ "but will result in higher levels "
#~ "of storage fragmentation if documents "
#~ "grow beyond the size of their "
#~ "initial allocation."
#~ msgstr ""

# 87909d256b7345628c6a54db28ba72a7
#~ msgid ""
#~ "The :dbcommand:`compact` and "
#~ ":dbcommand:`repairDatabase` operations remove "
#~ "padding by default, as do the "
#~ ":program:`mongodump` and :program:`mongorestore`. "
#~ ":dbcommand:`compact` does allow you to "
#~ "specify a padding for records during "
#~ "compaction."
#~ msgstr ""

#~ msgid ""
#~ "MongoDB supports multiple record allocation"
#~ " strategies that determine how "
#~ ":program:`mongod` adds padding to a "
#~ "document when creating a record. Because"
#~ " documents in MongoDB may grow after"
#~ " insertion and all records are "
#~ "contiguous on disk, the padding can "
#~ "reduce the need to relocate documents"
#~ " on disk following updates. Relocations "
#~ "are less efficient than in-place "
#~ "updates, and can lead to storage "
#~ "fragmentation. As a result, all padding"
#~ " strategies trade additional space for "
#~ "increased efficiency and decreased "
#~ "fragmentation."
#~ msgstr ""

#~ msgid ""
#~ "The exact fit allocation strategy "
#~ "allocates record sizes based on the "
#~ "size of the document and an "
#~ "additional *padding factor*. Each collection"
#~ " has its own padding factor, which"
#~ " defaults to ``1`` when you insert"
#~ " the first document in a collection."
#~ " MongoDB dynamically adjusts the padding"
#~ " factor up to ``2`` depending on "
#~ "the rate of growth of the "
#~ "documents over the life of the "
#~ "collection."
#~ msgstr ""

#~ msgid ""
#~ "To estimate total record size, compute"
#~ " the product of the padding factor"
#~ " and the size of the document. "
#~ "That is:"
#~ msgstr ""

