==================
Security Checklist
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This documents provides a list of security measures that you should implement to
protect your MongoDB installation.

.. _checklist-auth:

Enable Access Control and Enforce Authentication
------------------------------------------------

Enable access control and specify the authentication mechanism. You can
use the default MongoDB authentication mechanism or an existing external
framework. Authentication requires that all clients and servers provide
valid credentials before they can connect to the system. In clustered
deployments, enable authentication for each MongoDB server.

See :doc:`/core/authentication` and
:doc:`/tutorial/enable-authentication`.

.. _security-checklist-role-based-access-control:

Configure Role-Based Access Control
-----------------------------------

Create a user administrator **first**, then create additional users.
Create a unique MongoDB user for each person and application that
accesses the system.

Create roles that define the exact access a set of users needs. Follow a
principle of least privilege. Then create users and assign them only the
roles they need to perform their operations. A user can be a person or a
client application.

See :doc:`/core/authorization` and
:doc:`/tutorial/manage-users-and-roles`.

Encrypt Communication
---------------------

Configure MongoDB to use TLS/SSL for all incoming and outgoing
connections. Use TLS/SSL to encrypt communication between
:binary:`~bin.mongod` and :binary:`~bin.mongos` components of a MongoDB
deployment as well as between all applications and MongoDB.

.. include:: /includes/fact-tls-libraries.rst

.. note::

   .. include:: /includes/fact-tls-1.0.rst


See :doc:`/tutorial/configure-ssl`.

.. |binary| replace:: MongoDB

Encrypt and Protect Data
------------------------

Starting with MongoDB Enterprise 3.2, the WiredTiger storage engine's
native :doc:`/core/security-encryption-at-rest` can be configured to
encrypt data in the storage layer.

If you are not using WiredTiger's encryption at rest, MongoDB data
should be encrypted on each host using file-system, device, or
physical encryption. Protect MongoDB data using file-system permissions.
MongoDB data includes data files, configuration files, auditing logs,
and key files.

Limit Network Exposure
----------------------

Ensure that MongoDB runs in a trusted network environment and limit
the interfaces on which MongoDB instances listen for incoming
connections. Allow only trusted clients to access the network
interfaces and ports on which MongoDB instances are available.

.. note::

   .. include:: /includes/fact-default-bind-ip-change.rst

See :doc:`/core/security-hardening` and the :setting:`~net.bindIp`
setting.

Audit System Activity
---------------------

Track access and changes to database configurations and data.
`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise?jmp=docs>`_
includes a system auditing facility that can record
system events (e.g. user operations, connection events) on a
MongoDB instance. These audit records permit forensic analysis and
allow administrators to verify proper controls.

See :doc:`/core/auditing` and :doc:`/tutorial/configure-auditing`.

Run MongoDB with a Dedicated User
---------------------------------

Run MongoDB processes with a dedicated operating system user account.
Ensure that the account has permissions to access data but no unnecessary
permissions.

See :doc:`/installation` for more information on running MongoDB.

Run MongoDB with Secure Configuration Options
---------------------------------------------

MongoDB supports the execution of JavaScript code for certain
server-side operations: :dbcommand:`mapReduce` and
:query:`$where`. If you do not use these operations, disable
server-side scripting by using the :option:`--noscripting <mongod
--noscripting>` option on the command line.

Use only the MongoDB wire protocol on production deployments. 

Keep input validation enabled. MongoDB enables input validation by default
through the :setting:`~net.wireObjectCheck` setting. This ensures that all
documents stored by the :binary:`~bin.mongod` instance are valid :term:`BSON`.

See :doc:`/core/security-hardening` for more information on
hardening MongoDB configuration.

Request a Security Technical Implementation Guide (where applicable)
--------------------------------------------------------------------

The Security Technical Implementation Guide (STIG) contains security
guidelines for deployments within the United States Department of
Defense. MongoDB Inc. provides its STIG, upon request, for situations
where it is required. Please `request a copy
<http://www.mongodb.com/lp/contact/stig-requests>`_ for more
information.

Consider Security Standards Compliance
--------------------------------------

For applications requiring HIPAA or PCI-DSS compliance, please refer to the
`MongoDB Security Reference Architecture
<https://www.mongodb.com/collateral/mongodb-security-architecture>`_
to learn more about how you can use the key security
capabilities to build compliant application infrastructure.
