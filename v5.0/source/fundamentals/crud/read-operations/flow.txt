.. _kotlin-fundamentals-flow:

=======================
Access Data From a Flow
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to access data using a ``Flow`` with the
MongoDB Kotlin driver.

A ``Flow`` is a data type built into Kotlin coroutines that represent a stream
of values that are being computed asynchronously. The Kotlin coroutine driver
uses flows to represent the results of database read operations.

This page uses an initiating method, ``find()`` to show how to access
data from a `FindFlow
<{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-find-flow/index.html>`__.

.. note::

   The following ways to access and store data apply to
   other iterables such as an `AggregateFlow
   <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-aggregate-flow/index.html>`__.

The ``find()`` method creates and returns an instance of a
``FindFlow``. A ``FindFlow`` allows you to browse the documents
matched by your search criteria and to further specify which documents
to see by setting parameters through methods.

Terminal Methods
----------------

Terminal methods execute an operation on the MongoDB server after
configuring all parameters of a ``Flow`` instance controlling the
operation.

Find the First Document
~~~~~~~~~~~~~~~~~~~~~~~

Use the ``firstOrNull()`` method to retrieve the first document in your query
results or ``null`` if there are no results:

.. literalinclude:: /examples/generated/FlowTest.snippet.firstOrNull.kt
   :language: kotlin

Alternatively, you can use the ``first()`` method to retrieve the first document
in your query or throw a ``NoSuchElementException`` if there are no results:

.. literalinclude:: /examples/generated/FlowTest.snippet.first.kt
   :language: kotlin

These methods are often used when your query filter will match one
document, such as when filtering by a unique index.

Count Number of Results
~~~~~~~~~~~~~~~~~~~~~~~

Use the ``count()`` method to retrieve the number of results in the query:

.. literalinclude:: /examples/generated/FlowTest.snippet.count.kt
   :language: kotlin

Convert Results to a List
~~~~~~~~~~~~~~~~~~~~~~~~~

Use the ``toList()`` method to store your query results in a ``List``:

.. literalinclude:: /examples/generated/FlowTest.snippet.toList.kt
   :language: kotlin

This method is often used when your query filter returns a small number
of documents that can fit into available memory.

Iterate through Results
~~~~~~~~~~~~~~~~~~~~~~~

Use the ``collect()`` method to iterate through fetched documents and
ensure that the flow closes if there is an early termination:

.. literalinclude:: /examples/generated/FlowTest.snippet.iterate.kt
   :language: kotlin

Explain the Query
~~~~~~~~~~~~~~~~~

Use the ``explain()`` method to view information about how MongoDB
executes your operation.

The ``explain()`` method returns **execution plans** and performance
statistics. An execution plan is a potential way MongoDB
can complete an operation. The ``explain()`` method provides both the
winning plan (the plan MongoDB executed) and rejected plans.

.. include:: /includes/fundamentals/explain-verbosity.rst

The following example prints the JSON representation of the
winning plan for aggregation stages that produce execution plans:

.. io-code-block::

   .. input:: /examples/generated/FlowTest.snippet.explain.kt
      :language: kotlin

   .. output::
      :language: json

      { "stage": "COLLSCAN", "direction": "forward" }

For more information on the explain operation, see the following
Server Manual Entries:

- :manual:`Explain Output </reference/explain-results/>`
- :manual:`Query Plans </core/query-plans/>`

For more information about the methods and classes mentioned in this section,
see the following API Documentation:

- `collect() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-find-flow/collect.html>`__
- `explain() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-find-flow/explain.html>`__
- `ExplainVerbosity <{+api+}/apidocs/mongodb-driver-core/com/mongodb/ExplainVerbosity>`__
