.. _java-operation-errors:

================================
Troubleshooting Write Exceptions
================================

.. meta::
    :description: Understand how to handle write exceptions in the MongoDB Java Sync Driver, including error types like WriteError and BulkWriteError.

.. contents::
    :local:
    :backlinks: none
    :depth: 2
    :class: singlecol

Overview
--------

This page describes write exceptions you might encounter when
using the {+driver-long+} to perform MongoDB write operations. Once you
understand the types of write exceptions that the driver raises, you can take
appropriate actions to either handle them or correct the error-causing code.

.. note::

   This page addresses only write exception handling. If you encounter
   any other issues with MongoDB or the driver, visit the following
   resources:
 
    - :ref:`java-connection-troubleshooting` for potential solutions to issues
      you might encounter when connecting to a MongoDB deployment
    - :ref:`java-issues-and-help` page for information about reporting bugs,
      contributing to the driver, and finding more resources
    - :community-forum:`MongoDB Community Forums </tag/java>` for questions,
      discussions, or general technical support

Write Error
-----------

If the driver encounters an error while performing a write operation, it
creates an error of the `WriteError <{+core-api+}/WriteError.html>`__ type.

The ``WriteError`` type contains the following fields: 

    - ``code``: the code associated with the error
    - ``message``: a message explaining the error
    - ``details``: an optional field containing details associated with the error

.. _java_error_write_exceptions:

Write Exception Types
---------------------

The driver creates write exceptions when a ``WriteError`` object is created.

The write exception object contains the following fields:

  - ``error``: the ``WriteError`` object that triggered the exception
  - ``serverAddress``: the address of the server where the exception occurred
  - ``errorLabels``: the server error labels, such as ``RetryableWriteError`` and ``TransientTransactionError``

Details on the different types of write exceptions and the error messages that
are thrown when one is created can be found below.

Write Exception
~~~~~~~~~~~~~~~

The driver raises a `MongoWriteException <{+core-api+}/MongoWriteException.html>`__ for
any errors that it encounters when performing single write operations that are
not related to satisfying the write concern. The ``MongoWriteException`` type
contains the ``WriteError`` object. 

For example, the driver raises a ``MongoWriteException`` if you attempt to
insert a document into a collection that violates the collection's
schema validation rules. Suppose the collection has a rule where the
value of the ``quantity`` field must be an ``int`` type. If you
attempt to insert a document where the value of ``quantity`` is
``"three"``, the driver prints the following error message:

.. code-block:: none
   :copyable: false
   :emphasize-lines: 1, 4-7

   Exception in thread "main" com.mongodb.MongoWriteException: Document failed validation at
   com.mongodb.internal.connection.ProtocolHelper.getWriteException(ProtocolHelper.java:228)
   ... 
   Caused by: com.mongodb.MongoWriteException: WriteError{code=121,
   message='Document failed validation', details={ operator: "$jsonSchema",
   schemaRules: { bsonType: "int", description: "must be an integer" },
   offendingDocument: {"name":"Apple","quantity":"three"} } } at
   com.mongodb.internal.connection.WriteResultHelper.createWriteException(WriteResultHelper.java:50)

In the preceding error message, the ``MongoWriteException`` object describes the
reason for the error, and the ``Caused by`` field provides details from the
``WriteError`` object about the failing operation. To address this error, you must
either revise the document to adhere to the schema validation rules or bypass
validation.

Bulk Write Exception
~~~~~~~~~~~~~~~~~~~~

If the same example were run as a bulk write operation, a
`MongoBulkWriteException <{+core-api+}/MongoBulkWriteException.html>`__ would be
thrown. A ``MongoBulkWriteException`` contains a list of errors associated with
the same bulk write operation if more than one item caused an error. For
example, if you attempt to insert two documents that violate the collection's
schema, the driver prints the following error message:

.. code-block:: none
   :copyable: false
   :emphasize-lines: 1-2, 6-9, 13-16

   Exception in thread "main" com.mongodb.MongoBulkWriteException: Bulk write
   operation result had errors at
   com.mongodb.internal.connection.ProtocolHelper.getBulkWriteException(ProtocolHelper.java:258)
   ... at
   BulkWriteMultipleValidationErrorsExample.main(BulkWriteMultipleValidationErrorsExample.java:30)
   Caused by: com.mongodb.MongoWriteException: WriteError{code=121,
   message='Document failed validation', details={ operator: "$jsonSchema",
   schemaRules: { bsonType: "int", description: "must be an integer" },
   offendingDocument: {"name":"Apple","quantity":"three"} }} at
   com.mongodb.internal.connection.WriteResultHelper.createWriteException(WriteResultHelper.java:50)
   at com.mongodb.internal.connection.ProtocolHelper.getBulkWriteException(ProtocolHelper.java:254)
   ... 19 more 
   Caused by: com.mongodb.MongoWriteException: WriteError{code=121,
   message='Document failed validation', details={ operator: "$jsonSchema",
   schemaRules: { bsonType: "int", description: "must be an integer" },
   offendingDocument: {"name":"Banana","quantity":"ten"} }} at
   com.mongodb.internal.connection.WriteResultHelper.createWriteException(WriteResultHelper.java:50)
   at
   com.mongodb.internal.connection.ProtocolHelper.getBulkWriteException(ProtocolHelper.java:254)
   ... 19 more    
