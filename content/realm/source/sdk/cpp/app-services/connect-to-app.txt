.. meta::
   :robots: noindex, nosnippet

.. _cpp-connect-to-backend:

=================================
Connect to App Services - C++ SDK
=================================

.. meta:: 
  :keywords: code example

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The App client is the Atlas App Services backend interface. It provides access 
to authentication and Atlas Functions.

Some of your App Services App's features are associated with user accounts. For example, you
need to :ref:`authenticate a user <cpp-authenticate-user>` before you can access
your App's functions.

Prerequisites
-------------

Before you can connect to Atlas App Services, you need an App Services App 
with an App ID. To get started, refer to :ref:`Create an App <create-a-realm-app>` 
in the App Services documentation.

To learn how to find your App ID in the App Services UI, refer to 
:ref:`Find Your App ID <find-your-app-id>` in the App Services documentation.

.. _cpp-access-the-app-client:

Access the App Client
---------------------

#. :ref:`Find the App ID in the Realm UI <find-your-app-id>`.
#. Create a :cpp-sdk:`realm::App::configuration() <structrealm_1_1App_1_1configuration.html>`
   with with your App's ID as the argument. You can optionally configure
   additional details through the App configuration.
#. Initialize an :cpp-sdk:`App <classrealm_1_1App.html>` 
   using this ``realm::App::configuration()``. You use this ``App`` instance 
   to access App Services features throughout your client application.

.. literalinclude:: /examples/generated/cpp/call-function.snippet.connect-app-services.cpp
   :language: cpp

.. tip:: Building an Android App

   When building an Android app that uses the Realm C++ SDK, 
   you must pass the ``filesDir.path`` to the ``file_path`` parameter in the 
   :cpp-sdk:`db_config <structrealm_1_1internal_1_1bridge_1_1realm_1_1config.html>` 
   constructor. For more information, refer to: :ref:`cpp-build-android-app`.

.. _cpp-set-custom-http-headers-on-app:

Set Custom HTTP Headers
-----------------------

If you use App Services or Device Sync with a proxy setup, you may need
to set custom HTTP headers. The Realm C++ SDK supports setting custom 
HTTP headers on the 
:cpp-sdk:`realm::App::configuration() <structrealm_1_1App_1_1configuration.html>`
and on the 
:cpp-sdk:`realm::db_config <structrealm_1_1internal_1_1bridge_1_1realm_1_1config.html>`.

When you initialize the App configuration, pass in a map of string header keys
and values.

.. literalinclude:: /examples/generated/cpp/app.snippet.set-custom-headers-for-app.cpp
   :language: cpp

If you :ref:`call a function <cpp-call-a-function>`, the App uses
these custom headers.

If you want to use custom headers with Device Sync, you must 
additionally :ref:`set the headers on the realm::db_config 
<cpp-set-custom-headers-using-synced-realm>`.

.. _cpp-http_proxy:

Use an HTTP Proxy with Realm
----------------------------

If you have configured an HTTP proxy, you can use HTTP tunneling to 
route your Realm traffic. 

To configure Realm to use your HTTP proxy:

1. Initialize a 
   :cpp-sdk:`proxy_config <structrealm_1_1internal_1_1bridge_1_1realm_1_1sync__config_1_1proxy__config.html>` 
   with the details for your proxy. 
#. Set the proxy config on your :cpp-sdk:`realm::App::configuration <structrealm_1_1App_1_1configuration.html>`.
#. Set the proxy config on your :cpp-sdk:`realm::db_config <structrealm_1_1internal_1_1bridge_1_1realm_1_1config.html>`.

.. literalinclude:: /examples/generated/cpp/app.snippet.set-proxy-config.cpp
   :language: cpp

.. _cpp-encrypt-app-metadata:

Encrypt App Metadata
--------------------

When you connect to App Services, Realm creates additional metadata files 
on a device. For more information about these metadata files, refer to 
:ref:`cpp-realm-database`.

You can encrypt the metadata that App Services stores on client devices, 
similar to :ref:`encrypting the realm <cpp-encrypt-a-realm>`. 

On Apple devices, the metadata is encrypted by default. To disable this, 
add ``REALM_DISABLE_METADATA_ENCRYPTION`` to your environment variables.

To enable metadata encryption on other platforms, you must set a 
``metadata_encryption_key`` on your 
:cpp-sdk:`realm::App::configuration <structrealm_1_1App_1_1configuration.html>`.

.. literalinclude:: /examples/generated/cpp/app.snippet.encrypt-metadata.cpp
   :language: cpp
   :emphasize-lines: 14-15
