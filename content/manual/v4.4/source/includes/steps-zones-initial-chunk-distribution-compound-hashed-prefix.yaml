title: "Create the Zones"
level: 4
ref: initial-chunk-distribution-create-zones
content: |

   The planned shard key is ``{ "_id" : "hashed", "facility" : 1 }``.   
   Since the hashed field is the prefix (i.e. the first field in the
   shard key), create a *single* zone using 
   :method:`sh.addShardToZone()`:

   .. code-block:: javascript
  
      sh.addShardToZone("shardA", "FacilityAlpha")
      sh.addShardToZone("shardB", "FacilityAlpha")
---
title: "Create the Zone Ranges"
level: 4
ref: initial-chunk-distribution-create-zones-ranges
content: |

   Initial chunk distribution on a compound hashed shard key with a
   hashed prefix requires a single zone range with ``MinKey`` for all
   lower-bound fields and ``MaxKey`` for all upper-bound fields.

   Use :method:`sh.updateZoneKeyRange()` to create a single range:

   .. code-block:: javascript

      sh.updateZoneKeyRange( 
         "examples.metrics",
         { "_id" : MinKey, "facility" : MinKey },
         { "_id" : MaxKey, "facility" : MaxKey },
         "FacilityAlpha"
      );

---
title: "Enable Sharding for the Database"
level: 4
optional: true
ref: initial-chunk-distribution-create-zones-enable-sharding
content: |

   Skip this step if you already enabled sharding on the database.

   Use :method:`sh.enableSharding()` to enable sharding for the
   database:

   .. code-block:: javascript

      sh.enableSharding("examples")

---
title: "Shard the Collection"
level: 4
ref: initial-chunk-distribution-create-zones-shard-collection
content: |

   .. note::
   
      If the collection does not exist, the sharding operation creates
      the collection.

      If the collection is empty and no index exists to support the 
      shard key, the sharding operation creates the index.

   Use :method:`sh.shardCollection()` with 
   :ref:`presplitHashedZones: true 
   <method-shard-collection-presplitHashedZones>` to shard the 
   collection and perform initial chunk creation and distribution:

   .. code-block:: javascript

      sh.shardCollection(
        "examples.metrics",
        { "_id" : "hashed", "facility" : 1 },
        false,
        { presplitHashedZones: true }
      )
---
title: "Review the Created Chunks and Distribution"
level: 4
ref: initial-chunk-distribution-create-zones-review
content: |

   To see the created chunks and distribution, run the
   :method:`sh.status()` operation:

   .. code-block:: javascript

      sh.status()

   The output resembles the following 
   (*content omitted for  readability*):

   .. code-block:: javascript
      :emphasize-lines: 7, 11-16, 18

      --- Sharding Status --- 

      databases:
        {  "_id" : "config",  "primary" : "config",  "partitioned" : true }
        {  "_id" : "examples",  "primary" : "shardA",  "partitioned" : true,  "version" : {  "uuid" : UUID("245f8abf-a363-48b0-8208-2a5b577bbb4e"),  "lastMod" : 1 } }
          examples.metrics
            shard key: { "_id" : "hashed", "facility" : 1 }
            unique: false
            balancing: true
            chunks:
              shardA  2
              shardB  2
            { "_id" : { "$minKey" : 1 }, "facility" : { "$minKey" : 1 } } -->> { "_id" : NumberLong("-4611686018427387902"), "facility" : { "$minKey" : 1 } } on : shardA Timestamp(1, 0) 
            { "_id" : NumberLong("-4611686018427387902"), "facility" : { "$minKey" : 1 } } -->> { "_id" : NumberLong(0), "facility" : { "$minKey" : 1 } } on : shardA Timestamp(1, 1) 
            { "_id" : NumberLong(0), "facility" : { "$minKey" : 1 } } -->> { "_id" : NumberLong("4611686018427387902"), "facility" : { "$minKey" : 1 } } on : shardB Timestamp(1, 2) 
            { "_id" : NumberLong("4611686018427387902"), "facility" : { "$minKey" : 1 } } -->> { "_id" : { "$maxKey" : 1 }, "facility" : { "$maxKey" : 1 } } on : shardB Timestamp(1, 3) 
            
              tag: FacilityAlpha  { "_id" : { "$minKey" : 1 }, "facility" : { "$minKey" : 1 } } -->> { "_id" : { "$maxKey" : 1 }, "facility" : { "$maxKey" : 1 } }


   The sharding operation produced 4 chunks in total. Two chunks
   correspond to the absolute lower and upper bounds. One zone was
   created on ``shardA`` and ``shardB`` corresponding to
   ``FacilityAlpha``. The zone was subdivided into 2 chunks using the 
   hashed field.

...