==============
Access Control
==============

.. default-domain:: mongodb

MongoDB provides support for authentication and :ref:`authorization` on a
per-database level. Users exist in the context of a single logical
database.

.. _authentication:

Authentication
--------------

MongoDB provisions authentication, or verification of the user
identity, on a per-database level. Authentication disables anonymous
access to the database. For basic authentication, MongoDB stores the
user credentials in the ``admin`` database's :data:`system.users
<admin.system.users>` collection.

Authentication is **disabled** by default. To enable authentication for
a given :program:`mongod` or :program:`mongos` instance, use the
:setting:`auth` and :setting:`keyFile` configuration settings. For
details, see :doc:`/tutorial/enable-authentication`.

.. versionadded:: 2.5.4

   MongoDB supports x.509 certificate authentication for use with a
   secure SSL connection. See :doc:`/tutorial/configure-x509`.

.. versionadded 2.0: Before 2.0, sharded clusters *had* to run with
   trusted applications and a trusted networking configuration.

For MongoDB Enterprise installations, authentication
using a Kerberos service is available. For Linux, see
:doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`.

.. important::

   You can authenticate as only one user for a given database. If you
   authenticate to a database as one user and later authenticate on the
   same database as a different user, the second authentication
   invalidates the first. You can, however, log into a *different*
   database as a different user and not invalidate your authentication
   on other databases, though this is not a recommended approach.

   Each client connection should authenticate as exactly one
   user.
