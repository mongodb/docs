======================
db.collection.update()
======================

.. default-domain:: mongodb

Definition
----------

.. method:: db.collection.update(query, update, [options])

   Modifies an existing document or documents in a collection. The
   :method:`~db.collection.update()` method updates a single document by
   default.

   .. versionchanged:: 2.2
      The :method:`~db.collection.update()` method has the following form:

   .. code-block:: javascript

      db.collection.update( <query>, <update>, { <upsert>, <multi> } )

   Prior to version 2.2, the :method:`~db.collection.update()` method
   has the following form:

   .. code-block:: javascript

      db.collection.update( <query>, <update>, <upsert>, <multi> )

   The :method:`~db.collection.update()` method takes the following
   parameters:

   .. include:: /reference/method/db.collection.update-param.rst

   The :method:`update() <db.collection.update()>` operation applies
   mostly to updating the values of the fields but can also modify the
   name of a ``field`` using the :operator:`$rename` operator.

.. _update-parameter:

Update Parameter
~~~~~~~~~~~~~~~~

If the ``<update>`` parameter contains any :ref:`update operator
<update-operators>` expressions, such as an expression using the
:operator:`$set` operator, then:

- the ``<update>`` parameter must contain *only* update operator
  expressions.

.. versionadded:: 2.2

- :method:`~db.collection.update()` updates only the corresponding
  fields in the document.

If the ``<update>`` parameter consists *only* of ``field: value``
expressions, then:

- the :method:`~db.collection.update()` operation *replaces* the
  document with the ``update`` document. If the ``update`` document is
  missing the :term:`_id` field, MongoDB will add the ``_id`` field and
  assign to it a unique :term:`objectid`. For examples, see
  :ref:`example-update-replace-fields`.

- the :method:`~db.collection.update()` operation *cannot* use ``multi``
  to update multiple documents.

.. _upsert-parameter:

Upsert Parameter
~~~~~~~~~~~~~~~~

If ``upsert`` is set to ``true`` and no document matches the criteria,
:method:`~db.collection.update()` inserts a *single* document. The
``upsert`` creates a new document with either:

- The fields and values of the ``<update>`` parameter, or

- the fields and values of the both the ``<query>`` and ``<update>``
  parameters.

The ``upsert`` creates a document with data from both ``<query>`` and
``<update>`` if the ``<update>`` parameter *only uses update operators*.
See :ref:`update-operators`.

.. _multi-parameter:

Multi Parameter
~~~~~~~~~~~~~~~

If ``multi`` is set to ``true``, the :method:`~db.collection.update()`
method updates all documents that meet the ``<query>`` criteria. The
``multi`` update operation may interleave with other write operations.
For unsharded collections, you can override this behavior with the
:operator:`$isolated` isolation operator, which isolates the update
operation and blocks other write operations during the update. For an
example, see :ref:`example-update-multi`.

Examples
--------

The following examples use the **MongoDB version 2.2 interface** to
specify options in the document form.

Update Specific Fields in a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update specific fields, call :method:`~db.collection.update()` with
an ``<update>`` parameter that uses ``field: value`` pairs in combination
with :ref:`update operators <update-operators>`. For example, given a
``books`` collection with the following document:

.. code-block:: javascript

   { "_id" : 826, "item" : "Divine Comedy", "stock" : 2 }

The following operation updates the document by adding a ``price`` and
incrementing ``stock`` by ``5``.

.. code-block:: javascript

   db.books.update( { item: "Divine Comedy" }, { $set: { price: 18 } , $inc: { stock: 5 } } )

The updated document is now the following:

.. code-block:: javascript

   { "_id" : 826, "item" : "Divine Comedy", "price" : 18, "stock" : 7 }

.. _example-update-replace-fields:

Replace All Fields in a Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following examples replace *all* the fields in a document except for
the ``_id`` field. When the ``<update>`` argument includes only field
and value pairs, the update replaces all the fields in the existing
document with the fields specified in the ``<update>`` argument. To
replace all fields, do not use update operators.

For example, given the following document in the ``books`` collection:

.. code-block:: javascript

   { "_id" : 444, "item" : "The Banquet", "author" : "Dante", "price" : 20, "stock" : 4 }

The following operation passes an ``<update>`` parameter that replaces
all the fields in the original document, except for the ``_id`` field.
Notice that both the ``<query>`` document and the ``<update>`` document both
contain the ``item`` field:

.. code-block:: javascript

   db.books.update( { item: "The Banquet" }, { item: "The Banquet", price: 22 , stock: 3 } )

The operation updates the ``price`` and ``stock`` values and *removes*
the ``auth`` field

.. code-block:: javascript

      { "_id" : 444, "item" : "The Banquet", "price" : 22, "stock" : 3 }

In the next example, the :method:`update()
<db.collection.update()>` method includes the ``upsert`` option. The command issues the update
to the :doc:`/reference/bios-example-collection`.

If a document with ``name`` set to ``{ first: 'Dennis', last:
'Ritchie'}`` exists, MongoDB replaces all the matching document's data,
except the ``_id`` field, with the fields and values in the ``<update>``
parameter. If no document matches the ``<query>`` argument, MongoDB
creates a new document with the fields and values specified in the
``<update>`` argument. The query does not include an ``_id`` field, so
the operation adds the ``_id`` field and generates a unique ``ObjectId``
for its value.

.. code-block:: javascript

   db.bios.update(
      { name: { first: 'Dennis', last: 'Ritchie'} },
      {
        name: { first: 'Dennis', last: 'Ritchie'},
        birth: new Date('Sep 09, 1941'),
        death: new Date('Oct 12, 2011'),
        contribs: [ 'UNIX', 'C' ],
        awards: [
                  {
                    award: 'Turing Award',
                    year: 1983,
                    by: 'ACM'
                  },
                  {
                    award: 'National Medal of Technology',
                    year: 1998,
                    by: 'United States'
                  },
                  {
                    award: 'Japan Prize',
                    year: 2011,
                    by: 'The Japan Prize Foundation'
                  }
                ]
      },
      { upsert: true }
   )

.. _example-update-multi:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To update multiple documents, call the :method:`update()
<db.collection.update()>` method and specify the ``multi`` option. For
example, given a ``books`` collection with the following documents:

.. code-block:: javascript

   { "_id" : 1, "author" : "Dante", "item" : "Divine Comedy", "price" : 18 }
   { "_id" : 2, "author" : "Dante", "item" : "The Banquet", "price" : 22 }
   { "_id" : 3, "author" : "Dante", "item" : "Monarchia", "price" : 14 }

The following operation uses the ``multi`` option and a ``query`` for
``author: "Dante"`` to update all matching documents:

.. code-block:: javascript

   db.books.update( { author: "Dante" }, { $set: { born: "Florence", died: "Ravenna" } }, { multi: true } )

This operation does not affect any other fields in documents in the
``books`` collection:

.. code-block:: javascript

   { "_id" : 1, "author" : "Dante", "born" : "Florence", "died" : "Ravenna", "item" : "Divine Comedy", "price" : 18 }
   { "_id" : 2, "author" : "Dante", "born" : "Florence", "died" : "Ravenna", "item" : "The Banquet", "price" : 22 }
   { "_id" : 3, "author" : "Dante", "born" : "Florence", "died" : "Ravenna", "item" : "Monarchia", "price" : 14 }

Insert a New Document (Upsert)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To insert a new document if no document matches the query criteria, call
the :method:`~db.collection.update()` and specify the ``upsert`` option.
The following examples use the ``upsert`` option:

For example, given the following document:

.. code-block:: javascript

   db.books.update( { "item": "The New Life" }, { $set: { author: "Dante", "price": 15 } }, { upsert: true } )

If one or more documents with ``item: "The New Life"`` exists, this
operation updates *one* of those documents with the values in the
``author`` and ``price`` fields. If the fields do not exist, the
operation adds them.

If a document with ``item: "New Life"`` does not exist, this operation
creates a new document with an ``_id`` field set to a unique
``ObjectId``:

.. code-block:: javascript

   { "_id" : ObjectId("51e0570a9c6ae665454e301c"), "author" : "Dante", "item" : "New Life", "price" : 15 }

In the next example, no document matches the ``<query>`` argument,
so the ``upsert`` performs an insert. The example inserts a new document
into the :doc:`/reference/bios-example-collection`.

The ``<update>`` argument includes only :ref:`update operators
<update-operators>`, so the new document contains the fields and values
from ``<query>`` argument with the operations from the ``<update>``
argument applied.

.. code-block:: javascript

   db.bios.update(
      {
        _id: 7,
        name: { first: 'Ken', last: 'Thompson' }
      },
      {
        $set: {
                birth: new Date('Feb 04, 1943'),
                contribs: [ 'UNIX', 'C', 'B', 'UTF-8' ],
                awards: [
                          {
                            award: 'Turing Award',
                            year: 1983,
                            by: 'ACM'
                          },
                          {
                            award: 'IEEE Richard W. Hamming Medal',
                            year: 1990,
                            by: 'IEEE'
                          },
                          {
                            award: 'National Medal of Technology',
                            year: 1998,
                            by: 'United States'
                          },
                          {
                            award: 'Tsutomu Kanai Award',
                            year: 1999,
                            by: 'IEEE'
                          },
                          {
                            award: 'Japan Prize',
                            year: 2011,
                            by: 'The Japan Prize Foundation'
                          }
                        ]
              }
      },
      { upsert: true }
   )


