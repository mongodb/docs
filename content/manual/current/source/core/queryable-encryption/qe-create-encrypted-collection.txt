.. facet::
   :name: programming_language
   :values: csharp, go, java, javascript/typescript, python, shell

.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: queryable encryption, in-use encryption, code example, node.js, compass, java sync

.. _qe-create-encrypted-collection:

===================================================
Create an Encrypted Collection and Insert Documents
===================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

This guide shows you how to create a {+qe+}-enabled collection and insert a
document with encrypted fields.

After you complete the steps in this guide, you should be able to create
an encrypted collection and insert a document with fields that are encrypted 
with your {+cmk-long+}.

Before You Start
----------------

:ref:`Create your {+qe+}-enabled application <qe-create-application>`
before creating an encrypted collection.

If you are using :ref:`{+manual-enc+}
<qe-fundamentals-manual-encryption>`, you must also create a unique
{+dek-long+} for each encrypted field in advance. For more information,
see :ref:`qe-reference-keys-key-vaults`.

.. tabs-selector:: drivers

Procedure
---------

.. procedure::

   .. step:: Specify Fields to Encrypt

      To encrypt a field, add it to the {+enc-schema+}. To enable
      queries on a field, add the ``queries`` property. You can enable fields to
      be queryable by either equality queries or range queries. The following
      steps demonstrate how to specify fields to encrypt with each query type.

      a. Specify Fields for Equality Queries
   
         To enable equality queries on a field, add the field to the
         {+enc-schema+} with a ``queryType`` of ``"equality"``. The following
         code sample encrypts both the ``ssn`` and ``billing`` fields, but only the ``ssn``
         field is queryable:

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: javascript
                  :dedent:
                  :emphasize-lines: 7

            .. tab::
               :tabid: nodejs

               .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: javascript
                  :dedent:
                  :emphasize-lines: 7

            .. tab::
               :tabid: python

               .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: python
                  :dedent:
                  :emphasize-lines: 6

            .. tab::
               :tabid: java-sync

               .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: java
                  :dedent:
                  :emphasize-lines: 7-8

            .. tab::
               :tabid: go

               .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: go
                  :dedent:
                  :emphasize-lines: 7-11

            .. tab::
               :tabid: csharp

               .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
                  :start-after: start-encrypted-fields-map
                  :end-before: end-encrypted-fields-map
                  :language: csharp
                  :dedent:
                  :emphasize-lines: 11
   
      #. Specify Fields for Range Queries

         To enable range queries on a field, add the field to the
         {+enc-schema+} with a ``queryType`` of ``"range"``. The following
         example adds the ``billAmount`` field to the {+enc-schema+} created in the
         preceding step and enables range queries on it:

         .. tabs-drivers::

            .. tab::
               :tabid: shell

               .. literalinclude:: /includes/qe-tutorials/mongosh/range-query.js
                  :start-after: start-enable-range
                  :end-before: end-enable-range
                  :language: javascript
                  :dedent:
                  :emphasize-lines: 13-23

            .. tab::
               :tabid: nodejs

               .. literalinclude:: /includes/qe-tutorials/node/range-query.js
                  :start-after: start-enable-range
                  :end-before: end-enable-range
                  :language: javascript
                  :dedent:
                  :emphasize-lines: 13-23

            .. tab::
               :tabid: python

               .. literalinclude:: /includes/qe-tutorials/python/range_query.py
                  :start-after: start-enable-range
                  :end-before: end-enable-range
                  :language: python
                  :dedent:
                  :emphasize-lines: 15-21

            .. tab::
               :tabid: java-sync

               .. literalinclude:: /includes/qe-tutorials/java/RangeQuery.java
                  :start-after: start-enable-range
                  :end-before: end-enable-range
                  :language: java
                  :dedent:
                  :emphasize-lines: 13-24

            .. tab::
               :tabid: go

               .. literalinclude:: /includes/qe-tutorials/go/range_query.go
                  :start-after: start-enable-range
                  :end-before: end-enable-range
                  :language: go
                  :dedent:
                  :emphasize-lines: 18-32

            .. tab::
               :tabid: csharp

               .. literalinclude:: /includes/qe-tutorials/csharp/RangeQuery.cs
                  :start-after: start-enable-range
                  :end-before: end-enable-range
                  :language: csharp
                  :dedent:
                  :emphasize-lines: 19-33

      For extended versions of these steps, see :ref:`Create an
      {+enc-schema-title+} <qe-create-encryption-schema>`.

   .. step:: Instantiate ``ClientEncryption`` to access the API for the encryption helper methods

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-client-encryption
               :end-before: end-client-encryption
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
               :start-after: start-client-encryption
               :end-before: end-client-encryption
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_helpers.py
               :start-after: start-client-encryption
               :end-before: end-client-encryption
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-client-encryption
               :end-before: end-client-encryption
               :language: java
               :dedent:

         .. tab::
            :tabid: go

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_helpers.go
               :start-after: start-client-encryption
               :end-before: end-client-encryption
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionHelpers.cs
               :start-after: start-client-encryption
               :end-before: end-client-encryption
               :language: csharp
               :dedent:

   .. step:: Create the collection

      .. include:: /includes/queryable-encryption/qe-explicitly-create-collection.rst

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            Create your encrypted collection by using the encryption
            helper method accessed through the ``ClientEncryption`` class.
            This method automatically generates data encryption keys for your
            encrypted fields and creates the encrypted collection:

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-create-encrypted-collection
               :end-before: end-create-encrypted-collection
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            .. include:: /includes/tutorials/automatic/node-include-clientEncryption.rst

            Create your encrypted collection by using the encryption
            helper method accessed through the ``ClientEncryption`` class.
            This method automatically generates data encryption keys for your
            encrypted fields and creates the encrypted collection:

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-helpers.js
               :start-after: start-create-encrypted-collection
               :end-before: end-create-encrypted-collection
               :language: javascript
               :dedent:

            .. tip:: Database vs. Database Name

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*.

         .. tab::
            :tabid: python

            Create your encrypted collection by using the encryption
            helper method accessed through the ``ClientEncryption`` class.
            This method automatically generates data encryption keys for your
            encrypted fields and creates the encrypted collection:

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-create-encrypted-collection
               :end-before: end-create-encrypted-collection
               :language: python
               :dedent:

            .. tip:: Database vs. Database Name

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*. You can
               obtain this reference by using a method on your client object.

         .. tab::
            :tabid: java-sync

            Create your encrypted collection by using the encryption
            helper method accessed through the ``ClientEncryption`` class.
            This method automatically generates data encryption keys for your
            encrypted fields and creates the encrypted collection:

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-create-encrypted-collection
               :end-before: end-create-encrypted-collection
               :language: java
               :dedent:

            .. tip:: Database vs. Database Name

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*. You can
               obtain this reference by using a method on your client object.

         .. tab::
            :tabid: go

            The Golang version of this tutorial uses data models to
            represent the document structure. Add the following
            structs to your project to represent the data in your
            collection:

            .. literalinclude:: /includes/qe-tutorials/go/models.go
               :start-after: start-patient-document
               :end-before: end-patient-document
               :language: go
               :dedent:

            .. literalinclude:: /includes/qe-tutorials/go/models.go
               :start-after: start-patient-record
               :end-before: end-patient-record
               :language: go
               :dedent:

            .. literalinclude:: /includes/qe-tutorials/go/models.go
               :start-after: start-payment-info
               :end-before: end-payment-info
               :language: go
               :dedent:

            After you've added these classes, create your encrypted
            collection by using the encryption helper method accessed
            through the ``ClientEncryption`` class.
            This method automatically generates data encryption keys for your
            encrypted fields and creates the encrypted collection:

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-create-encrypted-collection
               :end-before: end-create-encrypted-collection
               :language: go
               :dedent:

            .. tip:: Database vs. Database Name

               The method that creates the encrypted collection requires a reference
               to a database *object* rather than the database *name*. You can
               obtain this reference by using a method on your client object.

         .. tab::
            :tabid: csharp

            The C# version of this tutorial uses separate classes as data models
            to represent the document structure.
            Add the following ``Patient``, ``PatientRecord``, and ``PatientBilling``
            classes to your project:

            .. literalinclude:: /includes/qe-tutorials/csharp/Patient.cs
               :start-after: start-patient
               :end-before: end-patient
               :language: csharp
               :dedent:

            .. literalinclude:: /includes/qe-tutorials/csharp/PatientRecord.cs
               :start-after: start-patient-record
               :end-before: end-patient-record
               :language: csharp
               :dedent:

            .. literalinclude:: /includes/qe-tutorials/csharp/PatientBilling.cs
               :start-after: start-patient-billing
               :end-before: end-patient-billing
               :language: csharp
               :dedent:

            After you've added these classes, create your encrypted collection by
            using the encryption helper method accessed through the
            ``ClientEncryption`` class.
            This method automatically generates data encryption keys for your
            encrypted fields and creates the encrypted collection:

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-create-encrypted-collection
               :end-before: end-create-encrypted-collection
               :language: csharp
               :dedent:

            .. tip:: Database vs. Database Name

               The method that creates the collection requires a reference
               to a database *object* rather than the database *name*. 
         
      For additional information, see :ref:`Enable {+qe+} when Creating a
      Collection <qe-fundamentals-enable-qe>`.
               
   .. step:: Insert a Document with Encrypted Fields

      .. _qe-aws-insert:
      .. _qe-azure-insert:
      .. _qe-gcp-insert:
      .. _qe-kmip-insert:

      .. tabs-drivers::

         .. tab::
            :tabid: shell

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/mongosh/queryable-encryption-tutorial.js
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 16
               :language: javascript
               :dedent:

         .. tab::
            :tabid: nodejs

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/node/queryable-encryption-tutorial.js
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 18
               :language: javascript
               :dedent:

         .. tab::
            :tabid: python

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/python/queryable_encryption_tutorial.py
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 16
               :language: python
               :dedent:

         .. tab::
            :tabid: java-sync

            This tutorial uses POJOs as data models
            to represent the document structure. To set up your application to
            use POJOs, add the following code:
            
            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-setup-application-pojo
               :end-before: end-setup-application-pojo
               :language: java
               :dedent:

            To learn more about Java POJOs, see the `Plain Old Java Object
            wikipedia article <https://en.wikipedia.org/wiki/Plain_old_Java_object>`__.
            
            This tutorial uses the following POJOs:
            
            - ``Patient``
            - ``PatientRecord``
            - ``PatientBilling``
            
            You can view these classes in the `models package of the complete Java application
            <{+sample-app-url-qe+}/java/src/main/java/com/mongodb/tutorials/qe/models>`__.

            Add these POJO classes to your application. Then, create an instance
            of a ``Patient`` that describes a patient's personal information. Use
            the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/java/src/main/java/com/mongodb/tutorials/qe/QueryableEncryptionTutorial.java
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 9
               :language: java
               :dedent: 

         .. tab::
            :tabid: go

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/go/queryable_encryption_tutorial.go
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 16
               :language: go
               :dedent:

         .. tab::
            :tabid: csharp

            Create a sample document that describes a patient's personal information.
            Use the encrypted client to insert it into the ``patients`` collection,
            as shown in the following example:

            .. literalinclude:: /includes/qe-tutorials/csharp/QueryableEncryptionTutorial.cs
               :start-after: start-insert-document
               :end-before: end-insert-document
               :emphasize-lines: 20
               :language: csharp
               :dedent:

Next Steps
----------

After creating a {+qe+}-enabled collection, you can :ref:`query the
encrypted fields <qe-query-encrypted-document>`.