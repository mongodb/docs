stepnum: 1
title: Tag each shard.
level: 4
ref: sharding-high-availability-tag-shards
action:
  - pre: |
      Tag each shard in the ``alfa`` data center with the ``alfa`` tag.
    language: javascript
    code: |
      sh.addShardTag("shard0000", "alfa")
  - pre: |
      Tag each shard in the ``bravo`` data center with the ``bravo`` tag.
    language: javascript
    code: |
      sh.addShardTag("shard0001", "bravo")
post: |
  You can review the tags assigned to any given shard by running 
  :method:`sh.status()`. 
---
stepnum: 2
title: Define ranges for each tag.
level: 4
ref: sharding-high-availability-tag-ranges
action:
  - pre: |
      Define the range for the ``alfa`` database and associate it to the ``alfa`` 
      tag using the :method:`sh.addTagRange()` method. This method requires:
      
      * The full namespace of the target collection.
      
      * The inclusive lower bound of the range.
      
      * The exclusive upper bound of the range.
      
      * The name of the tag.
      
    language: javascript
    code: |
      sh.addTagRange( 
        "<database>.<collection>",
        { "datacenter" : "alfa", "userid" : MinKey },
        { "datacenter" : "alfa", "userid" : MaxKey }, 
        "alfa"
      )
  - pre: |
      Define the range for the ``bravo`` database and associate it to the 
      ``bravo`` tag using the :method:`sh.addTagRange()` method. This method 
      requires:
      
      * The full namespace of the target collection.
      
      * The inclusive lower bound of the range.
      
      * The exclusive upper bound of the range.
      
      * The name of the tag.
    
    language: javascript
    code: |
      sh.addTagRange( 
        "<database>.<collection>",
        { "datacenter" : "bravo", "userid" : MinKey },
        { "datacenter" : "bravo", "userid" : MaxKey }, 
        "bravo"
      )
post: |
  The :bsontype:`MinKey` and :bsontype:`MaxKey` values are reserved special
  values for comparisons. :bsontype:`MinKey` always compares as less than
  every other possible value, while :bsontype:`MaxKey` always compares as
  greater than every other possible value. The configured ranges capture every
  user for each ``datacenter``.
---
stepnum: 3
title: Review the changes.
level: 4
ref: sharding-high-availability-review
pre: |
  The next time the :ref:`balancer <sharding-balancing>` runs, it 
  :ref:`splits <sharding-chunk-split>` and
  :ref:`migrates <sharding-chunk-migration>` chunks across the 
  shards respecting the tag ranges and tags. 
  
  Once balancing finishes, the shards tagged as ``alfa`` should only
  contain documents with ``datacenter : alfa``, while shards tagged as 
  ``bravo`` should only contain documents with ``datacenter : bravo``.
  
  You can review the chunk distribution by running :method:`sh.status()`.
...