stepnum: 1
title: Connect a :program:`mongos` to the cluster
level: 4
ref: deploy-cluster-connect-mongos
pre: |
  Start a :program:`mongos` specifying 
  the keyfile using either a configuration file or a command line parameter.
action:
  - pre: |
      If using a configuration file, set the :setting:`security.keyFile` 
      to the keyfile`s path and the :setting:`sharding.configDB` to
      the replica set name and at least one member of the replica 
      set in ``<replSetName>/<host:port>`` format.
    language: yaml
    code: |
      security:
        keyFile: <path-to-keyfile>
      sharding:
        configDB: <configReplSetName>/cfg1.example.net:27017,cfg2.example.net:27017,...
  - pre: |
      Start the :program:`mongos` specifying the ``--config`` option and the 
      path to the configuration file.
    language: shell
    code: |
      mongos --config /srv/mongodb/mongos.conf
    post: |
      For more information on the configuration file, see 
      :doc:`configuration options</reference/configuration-options>`.
  - pre: |
      If using command line parameters start the :program:`mongos` and specify 
      the ``--keyFile`` and ``--configDB`` parameters.
    language: sh
    code: |
      mongos --keyFile <path-to-keyfile> --configDB <configReplSetName>/cfg1.example.net:27017,cfg2.example.net:27017,...
    post: |
      Include any other options as appropriate for your deployment.
  - pre: |
      **Using mirrored config servers**
      
      .. versionchanged:: 3.2 MongoDB deprecates mirrored config server configurations
         
      If using a mirrored configuration, pass all of the config 
      servers in ``<host>:<port>`` format to the ``configDB`` option. 
      
      If using a configuration file:
    language: yaml
    code: |
      security:
        keyFile: <path-to-keyfile>
      sharding:
        configDB: cfg1.example.net:27017,cfg2.example.net:27017,cfg3.example.net:27017
  - pre: |
      If using the command line parameters:
    language: sh
    code: |
      mongos --keyFile <path-to-keyfile> --configDB cfg1.example.net:27017,cfg2.example.net:27017,cfg3.example.net:27017
---
stepnum: 2
title: Connect to a :program:`mongos` over the localhost interface.
level: 4
ref: deploy-cluster-connect-mongo
pre: |
  The :ref:`localhost-exception` allows clients connected over the 
  localhost interface to create users on a :program:`mongod` 
  enforcing access control. After creating the first user, 
  the :ref:`localhost-exception` closes. 

  Connect to one of the replica set members over the 
  :ref:`localhost interface<localhost-exception>`. You must run the
  :program:`mongo` shell on the same physical machine as the target
  :program:`mongos`.
---
title: Create the user administrator.
stepnum: 3
level: 4
ref: add-user
pre: |
  .. important::
     After you create the first user, the :ref:`localhost exception
     <localhost-exception>` is no longer available.
     
     The first user must have privileges to create other users, such 
     as a user with the :authrole:`userAdminAnyDatabase`. This ensures 
     that you can create additional users after the :ref:`localhost-exception`
     closes. 
     
     If at least one user does *not* have privileges to create users, 
     once the localhost exception closes you may be unable to create
     or modify users with new privileges, and therefore unable to 
     access necessary operations.
  
  Add a user using the :method:`db.createUser()` method. The user should
  have at minimum the :authrole:`userAdminAnyDatabase` role on the 
  ``admin`` database. 
  
  The following example creates the user ``userAdmin`` on the
  ``admin`` database. Change the ``pwd`` field to be a password of your
  own choosing:

  .. important::
     Passwords should be random, long, and complex to ensure system security
     and to prevent or delay malicious access. 

action:
  pre: |
  
  language: javascript
  code: |
    admin = db.getSiblingDB("admin")
    admin.createUser(
      {
        user: "userAdmin",
        pwd: "<password>",
        roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
      }
    )
post: |
  See :ref:`database-user-roles` for a full list of built-in roles and
  related to database administration operations.
---
title: Authenticate as the user administrator.
stepnum: 4
level: 4
ref: auth-as-admin
action:
  - pre: |
      Use :method:`db.auth()` to authenticate as the user administrator:
    language: javascript
    code: |
      admin = db.getSiblingDB("admin")
      admin.auth("userAdmin", "<password>" )
  - pre: |
      Alternatively, connect a new :program:`mongo` shell to the target 
      replica set member using the ``-u <username>``, ``-p <password>``, and
      the ``--authenticationDatabase admin`` parameters. You must use 
      the :ref:`localhost-exception` to connect to the :program:`mongos`.
    language: sh
    code: |
      mongo -u "userAdmin" -p "<password>" --authenticationDatabase "admin"
---
title: Create Administrative User for Cluster Management
stepnum: 5
level: 4
ref: add-user-cluster
pre: |
  The cluster administrator user has the :authrole:`clusterAdmin` role, 
  which grants access to replication and sharding operations.
  
  The following example creates the user ``myUserAdmin`` on the
  ``admin`` database. Change the ``pwd`` field to be a password of your
  own choosing:

  .. important::
     Passwords should be random, long, and complex to ensure system security
     and to prevent or delay malicious access.
action:
  - pre: |
      Create a :authrole:`clusterAdmin` user in the ``admin`` database:
    language: sh
    code: |
      admin = db.getSiblingDB("admin")
      admin.createUser(
        {
          "user" : "clusterAdmin",
          "pwd" : "<password>",
          roles: [ { "role" : "clusterAdmin", "db" : "admin" } ] 
        }
      )
post: |
  See :ref:`cluster-admin-roles` for a full list of built-in roles related to 
  replica set and sharded cluster operations.
---
stepnum: 6
title: Authenticate as cluster admin.
ref: auth-user-cluster
level: 4
pre: |
  You cannot perform sharding operations using the ``userAdmin`` user.
  The underlying :authrole:`userAdminAnyDatabase`
  role does not have the required privileges.
  
  Authenticate as the ``clusterAdmin`` using either the 
  :method:`db.auth()` method or a new :program:`mongo` shell with the 
  ``username``, ``password``, and ``authenticationDatabase`` parameters.
---
stepnum: 7
title: Create additional users (Optional).
ref: deploy-cluster-create-users
level: 4
pre: |
  Create users to allow clients to connect and interact with the replica set. 
  See :ref:`database-user-roles` for basic built-in roles to use in creating 
  read-only and read-write users. 
  
  You must authenticate as the ``userAdmin`` user, or as a user with
  user creation privileges, in order to add additional users.
  
  You may also want additional administrative users.
  See :doc:`/core/security-users`.
...