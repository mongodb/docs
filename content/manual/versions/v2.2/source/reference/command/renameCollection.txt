================
renameCollection
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: renameCollection

   The :dbcommand:`renameCollection` command is an administrative
   command that changes the name of an existing collection. You
   specify collections to :dbcommand:`renameCollection` in the form of
   a complete :term:`namespace`, which includes the database name. To
   rename a collection, issue the :dbcommand:`renameCollection`
   command against the :term:`admin database` in the form:

   .. code-block:: javascript

      { renameCollection: <source-namespace>, to: <target-namespace>[, dropTarget: <boolean> ] }

   The ``dropTarget`` argument is optional.

   If you specify a collection to the ``to`` argument in a different database, the
   :dbcommand:`renameCollection` command will copy the collection to the new
   database and then drop the source collection.

   :param source-namespace:

          Specifies the complete namespace of the collection to rename.

   :param string to:

          Specifies the new namespace of the collection.

   :param boolean dropTarget:

          Optional. If ``true``, :binary:`~bin.mongod` will drop the
          ``target`` of :dbcommand:`renameCollection` prior to renaming
          the collection.

   :exception 10026:

              Raised if the ``source`` namespace does not exist.

   :exception 10027:

              Raised if the ``target`` namespace exists
              and ``dropTarget`` is either ``false`` or unspecified.

   :exception 15967:

              Raised if the ``target`` namespace is an invalid
              collection name.

   You can use :dbcommand:`renameCollection` in production
   environments; however:

   - :dbcommand:`renameCollection` will block all database activity
     for the duration of the operation.

   - :dbcommand:`renameCollection` is incompatible with sharded
     collections.

   .. warning::

      :dbcommand:`renameCollection` will fail if
      `target` is the name of an existing collection
      and you do not specify ``dropTarget: true``.

      If the :dbcommand:`renameCollection` operation does not complete
      the ``target`` collection and indexes will not be usable and
      will require manual intervention to clean up.

   The shell helper :method:`db.collection.renameCollection()` provides a
   simpler interface to using this command within a database.
   The following is equivalent to the previous example:

   .. code-block:: javascript

      db.source-namespace.renameCollection( "target" )

   .. warning:: You cannot use :dbcommand:`renameCollection` with
      sharded collections.

   .. include:: /includes/warning-blocking-global.rst
