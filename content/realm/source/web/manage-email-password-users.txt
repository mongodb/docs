.. _web-manage-email-password-users:

=====================================
Manage Email/Password Users - Web SDK
=====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The Web SDK includes a client object that allows you to manage users associated
with the :ref:`Email/Password authentication provider
<email-password-authentication>`.

.. _web-email-password-register-new-user: 

Register a New User Account
---------------------------

To register a new email/password user, call the ``registerUser()`` method with
the user's email address and desired password. The email address must not be
associated with another email/password user and the password must be between 6
and 128 characters.

.. literalinclude:: /examples/generated/web/authentication-manage-email-password.test.snippet.register-new-user.js
   :language: javascript

.. note:: Confirm New Users

   You must :ref:`confirm a new user's email address
   <web-email-password-confirm-user>` before they can log in to your app.

.. _web-email-password-confirm-user:

Confirm a New User's Email Address
----------------------------------

New users must confirm that they own their email address before they can log in
to your app unless the provider is configured to :ref:`automatically confirm new
users <auth-automatically-confirm-users>`.

If the provider is configured to :ref:`send a confirmation email
<auth-send-a-confirmation-email>`, Atlas App Services automatically sends a
confirmation email when a user registers. The email contains a link to the
configured :guilabel:`Email Confirmation URL` with a token that is valid for 30
minutes after the email is sent. If a user did not receive the initial email or
didn't click the confirmation link in time, you can use the SDK to :ref:`resend a
confirmation email <web-email-password-resend-confirmation-email>`.

Alternatively, if the provider is configured to :ref:`run a confirmation
function <auth-run-a-confirmation-function>`, App Services automatically runs
your custom :ref:`Atlas Function <functions>` when a user registers. 
If the call to the custom confirmation function fails, you can use the SDK to 
:ref:`retry a user confirmation function 
<web-email-password-resend-confirmation-function>`.

.. _web-email-password-complete-confirmation:

Complete a User Confirmation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need a valid ``token`` and ``tokenId`` for a registered user in order to
confirm them and allow them to log in. These values are available in different
places depending on the provider configuration:

- If the provider is set to :ref:`send a confirmation email
  <auth-send-a-confirmation-email>`, the ``token`` and ``tokenId`` values are
  included as query parameters in the :guilabel:`Email Confirmation URL`.

- If the provider is set to :ref:`run a confirmation function
  <auth-run-a-confirmation-function>`, the ``token`` and ``tokenId`` values are
  passed to the function as arguments.

To confirm a registered user, call the ``confirmUser()`` method with the user's
valid ``token`` and ``tokenId``:

.. literalinclude:: /examples/generated/web/authentication-manage-email-password.test.snippet.confirm-new-email.js
   :language: javascript


.. _web-email-password-retry-user-confirmation:

Retry User Confirmation Methods
-------------------------------

The SDK provides methods to resend user confirmation emails or retry custom 
confirmation methods.

.. _web-email-password-resend-confirmation-email:

Resend a Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To resend the confirmation email to a user, call the ``resendConfirmationEmail()``
method with the user's email address:

.. literalinclude:: /examples/generated/web/authentication-manage-email-password.test.snippet.resend-confirmation-email.js
   :language: javascript

.. _web-email-password-resend-confirmation-function:

Retry a User Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: Realm Web v1.4.0

To re-run your :ref:`custom confirmation function
<auth-run-a-confirmation-function>`, call the ``retryCustomConfirmation()`` method
with the user's email address:

.. literalinclude:: /examples/generated/web/authentication-manage-email-password.test.snippet.retry-user-confirmation-function.js
   :language: javascript

.. _web-email-password-reset-password:

Reset a User's Password
-----------------------

.. _web-send-password-reset-email:

Send a Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the provider is configured to :ref:`send a password reset email
<auth-send-a-password-reset-email>`, you can use the SDK to send a password
reset email to a user. The email contains a link to the configured
:guilabel:`Password Reset URL`.

.. literalinclude:: /examples/generated/web/authentication-manage-email-password.test.snippet.send-password-reset-email.js
   :language: javascript

.. _web-call-password-reset-function:

Call a Password Reset Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the provider is configured to :ref:`run a password reset function
<auth-run-a-password-reset-function>`, you can use the SDK to run the function.
Pass an object with the user's email and new password. You can also include
additional arguments to use in the password reset function in the App Services backend.

.. literalinclude:: /examples/generated/web/authentication-manage-email-password.test.snippet.call-password-reset-function.js
   :language: javascript

.. _web-email-password-complete-password-reset:

Complete a Password Reset
~~~~~~~~~~~~~~~~~~~~~~~~~

Once a user requests a password reset, either by :ref:`sending a password reset
email <web-send-password-reset-email>` or :ref:`calling a password reset
function <web-call-password-reset-function>`, Realm generates a pair of unique
``token`` and ``tokenId`` values that they can use to complete the password
reset within 30 minutes of the initial request.

.. literalinclude:: /examples/generated/web/authentication-manage-email-password.test.snippet.complete-password-reset.js
   :language: javascript

.. example:: Get the Token and TokenID

   If the provider uses the built-in password reset email, the ``token`` and
   ``tokenId`` are included as query parameters in the password reset URL. You
   can access them like so:

   .. literalinclude:: /examples/generated/web/authentication-manage-email-password.test.snippet.get-token-tokenid.js
      :language: javascript
