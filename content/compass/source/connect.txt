.. _connect-run-compass:

==================
Connect to MongoDB
==================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. meta:: 
   :description: How to use MongoDB Compass to connect to a MongoDB standalone, replica set, or sharded cluster host.
   :keywords: atlas, server

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
  
This page outlines how to use |compass| to connect to a
MongoDB host. You can connect to a standalone, replica set,
or sharded cluster host.

.. note:: MongoDB Atlas

   If you need to create a MongoDB host, consider using 
   `MongoDB Atlas <https://www.mongodb.com/cloud/atlas?tck=docs_compass>`__.
   Atlas is a cloud-hosted database-as-a-service which requires no 
   installation, offers a free tier to get started, and provides a 
   copyable URI to easily connect |compass-short| to your deployment.

If you need to install |compass-short|, see
:ref:`download-install` for instructions.

Considerations
--------------

- When connecting |compass-short| to a replica set, it is not
  recommended to connect directly to an individual replica
  set member. If the member to which you are connected switches from a
  :manual:`primary </core/replica-set-primary/>` member to a
  :manual:`secondary </core/replica-set-secondary/>` or vice versa as
  the result of an election, |compass-short| may either forcibly close
  the connection or display stale data.

  Instead, to connect to a replica set, use either the replica set
  :guilabel:`SRV record` or :guilabel:`Replica Set Name` when 
  filling in your connection information.

- .. include:: /includes/fact-non-genuine-warning.rst

- .. include:: /includes/fact-legacy-connections.rst

Connect
-------

If your connection name is already in the :guilabel:`Connections
Sidebar` of your Compass window, click on the connection name to
connect. 

Otherwise, you can connect your deployments by either:

- Providing your connection string.

- Specifying :guilabel:`Advanced Connection Options`. 
  Advanced connection options allow you to specify authentication, 
  TLS/SSL, and SSH connection options. To learn more, see 
  :ref:`<advanced-connection-options>`.

.. note::

   .. include:: /includes/multiple-connections.rst

Provide your Connection String
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you provide a connection string, |compass-short| supports
most :manual:`Connection String Options
</reference/connection-string/#connection-string-options>`
supported by MongoDB.

By default, |compass-short|'s default 
:manual:`socketTimeoutMS </reference/connection-string/#urioption.socketTimeoutMS>`
value is 60000, or 60 seconds. If you are frequently experiencing
timeouts in |compass-short|, consider setting this option to a
higher value in your connection string.

For a complete list of the connection string options that 
|compass-short| supports, see the
`Compass Connection README
<https://github.com/mongodb-js/connection-model/blob/master/README.md#properties>`__
on GitHub.

.. include:: /includes/starting-compass-paste-string.rst

Use Advanced Connection Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/intro-advanced-connection-options.rst

For details on how to specify connection options using Compass, 
see :ref:`advanced-connection-options`.

Connect to Compass from the Command Line
----------------------------------------

.. include:: /includes/intro-command-line-connection.rst

To connect to Compass using the command line, you can include your connection 
options directly in your connection string or as command line arguments.

To specify connection options in your connection string, use the following format: 

.. code-block::

   mongodb-compass 'mongodb://username:password@hostname:port/database?ssl=true&replicaSet=myReplicaSet'

For more connection string options, see :ref:`connections-connection-options`.

To specify connection options as command line arguments, use the following format:

.. code-block::

   <path/to/compass/executable> <connection string> --username <username> --password <password>

For more command line argument connection options, see :ref:`comp-command-line-connect`.

.. seealso::
   
   To learn how to disconnect your deployment, see :ref:`<disconnect-tab>`

.. toctree::
   :titlesonly:

   Connections Sidebar </connect/connections>
   Use the Command Line </connect/connect-from-the-command-line>
   Advanced Options </connect/advanced-connection-options>
   Favorite Connections </connect/favorite-connections>
   Required Access </connect/required-access>
   Disconnect </connect/disconnect>

Connection String Examples
--------------------------

The following examples highlight some advanced connection string options.
For information on all connection string options, see :ref:`connections-connection-options`.  

TLS Options
~~~~~~~~~~~

The following connection string enables TLS using the ``tls`` URI option. 
``tlsCertificateKeyFile`` specifies the path to the client certificate and 
private key. Specifying the ``tlsCertificateKeyFile`` in your connection string
is optional, unless the server requires client certificates, or if 
you are using X.509 authentication.

.. code-block:: 

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db0.example.com/?directConnection=true&tls=true&tlsCAFile=path/to/rootCA.crt&tlsCertificateKeyFile=path/to/server_certificate.pem

To enable SSL, use the equivalent ``ssl=true`` option in place of ``tls=true``. 

X.509 Authentication
````````````````````

The following example demonstrates how to specify X.509 authentication in your connection string
using the :urioption:`authMechanism` connection string option:

.. code-block:: 

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db1.example.com/?authMechanism=MONGODB-X509&tls=true&tlsCertificateKeyFile=/path/to/client_certificate.pem

LDAP
~~~~

The following example specifies LDAP authentication. It sets :urioption:`authMechanism` to ``plain`` 
to specify the use of the LDAP authentication mechanism and sets ``authSource`` to ``$external``
to indicate that the authentication database is ``$external``.

.. code-block:: 

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db2.example.com/?authMechanism=PLAIN&authSource=$external

Kerberos
~~~~~~~~

The following example specifies Kerberos authentication. It sets :urioption:`authMechanism` to
``GSSAPI`` to use the Kerberos authentication mechanism and sets ``authSource`` to ``$external``
to indicate that the authentication database is ``$external``.

.. code-block:: 

   mongodb://myDatabaseUser@db3.example.com/?authMechanism=GSSAPI&authSource=$external

Read/Write Preferences
~~~~~~~~~~~~~~~~~~~~~~

To enable read/write preferences in your connection string, you can use the 
``readPreference`` option for read preferences and the ``w`` option for write concerns.

The following connection string sets both read and write preferences. 
``readPreference=secondary`` specifies that read operations should be directed to secondary 
members of the replica set and ``w=majority`` ensures that write operations are 
acknowledged by the majority of the replica set members.

.. code-block::

   mongodb://myDatabaseUser:D1fficultP%40ssw0rd@db4.example.com/database?readPreference=secondary&w=majority

Analytic Nodes
~~~~~~~~~~~~~~

To specify an ``analytics`` node type in your connection string: 

- Set your ``readPreference`` to ``secondary`` to specify that the read operations 
  should be directed to secondary nodes.
- Set ``readPreferenceTags`` to ``nodeType:ANALYTICS`` to ensure that the read operations 
  are directed specifically to the analytic nodes. 

The following connection string demonstrates how to specify an ``analytics`` node type in your
connection string: 

.. code-block:: 

   mongodb+srv://myDatabaseUser:D1fficultP%40ssw0rd@db5.example.com/myDatabase?readPreference=secondary&readPreferenceTags=nodeType:ANALYTICS

For more information on using analytics nodes to isolate workloads, see :ref:`replica-set-tags`. 