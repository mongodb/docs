.. _golang-whats-new:

==========
What's New
==========

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: update, backward compatibility

.. tip:: Release Notes

   To learn more about changes and updates between versions, you can
   read the `release notes
   <https://github.com/mongodb/mongo-go-driver/tags>`__ published with
   the driver source code.

Learn what's new in:

* :ref:`Version 2.2 <golang-version-2.2>`
* :ref:`Version 2.1 <golang-version-2.1>`
* :ref:`Version 2.0 <golang-version-2.0>`
* :ref:`Version 1.17 <golang-version-1.17>`
* :ref:`Version 1.16 <version-1.16>`
* :ref:`Version 1.15.1 <version-1.15.1>`
* :ref:`Version 1.15 <version-1.15>`
* :ref:`Version 1.14 <version-1.14>`
* :ref:`Version 1.13 <version-1.13>`
* :ref:`Version 1.12.1 <version-1.12.1>`
* :ref:`Version 1.12 <version-1.12>`

.. _golang-version-2.2:

What's New in 2.2
-----------------

.. important:: Breaking Changes

   The {+driver-short+} v2.2 release introduces the following breaking
   changes:

   - Drops support for {+mdb-server+} v3.6. The minimum supported {+mdb-server+}
     version is now v4.0. 

This release includes the following improvements and fixes:

- Adds the ``OmitEmpty`` BSON option to globally prevent empty values from
  being serialized. To learn more about setting the ``OmitEmpty`` global flag,
  see the example in the :ref:`BSON Options <golang-bson-options>` section of the 
  BSON guide. 

.. _golang-version-2.1:

What's New in 2.1
-----------------

The 2.1 {+driver-short+} release includes the following improvements
and fixes:

- Introduces the new `Client.BulkWrite <{+api+}/mongo#Client.BulkWrite>`__ method, 
  enabling clients to perform multiple insert, update, and delete operations across 
  multiple databases and collections in a single request.

- Introduces the new `bson.Vector <{+api+}/bson#Vector>`__ type to make inserting and querying 
  vector data by using :atlas:`Atlas Vector Search </atlas-vector-search/vector-search-overview/>` 
  easier and more efficient. For an example using the ``bson.Vector`` type, see
  the {+driver-short+}'s :ref:`Atlas Vector Search <golang-atlas-vector-search>` guide. 

- Extends the `ServerError <{+api+}/mongo#ServerError>`__ interface to include 
  ``ErrorCodes``, which returns a list of deduplicated error codes returned by 
  the server during the lifetime of operation execution.

- Adds the ``sort`` option to `UpdateOneOptions <{+api+}/mongo/options#UpdateOneOptions>`__ 
  and `ReplaceOptions <{+api+}/mongo/options#ReplaceOptions>`__ for the ``updateOne`` 
  and ``replaceOne`` operations. 

For more information about the changes in this version, see the
:github:`v2.1 release notes </mongodb/mongo-go-driver/releases/tag/v2.1.0>` 
on GitHub.

.. _golang-version-2.0:

What's New in 2.0
-----------------

The 2.0 {+driver-short+} release supports OpenID Connect (OIDC)
authentication, provides a smoother client-side operations timeout
(CSOT) experience, and implements clearer, more idiomatic Go
code by streamlining APIs, improving errors descriptions, and
simplifying the driver package structure.

You can learn more about these changes in this section, or by viewing
the `v2.0 Migration Guide
<https://github.com/mongodb/mongo-go-driver/blob/master/docs/migration-2.0.md>`__
in the {+driver-short+} source code on GitHub.

.. important:: Breaking Changes

   The {+driver-short+} v2.0 release introduces the following breaking
   changes:

   - ``mongo.Connect()`` does not accept a Context parameter. This
     method accepts only an options object. To view an example that uses
     this method, see the :ref:`Connection Example Code
     <go-connection-example-code>` in the Connection Guide.

   - The ``Cursor.SetMaxTime()`` method is renamed to
     ``Cursor.SetMaxAwaitTime()``. This method specifies the maximum time
     that the server waits for new documents retrieved from a capped
     collection with a tailable cursor.
   
   - Removal of operation-specific timeout options. The following fields
     and setter methods have been removed from the driver:

     - ``AggregateOptions.MaxTime``, ``AggregateOptions.SetMaxTime()``
     - ``ClientOptions.SocketTimeout``, ``ClientOptions.SetSocketTimeout()``
     - ``CountOptions.MaxTime``, ``CountOptions.SetMaxTime()``
     - ``DistinctOptions.MaxTime``, ``DistinctOptions.SetMaxTime()``
     - ``EstimatedDocumentCountOptions.MaxTime``, ``EstimatedDocumentCountOptions.SetMaxTime()``
     - ``FindOptions.MaxTime``, ``FindOptions.SetMaxTime()``
     - ``FindOneOptions.MaxTime``, ``FindOneOptions.SetMaxTime()``
     - ``FindOneAndReplaceOptions.MaxTime``, ``FindOneAndReplaceOptions.SetMaxTime()``
     - ``FindOneAndUpdateOptions.MaxTime``, ``FindOneAndUpdateOptions.SetMaxTime()``
     - ``GridFSFindOptions.MaxTime``, ``GridFSFindOptions.SetMaxTime()``
     - ``CreateIndexesOptions.MaxTime``, ``CreateIndexesOptions.SetMaxTime()``
     - ``DropIndexesOptions.MaxTime``, ``DropIndexesOptions.SetMaxTime()``
     - ``ListIndexesOptions.MaxTime``, ``ListIndexesOptions.SetMaxTime()``
     - ``SessionOptions.DefaultMaxCommitTime``, ``SessionOptions.SetDefaultMaxCommitTime()``
     - ``TransactionOptions.MaxCommitTime``, ``TransactionOptions.SetMaxCommitTime()``
     - ``WriteConcern.WTimeout``

     Instead, you can set a timeout on your client or within a Context.
     Learn more in the :ref:`golang-timeout-setting` section of the
     Connection Options guide.

   - Removal of the ``bson/primitive`` package. This package is now merged with
     the ``bson`` package. To update your code, remove any ``bson/primitive``
     import statements and change any instance of ``primitive.ObjectID`` to
     ``bson.ObjectId``.

This release includes the following improvements and fixes:

- Support for OpenID Connect (OIDC) authentication. To learn more, see
  the :ref:`golang-mongodb-oidc` section of the Enterprise
  Authentication Mechanisms guide.

- You can access the GridFS API from the ``mongo`` package. In previous
  versions, you could access GridFS functions from the separate ``gridfs``
  package, but this functionality is now merged with the main driver
  ``mongo`` package. To learn more, see the :ref:`golang-gridfs` guide.

- The ``Comment`` field in any options struct takes a value of type ``any`` instead of type
  ``string``. To set this field, you can use the ``SetComment()`` method and pass a parameter
  of type ``any``.

- Updates to monitoring event documents:

  - The ``CommandStartedEvent`` and ``CommandFinishedEvent`` structs
    have a single ``ServerConnectionID`` field of type ``int64`` to
    capture the connection ID.
    
  - The ``ConnectionID`` field of the ``PoolEvent``
    struct takes a value of type ``int64`` instead of ``uint64``.

  To view sample event documents, see the :ref:`golang-monitoring` guides.

- The ``Session`` interface is converted to a struct. See the
  :ref:`golang-transactions` guide to learn more.

- The ``Distinct()`` method returns a struct that can be decoded into a
  specified type. See the :ref:`golang-retrieve-distinct` guide to learn more.

- The ``IndexView.DropOne()`` method returns only an error, if present. In
  previous versions, this method also returned the server response, which
  contained the number of dropped indexes. See the
  :ref:`golang-remove-index` section of the Indexes guide to learn more.

- Updates to the builder pattern for types in the ``options`` package.
  The pattern maintains a slice of setter functions, so you cannot set
  data directly to an options object. This update does not
  generally change how you create and use options. To learn more, see
  the `feature JIRA ticket <https://jira.mongodb.org/browse/GODRIVER-2696>`__.

- The driver no longer supports the ``mongo.ErrUnacknowledgedWrite`` sentinel
  error if a write operation is not acknowledged. To confirm that the server
  acknowledged a write operation, you must access the ``Acknowledged``
  property from the result struct returned by the write method.

  The following example shows how to confirm acknowledgment of an insert
  operation:

  .. code-block:: go
     :emphasize-lines: 6

     res, err := coll.InsertOne(context.TODO(), bson.D{{"x", 2}})
     if err != nil {
     	panic(err)
     }
     
     fmt.Print(res.Acknowledged)

- You can set options for transactions run in a given session by
  creating a ``TransactionOptions`` instance and passing the instance to
  the ``SetDefaultTransactionOptions()`` method of the
  ``SessionOptions`` type. To learn more, see the
  :ref:`golang-session-txn-options` section of the Transactions guide.

- The ``Collection.Clone()`` method does not return an error.

- Renames the ``canonical`` parameter of the ``UnmarshalExtJSON()``
  method to ``canonicalOnly``. If you set ``canonicalOnly`` to ``true``,
  the method returns an error if the extended JSON is not marshaled in
  canonical mode. If set to ``false``, the method can unmarshal
  canonical or relaxed extended JSON. To learn more, see the
  `UnmarshalExtJSON() <{+api+}/bson#UnmarshalExtJSON>`__ API documentation.

.. _golang-version-1.17:

What's New in 1.17
------------------

.. important::

   v1.17 is the final planned 1.x version release. This version will
   receive security and bug fixes, but future development and features
   will be included only in 2.x versions of the driver.

The 1.17 {+driver-short+} release includes the following improvements
and fixes:

- Adds support for OpenID Connect (OIDC) authentication. To learn more, see
  the :ref:`golang-mongodb-oidc` section of the Enterprise
  Authentication Mechanisms guide.

- Adds support for Queryable Encryption (QE) range queries. To use this
  feature, your app must connect to {+mdb-server+} 8.0 or later. For
  more information about QE range queries, see :manual:`Queryable
  Encryption </core/queryable-encryption>` in the {+mdb-server+} manual.

- Adds support for {+mdb-server+} 8.0, except for
  the client bulk write feature.

- Extends the ``IndexView`` type to include the
  ``DropOneWithKey()`` and ``DropWithKey()`` methods so you can
  drop indexes by using their key specifications instead of their names.

For more information about the changes in this version, see the
:github:`v1.17 release notes
</mongodb/mongo-go-driver/releases/tag/v1.17.0>` on GitHub.

.. _version-1.16:

What's New in 1.16
------------------

The 1.16 {+driver-short+} release includes the following improvements and fixes:

- Adds support for specifying an index type when creating an Atlas Search index.

- Reduces memory usage when the ``zstd`` compression algorithm is enabled.

- Upgrades some dependency requirements. For a list of upgrades, see the "Upgrade Dependencies"
  section of the :github:`v1.16 release notes </mongodb/mongo-go-driver/releases/tag/v1.16.0>`.

For more information about these changes, see the :github:`v1.16 release notes
</mongodb/mongo-go-driver/releases/tag/v1.16.0>` on Github.

.. _version-1.15.1:

What's New in 1.15.1
--------------------

The 1.15.1 {+driver-short+} patch release includes the following improvements
and fixes:

- Fixes a possible connection leak where disconnecting from a replica set cluster
  left behind ``rttMonitor`` connections.

- Adds support for manually specifying a ``maxTimeMS`` value for read and aggregation
  operations when a client-wide timeout and an operation timeout are set.

- Adds a ``RemainingBatchLength()`` method that you can call on a change stream.

For more information about these changes, see the :github:`v1.15.1 release notes
</mongodb/mongo-go-driver/releases/tag/v1.15.1>` on Github.

.. _version-1.15:

What's New in 1.15
------------------

The 1.15 {+driver-short+} release includes the following improvements and fixes:

- Connection churn can be mitigated by setting a client-wide timeout by
  specifying the ``timeoutMS`` connection option or by calling the
  `SetTimeout() <https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo/options#ClientOptions.SetTimeout>`__
  function. When the timeout is set, the driver attempts to reuse a connection
  after an operation times out and waits for up to one second to check if
  the connection can be reused before closing it.

- Connection pool events include a ``Duration`` field to measure the checkout
  duration and total amount of time it took to establish a connection.

.. _version-1.14:

What's New in 1.14
------------------

The 1.14 {+driver-short+} release includes the following improvements and fixes:

- Go versions before 1.18 are no longer supported.

- In case of a heartbeat timeout, in-progress operations are preemptively canceled.

- Connection strings that include the ``"mongodb+srv://"`` prefix can contain capital
  letters in the SRV hostname.

.. _version-1.13:

What's New in 1.13
------------------

The 1.13 {+driver-short+} release includes the following improvements and fixes:

- Logging for server selection and SDAM. To learn more about logging, see the
  :ref:`golang-logging` documentation.

- Methods on the ``Collection`` type that allow you to manage search indexes programmatically.

- The ``event.CommandStartedEvent`` and ``event.CommandFinishedEvent`` events return
  the ``DatabaseName`` field. This field is also included in the command-logging analogs.

- In a sharded topology, when selecting a server to retry an unsuccessful query, the driver
  excludes the server used for the initial attempt. Instead, if there's more than
  one eligible ``mongos`` instance, the driver randomly selects one. Unhealthy instances
  are automatically excluded from selection.

- Streaming SDAM is disabled by default on AWS Lambda and similar function-as-a-service
  (FaaS) platforms. You can enable monitoring by using the
  ``serverMonitoringMode`` URI option.

.. _version-1.12.1:

What's New in 1.12.1
--------------------

The 1.12 {+driver-short+} release includes the following improvements and fixes:

- The driver unpins connections when ending a session. This prevents connections
  from leaking when a user runs a transaction while connected to a load balancer.

- The driver does not throw a runtime error when you unmarshal an empty
  ``bson.RawValue`` type with an invalid type or marshal a ``nil`` pointer of a ``ReadConcern`` instance.

- Setting ``options.LogComponentAll`` as the log component correctly results in the publication of logs against all components.

.. _version-1.12:

What's New in 1.12
------------------

.. important:: Deprecation Notice

   - The ``mongo.NewClient()`` and ``client.Connect()`` methods are
     deprecated. You can create a client and connect in one call
     by using the ``mongo.Connect()`` method.

New features of the 1.12 Go driver release include:

Queryable Encryption
~~~~~~~~~~~~~~~~~~~~

This driver version adds support for :ref:`qe-manual-feature-qe` (QE). To learn
more about the requirements for using the QE feature, see the
:ref:`Queryable Encryption Driver Compatibility Table
<qe-compatibility-reference>`.

The ``ClientEncryption.CreateEncryptedCollection()``
method automatically creates data encryption keys when
you create a new encrypted collection. To learn how to use the QE
feature, see the :ref:`qe-quick-start` in the Server manual.

Logging Interface
~~~~~~~~~~~~~~~~~

You can now record connection management and command execution events by
using the ``LogSink`` logging interface.

To learn more, see the :ref:`golang-logging` Fundamentals guide.

Additional BSON Marshalling Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This driver version adds features to the ``options`` package to specify
how the driver marshals and unmarshals BSON.

The following example shows how to set BSON options on your
``Client``. The options specify the following behaviors:

- The driver falls back to ``json`` :ref:`struct tags
  <golang-struct-tags>` if ``bson`` struct tags are absent.
- The driver marshals ``nil`` Go map types as empty BSON documents.
- The driver marshals ``nil`` Go slice types as empty BSON arrays.

.. code-block:: go

   bsonOpts := &options.BSONOptions{
   	UseJSONStructTags: true,
   	NilMapAsEmpty:     true,
   	NilSliceAsEmpty:   true,
   }
   options.Client().SetBSONOptions(bsonOpts)

For a full example of how to specify and implement the ``BSONOptions``
type, see the `API documentation <{+api+}/mongo#example-Connect-BSONOptions>`__.

Simplified Write Concern Specification
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This driver version simplifies the ``WriteConcern`` API. To learn more about
the changes, see :ref:`Write Concern <golang-writeconcern>`.

Additional Changes
~~~~~~~~~~~~~~~~~~

- Support for authentication with AWS IAM roles in EKS.
- Addition of the ``Cursor.SetBatchSize()`` method to allow
  specification of the size of batches fetched when iterating through a
  cursor.
- Addition of the ``UnmarshalValue()`` method to allow ummarshalling of
  BSON values marshalled with the ``MarshalValue()`` method.
