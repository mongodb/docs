==================
$log (aggregation)
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $log 

   .. versionadded:: 3.2

   Calculates the log of a number in the specified base and returns the
   result as a double.

   :expression:`$log` has the following syntax:

   .. code-block:: javascript

      { $log: [ <number>, <base> ] }
   
   The ``<number>`` expression can be any valid :ref:`expression
   <aggregation-expressions>` as long as it resolves to a non-negative number.

   The ``<base>`` expression can be any valid :ref:`expression
   <aggregation-expressions>` as long as it resolves to a positive
   number greater than ``1``.

   For more information on expressions, see :ref:`aggregation-expressions`.

Behavior
--------

.. include:: /includes/extracts/agg-expression-null-operand-log.rst

.. list-table::
   :header-rows: 1
   :widths: 85 15

   * - Example
     - Results

   * - ``{ $log: [ 100, 10 ] }``
     - ``2``

   * - ``{ $log: [ 100, Math.E ] }`` where ``Math.E`` is a JavaScript
       representation for *e*.

     - ``4.605170185988092``

Example
-------

A collection ``examples`` contains the following documents:

.. code-block:: javascript

   { _id: 1, positiveInt: 5 }
   { _id: 2, positiveInt: 2 }
   { _id: 3, positiveInt: 23 }
   { _id: 4, positiveInt: 10 }

The following example uses log\ :sub:`2` in its calculation to
determine the number of bits required to represent the value of
``positiveInt``.

.. code-block:: javascript

   db.examples.aggregate([
      { $project: { bitsNeeded:
         {
            $floor: { $add: [ 1, { $log: [ "$positiveInt", 2 ] } ] } } }
         }
   ])

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "bitsNeeded" : 3 }
   { "_id" : 2, "bitsNeeded" : 2 }
   { "_id" : 3, "bitsNeeded" : 5 }
   { "_id" : 4, "bitsNeeded" : 4 }

.. seealso::

   :expression:`$log10` and :expression:`$ln`
