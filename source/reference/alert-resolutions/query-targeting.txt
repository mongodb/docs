.. _query-targeting-resolution:

================
Fix Query Issues
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

``Query Targeting`` alerts indicate inefficient queries.

Alert Conditions
----------------

You can configure the following alert conditions in the project-level 
:ref:`alert settings <configure-alerts>` page to trigger alerts.

:alert:`Query Targeting: Scanned Objects / Returned` occurs if the
number of documents examined to fulfill a query relative to the actual
number of returned documents meets or exceeds a user-defined threshold.
The default is 1000, which means that a query must scan more than 1000
documents for each document returned to trigger the alert.

:alert:`Query Targeting: Scanned / Returned` occurs if the number of
index keys examined to fulfill a query relative to the actual number of
returned documents meets or exceeds a user-defined threshold. This alert
is not enabled by default.

Ideally, the ratio of scanned documents to returned documents should
be close to 1. A high ratio negatively impacts query performance.

.. example::

   The following :ref:`mongod log <mongodb-logs>` entry shows statistics
   generated from an inefficient query:

   .. code-block:: json
      :copyable: false

      <Timestamp> COMMAND  <query>
      planSummary: COLLSCAN keysExamined:0 
      docsExamined: 10000 cursorExhausted:1 numYields:234 
      nreturned:4  protocol:op_query 358ms

   This query scanned 10,000 documents and returned only 4 for a ratio
   of 2500, which is highly inefficient. No index keys were examined, so
   MongoDB scanned all documents in the collection, known as a
   :term:`collection scan`.

Common Triggers
---------------

The query targeting alert typically occurs when there is no index to
support a query or queries or when an existing index only partially
supports a query or queries. 

Fix the Immediate Problem
-------------------------

Add one or more indexes to better serve the inefficient queries.

The :doc:`Performance Advisor </performance-advisor>` provides the
easiest and quickest way to create an index. The Performance Advisor
monitors queries that MongoDB considers slow and recommends indexes to
improve performance. |service| dynamically adjusts your slow query
threshold based on the execution time of operations across your
cluster.

Click :guilabel:`Create Index` on a slow query for instructions on how
to create the recommended index.

.. note::
    
   It is possible to receive a Query Targeting alert for an
   inefficient query without receiving index suggestions from the
   Performance Advisor if the query exceeds the slow query threshold and
   the ratio of scanned to returned documents is greater than the
   threshold specified in the alert.

In addition, you can use the following resources to determine which 
query generated the alert:

- The :doc:`Real-Time Performance Panel </real-time-performance-panel/>`
  monitors and displays current network traffic and database operations
  on machines hosting MongoDB in your |service| clusters.

- The :ref:`MongoDB logs <mongodb-logs>` maintain an account of 
  activity,
  including queries, for each ``mongod`` instance in your |service|
  clusters.

- The :manual:`cursor.explain() </reference/method/cursor.explain/>`
  command for the ``mongo`` shell provides performance details for
  all queries.

- The :manual:`Data Profiler 
  </tutorial/manage-the-database-profiler/index.html>`
  records operations that |service| considers slow when compared to
  average execution time for all operations on your cluster.

  .. note::
     
     Enabling the Database Profiler incurs a performance overhead.


Implement a Long-Term Solution
------------------------------

Refer to the following for more information on query performance:

- :manual:`MongoDB Indexing Strategies </applications/indexes>`
- :manual:`Query Optimization </core/query-optimization>`
- :manual:`Analyze Query Plan </tutorial/analyze-query-plan/>`

Monitor Your Progress
---------------------

|service| provides two methods to visualize query targeting:

- Query Targeting
  :ref:`metrics <monitor-cluster-metrics>`, which highlight high ratios
  of objects scanned to objects returned.

- The :ref:`Query Profiler <query-profiler>`, which describes specific
  inefficient queries executed on the cluster.

Query Targeting Metrics
~~~~~~~~~~~~~~~~~~~~~~~

You can view historical metrics to help you visualize the query
performance of your cluster. To view :guilabel:`Query Targeting`
metrics in the |service| UI:

1. Click :guilabel:`Metrics` on the :guilabel:`Clusters` dashboard.

#. On the Metrics page, click the :guilabel:`Add Chart` dropdown menu
   and select :guilabel:`Query Targeting`.

The :guilabel:`Query Targeting` chart displays the following metrics
for queries executed on the server:

.. list-table::
   :header-rows: 1
   :widths: 20 40

   * - Metric
     - Description

   * - :guilabel:`Scanned Objects / Returned` 
     - Indicates the number of documents examined relative to the number
       of returned documents.

   * - :guilabel:`Scanned / Returned`
     - Indicates the number of index keys
       examined to fulfill a query relative to the actual number of
       returned documents.

If either of these metrics exceed the
:doc:`user-defined threshold </configure-alerts>`, |service| generates
the corresponding
:alert:`Query Targeting: Scanned Objects / Returned` or
:alert:`Query Targeting: Scanned / Returned` alert.

.. note::

   You can also view :guilabel:`Query Targeting` ratios of operations in
   real-time using the
   :ref:`Real-Time Performance Panel <real-time-metrics-status-tab>`.

Query Profiler
~~~~~~~~~~~~~~

The :ref:`Query Profiler <query-profiler>` contains several metrics
you can use to pinpoint specific inefficient queries. You can
visualize up to the past 24 hours of query operations. The Query
Profiler can show the :guilabel:`Examined : Returned Ratio` of your
queries, allowing you to see specific queries that result in a
Query Targeting alert.

To access the Query Profiler:

1. Click :guilabel:`Metrics` on the :guilabel:`Clusters` dashboard.

#. Click the :guilabel:`Profiler` tab.
