title: Install PyMongo
stepnum: 1
edition: python
ref: install-pymongo
action:
  - title: 'Linux/OS X'
    level: 4
    pre: |
      You can use ``pip`` to install:
    language: sh
    code: |
      pip install pymongo
  - title: "Windows"
    content:
      "Use MS Windows installers from `<https://pypi.python.org/pypi/pymongo/>`_."
---
title: Import ``pymongo``
stepnum: 2
edition: python
ref: import-pymongo
pre: |
  Complete the remainder of this procedure in a Python interactive
  shell, or other Python environment (e.g. script, module, project).
action:
  pre: |
      Load ``pymongo`` in the current environment.
  language: python
  code: |
    import pymongo
---
title: Create a Connection
stepnum: 3
edition: python
ref: create-connection
pre: |
  Use :py:class:`~pymongo.mongo_client.MongoClient` to create a connection:
action:
  - language: python
    code: |
      client = pymongo.MongoClient()
    post: |
      If you do not specify any arguments to
      :py:class:`~pymongo.mongo_client.MongoClient`, then
      :py:class:`~pymongo.mongo_client.MongoClient` defaults to the
      MongoDB instance that runs on the ``localhost`` interface on port
      ``27017``.
  - pre: |
      You can specify a complete :manual:`MongoDB URI <reference/connection-string>` to
      define the connection:
    language: python
    code: |
      client = pymongo.MongoClient("mongodb://mongodb0.example.net:27019")
    post: |
      This :py:class:`~pymongo.mongo_client.MongoClient` represents
      the connection to the MongoDB instance that runs on port
      ``27019`` on the ``mongodb.example.net`` system.
---
title: Access Database Objects
stepnum: 4
edition: python
ref: database-objects
pre: |
  The first fundamental class objects you will interact with using
  :py:mod:`pymongo` is :py:class:`~pymongo.database.Database` which
  represents the :term:`database` construct in MongoDB. Databases hold
  groups of logically related collections. MongoDB creates new
  databases and implicitly upon their first use.
action:
  - pre: |
      To assign the local variable ``db`` to the databases named
      ``primer`` you can use attribute access, as in the following:
    language: python
    code: |
      db = client.primer
  - pre: |
      You can also access databases using dictionary-style access,
      which removes Python-specific naming restrictions, as in the
      following:
    language: python
    code: |
      db = client['primer']
---
title: Access Collection Objects
stepnum: 5
edition: python
ref: collection-objects
pre: |
  The second fundamental class of objects you will interact using
  :py:mod:`pymongo` is :py:class:`~pymongo.collection.Collection`,
  which represents the :term:`collection` construct in
  MongoDB. Collections hold groups of related :term:`documents <document>`.
action:
  - pre: |
      You can access collection objects directly using
      dictionary-style or attribute access from a
      :py:class:`~pymongo.database.Database` object, as in the
      following examples:
    language: python
    code: |
      db.dataset
      db['dataset']
  - pre: |
      You may also assign the collection object to a variable for use
      elsewhere, as in the following examples:
    language: python
    code: |
      coll = db.dataset
      coll = db['dataset']
...
