.. _scala-compound-index:

================
Compound Indexes
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: index, query, optimization, efficiency

Overview
--------

**Compound indexes** hold references to multiple
fields within a collection's documents, improving query and sort
performance. 

When creating a compound index, you must specify the following details:

- The fields on which to create the index

- The sort order for each field (ascending or descending)

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``movies`` collection in the ``sample_mflix``
database from the :atlas:`Atlas sample datasets </sample-data>`. To access this collection
from your Scala application, create a ``MongoClient`` that connects to an Atlas cluster
and assign the following values to your ``database`` and ``collection`` variables:

.. literalinclude:: /includes/indexes/compound-field.scala
    :language: scala
    :dedent:
    :start-after: start-db-coll
    :end-before: end-db-coll

To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the
:atlas:`Get Started with Atlas </getting-started>` guide.

Create a Compound Index
-----------------------

To run the examples in this guide, you must include the following import 
statements in your file:

.. literalinclude:: /includes/indexes/compound-field.scala
   :start-after: start-compound-index-imports
   :end-before: end-compound-index-imports
   :language: scala
   :copyable:
   :dedent:

Use the ``createIndex()`` method to create a
compound index. The following example creates an index in descending
order on the ``runtime`` field and in ascending order on the ``year`` field:

.. literalinclude:: /includes/indexes/compound-field.scala
   :start-after: start-index-compound
   :end-before: end-index-compound
   :language: scala
   :copyable:
   :dedent:

You can verify that the index was created by using the ``listIndexes()`` method.
You should see an index for ``runtime`` and ``year`` in the list, as shown in the following output:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/compound-field.scala
      :start-after: start-check-compound-index
      :end-before: end-check-compound-index
      :language: scala
      :dedent:

   .. output::
      :visible: true

      {"v": 2, "key": {"runtime": -1, "year": 1}, "name": "runtime_-1_year_1"}

The following is an example of a query that is covered by the index
created on the ``runtime`` and ``year`` fields:

.. io-code-block::
   :copyable: true

   .. input:: /includes/indexes/compound-field.scala
      :start-after: start-index-compound-query
      :end-before: end-index-compound-query
      :language: scala
      :dedent:

   .. output::
      :visible: false

      {"_id":...,"runtime": 98,...,"title": "In the Mood for Love",...,"year": 2000,...}

Additional Information
----------------------

To learn more about compound indexes, see :manual:`Compound
Indexes </core/index-compound>` in the {+mdb-server+} manual.

To view runnable examples that demonstrate how to manage indexes, see
:ref:`scala-indexes`.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods discussed in this guide, see the following API
documentation:

- `compoundIndex() <{+api+}/org/mongodb/scala/model/Indexes$.html#compoundIndex(indexes:org.mongodb.scala.bson.conversions.Bson*):org.mongodb.scala.bson.conversions.Bson>`__
- `createIndex() <{+api+}/org/mongodb/scala/MongoCollection.html#createIndex(key:org.mongodb.scala.bson.conversions.Bson,options:org.mongodb.scala.model.IndexOptions):org.mongodb.scala.SingleObservable[String]>`__
- `find() <{+api+}/org/mongodb/scala/MongoCollection.html#find[C](filter:org.mongodb.scala.bson.conversions.Bson)(implicite:org.mongodb.scala.bson.DefaultHelper.DefaultsTo[C,TResult],implicitct:scala.reflect.ClassTag[C]):org.mongodb.scala.FindObservable[C]>`__
- `listIndexes() <{+api+}/org/mongodb/scala/MongoCollection.html#listIndexes[C]()(implicite:org.mongodb.scala.bson.DefaultHelper.DefaultsTo[C,org.mongodb.scala.Document],implicitct:scala.reflect.ClassTag[C]):org.mongodb.scala.ListIndexesObservable[C]>`__
