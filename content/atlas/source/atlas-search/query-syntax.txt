.. _fts-pipeline-stage:

=====================================
Choose the Aggregation Pipeline Stage 
=====================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: $search fields, $searchMeta fields
   :description: Learn how to use the $search aggregation pipeline stage to perform a full text search, and the $searchMeta aggregation pipeline stage to return metadata result documents.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

|fts| queries run inside an :manual:`aggregation pipeline stage 
</aggregation>`, which is the preferred method for performing aggregations.

Aggregation operations process multiple documents and return computed results.
You can use aggregation operations to:

- Group values from multiple documents together.
- Perform operations on the grouped data to return a single result.
- Analyze data changes over time.

You can use either the :pipeline:`$search` or the :pipeline:`$searchMeta`
stage as the first stage in the aggregation pipeline.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Aggregation Pipeline Stage
     - Description

   * - :pipeline:`$search`
     - Conducts full-text searches and returns an ordered list of documents
       along with additional search metadata. Use :pipeline:`$search`
       to retrieve matching documents with or without facets.

   * - :pipeline:`$searchMeta`
     - Conducts full-text searches and returns the metadata without fetching
       the documents. Use :pipeline:`$searchMeta` to retrieve **only**
       the metadata about your search results, such as the total count of
       matching documents or facets.

After the :pipeline:`$search` or the :pipeline:`$searchMeta` stage
completes, you can use additional aggregation stages to process documents
further. For example, you can use one or more of the following stages,
in addition to other stages:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Aggregation Pipeline Stage
     - Description

   * - :pipeline:`$limit`
     - Limits the number of documents passed to the next stage in the pipeline.

   * - :pipeline:`$skip`
     - Skips documents that pass into the stage and passes the remaining
       documents to the next stage in the pipeline.
    
   * - :pipeline:`$project`
     - Passes along documents with the requested fields to the next stage in the pipeline.

   * - :pipeline:`$addFields`
     - Adds new fields to documents.

   * - :pipeline:`$facet`
     - Processes multiple aggregation pipelines within a single stage on
       the same set of input documents.

   * - :pipeline:`$match`
     - Filters documents based on a specified query predicate and passes
       matched documents to the next pipeline stage.

   * - :pipeline:`$group`
     - Combines documents with the same fields or expression into a single
       document by a group key.

   * - :pipeline:`$lookup`
     - Performs a left outer join to a collection in the same database
       to filter in documents from the "joined" collection for processing.

When you add these stages to your aggregation pipeline, consider the
potentially significant performance impact.

To improve performance, we recommend that you use :pipeline:`$limit`
for search results, :ref:`paginate <fts-paginate-results>` through search
results as needed, and :ref:`retrieve search results after a reference
point <paginate-results-search-after>`.

.. toctree::
   :titlesonly:

   Documents: $search </atlas-search/aggregation-stages/search>
   Metadata: $searchMeta </atlas-search/aggregation-stages/searchMeta>
