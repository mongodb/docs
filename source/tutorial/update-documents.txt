.. include:: /includes/templates/tabs.rst
.. include:: /includes/java-sync-links.rst
.. include:: /includes/java-async-links.rst

.. _write-op-update:

================
Update Documents
================

.. default-domain:: mongodb

.. meta::
   :description: How to update documents in MongoDB. How to update  a single document in MongoDB. How to update multiple documents in MongoDB. How to update all documents in MongoDB. How to update fields in documents in MongoDB.  How to replace documents.
   :keywords: update documents, update all documents, update single document, modify documents, update fields in documents, update collection, MongoDB Manual

.. tabs::

   tabs:
     - id: shell
       content: |
         This page provides examples of how to update documents in
         using the following methods in the :program:`mongo` shell:

         - ``db.collection.updateOne(<filter>, <update>, <options>)``

         - ``db.collection.updateMany(<filter>, <update>, <options>)``

         - ``db.collection.replaceOne(<filter>, <replacement>, <options>)``

     - id: python
       content: |
         This page provides examples of how to update documents using the
         following methods in the `PyMongo <https://api.mongodb.com/python/current/index.html>`_
         Python driver:

         - :py:meth:`pymongo.collection.Collection.update_one`

         - :py:meth:`pymongo.collection.Collection.update_many`

         - :py:meth:`pymongo.collection.Collection.replace_one`

     - id: java-sync
       content: |
         This page provides examples of how to update documents using the
         following methods in the `Java Synchronous Driver`_:

         - com.mongodb.client.MongoCollection.updateOne_

         - com.mongodb.client.MongoCollection.updateMany_

         - com.mongodb.client.MongoCollection.replaceOne_

     - id: java-async
       content: |
         This page provides examples of how to update documents using the
         following methods in the `Java Reactive Streams Driver
         <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/>`_:

         - `com.mongodb.reactivestreams.client.MongoCollection.updateOne
           <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,%20org.bson.conversions.Bson)>`_

         - `com.mongodb.reactivestreams.client.MongoCollection.updateMany
           <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,%20org.bson.conversions.Bson)>`_

         - `com.mongodb.reactivestreams.client.MongoCollection.replaceOne
           <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#replaceOne(org.bson.conversions.Bson,%20TDocument)>`_

     - id: nodejs
       content: |
         This page provides examples of how to update documents using the
         following methods in the
         :node-docs:`MongoDB Node.js Driver <>`:
         
         - :node-api:`Collection.updateOne() <Collection.html#updateOne>`
         
         - :node-api:`Collection.updateMany() <Collection.html#updateMany>`
         
         - :node-api:`Collection.replaceOne() <Collection.html#replaceOne>`

     - id: php
       content: |
         This page provides examples of how to update documents using the
         following methods in the `MongoDB PHP Library <https://docs.mongodb.com/php-library/master/>`_:

         - :phpmethod:`MongoDB\\Collection::updateOne() <phpmethod.MongoDB\\Collection::updateOne>`

         - :phpmethod:`MongoDB\\Collection::updateMany() <phpmethod.MongoDB\\Collection::updateMany>`

         - :phpmethod:`MongoDB\\Collection::replaceOne() <phpmethod.MongoDB\\Collection::replaceOne>`

     - id: perl
       content: |
         This page provides examples of how to update documents using the
         following methods in the `MongoDB Perl Driver <https://metacpan.org/release/MongoDB>`_:

         - :perl-api:`MongoDB::Collection::update_one()<Collection#update_one>`

         - :perl-api:`MongoDB::Collection::update_many()<Collection#update_many>`

         - :perl-api:`MongoDB::Collection::replace_one()<Collection#replace_one>`

The examples on this page use the ``inventory`` collection. To create
and/or populate the ``inventory`` collection, run the following:

.. include:: /includes/driver-example-update-51.rst

.. _update-documents-modifiers:

Update Documents in a Collection
--------------------------------

To update a document, MongoDB provides :manual:`update operators
</reference/operator/update>`, such as :update:`$set`, to modify field
values.

.. tabs::

   tabs:
     - id: shell
       content: |

         To use the update operators, pass to the update methods an
         update document of the form:

         .. code-block:: javascript

            {
              <update operator>: { <field1>: <value1>, ... },
              <update operator>: { <field2>: <value2>, ... },
              ...
            }

     - id: python
       content: |

         To use the update operators, pass to the update methods an
         update document of the form:

         .. code-block:: python

            {
              <update operator>: { <field1>: <value1>, ... },
              <update operator>: { <field2>: <value2>, ... },
              ...
            }

     - id: java-sync
       content: |

         The driver provides the `com.mongodb.client.model.Updates <http://mongodb.github.io/mongo-java-driver/3.4/javadoc/com/mongodb/client/model/Updates.html>`_
         class to facilitate the creation of update documents. For example:

         .. code-block:: java

             combine(set( <field1>, <value1>), set(<field2>, <value2> ) )

         For a list of the update helpers, see `com.mongodb.client.model.Updates <http://mongodb.github.io/mongo-java-driver/3.4/javadoc/com/mongodb/client/model/Updates.html>`_.

     - id: java-async
       content: |
         The driver provides the `com.mongodb.client.model.Updates <http://mongodb.github.io/mongo-java-driver/3.4/javadoc/com/mongodb/client/model/Updates.html>`_
         class to facilitate the creation of update documents. For example:

         .. code-block:: java

             combine(set( <field1>, <value1>), set(<field2>, <value2> ) )

         For a list of the update helpers, see `com.mongodb.client.model.Updates <http://mongodb.github.io/mongo-java-driver/3.4/javadoc/com/mongodb/client/model/Updates.html>`_.

     - id: nodejs
       content: |
         .. code-block:: javascript
         
            {
              <update operator>: { <field1>: <value1>, ... }, 
              <update operator>: { <field2>: <value2>, ... },
              ...
            }

     - id: php
       content: |
         To use the update operators, pass to the update methods an
         update document of the form:

         .. code-block:: php

            [
              <update operator> => [ <field1> => <value1>, ... ],
              <update operator> => [ <field2> => <value2>, ... ],
              ...
            ]

     - id: perl
       content: |
         To use the update operators, pass to the update methods an
         update document of the form:

         .. code-block:: perl

            {
              <update operator> => { <field1> => <value1>, ... },
              <update operator> => { <field2> => <value2>, ... },
              ...
            }

Some update operators, such as :update:`$set`, will create the field if
the field does not exist. See the individual :manual:`update operator
</reference/operator/update>` reference for details.

.. _write-op-updateOne:

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   tabs:
     - id: shell
       content: |
         The following example uses the
         :method:`db.collection.updateOne()` method on the
         ``inventory`` collection to update the *first* document where
         ``item`` equals ``"paper"``:

     - id: python
       content: |
         The following example uses the
         :py:meth:`~pymongo.collection.Collection.update_one` method on
         the ``inventory`` collection to update the *first* document
         where ``item`` equals ``"paper"``:

     - id: java-sync
       content: |
         The following example uses the
         com.mongodb.client.MongoCollection.updateOne_ method on the
         ``inventory`` collection to update the *first* document where
         ``item`` equals ``"paper"``:

     - id: java-async
       content: |
         The following example uses the
         `com.mongodb.reactivestreams.client.MongoCollection.updateOne 
         <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,%20org.bson.conversions.Bson)>`_
         on the ``inventory`` collection to update the *first* document where
         ``item`` equals ``"paper"``:

     - id: nodejs
       content: |
         The following example uses the
         :node-api:`Collection.updateOne() <Collection.html#updateOne>`
         method on the ``inventory`` collection to update the *first*
         document where ``item`` equals ``"paper"``:

     - id: php
       content: |
         The following example uses the
         :phpmethod:`updateOne() <phpmethod.MongoDB\\Collection::updateOne>`
         method on the ``inventory`` collection to update the *first*
         document where ``item`` equals ``"paper"``:

     - id: perl
       content: |
         The following example uses the
         :perl-api:`update_one()<Collection#update_one>` method on the
         ``inventory`` collection to update the *first* document where
         ``item`` equals ``"paper"``:

.. include:: /includes/driver-example-update-52.rst

The update operation:

- uses the :update:`$set` operator to update the value of the
  ``size.uom`` field to ``"cm"`` and the value of the ``status``
  field to ``"P"``,

- uses the :update:`$currentDate` operator to update the value of the
  ``lastModified`` field to the current date. If ``lastModified`` field
  does not exist, :update:`$currentDate` will create the field. See
  :update:`$currentDate` for details.

.. _update-multiple-documents:
.. _write-op-updateMany:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2

.. tabs::

   tabs:
     - id: shell
       content: |
         The following example uses the :method:`db.collection.updateMany()`
         method on the ``inventory`` collection to update all documents where
         ``qty`` is less than ``50``:

     - id: python
       content: |
         The following example uses the
         :py:meth:`~pymongo.collection.Collection.update_many` method on
         the ``inventory`` collection to update all documents where
         ``qty`` is less than ``50``:

     - id: java-sync
       content: |
         The following example uses the
         com.mongodb.client.MongoCollection.updateMany_ method on
         the ``inventory`` collection to update all documents where
         ``qty`` is less than ``50``:

     - id: java-async
       content: |
         The following example uses the
         `com.mongodb.reactivestreams.client.MongoCollection.updateMany
         <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,%20org.bson.conversions.Bson)>`_
         method on the ``inventory`` collection to update all documents where
         ``qty`` is less than ``50``:

     - id: nodejs
       content: |
         The following example uses the
         :node-api:`Collection.updateMany() <Collection.html#updateMany>`
         method on the ``inventory`` collection to update all documents
         where ``qty`` is less than ``50``:

     - id: php
       content: |
         The following example uses the
         :phpmethod:`updateMany() <phpmethod.MongoDB\\Collection::updateMany>`
         method on the ``inventory`` collection to update all documents
         where ``qty`` is less than ``50``:

     - id: perl
       content: |
         The following example uses the
         :perl-api:`update_many()<Collection#update_many>` method on
         the ``inventory`` collection to update all documents where
         ``qty`` is less than ``50``:

.. include:: /includes/driver-example-update-53.rst

The update operation:

- uses the :update:`$set` operator to update the value of the
  ``size.uom`` field to ``"in"`` and the value of the ``status``
  field to ``"P"``,

- uses the :update:`$currentDate` operator to update the value of the
  ``lastModified`` field to the current date. If ``lastModified`` field
  does not exist, :update:`$currentDate` will create the field. See
  :update:`$currentDate` for details.

Replace a Document
--------------------

.. tabs::

   tabs:
     - id: shell
       content: |
         To replace the entire content of a document except for the ``_id``
         field, pass an entirely new document as the second argument to
         :method:`db.collection.replaceOne()`.

     - id: python
       content: |
         To replace the entire content of a document except for the ``_id``
         field, pass an entirely new document as the second argument to
         :py:meth:`~pymongo.collection.Collection.replace_one`.

     - id: java-sync
       content: |
         To replace the entire content of a document except for the ``_id``
         field, pass an entirely new document as the second argument to
         com.mongodb.client.MongoCollection.replaceOne_.

     - id: java-async
       content: |
         To replace the entire content of a document except for the ``_id``
         field, pass an entirely new document as the second argument to
         `com.mongodb.reactivestreams.client.MongoCollection.replaceOne
         <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#replaceOne(org.bson.conversions.Bson,%20TDocument)>`_.

     - id: nodejs
       content: |
         To replace the entire content of a document except for the
         ``_id`` field, pass an entirely new document as the second
         argument to
         :node-api:`Collection.replaceOne() <Collection.html#replaceOne>`.

     - id: php
       content: |
         To replace the entire content of a document except for the ``_id``
         field, pass an entirely new document as the second argument to
         :phpmethod:`replaceOne() <phpmethod.MongoDB\\Collection::replaceOne>`.

     - id: perl
       content: |
         To replace the entire content of a document except for the ``_id``
         field, pass an entirely new document as the second argument to
         :perl-api:`replace_one()<Collection#replace_one>`.

When replacing a document, the
replacement document must consist of only field/value pairs;
i.e. do not include :manual:`update operators
</reference/operator/update>` expressions.

The replacement document can have different fields from the original
document. In the replacement document, you can omit the ``_id`` field
since the ``_id`` field is immutable; however, if you do include the
``_id`` field, it must have the same value as the current value.

.. _write-op-replaceOne:

The following example replaces the *first* document from the
``inventory`` collection that matches the filter ``item`` equals
``"paper"``:

.. include:: /includes/driver-example-update-54.rst

Behavior
--------

Atomicity
~~~~~~~~~

All write operations in MongoDB are atomic on the level of a single
document. For more information on MongoDB and atomicity, see
:doc:`/core/write-operations-atomicity`.

``_id`` Field
~~~~~~~~~~~~~

Once set, you cannot update the value of the ``_id`` field nor can you
replace an existing document with a replacement document that has a
different ``_id`` field value.

Document Size
~~~~~~~~~~~~~

When performing update operations that increase the document size
beyond the allocated space for that document, the update operation
relocates the document on disk.

Field Order
~~~~~~~~~~~

.. include:: /includes/fact-update-field-order.rst

.. _write-operations-upsert-behavior:

``Upsert`` Option
~~~~~~~~~~~~~~~~~

.. tabs::

   tabs:
     - id: shell
       content: |
         If :method:`~db.collection.updateOne()`,
         :method:`~db.collection.updateMany()`, or
         :method:`~db.collection.replaceOne()` includes ``upsert : true`` **and**
         no documents match the specified filter, then the operation creates a
         new document and inserts it. If there are matching documents, then the
         operation modifies or replaces the matching document or documents.

     - id: python
       content: |
         If :py:meth:`~pymongo.collection.Collection.update_one`,
         :py:meth:`~pymongo.collection.Collection.update_many`, or
         :py:meth:`~pymongo.collection.Collection.replace_one` includes
         ``upsert : true`` **and** no documents match the specified
         filter, then the operation creates a new document and inserts
         it. If there are matching documents, then the operation
         modifies or replaces the matching document or documents.

     - id: java-sync
       content: |
         If the update and replace methods include the
         com.mongodb.client.model.UpdateOptions_ parameter that
         specifies `com.mongodb.client.model.UpdateOptions.upsert(true)`_
         **and** no documents match the specified filter, then the
         operation creates a new document and inserts it. If there are
         matching documents, then the operation modifies or replaces
         the matching document or documents.

     - id: java-async
       content: |
         If the update and replace methods include the
         `UpdateOptions <https://mongodb.github.io/mongo-java-driver/3.4/javadoc/com/mongodb/client/model/UpdateOptions.html>`_
         parameter that specifies `UpdateOptions.upsert(true) <http://mongodb.github.io/mongo-java-driver/3.4/javadoc/com/mongodb/client/model/UpdateOptions.html?_ga=2.189375400.2069485991.1506612687-1453986945.1494866912&_gac=1.246606128.1506106401.EAIaIQobChMI3tmcxbu51gIVUrnACh12qwkREAAYASABEgLH4PD_BwE#upsert-boolean->`_
         **and** no documents match the specified filter, then the
         operation creates a new document and inserts it. If there are
         matching documents, then the operation modifies or replaces
         the matching document or documents.

     - id: nodejs
       content: |
         If :node-api:`updateOne() <Collection.html#updateOne>`,
         :node-api:`updateMany() <Collection.html#updateMany>`, or
         :node-api:`replaceOne() <Collection.html#replaceOne>` include
         ``upsert : true`` in the ``options`` parameter document **and**
         no documents match the specified filter, then the operation
         creates a new document and inserts it. If there are matching
         documents, then the operation modifies or replaces the matching
         document or documents.

     - id: php
       content: |
         If :phpmethod:`updateOne() <phpmethod.MongoDB\\Collection::updateOne>`,
         :phpmethod:`updateMany() <phpmethod.MongoDB\\Collection::updateMany>`,
         or :phpmethod:`replaceOne() <phpmethod.MongoDB\\Collection::replaceOne>`
         includes ``upsert => true`` **and** no documents match the
         specified filter, then the operation creates a new document and
         inserts it. If there are matching documents, then the operation
         modifies or replaces the matching document or documents.

     - id: perl
       content: |
         If :perl-api:`update_one()<Collection#update_one>`,
         :perl-api:`update_many()<Collection#update_many>`, or
         :perl-api:`replace_one()<Collection#replace_one>` includes
         ``upsert => true`` **and** no documents match the specified
         filter, then the operation creates a new document and inserts
         it. If there are matching documents, then the operation
         modifies or replaces the matching document or documents.

For details on the new document created, see the individual reference
pages for the methods.

Write Acknowledgement
~~~~~~~~~~~~~~~~~~~~~

With write concerns, you can specify the level of acknowledgement
requested from MongoDB for write operations. For details, see
:doc:`/reference/write-concern`.

.. tabs::

   tabs:
     - id: shell
       content: |
         .. include:: /includes/footnote-set-shell-batch-size.rst

         .. seealso::

            - :method:`db.collection.updateOne()`

            - :method:`db.collection.updateMany()`

            - :method:`db.collection.replaceOne()`

            - :ref:`additional-updates`

     - id: python
       content: |
         .. seealso::

            - :py:meth:`pymongo.collection.Collection.update_one`

            - :py:meth:`pymongo.collection.Collection.update_many`

            - :py:meth:`pymongo.collection.Collection.replace_one`

            - :ref:`additional-updates`

     - id: java-sync
       content: |

         .. seealso::

            - com.mongodb.client.MongoCollection.updateOne_

            - com.mongodb.client.MongoCollection.updateMany_

            - com.mongodb.client.MongoCollection.replaceOne_

            - `Additional Java Synchronous Driver Write Examples`_

     - id: java-async
       content: |

         .. seealso::
         
            - `com.mongodb.reactivestreams.client.MongoCollection.updateOne
              <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#updateOne(org.bson.conversions.Bson,%20org.bson.conversions.Bson)>`_

            - `com.mongodb.reactivestreams.client.MongoCollection.updateMany
              <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#updateMany(org.bson.conversions.Bson,%20org.bson.conversions.Bson)>`_

            - `com.mongodb.reactivestreams.client.MongoCollection.replaceOne
              <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/javadoc/com/mongodb/reactivestreams/client/MongoCollection.html#replaceOne(org.bson.conversions.Bson,%20TDocument)>`_

            - `Java Reactive Streams Driver Quick Tour <http://mongodb.github.io/mongo-java-driver-reactivestreams/1.6/getting-started/quick-tour/>`_ 

     - id: nodejs
       content: |
         .. seealso::
         
            - :node-api:`Collection.updateOne() <Collection.html#updateOne>`
         
            - :node-api:`Collection.updateMany() <Collection.html#updateMany>`
         
            - :node-api:`Collection.replaceOne() <Collection.html#replaceOne>`
            
            - :ref:`additional-updates`

     - id: php
       content: |
         .. seealso::

            - :phpmethod:`MongoDB\\Collection::updateOne() <phpmethod.MongoDB\\Collection::updateOne>`

            - :phpmethod:`MongoDB\\Collection::updateMany() <phpmethod.MongoDB\\Collection::updateMany>`

            - :phpmethod:`MongoDB\\Collection::replaceOne() <phpmethod.MongoDB\\Collection::replaceOne>`

            - :ref:`additional-updates`

     - id: perl
       content: |
         .. seealso::

            - :perl-api:`MongoDB::Collection::update_one()<Collection#update_one>`

            - :perl-api:`MongoDB::Collection::update_many()<Collection#update_many>`

            - :perl-api:`MongoDB::Collection::replace_one()<Collection#replace_one>`

            - :ref:`additional-updates`

.. class:: hidden

   .. toctree::
      :titlesonly:

      /reference/update-methods
