.. meta::
   :robots: noindex, nosnippet

.. _swift-model-relationships:

===============================
Model Relationships - Swift SDK
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. _ios-declare-relationship-properties:

Declare Relationship Properties
-------------------------------

.. include:: /includes/see-also-define-relationship-in-app-services-ui.rst

.. _ios-define-a-to-one-relationship-property:

Define a To-One Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-one** relationship maps one property to a single instance of
another object type. For example, you can model a person having at most
one companion dog as a to-one relationship.

Setting a relationship field to null removes the connection between objects. 
Realm does not delete the referenced object, though, unless it is 
:ref:`an embedded object <ios-embedded-objects>`.

.. include:: /includes/note-to-one-relationships-must-be-optional.rst

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Relationships.snippet.to-one-relationship.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Relationships.snippet.to-one-relationship.m
         :language: objectivec

.. seealso::

   For more information about to-one relationships, see: 
   :ref:`To-One Relationship <ios-to-one-relationship>`.

   If your app uses Device Sync, see the :ref:`Model Data with Device Sync 
   <swift-device-sync-to-one-relationship>` page for information on how 
   the to-one relationship in Swift object models translates to Atlas documents.

.. _ios-define-a-to-many-relationship-property:

Define a To-Many Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship maps one property to zero or more instances
of another object type. For example, you can model a person having any
number of companion dogs as a to-many relationship.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      Use :swift-sdk:`List <Classes/List.html>` tagged with your target
      type to define your to-many relationship property.

      .. literalinclude:: /examples/generated/code/start/Relationships.snippet.to-many-relationship.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      Use :objc-sdk:`RLMArray <Classes/RLMArray.html>` tagged with your
      target type to define your to-many relationship property.

      .. tip::

         Remember to use the ``RLM_COLLECTION_TYPE()`` macro with your type
         to :ref:`declare the RLMArray protocol for your type
         <ios-declare-a-property>`.

      .. literalinclude:: /examples/generated/code/start/Relationships.snippet.to-many-relationship.m
         :language: objectivec

.. seealso::

   For more information about to-many relationships, see: 
   :ref:`To-Many Relationship <ios-to-many-relationship>`.

   If your app uses Device Sync, see the :ref:`Model Data with Device Sync 
   <swift-device-sync-to-many-relationship>` page for information on how 
   the to-many relationship in Swift object models translates to Atlas documents.

.. _ios-define-an-inverse-relationship-property:

Define an Inverse Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An **inverse relationship** property is an automatic backlink
relationship. Realm automatically updates implicit
relationships whenever an object is added or removed in a corresponding
to-many list or to-one relationship property. You cannot manually set
the value of an inverse relationship property.

.. tabs::

   .. tab:: Swift
      :tabid: swift

      To define an inverse relationship, use :swift-sdk:`LinkingObjects
      <Structs/LinkingObjects.html>` in your object model. The
      ``LinkingObjects`` definition specifies the object type and
      property name of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.snippet.inverse-relationship.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      To define an inverse relationship, use
      :objc-sdk:`RLMLinkingObjects
      <Classes.html#/c:objc(cs)RLMLinkingObjects>` in your object model.
      Override :objc-sdk:`+[RLMObject linkingObjectProperties]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)linkingObjectsProperties>`
      method in your class to specify the object type and property name
      of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.snippet.inverse-relationship.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      To define an inverse relationship, use `LinkingObjects
      <https://www.mongodb.com/docs/realm-sdks/swift/10.9.0/Structs/LinkingObjects.html>`_ 
      in your object model. The ``LinkingObjects`` definition specifies 
      the object type and property name of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.snippet.inverse-relationship-objc-dynamic.swift
         :language: swift

.. seealso::

   For more information about inverse relationships, see: 
   :ref:`Inverse Relationship <ios-inverse-relationship>`.

   If your app uses Device Sync, see the :ref:`Model Data with Device Sync 
   <swift-device-sync-inverse-relationship>` page for information on how 
   the inverse relationship in Swift object models translates to Atlas documents.

.. _ios-define-an-embedded-object-property:
.. _ios-embedded-objects:

Define an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An **embedded object** exists as nested data inside of a single,
specific parent object. It inherits the lifecycle of its parent object
and cannot exist as an independent Realm object. Realm automatically
deletes embedded objects if their parent object is deleted or when
overwritten by a new embedded object instance.

.. note:: Realm Uses Cascading Deletes for Embedded Objects
   
   When you delete a Realm object, any embedded objects referenced by
   that object are deleted with it. If you want the referenced objects
   to persist after the deletion of the parent object, your type should
   not be an embedded object at all. Use a regular :ref:`Realm object
   <ios-define-a-new-object-type>` with a :ref:`to-one relationship
   <ios-define-a-to-one-relationship-property>` instead.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can define an embedded object by deriving from the
      :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`
      class. You can use your embedded object in another model as you
      would any other type.

      .. literalinclude:: /examples/generated/code/start/ReadRealmObjects.snippet.embedded-object-models.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can define an embedded object by deriving from the
      :objc-sdk:`RLMEmbeddedObject
      <Classes/RLMEmbeddedObject.html>` class. You can use your
      embedded object in another model as you would any other type.

      .. literalinclude:: /examples/generated/code/start/EmbeddedObjects.snippet.models.m
         :language: objectivec

.. seealso::

   If your app uses Device Sync, see the :ref:`Model Data with Device Sync 
   <swift-device-sync-embedded-object-models>` page for information on how 
   embedded objects in Swift object models translate to Atlas documents.
