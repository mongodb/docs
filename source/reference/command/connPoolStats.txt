=============
connPoolStats
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: connPoolStats

   The command :dbcommand:`connPoolStats` returns information
   regarding the open outgoing connections from the current database
   instance to other members of the :term:`sharded cluster` or 
   :term:`replica set`.
   
   .. include:: /includes/fact-dbcommand.rst
   
   .. |command| replace:: ``connPoolStats``

   .. include:: /includes/note-conn-pool-stats.rst

   The command takes the following form:

   .. code-block:: javascript

      db.runCommand( { "connPoolStats" : 1 } )

   The value of the argument (i.e. ``1`` ) does not affect the
   output of the command.
   
Behavior
--------

:dbcommand:`connPoolStats` includes aggregated statistics in its
output:

- The :data:`~connPoolStats.hosts` field displays the information
  aggregated by host.

- The :data:`~connPoolStats.pools` field displays the information
  aggregated by pool.

.. note::

   To avoid interference with any running operations,
   :dbcommand:`connPoolStats` does not take any locks. As such, the
   counts may change slightly as :dbcommand:`connPoolStats` gathers
   information, resulting in slight differences between the
   :data:`~connPoolStats.hosts` and :data:`~connPoolStats.pools`
   connection counts.

Example
-------

The following operation uses the :method:`db.runCommand()` method to
run the :dbcommand:`connPoolStats` command on a :binary:`~bin.mongos` of a
sharded cluster. The sharded cluster has 2 shards, each a single-member
replica set, and a config server replica set. The :binary:`~bin.mongos`
runs on a 4-core machine.

.. code-block:: javascript

   db.runCommand( { "connPoolStats" : 1 } )

The command returns the output of the following form:

.. note:: 

   The :dbcommand:`connPoolStats` output varies depending on the
   deployment and the member against which you run
   :dbcommand:`connPoolStats` among other factors.

.. code-block:: javascript

   {
      "numClientConnections" : <num>,
      "numAScopedConnections" : <num>,
      "totalInUse" : <num>,
      "totalAvailable" : <num>,
      "totalCreated" : <num>,
      "totalRefreshing" : <num>,
      "pools" : {
         "NetworkInterfaceTL-TaskExecutorPool-0" : {
            "poolInUse" : <num>,
            "poolAvailable" : <num>,
            "poolCreated" : <num>,
            "poolRefreshing" : <num>,
            "cfg1.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            }
         },
         "NetworkInterfaceTL-TaskExecutorPool-1" : {
            "poolInUse" : <num>,
            "poolAvailable" : <num>,
            "poolCreated" : <num>,
            "poolRefreshing" : <num>,
            "cfg1.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            }
         },
         "NetworkInterfaceTL-TaskExecutorPool-2" : {
            "poolInUse" : <num>,
            "poolAvailable" : <num>,
            "poolCreated" : <num>,
            "poolRefreshing" : <num>,
            "cfg1.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            }
         },
         "NetworkInterfaceTL-TaskExecutorPool-3" : {
            "poolInUse" : <num>,
            "poolAvailable" : <num>,
            "poolCreated" : <num>,
            "poolRefreshing" : <num>,
            "cfg1.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            }
         },
         "NetworkInterfaceTL-ShardRegistry" : {
            "poolInUse" : <num>,
            "poolAvailable" : <num>,
            "poolCreated" : <num>,
            "poolRefreshing" : <num>,
            "cfg1.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            },
            "cfg2.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            },
            "cfg3.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            },
            "shard1.example.net:27018" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            },
            "shard2.example.net:27018" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            }
         },
         "global" : {
            "poolInUse" : <num>,
            "poolAvailable" : <num>,
            "poolCreated" : <num>,
            "poolRefreshing" : <num>,
            "cfg3.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            },
            "cfg1.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            },
            "cfg2.example.net:27019" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            },
            "shard2.example.net:27018" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            },
            "shard1.example.net:27018" : {
               "inUse" : <num>,
               "available" : <num>,
               "created" : <num>,
               "refreshing" :<num>
            }
         }
      },
      "hosts" : {
         "cfg3.example.net:27019" : {
            "inUse" : <num>,
            "available" : <num>,
            "created" : <num>,
            "refreshing" :<num>
         },
         "cfg1.example.net:27019" : {
            "inUse" : <num>,
            "available" : <num>,
            "created" : <num>,
            "refreshing" :<num>
         },
         "cfg2.example.net:27019" : {
            "inUse" : <num>,
            "available" : <num>,
            "created" : <num>,
            "refreshing" :<num>
         },
         "shard2.example.net:27018" : {
            "inUse" : <num>,
            "available" : <num>,
            "created" : <num>,
            "refreshing" :<num>
         },
         "shard1.example.net:27018" : {
            "inUse" : <num>,
            "available" : <num>,
            "created" : <num>,
            "refreshing" :<num>
         }
      },
      "replicaSets" : {
         "csRS" : {
            "hosts" : [
               {
                  "addr" : "cfg1.example.net:27019",
                  "ok" : <bool>,
                  "ismaster" : <bool>,
                  "hidden" : <bool>,
                  "secondary" : <bool>,
                  "pingTimeMillis" : <num>
               },
               {
                  "addr" : "cfg2.example.net:27019",
                  "ok" : <bool>,
                  "ismaster" : <bool>,
                  "hidden" : <bool>,
                  "secondary" : <bool>,
                  "pingTimeMillis" : <num>
               },
               {
                  "addr" : "cfg3.example.net:27019",
                  "ok" : <bool>,
                  "ismaster" : <bool>,
                  "hidden" : <bool>,
                  "secondary" : <bool>,
                  "pingTimeMillis" : <num>
               }
            ]
         },
         "shardB" : {
            "hosts" : [
               {
                  "addr" : "shard2.example.net:27018",
                  "ok" : <bool>,
                  "ismaster" : <bool>,
                  "hidden" : <bool>,
                  "secondary" : <bool>,
                  "pingTimeMillis" : <num>
               }
            ]
         },
         "shardA" : {
            "hosts" : [
               {
                  "addr" : "shard1.example.net:27018",
                  "ok" : <bool>,
                  "ismaster" : <bool>,
                  "hidden" : <bool>,
                  "secondary" : <bool>,
                  "pingTimeMillis" : <num>
               }
            ]
         }
      },
      "ok" : 1,
      "$clusterTime" : {
         "clusterTime" : <timestamp>,
         "signature" : <document>
      },
      "operationTime" : <timestamp>
      
   }

Output
------

.. data:: connPoolStats.totalAvailable

   Reports the total number of available outgoing connections from the 
   current :binary:`~bin.mongod`/:binary:`~bin.mongos` instance to other members
   of the :term:`sharded cluster` or :term:`replica set`.

.. data:: connPoolStats.totalCreated

   Reports the total number of outgoing connections ever created by the
   current :binary:`~bin.mongod`/:binary:`~bin.mongos` instance to other members
   of the :term:`sharded cluster` or :term:`replica set`.

.. data:: connPoolStats.totalInUse

   Reports the total number of outgoing connections from the current
   :binary:`~bin.mongod`/:binary:`~bin.mongos` instance to other members of the
   :term:`sharded cluster` or :term:`replica set` that are currently in use.

.. data:: connPoolStats.totalRefreshing

   Reports the total number of outgoing connections from the
   current :binary:`~bin.mongod`/:binary:`~bin.mongos` instance to other
   members of the :term:`sharded cluster` or :term:`replica set` that
   are currently being refreshed.

.. data:: connPoolStats.numClientConnection

   Reports the number of active and stored outgoing **synchronous**
   connections from the current :binary:`~bin.mongod`/:binary:`~bin.mongos` instance
   to other members of the :term:`sharded cluster` or :term:`replica set`.
   
   These connections are a part of a pool that is a subset of the data 
   reported by :data:`~connPoolStats.totalAvailable`, 
   :data:`~connPoolStats.totalCreated`, and :data:`~connPoolStats.totalInUse`.

.. data:: connPoolStats.numAScopedConnection

   Reports the number of active and stored outgoing **scoped
   synchronous** connections from the current
   :binary:`~bin.mongod`/:binary:`~bin.mongos` instance to other members of the
   :term:`sharded cluster` or :term:`replica set`.
   
   These connections are a part of a pool that is a subset of the data 
   reported by :data:`~connPoolStats.totalAvailable`, 
   :data:`~connPoolStats.totalCreated`, and :data:`~connPoolStats.totalInUse`.

.. data:: connPoolStats.pools

   Reports on connection statistics (in
   use/available/created/refreshing) grouped by the connection pools. A
   :binary:`~bin.mongod` or :binary:`~bin.mongos` has two distinct families of
   outgoing connection pools:

   - DBClient-based pools (the "write path") and

   - NetworkInterfaceTL-based pools (the "read path").

   For each pool, the command returns a document that resembles the
   following:

   .. code-block:: none

      {
        "poolInUse" : <num>,
        "poolAvailable" : <num>,
        "poolCreated" : <num>,
        "poolRefreshing" : <num>,
        "[host1]" : { "inUse" : <num>, "available" : <num>, "created" : <num>, "refreshing" : <num> },
        "[host2]" : { "inUse" : <num>, "available" : <num>, "created" : <num>, "refreshing" : <num> },
        ...
      }

   .. note::

      If there are no connections (in use/available/created/refreshing)
      for a particular pool, the :dbcommand:`connPoolStats` does not
      return statistics for that pool.

   .. data:: connPoolStats.pools.NetworkInterfaceTL-TaskExecutorPool-[n]

      Displays connection statics related to TaskExecutor pools.
      Typically, there will be one TaskExecutorPool per core, e.g.
      ``pools.NetworkInterfaceTL-TaskExecutorPool-0`` ...
      ``pools.NetworkInterfaceTL-TaskExecutorPool-7`` 
      for an 8-core processor.
      
      .. seealso::

   :parameter:`taskExecutorPoolSize`

   .. data:: connPoolStats.pools.NetworkInterfaceTL-ShardRegistry

      *Available if the command is run on a member of a sharded cluster.*

      Displays the pool statistics for the connections between the
      current :binary:`~bin.mongod`/:binary:`~bin.mongos` instance and other
      members of the sharded cluster.

   .. data:: connPoolStats.pools.NetworkInterfaceTL-Replication

      *Available if the command is run on a member of a replica set.*

      Displays the pool statistics for the connections between the
      current :binary:`~bin.mongod` instance and the other members of the
      replica set.

   .. data:: connPoolStats.pools.global

      Displays the DBClient-based pool statistics.

.. data:: connPoolStats.hosts

   Reports on connection statistics (in
   use/available/created/refreshing) grouped by the hosts.
   
   Contains :term:`documents<document>` that represent a report of connections
   between the current :binary:`~bin.mongod`/:binary:`~bin.mongos` instance and
   each member of the :term:`sharded cluster` or :term:`replica set`.

   .. data:: connPoolStats.hosts.[host].available

      Reports the total number of connections available for connecting 
      to the ``[host]``.

   .. data:: connPoolStats.hosts.[host].created

      Reports the number of connections to the ``[host]``  ever created.
      
   .. data:: connPoolStats.hosts.[host].inUse
   
      Reports the number of connections to the ``[host]``
      that are currently in use.

.. data:: connPoolStats.replicaSets

   Contains :term:`documents <document>` that represent a report of 
   information related to each replica set connected to the current
   :binary:`~bin.mongod`/:binary:`~bin.mongos`.

   .. data:: connPoolStats.replicaSets.replicaSet

      Reports on each :term:`replica set` connected to the 
      current :binary:`~bin.mongod`/:binary:`~bin.mongos`.

   .. data:: connPoolStats.replicaSets.[replicaSets].hosts

      Holds an array of :term:`documents<document>` that reports on each 
      member in the :term:`replica set`.

      These values derive from the :doc:`replica set status
      </reference/command/replSetGetStatus>` values.

      .. data:: connPoolStats.replicaSets.[replicaSet].hosts[n].addr

         Reports the address for the member in the :term:`replica set` 
         in ``[hostname]:[port]`` format.

      .. data:: connPoolStats.replicaSets.[replicaSet].hosts[n].ok

         Reports ``false`` when:

         - the current :binary:`~bin.mongos` or :binary:`~bin.mongod` cannot connect
           to instance.

         - the current :binary:`~bin.mongos` or :binary:`~bin.mongod` received a
           connection exception or error.

         This field is for internal use.

      .. data:: connPoolStats.replicaSets.[replicaSet].hosts[n].ismaster

         Reports ``true`` if this 
         :data:`host <connPoolStats.replicaSets.[replicaSets].hosts>` is the
         :term:`primary` member of the :term:`replica set`.

      .. data:: connPoolStats.replicaSets.[replicaSet].hosts[n].hidden

         Reports ``true`` if this 
         :data:`host <connPoolStats.replicaSets.[replicaSets].hosts>` is a 
         :term:`hidden member` of the :term:`replica set`.

      .. data:: connPoolStats.replicaSets.[replicaSet].hosts[n].secondary

         Reports ``true`` if this 
         :data:`host <connPoolStats.replicaSets.[replicaSets].hosts>` is a
         :term:`secondary` member of the :term:`replica set`.

      .. data:: connPoolStats.replicaSets.[replicaSet].hosts[n].pingTimeMillis

         Reports the ping time in milliseconds from the :binary:`~bin.mongos` or
         :binary:`~bin.mongod` to this 
         :data:`host <connPoolStats.replicaSets.[replicaSets].hosts>`.

      .. data:: connPoolStats.replicaSets.[replicaSet].hosts[n].tags

         Reports the :rsconf:`members[n].tags`, if this member of the set has
         tags configured.

See also :ref:`command-response` for details on the ``ok`` status
field, the ``operationTime`` field and the ``$clusterTime`` field.


:data:`host <connPoolStats.replicaSets.[replicaSets].hosts>`