.. _sharding-security:

=======================================
Security Practices for Sharded Clusters
=======================================

.. default-domain:: mongodb

MongoDB controls access to :term:`sharded clusters <sharded cluster>`
with key files that store authentication credentials. The components
of sharded clusters use the secret stored in the key files when
authenticating to each other. Create key files and then point your
:program:`mongos` and :program:`mongod` instances to the files, as
described later in this section.

Beyond the :setting:`auth` mechanisms described in this section,
always run your sharded clusters in trusted networking environments
that limit access to the cluster with network rules. Your networking
environments should enforce restrictions that ensure only known
traffic reaches your :program:`mongos` and :program:`mongod`
instances.

This section describes authentication specific to sharded
clusters. For information on authentication across MongoDB, see
:doc:`/core/access-control`.

Access Control Privileges in Sharded Clusters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In sharded clusters, MongoDB provides separate administrative
privileges for the sharded cluster and for each shard. Beyond these
administration privileges, privileges for sharded cluster deployments
are functionally the same as any other MongoDB deployment. See,
:doc:`/core/access-control` for more information.

For sharded clusters, MongoDB provides these separate administrative
privileges:

- Administrative privileges for the sharded cluster. These privileges
  provide read-and-write access to the config servers' ':term:`admin
  <admin database>`. These users can run all administrative commands.
  Administrative privileges also give the user read-and-write access
  to all the cluster's databases.

  The credentials for administrative privileges on the cluster reside on
  the config servers. To receive admin access to the cluster, you must
  authenticate a session while connected to a :program:`mongos` instance
  using the admin database.

- Administrative privileges for the :program:`mongod` instance, or
  :term:`replica set`, that provides each individual shard. Each shard
  has its own admin database that stores administrative credentials
  and access for that shard only. These credentials are *completely*
  distinct from the cluster-wide administrative credentials.

For more information on privileges, see :doc:`/core/access-control`.

Access a Sharded Cluster with Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To access a sharded cluster as an authenticated user, use the
appropriate authentication options in :program:`mongo`.

To access a sharded cluster as an authenticated, non-admin user, see
either of the following:

- :dbcommand:`authenticate`

- :method:`db.auth()`

To terminate an authenticated session, see the :dbcommand:`logout`
command.
