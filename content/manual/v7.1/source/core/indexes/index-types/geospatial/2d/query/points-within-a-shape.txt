.. _2d-index-query-within-flat-shape:

====================================================
Query for Locations within a Shape on a Flat Surface
====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To query for location data within a specified shape on a flat surface,
use the :query:`$geoWithin` operator. To use ``$geoWithin`` with data
that appears on a flat surface, use this syntax: 

.. code-block:: javascript

   db.<collection>.find( {
      <location field> : {
         $geoWithin : {
            <shape operator> : <coordinates>
         }
       }
    } )

Replace these values for your query:

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Field
     - Description

   * - ``<collection>``
     - The collection to query.
   
   * - ``<location field>``
     -  The field that contains your location data. For queries on a
        flat surface, your data must be stored as :ref:`legacy
        coordinate pairs <geospatial-legacy>`.

   * - ``<shape operator>``
     - The shape to query within. You can specify one of the following
       shapes:

       - :query:`$box`
       - :query:`$polygon`
       - :query:`$center` (defines a circle)

       The example on this page uses the ``$box`` operator. To see examples
       of queries using other shapes, refer to those operator pages.

   * - ``<coordinates>``
     - The coordinates that define the edges of the shape to query
       within. When used with the ``$box`` operator, the coordinates
       represent the bottom-left and top-right corners of a rectangle.

       .. include:: /includes/indexes/geojson-lat-long.rst

About this Task
---------------

``$geoWithin`` does not require a geospatial index. However, a
geospatial index improves query performance.

Before You Begin
----------------

.. include:: /includes/indexes/2d-sample-docs.rst

Procedure
---------

Use ``$geoWithin`` to query the ``contacts`` collection. The following
``$geoWithin`` query uses the :query:`$box` operator to return documents
that appear within a specified rectangle:

.. code-block:: javascript

   db.contacts.find( {
      address: {
         $geoWithin: {
            $box: [ [ 49, 40 ], [ 60, 60 ] ]
         }
      }
   } )

Output:

.. code-block:: javascript
   :copyable: false

   [
     {
       _id: ObjectId("647e4e496cdaf4dc323ec92a"),
       name: 'Evander Otylia',
       phone: '202-555-0193',
       address: [ 55.5, 42.3 ]
     }
   ]

The values of the ``$box`` operator represent the bottom-left and
top-right corners of of the rectangle to query within.

The ``$geoWithin`` query shown earlier returns documents that are within
a rectangle that has these vertices:

- ``[ 49, 40 ]``
- ``[ 49, 60 ]``
- ``[ 60, 60 ]``
- ``[ 60, 40 ]``

Learn More
----------

To learn how to use the ``$geoWithin`` operator with other shapes, see
these pages:

- To query within a polygon, see :query:`$polygon`.
- To query within a circle, see :query:`$center`.
