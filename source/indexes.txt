.. _java-fundamentals-indexes:

=======
Indexes
=======

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use **indexes** with the MongoDB Java driver.

Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB must scan *every* document in a
collection (a **collection scan**) to find the documents that match each query. These collection scans are slow and can
negatively affect the performance of your application. If an appropriate index exists for a query, MongoDB can use the
index to limit the documents it must inspect.

Indexes also:

- Allow efficient sorting
- Enable special capabilities like :ref:`geospatial <geo-indexes>` search
- Allow adding constraints to ensure a field value is :ref:`unique <unique-indexes>`
- And :manual:`more </indexes/>`

.. tip::

   Indexes are also used by update operations when finding the documents to update, delete operations when finding the
   documents to delete, and by :manual:`certain stages </core/aggregation-pipeline/#pipeline-operators-and-indexes>` in
   the aggregation pipeline.

Query Coverage and Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you execute a query against MongoDB, your command can include various elements:

- Query criteria that specify fields and values you are looking for
- Options that affect the query's execution, such as read concern
- Projection criteria to specify the fields MongoDB returns (optional)
- Sort criteria to specify the order of documents returned from MongoDB (optional)

When all the fields specified in the query, projection, and sort are in the same index, MongoDB returns results directly
from the index, also called a **covered query**.

.. important:: Sort Order

   Sort criteria must match or invert the order of the index.

   Consider an index on the field ``name`` in ascending order (A-Z) and ``age`` in descending order (9-0):

   .. code-block:: none
      :copyable: false

      name_1_age_-1

   MongoDB uses this index when you sort your data by either:

   - ``name`` ascending, ``age`` descending
   - ``name`` descending, ``age`` ascending

   Specifying a sort order of ``name`` and :guilabel:`age` ascending or :guilabel:`name` and ``age``
   descending requires an in-memory sort.

For more information about how to ensure your index covers your query criteria and projection, see the MongoDB manual
articles on :manual:`query coverage </core/query-optimization/#covered-query>`.

Operational Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~

To improve query performance, build indexes on fields that appear often in
your application's queries and operations that return sorted results. Each
index that you add consumes disk space and memory when active, so we recommend
that you track index memory and disk usage for capacity planning. In addition,
when a write operation updates an indexed field, MongoDB updates the related
index.

Since MongoDB supports dynamic schemas, applications can query against fields whose names cannot be known in advance or
are arbitrary. MongoDB 4.2 introduced :manual:`wildcard indexes </core/index-wildcard/>` to help support these queries.
Wildcard indexes are not designed to replace workload-based index planning.

For more information about designing your data model and choosing indexes appropriate for your application, see the {+mdb-server+}
:manual:`Data Modeling and Indexes </core/data-model-operations/#indexes>`.

Index Types
-----------

MongoDB supports several different index types to support querying your data. The following sections describe the
most common index types and provide sample code for creating each index type. For a full list of index types, see
:manual:`Indexes </indexes/>`.

.. tip::

   The MongoDB Java Driver provides the `Indexes <{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html>`__ class that
   includes static factory methods to create index specification documents for different MongoDB Index key types.

The following examples use the
`createIndex() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#createIndex(org.bson.conversions.Bson,com.mongodb.client.model.IndexOptions)>`__
method to create various indexes, and the following setup:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin imports
   :end-before: end imports


.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin declaration
   :end-before: end declaration

Single Field and Compound Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Single Field Indexes
++++++++++++++++++++

:manual:`Single field indexes </core/index-single/>` are indexes with a reference to a single field within a collection's
documents. They improve single field query and sort performance, and support :manual:`TTL Indexes </core/index-ttl>` that
automatically remove documents from a collection after a certain amount of time or at a specific clock time.


.. note::

   The ``_id_`` index is an example of a single field index. This index is automatically created on the ``_id`` field
   when a new collection is created.

The following example creates an index in ascending order on the ``title`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin single index
   :end-before: end single index

The following is an example of a query that is covered by the index created in the preceding code snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin covered single query
   :end-before: end covered single query

For more information, see :manual:`Single Field Indexes </core/index-single>` in the {+mdb-server+} manual.

Compound Indexes
++++++++++++++++

:manual:`Compound </core/index-compound/>` indexes hold references to multiple fields within a collection's documents,
improving query and sort performance.

.. tip::

   Read more about compound indexes, **index prefixes**, and sort order :manual:`here </core/index-compound/#prefixes>`.

The following example creates a compound index on the ``type`` and ``rated`` fields:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin compound index
   :end-before: end compound index

The following is an example of a query that is covered by the index created in the preceding code snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin covered compound query
   :end-before: end covered compound query

For more information, see :manual:`Compound Indexes </core/index-compound>` in the {+mdb-server+} manual.

Multikey Indexes (Indexes on Array Fields)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Multikey indexes** are indexes that improve performance for queries that specify a field with an index that contains
an array value. You can define a multikey index using the same syntax as a single field or compound index.

The following example creates a compound, multikey index on the ``rated``, ``genres`` (an array of
Strings), and ``title`` fields:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin multikey index
   :end-before: end multikey index

The following is an example of a query that is covered by the index created in the preceding code snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin covered multikey query
   :end-before: end covered multikey query


Multikey indexes behave differently from other indexes in terms of query coverage, index bound computation, and
sort behavior. To learn more about multikey indexes, including a discussion of their behavior and limitations,
see the :manual:`Multikey Indexes page </core/index-multikey>` in the MongoDB manual.

.. _search-indexes:

Atlas Search Indexes
~~~~~~~~~~~~~~~~~~~~

The Atlas Search feature enables you to perform full-text searches on
collections hosted on MongoDB Atlas. The indexes specify the behavior of
the search and which fields to index.

To learn more about MongoDB Atlas Search, see the
:atlas:`Atlas Search Indexes </atlas-search/atlas-search-overview/#fts-indexes>`
documentation.

You can call the following methods on a collection to manage your Atlas Search
indexes:

- ``createSearchIndex()``
- ``createSearchIndexes()``
- ``listSearchIndexes()``
- ``updateSearchIndex()``
- ``dropSearchIndex()``

.. note::

   The Atlas Search Index management methods run asynchronously. The
   driver methods can return before confirming that they ran
   successfully. To determine the current status of the indexes, call the
   ``listSearchIndexes()`` method.

The following sections provide code examples that demonstrate how to use
each of the preceding methods.

Create a Search Index
+++++++++++++++++++++

You can use the `createSearchIndex() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#createSearchIndex(org.bson.conversions.Bson)>`__
and the
`createSearchIndexes() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#createSearchIndexes(java.util.List)>`__
methods to create Atlas Search indexes.

The following code example shows how to create a single index:

.. literalinclude:: /includes/fundamentals/code-snippets/SearchIndexMethods.java
   :language: java
   :dedent:
   :start-after: start create-search-index
   :end-before: end create-search-index

The following code example shows how to create multiple indexes:

.. literalinclude:: /includes/fundamentals/code-snippets/SearchIndexMethods.java
   :language: java
   :dedent:
   :start-after: start create-search-indexes
   :end-before: end create-search-indexes

List Search Indexes
+++++++++++++++++++

You can use the
`listSearchIndexes() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#listSearchIndexes()>`__
method to return the Atlas Search indexes of a collection.

The following code example shows how to print a list of the search indexes of
a collection:

.. literalinclude:: /includes/fundamentals/code-snippets/SearchIndexMethods.java
   :language: java
   :dedent:
   :start-after: start list-search-indexes
   :end-before: end list-search-indexes

Update a Search Index
+++++++++++++++++++++

You can use the
`updateSearchIndex() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#updateSearchIndex(java.lang.String,org.bson.conversions.Bson)>`__
method to update an Atlas Search index.

The following code shows how to update a search index:

.. literalinclude:: /includes/fundamentals/code-snippets/SearchIndexMethods.java
   :language: java
   :dedent:
   :start-after: start update-search-index
   :end-before: end update-search-index

Drop a Search Index
+++++++++++++++++++

You can use the
`dropSearchIndex() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#dropSearchIndex(java.lang.String)>`__
method to remove an Atlas Search index.

The following code shows how to delete a search index from a collection:

.. literalinclude:: /includes/fundamentals/code-snippets/SearchIndexMethods.java
   :language: java
   :dedent:
   :start-after: start drop-search-index
   :end-before: end drop-search-index

.. _text-indexes:

Text Indexes
~~~~~~~~~~~~

**Text indexes** support text search queries on string content. These indexes can include any field whose value is a
string or an array of string elements. MongoDB supports text search for various languages. You can specify the default
language as an option when creating the index.

.. tip::

   MongoDB offers an improved full-text search solution,
   :atlas:`Atlas Search </atlas-search/>`. To learn more about Atlas Search
   indexes and how to use them, see the :ref:`search-indexes` section of this
   guide.

Single Field
++++++++++++

The following example creates a text index on the ``plot`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin text index
   :end-before: end text index

The following is an example of a query that uses the index created in the preceding code snippet. Note that the ``sort`` is
omitted because text indexes do not contain sort order.

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin text query
   :end-before: end text query

Multiple Fields
+++++++++++++++

A collection can only contain one text index. If you want to create a
text index for multiple text fields, you must create a compound
index. A text search runs on all the text fields within the compound
index.

The following snippet creates a compound text index for the ``title`` and ``genre``
fields:

.. code-block:: java

   collection.createIndex(Indexes.compoundIndex(Indexes.text("title"), Indexes.text("genre")));

For more information, see the following Server Manual Entries:

- :manual:`Compound Text Index Restrictions </core/index-text/#std-label-text-index-compound>`
- :manual:`Text Indexes </core/index-text>`

Geospatial Indexes
~~~~~~~~~~~~~~~~~~

.. _geo-indexes:

MongoDB supports queries of geospatial coordinate data using **2dsphere indexes**. With a ``2dsphere`` index, you can query
the geospatial data for inclusion, intersection, and proximity. For more information about querying geospatial data, see
:manual:`Geospatial Queries </geospatial-queries/>`.

To create a ``2dsphere`` index, you must specify a field that contains only **GeoJSON objects**. For more details on this
type, see the {+mdb-server+} manual page on :manual:`GeoJSON objects </reference/geojson>`.

The ``location.geo`` field in the following sample document from the ``theaters`` collection in the ``sample_mflix``
database is a GeoJSON Point object that describes the coordinates of the theater:

.. code-block:: javascript

   {
      "_id" : ObjectId("59a47286cfa9a3a73e51e75c"),
      "theaterId" : 104,
      "location" : {
         "address" : {
            "street1" : "5000 W 147th St",
            "city" : "Hawthorne",
            "state" : "CA",
            "zipcode" : "90250"
         },
         "geo" : {
            "type" : "Point",
            "coordinates" : [
               -118.36559,
               33.897167
            ]
         }
      }
   }

The following example creates a ``2dsphere`` index on the ``location.geo`` field:

.. important::

   Attempting to create a geospatial index on a field that is covered by a geospatial index results in an error.

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin geospatial index
   :end-before: end geospatial index

The following is an example of a geospatial query using the "location.geo" index.

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin geospatial query
   :end-before: end geospatial query

MongoDB also supports ``2d`` indexes for calculating distances on a Euclidean plane and for working with the "legacy
coordinate pairs" syntax used in MongoDB 2.2 and earlier. For more information, see the :manual:`Geospatial Queries page </geospatial-queries>`
in the {+mdb-server+} manual.

Unique Indexes
~~~~~~~~~~~~~~

.. _unique-indexes:

Unique indexes ensure that the indexed fields do not store duplicate values. By default, MongoDB creates a unique index
on the ``_id`` field during the creation of a collection. To create a unique index, specify the field or combination of
fields that you want to prevent duplication on and set the ``unique`` option to ``true``.

The following example creates a unique, descending index on the ``theaterId`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin unique index
   :end-before: end unique index

.. important::

   If you perform a write operation that stores a duplicate value that violates the unique index, the MongoDB
   Java driver raises a ``DuplicateKeyException``, and MongoDB throws an error resembling the following:

   .. code-block:: none
      :copyable: false

      E11000 duplicate key error index

For more information, see the :manual:`Unique Indexes</core/index-unique>` page in the {+mdb-server+} manual.

Wildcard Indexes
~~~~~~~~~~~~~~~~

.. _wildcard-indexes:

Wildcard indexes enable queries against unknown or arbitrary fields.
These indexes can be beneficial if you are using a dynamic schema.

The following example creates an ascending wildcard index on all
values of the ``location`` field, including values nested in subdocuments and arrays:

.. literalinclude:: /includes/fundamentals/code-snippets/IndexPage.java
   :language: java
   :dedent:
   :start-after: begin wildcard index
   :end-before: end wildcard index

For more information, see the :manual:`Wildcard Indexes</core/index-wildcard>` page in the {+mdb-server+} manual.

.. _java-clustered-indexes:

Clustered Indexes
~~~~~~~~~~~~~~~~~

**Clustered indexes** instruct a collection to store documents ordered
by a key value. To create a clustered index, specify the clustered index
option with the ``_id`` field as the key and the unique field as
``true`` when you create your collection.

The following example creates a clustered index on the ``_id`` field in
the ``vendors`` collection:

.. code-block:: java

   MongoDatabase database = mongoClient.getDatabase("tea");
   ClusteredIndexOptions clusteredIndexOptions = new ClusteredIndexOptions(new Document("_id", 1), true);
   CreateCollectionOptions createCollectionOptions = new CreateCollectionOptions().clusteredIndexOptions(clusteredIndexOptions);

   database.createCollection("vendors", createCollectionOptions);

See the {+mdb-server+} manual sections for more information:

- :v6.0:`Clustered Index </reference/method/db.createCollection/#std-label-db.createCollection.clusteredIndex>`
- :v6.0:`Clustered Collections </core/clustered-collections>`

Remove an Index
---------------

You can remove any unused index except the default unique index on the
``_id`` field.

The following sections show the ways to remove indexes:

- Using an index specification document
- Using an indexed name field
- Using a wildcard character to remove all indexes

Remove an Index Using an Index Specification Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pass an **index specification document** to the ``dropIndex()`` method to
remove an index from a collection. An index specification document is
a ``Bson`` instance that specifies the type of index on a
specified field.

The following snippet removes an ascending index on the ``title`` field
in a collection:

.. code-block:: java

   collection.dropIndex(Indexes.ascending("title"));

.. important::

   If you want to drop a text index, you must use the name of the index
   instead. See the :ref:`Remove an Index Using a Name Field
   <name_field>` section for details.

.. _name_field:

Remove an Index Using a Name Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pass the ``name`` field of the index to the ``dropIndex()`` method to
remove an index from a collection.

To find the name of your index, use the ``listIndexes()``
method to see the value of the ``name`` fields in your indexes.

The following snippet retrieves and prints all the indexes in a
collection:

.. literalinclude:: /includes/fundamentals/code-snippets/SearchText.java
   :language: java
   :dedent:
   :start-after: begin listIndex
   :end-before: end listIndex

If you call ``listIndex()`` on a collection that contains a text index,
the output might resemble the following:

.. code-block:: json
   :copyable: false

   { "v": 2, "key": {"_id": 1}, "name": "_id_" }
   { "v": 2, "key": {"_fts": "text", "_ftsx": 1}, "name": "title_text", "weights": {"title": 1},
   "default_language": "english", "language_override": "language", "textIndexVersion": 3 }

This output tells us the names of the existing indexes are "_id" and
"title_text".

The following snippet removes the "title_text" index from the collection:

.. code-block:: java

   collection.dropIndex("title_text");

.. note::

   You cannot remove a single field from a compound text index. You must
   drop the entire index and create a new one to update the indexed
   fields.

Remove an Index Using a Wildcard Character
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting with MongoDB 4.2, you can drop all indexes by calling the
``dropIndexes()`` method on your collection:

.. code-block:: java

   collection.dropIndexes();

For prior versions of MongoDB, pass "*" as a parameter to your call to
``dropIndex()`` on your collection:

.. code-block:: java

   collection.dropIndex("*");

For more information about the methods in this section, see the following API Documentation:

- `dropIndex() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#dropIndex(java.lang.String)>`__
- `dropIndexes() <{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#dropIndexes()>`__