.. _kotlin-sync-auth:

=========================
Authentication Mechanisms
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference
 
.. meta::
   :keywords: validate credentials, protocols, code example 

Overview
--------

In this guide, you can learn how to authenticate to a MongoDB Server by using 
each **authentication mechanism** available in the {+driver-long+}.
Authentication is the process by which the driver proves its identity to the 
server to ensure security.

.. note:: Enterprise Authentication Mechanisms

   This page describes the authentication mechanisms available in MongoDB 
   Community Edition. To authenticate with mechanisms available in 
   the MongoDB Enterprise Edition, like ``Kerberos`` or ``LDAP``, see the
   :ref:`Enterprise Authentication Mechanisms guide <kotlin-sync-enterprise-auth>`.

.. _kotlin-sync-auth-default:
.. _kotlin-sync-auth-scramsha256:

SCRAM-SHA-256
-------------

``SCRAM-SHA-256``, as defined by `RFC 7677 <https://www.rfc-editor.org/rfc/rfc7677>`__, 
is a Salted Challenge Response Authentication Mechanism
(SCRAM) that uses your username and password, encrypted with the ``SHA-256``
algorithm, to authenticate your user. This is the default authentication
mechanism.

The following code snippets show how to specify this default authentication mechanism by
using the following placeholders:

* ``db_username``: Your MongoDB database username.
* ``db_password``: Your MongoDB database user's password.
* ``hostname``: The network address of your MongoDB deployment, accessible by your client.
* ``port``: The port number of your MongoDB deployment.
* ``authenticationDb``: The MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the default authentication mechanism by using a connection
      string, omit the mechanism. Your code to instantiate a ``MongoClient``
      should resemble the following:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :start-after: start-default-cred-string
         :end-before: end-default-cred-string
         :dedent:
      
   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism by using the
      ``MongoCredential`` class, use the ``createCredential()`` method.
      Your code to instantiate a ``MongoClient`` should resemble the following:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :start-after: start-default-mongo-cred
         :end-before: end-default-mongo-cred
         :dedent:

You can also explicitly specify the ``SCRAM-SHA-256`` authentication mechanism,
as shown in the following code snippets.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``SCRAM-SHA-256`` authentication mechanism by using a
      connection string, assign the ``authMechanism`` parameter the value
      ``SCRAM-SHA-256`` in your connection string. Your code to instantiate
      a ``MongoClient`` should resemble the following:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after: start-scramsha256-cred-string
         :end-before: end-scramsha256-cred-string

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism by using the
      ``MongoCredential`` class, use the
      `createScramSha256Credential() <{+core-api+}/MongoCredential.html#createScramSha256Credential(java.lang.String,java.lang.String,char[])>`__
      method. Your code to instantiate a ``MongoClient`` should resemble the following:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after: start-scramsha256-mongo-cred
         :end-before: end-scramsha256-mongo-cred

.. _kotlin-sync-auth-scramsha1:

SCRAM-SHA-1
-----------

``SCRAM-SHA-1``, as defined by `RFC 5802 <https://www.rfc-editor.org/rfc/rfc5802>`__, 
is a Salted Challenge Response Authentication Mechanism (SCRAM) that uses your
username and password, encrypted with the ``SHA-1`` algorithm, to authenticate
your user.

The following code snippets show how to specify the authentication mechanism 
by using the following placeholders:

* ``db_username``: Your MongoDB database username.
* ``db_password``: Your MongoDB database user's password.
* ``hostname``: The network address of your MongoDB deployment, accessible by your client.
* ``port``: The port number of your MongoDB deployment.
* ``authenticationDb``: The MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``SCRAM-SHA-1`` authentication mechanism by using a
      connection string, assign the ``authMechanism`` parameter the value
      ``SCRAM-SHA-1`` in your connection string. Your code to instantiate
      a ``MongoClient`` should resemble the following:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after: start-scramsha1-cred-string
         :end-before: end-scramsha1-cred-string

   .. tab::
      :tabid: MongoCredential

      To specify the default authentication mechanism by using the
      ``MongoCredential`` class, use the
      `createScramSha1Credential() <{+core-api+}/MongoCredential.html#createScramSha1Credential(java.lang.String,java.lang.String,char[])>`__
      method. Your code to instantiate a ``MongoClient`` should resemble the following:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after: start-scramsha1-mongo-cred
         :end-before: end-scramsha1-mongo-cred

.. _kotlin-sync-auth-x509:

MONGODB-X509
------------

The ``MONGODB-X509`` authentication mechanism uses
:wikipedia:`TLS <Transport_Layer_Security>` with X.509 certificates to
authenticate your user. When you specify the ``X.509``
authentication mechanism, the server authenticates the connection by using
the subject name of the client certificate.

The following code snippets show how to specify the authentication mechanism 
by using the following placeholders:

* ``hostname``: The network address of your MongoDB deployment, accessible by your client.
* ``port``: The port number of your MongoDB server.
* ``authenticationDb``: The MongoDB database that contains your user's
  authentication data. If you omit this parameter, the driver uses the
  default value ``admin``.

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the ``X.509`` authentication mechanism by using a connection
      string, assign the ``authMechanism`` parameter the value ``MONGODB-X509``
      and enable TLS by assigning the ``tls``
      parameter a ``true`` value. Your code to instantiate a ``MongoClient``
      should resemble the following:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after:  start-x509-connect-string
         :end-before: end-x509-connect-string
      
   .. tab::
      :tabid: MongoCredential

      To specify the ``X.509`` authentication mechanism by using the
      ``MongoCredential`` class, use the
      `createMongoX509Credential() <{+core-api+}/MongoCredential.html#createMongoX509Credential(java.lang.String)>`__
      method. Also, enable TLS by calling the
      `applyToSslSettings() <{+core-api+}/MongoClientSettings.Builder.html#applyToSslSettings(com.mongodb.Block)>`__
      method and setting the ``enabled`` property to ``true`` in the
      `SslSettings.Builder <{+core-api+}/connection/SslSettings.Builder.html>`__
      block. Your code to instantiate a ``MongoClient`` should resemble the following:

      .. literalinclude:: /includes/security/authentication.kt
         :language: kotlin
         :dedent:
         :start-after:  start-x509-mcred
         :end-before: end-x509-mcred

For additional information on configuring your application to use
certificates as well as TLS/SSL options, see the
:ref:`TLS/SSL guide <kotlin-sync-tls>`.

.. _kotlin-sync-auth-aws:

MONGODB-AWS
-----------

.. note::

   The MONGODB-AWS authentication mechanism is available for MongoDB
   deployments on MongoDB Atlas.

The ``MONGODB-AWS`` authentication mechanism uses your Amazon Web Services
Identity and Access Management (AWS IAM) credentials to authenticate your
user. To learn more about configuring MongoDB Atlas, see the
:atlas:`Set Up Authentication with AWS IAM </security/aws-iam-authentication>`
guide.

To instruct the driver to use this authentication mechanism, you can either
specify ``MONGODB-AWS`` as a parameter in the connection string or call
the ``MongoCredential.createAwsCredential()`` factory method.

In the following sections, you can learn different ways to specify the 
``MONGODB-AWS`` authentication mechanism and provide your AWS IAM credentials.

These sections contain code examples that use the following placeholders:

* ``awsKeyId``: The value of your AWS access key ID
* ``awsSecretKey``: The value of your AWS secret access key
* ``atlasUri``: The network address of your MongoDB Atlas deployment
* ``hostname``: The hostname of your MongoDB Atlas deployment
* ``port``: The port of your MongoDB Atlas deployment
* ``awsSessionToken``: The value of your AWS session token

.. _kotlin-mongodb-aws-sdk:

AWS SDK 
~~~~~~~

.. note:: End of Support for AWS SDK for Java v1

   The AWS SDK for Java v1 will reach end of support on December 31, 2025. 
   AWS recommends migrating to AWS SDK for Java v2. For more information, 
   see the `end of support announcement 
   <https://aws.amazon.com/blogs/developer/announcing-end-of-support-for-aws-sdk-for-java-v1-x-on-december-31-2025/>`__ 
   on the AWS site.

AWS provides software development kits (SDKs) for Java v1 and v2.
The AWS SDK offers the following features:

- Multiple options for obtaining credentials
- Credential caching, which helps your application avoid rate limiting
- Credential provider management for use with the `Elastic Kubernetes Service <https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html>`__

To use the AWS SDK for ``MONGODB-AWS`` authentication, you must
perform the following steps:

1. Specify the authentication mechanism.
#. Add the SDK as a dependency to your project.
#. Supply your credentials by using one of the methods in the credential
   provider chain.

To specify the ``MONGODB-AWS`` authentication mechanism by using a ``MongoCredential``
object, call the ``MongoCredential.createAwsCredential()`` factory method
and add the ``MongoCredential`` instance to your ``MongoClient``, as shown
in the following example:

.. literalinclude:: /includes/security/authentication.kt
   :language: kotlin
   :dedent:
   :start-after:  start-aws-sdk-mcred
   :end-before: end-aws-sdk-mcred
   :emphasize-lines: 1, 9

To specify the ``MONGODB-AWS`` authentication mechanism in the connection string, 
add it as a parameter, as shown in the following example:

.. literalinclude:: /includes/security/authentication.kt
   :language: kotlin
   :dedent:
   :start-after:  start-aws-sdk-cred-string
   :end-before: end-aws-sdk-cred-string

To add the AWS SDK as a dependency to your project, see the following
AWS documentation for the version you need:

- For the **AWS SDK for Java v2**, see the `Setting Up <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/setup.html>`__
  guide.
- For the **AWS SDK for Java v1**, see the `Getting Started <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/getting-started.html>`__
  guide.

.. note::

   For the AWS SDK for Java v2, the Java driver currently tests by using the
   ``software.amazon.awssdk:auth:2.30.31`` dependency.

   For the AWS SDK for Java v1, the Java driver currently tests by using the
   ``com.amazonaws:aws-java-sdk-core:1.12.782`` dependency.

To supply your credentials, see the following AWS documentation for the
version you need:

- To learn more about the **AWS SDK for Java v2** class the driver uses to
  get the credentials, see the `DefaultCredentialsProvider <https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/auth/credentials/DefaultCredentialsProvider.html>`__
  API documentation.

  Learn how to supply your credentials to this class from the
  `Use the default credential provider chain <https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html#credentials-chain>`__
  section.

- To learn more about the **AWS SDK for Java v1** class the driver uses to
  get the credentials, see the `DefaultAWSCredentialsProviderChain <https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html>`__
  API documentation.

  Learn how to supply your credentials to this class from the
  `Using the Default Credential Provider Chain <https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default>`__
  section.

.. note::

   If you include both v1 and v2 of the AWS SDK for Java in your project,
   you must use the v2 methods to supply your credentials.

.. _kotlin-mongodb-aws-env-variables:

Specify Your Credentials in the Environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can provide your AWS IAM credentials by instructing the driver to
use the ``MONGODB-AWS`` authentication mechanism and by setting the
appropriate environment variables.

To use the environment variables to supply your credentials, you must perform
the following:

1. Specify the authentication mechanism.
#. Add the appropriate environment variables.

You can specify the ``MONGODB-AWS`` authentication mechanism by using a 
``MongoCredential`` object or in the connection string.

To specify the authentication mechanism by using a ``MongoCredential`` object,
call the ``MongoCredential.createAwsCredential()`` factory method and add the
``MongoCredential`` instance to your ``MongoClient``, as shown in the following
example:

.. literalinclude:: /includes/security/authentication.kt
   :language: kotlin
   :dedent:
   :start-after:  start-aws-env-mcred
   :end-before: end-aws-env-mcred
   :emphasize-lines: 1, 9

To specify the ``MONGODB-AWS`` authentication mechanism in the connection 
string, add it as a parameter as shown in the following example:

.. literalinclude:: /includes/security/authentication.kt
   :language: kotlin
   :dedent:
   :start-after:  start-aws-env-cred-string
   :end-before: end-aws-env-cred-string

The next examples show how to provide your credentials by setting environment
variables for the following types of authentication:

- Programmatic access keys
- ECS container credentials
- EC2 container credentials

The following example shows how you can set your **programmatic access keys**
in environment variables by using ``bash`` or a similar shell:

.. code-block:: bash

   export AWS_ACCESS_KEY_ID=<awsKeyId>
   export AWS_SECRET_ACCESS_KEY=<awsSecretKey>
   export AWS_SESSION_TOKEN=<awsSessionToken>

Omit the line containing ``AWS_SESSION_TOKEN`` if you don't need an AWS
session token for that role.

To authenticate by using **ECS container credentials**, set the ECS
endpoint relative URI in an environment variable by using ``bash`` or
a similar shell, as shown in the following example:

.. code-block:: bash

   export AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=<your ECS endpoint>

To authenticate by using **EC2 container credentials**, make sure none of the
aforementioned environment variables are set. The driver obtains the
credentials from the default IPv4 EC2 instance metadata endpoint.

.. _kotlin-mongodb-aws-mongoclient-configuration:

Specify Your Credentials in a MongoCredential
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can supply your AWS IAM credentials to a ``MongoClient`` by using a
``MongoCredential`` instance. To construct the ``MongoCredential`` instance
for ``MONGODB-AWS`` authentication, call the 
`createAwsCredential() <{+core-api+}/MongoCredential.html#createAwsCredential(java.lang.String,char%5B%5D)>`__
factory method.

You can supply only programmatic access keys to the
``MongoCredential.createAwsCredential()`` method. If you need to supply ECS
or EC2 container credentials, follow the instructions in
:ref:`<kotlin-mongodb-aws-env-variables>` or :ref:`<kotlin-mongodb-aws-sdk>`.

To use a ``MongoCredential`` object for ``MONGODB-AWS`` authentication, you
must perform the following steps:

1. Specify the authentication mechanism.
#. Supply the credentials.

To specify the authentication mechanism by using a ``MongoCredential`` object,
call the ``MongoCredential.createAwsCredential()`` factory method
and add the ``MongoCredential`` instance to your ``MongoClient``, as shown
in the following example:

.. literalinclude:: /includes/security/authentication.kt
   :language: kotlin
   :dedent:
   :start-after:  start-aws-mcred
   :end-before: end-aws-mcred
   :emphasize-lines: 1, 9

If you need to specify an AWS session token, pass it to the
`withMechanismProperty() <{+core-api+}/MongoCredential.html#withMechanismProperty(java.lang.String,T)>`__
method, as shown in the following example:

.. literalinclude:: /includes/security/authentication.kt
   :language: kotlin
   :dedent:
   :start-after:  start-aws-mcred-wmechprop
   :end-before: end-aws-mcred-wmechprop
   :emphasize-lines: 1, 2, 10

To refresh your credentials, you can declare a ``Supplier`` lambda expression
that returns new credentials, as shown in the following example:

.. literalinclude:: /includes/security/authentication.kt
   :language: kotlin
   :dedent:
   :start-after:  start-aws-lambda-expression
   :end-before: end-aws-lambda-expression
   :emphasize-lines: 4-6, 9

If you must provide AWS IAM credentials in a connection string, you can add 
it to your ``MongoClientSettings`` object by calling the `applyConnectionString() <{+core-api+}/MongoClientSettings.Builder.html#applyConnectionString(com.mongodb.ConnectionString)>`__
method:

.. literalinclude:: /includes/security/authentication.kt
   :language: kotlin
   :dedent:
   :start-after:  start-aws-apply-connect-string
   :end-before: end-aws-apply-connect-string
   :emphasize-lines: 2, 5

Additional Information
----------------------

To learn more about authenticating to MongoDB, see
:manual:`Authentication </core/authentication/>` in the {+mdb-server+} manual.

To learn more about managing users of your MongoDB deployment, see
:manual:`Users </core/security-users/>` in the {+mdb-server+} manual.
