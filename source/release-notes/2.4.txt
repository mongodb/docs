======================================================
Release Notes for MongoDB 2.4 (2.3 Development Series)
======================================================

.. default-domain:: mongodb

MongoDB 2.4 is currently in development, as part of the 2.3
development release series. While 2.3-series releases are currently
available, these versions of MongoDB, including the 2.4 release
candidate builds, are for *testing only and
not for production use*.

This document will eventually contain the full release notes for
MongoDB 2.4; before its release this document covers the 2.3
development series as a work-in-progress.

.. contents:: See the :doc:`full index of this page <2.4-changes>` for
              a complete list of changes included in 2.4.
   :backlinks: none
   :local:
   :depth: 3

Downloading
-----------

You can download the 2.4 release candidate on the `downloads page`_ in the
:guilabel:`Development Release (Unstable)` section. There are no
distribution packages for development releases, but you can use the
binaries provided for testing purposes. See
:doc:`/tutorial/install-mongodb-on-linux`,
:doc:`/tutorial/install-mongodb-on-windows`, or
:doc:`/tutorial/install-mongodb-on-os-x` for the basic installation
process.

.. _`downloads page`: http://www.mongodb.org/downloads

Upgrade Process
---------------

.. toctree::
   :hidden:

   /release-notes/2.4-upgrade
   /release-notes/2.4-index-types

See :doc:`/release-notes/2.4-upgrade` for full upgrade instructions.

Supported Platforms
-------------------

MongoDB 2.4 only supports OS X versions 10.6 (Snow Leopard) and later.

Changes
-------

Major Features
++++++++++++++

Text Search
~~~~~~~~~~~

In 2.4 MongoDB add support for boolean search of content in MongODB
databases as a beta feature. With the new :ref:`text index
<index-feature-text>`, and supporting, :dbcommand:`text` command you
can search text in data stored in MongoDB, using an index that is
updated in real-time and consistent with the data set. See
:doc:`/applications/text-search` for more information about text
search in MongoDB.

New Geospatial Indexes with GeoJSON and Improved Spherical Geometry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB adds the new ``2dsphere`` geospatial index in addition to the
existing ``2d`` index. The ``2dsphere`` index supports improved
spherical queries and supports the following `GeoJSON
<http://geojson.org/geojson-spec.html>`_ objects:

- ``Point``

- ``LineString``

- ``Polygon``

The ``2dsphere`` index supports all current geospatial :ref:`query
operators <query-selectors-geospatial>` and introduces the following new
query operator for queries on GeoJSON data:

- :operator:`$geoWithin` operator

- :operator:`$geoIntersects` operator

The operators use the new :operator:`$geometry` parameter.

Additionally, :operator:`$geoWithin` instead no longer requires a
geospatial index.

For more information on geospatial indexes in 2.4, see:

- :doc:`/applications/geospatial-indexes`

- :doc:`/core/geospatial-indexes`

New Hashed Index and Sharding with a Hashed Shard Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To support an easy to configure and evenly distributed shard key,
version 2.3 adds a new "``hashed``" index type that indexes based on
hashed values. This section introduces and documents both the new
index type and its use in sharding:

Hashed Index
````````````

The new ``hashed`` index exists primarily to support automatically
hashed shard keys. Consider the following properties of hashed
indexes:

- Hashed indexes must only have a single field, and cannot be compound
  indexes.

- Fields indexed with hashed indexes must *not* hold arrays. Hashed
  indexes cannot be multikey indexes.

- Hashed indexes cannot have a ``unique`` constraint.

  You *may* create hashed indexes with the ``sparse`` property.

- MongoDB can use the hashed index to support equality queries, but
  cannot use these indexes for range queries.

- Hashed indexes offer no performance advantage over normal indexes.
  *However*, hashed indexes may be smaller than a normal index when
  the values of the indexed field are larger than 64 bits. [#hash-size]_

- it's possible to have a hashed and non-hashed index on the same
  field: MongoDB will use the non-hashed for range queries.

.. _hashed-index-warning:

.. warning::

   Hashed indexes round floating point numbers to 64-bit integers
   before hashing. For example, a hashed index would store the same
   value for a field that held a value of ``2.3`` and ``2.2``. To
   prevent collisions do not use a hashed index for floating point
   numbers that cannot be consistently converted to 64-bit integers (and
   then back to floating point.) Hashed indexes do not support
   floating point values larger than 2\ :sup:`53`.

Create a hashed index using an operation that resembles the
following:

.. code-block:: javascript

   db.active.ensureIndex( { a: "hashed" } )

This operation creates a hashed index for the ``active`` collection on
the ``a`` field.

.. [#hash-size] The hash stored in the hashed index is 64 bits long.

Hashed Sharding
```````````````

To shard a collection using a hashed shard key, issue an operation in
the :program:`mongo` shell that resembles the following:

.. code-block:: javascript

   sh.shardCollection( "records.active", { a: "hashed" } )

This operation shards the ``active`` collection in the ``records``
database, using a hash of the ``a`` field as the shard
key. Consider the following properties when using a hashed shard key:

- As with other kinds of shard key indexes, if your collection has
  data, you must create the hashed index before sharding. If your
  collection does not have data, sharding the collection will create
  the appropriate index.

- The :program:`mongos` will route all equality queries to a specific
  shard or set of shards; however, the :program:`mongos` must route
  range queries to all shards.

- When using a hashed shard key on a new collection, MongoDB
  automatically pre-splits the range of 64-bit hash values into
  chunks. By default, the initial number of chunks is equal to twice
  the number of shards at creation time. You can change the number of
  chunks created, using the ``numInitialChunks`` option, as in the
  following invocation of :dbcommand:`shardCollection`:

  .. code-block:: javascript

     db.adminCommand( { shardCollection: "test.collection",
                        key: { a: "hashed"},
                        numInitialChunks: 2001 } )

  MongoDB will only pre-split chunks in a collection when sharding
  empty collections. MongoDB will not create chunk splits in a
  collection sharding collections that have data.

  .. note::

     ``numInititalChanks`` allows you to create, at most ``8192``
     chunks when sharding a collection.

.. warning::

   Avoid using hashed shard keys when the hashed field has non-integral floating
   point values, see :ref:`hashed indexes <hashed-index-warning>` for
   more information.

Security Improvements
+++++++++++++++++++++

.. _kerberos-authentication:

New Modular Authentication System with Support for Kerberos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::

   Kerberos authentication is only present in the `MongoDB Subscriber
   Edition <https://www.10gen.com/mongodb-subscriber-edition-download>`_.
   To download the 2.4.0 release candidate the Subscriber Edition, use
   the following resources:

   - `Amazon Linux 6.4 <http://s3.amazonaws.com/downloads.10gen.com/linux/mongodb-linux-x86_64-subscription-amzn64-2.4.0-rc0.tgz>`_
   - `Red Hat Enterprise Linux 6.2 <http://s3.amazonaws.com/downloads.10gen.com/linux/mongodb-linux-x86_64-subscription-rhel62-2.4.0-rc0.tgz>`_
   - `Ubuntu 11.04 <http://s3.amazonaws.com/downloads.10gen.com/linux/mongodb-linux-x86_64-subscription-ubuntu1104-2.4.0-rc0.tgz>`_
   - `SUSE 11 <http://s3.amazonaws.com/downloads.10gen.com/linux/mongodb-linux-x86_64-subscription-suse11-2.4.0-rc0.tgz>`_

In 2.4 the MongoDB Subscriber edition now supports authentication via
a Kerberos mechanism. See
:doc:`/tutorial/control-access-to-mongodb-with-kerberos-authentication`
for more information.

Also consider the following documents that address authenticating to
MongoDB using Kerberos:

- :ecosystem:`Authenticate to MongoDB using Kerberos and the Java
  Driver </tutorial/authenticate-with-java-driver/>`

- :ecosystem:`Authenticate to MongoDB using Kerberos and the C# Driver
  </tutorial/authenticate-with-csharp-driver/>`

.. see:: :doc:`MongoDB Security Practices and Procedures </security>`.

Role Based Access Control and New Privilege Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 2.4 introduces a role based access control system that
provides more granular privileges to MongoDB users. See
:doc:`/reference/user-privileges` for more information.

To support the new access control system, 2.4 also introduces a new
format for documents in a database's :data:`system.user
<<database>.system.user>` collection. See
:doc:`/reference/privilege-documents` for more information.

Use :parameter:`supportCompatibilityFormPrivilegeDocuments` to disable
the legacy privilege documents, which MongoDB continues to support in
2.4.

Administration Changes
++++++++++++++++++++++

``--setParameter`` Option Available on the ``mongos`` and ``mongod`` Command Line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can now use :option:`--setParameter <mongod>` on the command line
and :setting:`setParameter` in the configuration file. Currently
:setting:`setParameter` provides the following options:

.. include:: /includes/list-set-parameters.rst

See :doc:`/reference/parameters` for full documentation of available
parameters and their use.

Changes to ``serverStatus`` Output Including Additional Metrics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In 2.4 MongoDB adds a number of counters and system metrics to the
output of the :dbcommand:`serverStatus` command, including:

- a :ref:`working set estimator <server-status-workingset>`.

- operation counters, in :data:`~serverStatus.metrics.document`
  and :data:`~serverStatus.metrics.operation`.

- record allocation, in :data:`~serverStatus.metrics.record`.

- thorough metrics of the replication process,
  in :data:`~serverStatus.metrics.repl`.

- metrics on the :doc:`ttl index </tutorial/expire-data>`
  documentation.

Additionally, in 2.4, the :dbcommand:`serverStatus` command can
dynamically construct the :data:`serverStatus` document by excluding
any top-level sections included by default, or including any top-level
section not included by default (e.g. :data:`~serverStatus.workingSet`.)

See :method:`db.serverStatus()` and :dbcommand:`serverStatus` for more
information.

Increased Chunk Migration Write Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, all insert and delete operations that occur as part of a
:term:`chunk` migration in a :term:`sharded cluster` will have an
increased write concern, to ensure that at least one secondary
acknowledges each insert and deletion operation. This change slows the
potential speed of a chunk migration, but increases reliability and
ensures that a large number of chunk migrations *cannot* affect the
availability of a sharded cluster.

BSON Document Validation Enabled by Default for ``mongod`` and ``mongorestore``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in 2.4, MongoDB enables basic :term:`BSON` object validation
for :program:`mongod` and :program:`mongorestore` when writing to
MongoDB data files. This prevents any client from inserting invalid or
malformed BSON into a MongoDB database. For objects with a high degree
of sub-document nesting this validation may have a small performance
impact. :setting:`objcheck`, which was previously disabled by default,
provides this validation.

Indexing Changes
++++++++++++++++

Support for Multiple Concurrent Index Builds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A single :program:`mongod` instance can build multiple indexes in the
background at the same time. See :ref:`building indexes in the
background <index-creation-background>` for more information on
background index builds. Foreground index builds hold a database lock
and must proceed one at a time.

``db.killOp()`` Can Now Kill Foreground Index Builds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :method:`db.killOp()` method will now terminate a foreground index
build, in addition to the other operations supported in previous
versions.

Improved Validation of Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before 2.4, :program:`mongod` would create an ascending scalar index
(e.g. ``{ a : 1 }``) when users attempted to create an index of a type
that did not exist. Creating an index of an invalid index type
will generate an error in 2.4.

See :doc:`/release-notes/2.4-index-types` for more information.

Interface Changes
+++++++++++++++++

``$setOnInsert`` -- New Update Operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. Properly restructure this section after adding $push...

To set fields *only* when an :method:`upsert <db.collection.update()>`
performs an insert, use the :operator:`$setOnInsert` operator with the
:method:`upsert <db.collection.update()>` .

.. example::

   A collection named ``coll`` has no documents with ``_id`` equal to
   ``1``.

   The following :method:`upsert <db.collection.update()>` operation
   inserts a document and applies the :operator:`$setOnInsert` operator
   to set the fields ``x`` and ``y``:

   .. code-block:: javascript

      db.coll.update( { _id: 1 },
                      { $setOnInsert: { x: 25, y: 30 } },
                      { upsert: true } )

   The newly-inserted document has the field ``x`` set to ``25`` and
   the field ``y`` set to 30:

   .. code-block:: javascript

      { "_id" : 1, "x" : 25, "y" : 30 }

.. note::

   The :operator:`$setOnInsert` operator performs no operation for
   :method:`upserts <db.collection.update()>` that only perform an
   update and for :method:`updates <db.collection.update()>` when the
   ``upsert`` option is ``false``.

Limit Number of Elements in an Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider a situation where you only want to maintain a fixed number of
elements in an array.

In 2.4, by using the :operator:`$push` operator with the
:operator:`$each`, the :operator:`$sort`, and the :operator:`$slice`
modifiers, you can add multiple elements to an array, sort and limit
the number of elements in the modified array to maintain an array with
a fixed number of elements.

See :doc:`/tutorial/limit-number-of-elements-in-updated-array` for an
example where an update maintains the top three scores for a student.

.. seealso::

   The following pages provide additional information and examples:

   - :operator:`$push` operator

   - :operator:`$each` modifier

   - :operator:`$sort` modifier

   - :operator:`$slice` modifier

.. _rn-2.4-javascript-change:

JavaScript Engine Changed to V8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. toctree::
   :hidden:

   /release-notes/2.4-javascript

In 2.4 the default JavaScript engine in the :program:`mongo` shell
:program:`mongod` is now V8. This change affects all JavaScript
behavior including the :dbcommand:`mapReduce`, :dbcommand:`group`, and
:dbcommand:`eval` commands, as well as the :operator:`$where` query
operator.

Use the new :method:`interpreterVersion()` method in the
:program:`mongo` shell and the
:data:`~serverBuildInfo.interpreterVersion` field in the output of
:method:`db.serverBuildInfo()` to determine which JavaScript engine a
MongoDB binary uses.

The primary impacts of the change from the previous JavaScript engine,
SpiderMonkey, to V8 are:

- improved concurrency for JavaScript operations,
- modernized JavaScript implementation, and
- removed non-standard SpiderMonkey features.

See :doc:`/release-notes/2.4-javascript` for more information about
all changes .

Additional Limitations for Map-Reduce and ``$where`` Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-group-map-reduce-where-limitations-in-24.rst

.. DOCS-752

Improvements to the Aggregation Framework
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 2.4 introduces a number of additional functionality and
improved performance for the :doc:`Aggregation Framework
</applications/aggregation>`. Consider the following additions in 2.4:

- :agg:pipeline:`$match` queries now support the :operator:`$geoWithin`
  operator for bounded geospatial queries.

- The new :agg:pipeline:`$geoNear` pipeline stage to support
  geospatial queries.

- :agg:group:`$min` operator only considers non-null and existing field
  values. If all the values for a field are ``null`` or are missing,
  the operator returns ``null`` for the minimum value.

- For sort operations where the :agg:pipeline:`$sort` stage
  immediately precedes a :agg:pipeline:`$limit` in the pipeline, the
  MongoDB can perform a more efficient sort that does not require
  keeping the entire result set in memory.

- The new :agg:expression:`$millisecond` operator returns the millisecond
  portion of a date.

- The new :agg:expression:`$concat` operator concatenates array of strings.
