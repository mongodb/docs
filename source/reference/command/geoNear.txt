=======
geoNear
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: geoNear

   Returns documents in order of proximity to a specified point, from
   the nearest to farthest. :dbcommand:`geoNear` requires a geospatial
   index.

   The :dbcommand:`geoNear` command accepts a :term:`document` that
   contains the following fields. Specify all distances in the same
   units as the document coordinate system:

   .. include:: /includes/apiargs/dbcommand-geoNear-field.rst

Considerations
--------------

:dbcommand:`geoNear` requires a geospatial index. However, the
:dbcommand:`geoNear` command requires that a collection have *at most*
only one :doc:`2d index </core/2d>` and/or only one :doc:`2dsphere
</core/2dsphere>`.

.. |geoNear| replace:: :dbcommand:`geoNear` command
.. include:: /includes/fact-geoNear-restrict-near-in-query.rst

Command Syntax
--------------

``2dsphere`` Index
~~~~~~~~~~~~~~~~~~

If using a ``2dsphere`` index, you can specify either a ``GeoJSON``
point or a legacy coordinate pair for the ``near`` value.

You must include ``spherical: true`` in the syntax.

With ``spherical: true``, if you specify a GeoJSON point, MongoDB uses
meters as the unit of measurement:

.. code-block:: javascript

   db.runCommand( {
      geoNear: <collection> ,
      near: { type: "Point" , coordinates: [ <coordinates> ] } ,
      spherical: true,
      ...
   } )

With ``spherical: true``, if you specify a legacy coordinate pair,
MongoDB uses radians as the unit of measurement:

.. code-block:: javascript

   db.runCommand( {
      geoNear: <collection> ,
      near: [ <coordinates> ],
      spherical: true,
      ...
   } )

``2d`` Index
~~~~~~~~~~~~

To query a :doc:`2d </core/2d>` index, use the following syntax:

.. code-block:: javascript

   db.runCommand( {
      geoNear: <collection>,
      near : [ <coordinates> ],
      ...
   } )

If you specify ``spherical: true``, MongoDB uses spherical geometry to
calculate distances in radians. Otherwise, MongoDB uses planar geometry
to calculate distances between points.

Behavior
--------

.. |geo-operation| replace:: :dbcommand:`geoNear`

.. include:: /includes/fact-geo-near-returns-sorted-results.rst

Because :dbcommand:`geoNear` orders the documents from nearest to
farthest, the ``minDistance`` field effectively skips over the first
*n* documents where *n* is determined by the distance requirement.

The :dbcommand:`geoNear` command provides an alternative to the
:query:`$near` operator. In addition to the functionality of
:query:`$near`, :dbcommand:`geoNear` returns additional diagnostic
information.

.. read-lock, slave-ok

Examples
--------

The following examples run the :dbcommand:`geoNear` command on the
collection ``places`` that has a ``2dsphere`` index.

Specify a Query Condition
~~~~~~~~~~~~~~~~~~~~~~~~~

The following :dbcommand:`geoNear` command queries for documents whose
``category`` equals ``"public"`` and returns the matching documents in
order of nearest to farthest to the specified point:

.. code-block:: javascript

   db.runCommand(
      {
        geoNear: "places",
        near: { type: "Point", coordinates: [ -73.9667, 40.78 ] },
        spherical: true,
        query: { category: "public" }
      }
   )

The operation returns the following output, the documents in the ``results``  from
nearest to farthest:

.. code-block:: javascript

   {
     "waitedMS" : NumberLong(0),
     "results" : [
        {
          "dis" : 0,
          "obj" : {
             "_id" : 2,
             "location" : { "type" : "Point", "coordinates" : [ -73.9667, 40.78 ] },
             "name" : "Central Park",
             "category" : "public"
          }
        },
        {
          "dis" : 3245.988787957091,
          "obj" : {
             "_id" : 3,
             "location" : { "type" : "Point", "coordinates" : [ -73.9836, 40.7538 ] },
             "name" : "Bryant Park",
             "category" : "public"
          }
        },
        {
          "dis" : 7106.506152782733,
          "obj" : {
             "_id" : 4,
             "location" : { "type" : "Point", "coordinates" : [ -73.9928, 40.7193 ] },
             "name" : "Sara D. Roosevelt Park",
             "category" : "public"
          }
        },

     ],
     "stats" : {
        "nscanned" : NumberLong(47),
        "objectsLoaded" : NumberLong(47),
        "avgDistance" : 3450.8316469132747,
        "maxDistance" : 7106.506152782733,
        "time" : 4
     },
     "ok" : 1
   }

Specify a ``minDistance`` and ``maxDistance``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example specifies a ``minDistance`` of ``3000`` meters
and ``maxDistance`` of ``7000`` meters:

.. code-block:: javascript

   db.runCommand(
      {
        geoNear: "places",
        near: { type: "Point", coordinates: [ -73.9667, 40.78 ] },
        spherical: true,
        query: { category: "public" },
        minDistance: 3000,
        maxDistance: 7000
      }
   )

The operation returns the following output:

.. code-block:: javascript

   {
     "waitedMS" : NumberLong(0),
     "results" : [
        {
          "dis" : 3245.988787957091,
          "obj" : {
             "_id" : 3,
             "location" : { "type" : "Point", "coordinates" : [ -73.9836, 40.7538 ] },
             "name" : "Bryant Park",
             "category" : "public"
          }
        }
     ],
     "stats" : {
         "nscanned" : NumberLong(11),
         "objectsLoaded" : NumberLong(11),
         "avgDistance" : 3245.988787957091,
         "maxDistance" : 3245.988787957091,
         "time" : 0
     },
     "ok" : 1
   }

Override Default ``readConcern``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation on a replica set specifies a
:doc:`/reference/read-concern` of :readconcern:`"majority"` to read the
most recent copy of the data confirmed as having been written to a
majority of the nodes.

.. note::

   - .. include:: /includes/fact-enable-majority-readConcern.rst

   - .. include:: /includes/fact-readConcern-most-recent-data-in-node.rst

.. code-block:: javascript

   db.runCommand(
      {
         geoNear: "places",
         near: { type: "Point", coordinates: [ -73.9667, 40.78 ] },
         spherical: true,
         query: { category: "public" },
         readConcern: { level: "majority" }
      }
   )

Output
------

The :dbcommand:`geoNear` command returns a document with the
following fields:

.. data:: geoNear.results

   An array with the results of the :dbcommand:`geoNear` command, sorted
   by distance with the nearest result listed first and farthest last.

.. data:: geoNear.results[n].dis

   For each document in the results, the distance from the coordinates
   defined in the :dbcommand:`geoNear` command.

.. data:: geoNear.results[n].obj

   The document from the collection.

.. data:: geoNear.stats

   An object with statistics about the query used to return the results of
   the :dbcommand:`geoNear` search.

.. data:: geoNear.stats.nscanned

   The total number of index entries scanned during the database operation.

.. data:: geoNear.stats.objectsLoaded

   The total number of documents read from disk during the database operation.

.. data:: geoNear.stats.avgDistance

   The average distance between the coordinates defined in the
   :dbcommand:`geoNear` command and coordinates of the documents returned
   as results.

.. data:: geoNear.stats.maxDistance

   The maximum distance between the coordinates defined in the
   :dbcommand:`geoNear` command and coordinates of the documents returned
   as results.

.. data:: geoNear.stats.time

   The execution time of the database operation, in milliseconds.

.. data:: geoNear.ok

   A value of ``1`` indicates the :dbcommand:`geoNear` search succeeded. A
   value of ``0`` indicates an error.

