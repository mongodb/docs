.. meta::
   :robots: noindex, nosnippet


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Interface RealmMigration
^^^^^^^^^^^^^^^^^^^^^^^^

.. _io_realm_RealmMigration:



io.realm
========

The RealmMigration class is used to perform the migration of one Realm schema to another. The schema for a Realm is defined by all classes in a project that extend :ref:`io.realm.RealmObject <io_realm_RealmObject>`  or implement :ref:`io.realm.RealmModel <io_realm_RealmModel>` , so any changes to these classes will require a migration.

To support migrations from any previous schemaVersion to the newest, the following pattern is recommended when writing a migration:

 

.. code-block:: java

   
    public class CustomMigration implements RealmMigration {
      @Override
      public long migrate(DynamicRealm realm, long oldVersion, long newVersion) {
        RealmSchema schema = realm.getSchema();
   
        if (oldVersion == 0) {
          // Migrate from v0 to v1
          oldVersion++;
        }
   
        if (oldVersion == 1) {
          // Migrate from v1 to v2
          oldVersion++;
        }
   
        if (oldVersion < newVersion) {
            throw new IllegalStateException(String.format(Locale.US, "Migration missing from v%d to v%d", oldVersion, newVersion));
        }
      }
    }
    


 

During development when RealmObject classes can change frequently, it is possible to use :ref:`io.realm.Realm.deleteRealm(RealmConfiguration) <io_realm_Realm_deleteRealm_RealmConfiguration_>` . This will delete the database file and eliminate the need for any migrations.






.. seealso::


   
   - :ref:`io.realm.RealmConfiguration.Builder.schemaVersion(long) <io_realm_RealmConfiguration_Builder_schemaVersion_long_>` 
      
      
      
   - :ref:`io.realm.RealmConfiguration.Builder.migration(RealmMigration) <io_realm_RealmConfiguration_Builder_migration_RealmMigration_>` 
      
      
      
   - :ref:`io.realm.RealmConfiguration.Builder.deleteRealmIfMigrationNeeded() <io_realm_RealmConfiguration_Builder_deleteRealmIfMigrationNeeded__>` 
      
      
      
   
   
   



Method Summary
==============

.. list-table::
   :header-rows: 1
   
   * - Modifier and Type
     - Method and Description
   
   * - public **void**
     - | :ref:`migrate <io_realm_RealmMigration_migrate>` (
       |  :ref:`DynamicRealm <io_realm_DynamicRealm>`  realm, 
       |  **long** oldVersion, 
       |  **long** newVersion
       | )
       
       
       This method will be called if a migration is needed.
       
       
       
   
   


Method Detail
=============

.. _migrate:

.. _migrate__:

.. _RealmMigration_migrate:

.. _RealmMigration_migrate__:

.. _io_realm_RealmMigration_migrate:

.. _io_realm_RealmMigration_migrate__:



migrate
-------

.. _io_realm_RealmMigration_migrate_io_realm_DynamicRealm_long_long_:

.. _io_realm_RealmMigration_migrate_io_realm_DynamicRealm__long__long_:

.. _io_realm_RealmMigration_migrate_DynamicRealm_long_long_:

.. _io_realm_RealmMigration_migrate_DynamicRealm__long__long_:

.. _migrate_io_realm_DynamicRealm_long_long_:

.. _migrate_io_realm_DynamicRealm__long__long_:

.. _migrate_DynamicRealm_long_long_:

.. _migrate_DynamicRealm__long__long_:

.. _RealmMigration_migrate_io_realm_DynamicRealm_long_long_:

.. _RealmMigration_migrate_io_realm_DynamicRealm__long__long_:

.. _RealmMigration_migrate_DynamicRealm_long_long_:

.. _RealmMigration_migrate_DynamicRealm__long__long_:

.. list-table::
   :header-rows: 1
   
   * - | public **void** :ref:`migrate <io_realm_RealmMigration_migrate>` (
       |  :ref:`DynamicRealm <io_realm_DynamicRealm>`  realm, 
       |  **long** oldVersion, 
       |  **long** newVersion
       | )
       
       
       
   
   * - This method will be called if a migration is needed. The entire method is wrapped in a write transaction so it is possible to create, update or delete any existing objects without wrapping it in your own transaction.
       
       
       
       
       **Parameters**
       
       - ``realm`` - the Realm schema on which to perform the migration.
          
          
          
       - ``oldVersion`` - the schema version of the Realm at the start of the migration.
          
          
          
       - ``newVersion`` - the schema version of the Realm after executing the migration.
          
          
          
       
       
       
       
       
       
       
       
       
   
   



