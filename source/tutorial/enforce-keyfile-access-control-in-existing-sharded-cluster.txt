=================================================
Enforce Keyfile Access Control in Sharded Cluster
=================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------

Enforcing access control on a :term:`sharded cluster` requires configuring:

- Security between components of the cluster using
  :doc:`Internal Authentication</core/security-internal-authentication>`.

- Security between connecting clients and the cluster using
  :doc:`/core/authorization`.

For this tutorial, each member of the sharded cluster *must* use the same
internal authentication mechanism and settings. This means enforcing internal
authentication on each :program:`mongos` and :program:`mongod` in the cluster.

The following tutorial uses a :ref:`keyfile <internal-auth-keyfile>` to
enable internal authentication.

Enforcing internal authentication also enforces user access control. To
connect to the replica set, clients like the :program:`mongo` shell need to
use a :doc:`user account</core/authorization>`. See
:ref:`security-shardClust-enforce-access-control`.

CloudManager and OpsManager
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If Cloud Manager or Ops Manager is managing your deployment, internal
authentication is automatically enforced.

To configure Access Control on a
managed deployment, see: ``Configure Access Control for MongoDB Deployments``
in the :mms-docs:`Cloud Manager manual
</tutorial/edit-host-authentication-credentials>`
or in the :opsmgr:`Ops Manager manual
</tutorial/edit-host-authentication-credentials>`.

Considerations
--------------

Operating System
~~~~~~~~~~~~~~~~

This tutorial primarily refers to the :program:`mongod` process.
Windows users should use the :program:`mongod.exe` program instead.

Keyfile Security
~~~~~~~~~~~~~~~~

Keyfiles are bare-minimum forms of security and are best suited for testing or
development environments. For production environments we recommend using
:doc:`x.509 certificates</core/security-x.509>`.

.. _security-shardClust-enforce-access-control:

Access Control
~~~~~~~~~~~~~~

The users created in this tutorial are best suited for learning or evaluation
environments, and should *not* be used in development or production
environments. See :ref:`security-checklist-role-based-access-control` for best
practices for user creation and management.

This tutorial covers creating the minimum number of administrative
users on the ``admin`` database *only*. See the
:doc:`/tutorial/manage-users-and-roles` tutorial for instructions on
creating additional users for administrative or client access.

This tutorial uses the default :doc:`/core/security-scram-sha-1`
authentication mechanism. Challenge-response security mechanisms are
bare-minimum forms of security and are best suited for testing or
development environments. For production environments we recommend using
:doc:`x.509 certificates</core/security-x.509>`.

Users
~~~~~

Cluster users exist in the cluster and perform cluster-level operations. You
cannot use a cluster user to connect to an individual shard.

Shard-local users exist in each individual shard and perform shard-level
operations. You cannot connect to the cluster or perform cluster-level
operations with shard-local users. Shard-local users are primarily for
maintenance operations within the shard.

See the :doc:`/core/security-users` security documentation for more
information.

Downtime
~~~~~~~~

Upgrading a sharded cluster to enforce access control requires downtime.

Procedures
----------

.. _security-update-existing-sharded-deployment-with-auth:

Enforce Keyfile Internal Authentication on Existing Sharded Cluster Deployment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/enable-authentication-in-sharded-cluster.rst


x.509 Internal Authentication
-----------------------------

For details on using x.509 for internal authentication, see
:doc:`/tutorial/configure-x509-member-authentication`.

To upgrade from keyfile internal authentication to x.509 internal
authentication, see
:doc:`/tutorial/upgrade-keyfile-to-x509`.

.. seealso::

   :doc:`/core/sharded-cluster-architectures-production`

   :doc:`/core/sharded-cluster-requirements`
