=============================================
Rotate Keys for Self-Managed Sharded Clusters
=============================================

.. meta::
   :keywords: on-prem

.. default-domain:: mongodb

Sharded cluster members can use :ref:`keyfiles <internal-auth-keyfile>`
to authenticate each other as memers of the same deployment.

.. include:: /includes/fact-keyfile-common-key.rst

The following tutorial steps through the process to update, without any
downtime, the key for a sharded cluster. [#exclude-encryption-keyfile]_

.. warning::

   The example keys in this tutorial are for illustrative purposes
   only. Do :red:`NOT` use for your deployement. Instead, generate a
   keyfile using any method you choose (e.g. ``openssl rand -base64
   756``, etc.).

Consider a sharded cluster where each member's keyfile contains the
following key:

.. figure:: /images/example-key1.png
   :alt: Image of current key to replace.
   :figwidth: 568px

The following procedure updates the sharded cluster members to use a
new key:

.. figure:: /images/example-key2.png
   :alt: Image of new key.
   :figwidth: 568px

.. [#exclude-encryption-keyfile]

   This tutorial is not applicable to the :ref:`keyfile
   <encrypt-local-key-mgmt>` used for the :doc:`MongoDB's encrypted
   storage engine </core/security-encryption-at-rest>` local key
   management. That :ref:`keyfile <encrypt-local-key-mgmt>` can only
   contain a single key.

Before You Begin
----------------

.. include:: /includes/dSO-role-intro.rst

.. include:: /includes/dSO-warning.rst

Procedure
---------

1. Modify the Keyfile to Include Old and New Keys
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Modify each member's keyfile to include both the old and new keys.

.. warning::

   The example keys in this tutorial are for illustrative purposes
   only. Do :red:`NOT` use for your deployement. Instead, generate a
   keyfile using any method you choose (e.g. ``openssl rand -base64
   756``, etc.).

You can specify multiple key strings as a sequence of key strings (optionally 
enclosed in quotes):

.. figure:: /images/example-multiple-keys2.png
   :alt: Image of multiple key string sequence.
   :figwidth: 600px

1. Restart Each Member
~~~~~~~~~~~~~~~~~~~~~~

Once all the keyfiles contain both the old and new keys, restart each
member one at a time.

Config Servers
``````````````

**For each secondary of the config server replica set (CSRS)**,
connect :binary:`~bin.mongosh` to the member and:

a. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

b.   Restart the member.

**For the primary**, connect :binary:`~bin.mongosh` to the member and

a. Use :method:`rs.stepDown()` to step down the member:

   .. code-block:: javascript

      rs.stepDown()


#. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

#. Restart the member.

Shard Replica Sets
``````````````````

**For each secondary member of the shard replica sets**, connect
:binary:`~bin.mongosh` to the member and:

a. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

b.   Restart the member.

**For the primary of each shard replica set**, connect
:binary:`~bin.mongosh` to the member and

a. Use :method:`rs.stepDown()` to step down the member:

   .. code-block:: javascript

      rs.stepDown()


#. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

#. Restart the member.


``mongos`` Routers
``````````````````

**For each mongos/router instance**, connect
:binary:`~bin.mongosh` to the :binary:`~bin.mongos` instance and:

a. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

b.   Restart the member.

Once all members have been restarted, the members now accept either the
old or new key for membership authentication.

3. Update Keyfile Content to the New Key Only
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. warning::

   The example keys in this tutorial are for illustrative purposes
   only. Do :red:`NOT` use for your deployement. Instead, generate a
   keyfile using any method you choose (e.g. ``openssl rand -base64
   756``, etc.).

Modify each member's keyfile to include only the new password.

.. figure:: /images/example-key2.png
   :alt: Image of new key.
   :figwidth: 558px

4. Restart Each Member
~~~~~~~~~~~~~~~~~~~~~~

Once all the keyfiles contain the new key only, restart each member one
at a time.

Config Servers
``````````````

**For each secondary of the config server replica set (CSRS)**,
connect :binary:`~bin.mongosh` to the member and:

a. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

b.   Restart the member.

**For the primary**, connect :binary:`~bin.mongosh` to the member and

a. Use :method:`rs.stepDown()` to step down the member:

   .. code-block:: javascript

      rs.stepDown()


#. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

#. Restart the member.

Shard Replica Sets
``````````````````

**For each secondary member of the shard replica sets**, connect
:binary:`~bin.mongosh` to the member and:

a. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

b.   Restart the member.

**For the primary of each shard replica set**, connect
:binary:`~bin.mongosh` to the member and

a. Use :method:`rs.stepDown()` to step down the member:

   .. code-block:: javascript

      rs.stepDown()


#. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

#. Restart the member.

``mongos`` Routers
``````````````````

**For each mongos/router instance**, connect
:binary:`~bin.mongosh` to the :binary:`~bin.mongos` instance and:

a. Use the :method:`db.shutdownServer()` method to shut down the member:

   .. code-block:: javascript

      use admin
      db.shutdownServer()

b.   Restart the member.

Once all members have been restarted, the members now accept only the
new key for membership authentication.
