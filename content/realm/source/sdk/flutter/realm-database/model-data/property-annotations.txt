.. meta::
   :robots: noindex, nosnippet

.. _flutter-property-annotations:

==================================
Property Annotations - Flutter SDK
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can use annotations to add functionality to properties in your Realm object models.

.. _flutter-required-optional-properties:

Required and Optional Properties
--------------------------------

In Dart, value types are implicitly non-nullable, but can be made optional (nullable) by appending
`?  <https://dart.dev/null-safety>`__. Include ``?`` to make properties optional.

.. literalinclude:: /examples/generated/flutter/schemas.snippet.property-annotations.dart
   :language: dart
   :emphasize-lines: 5

.. _flutter-default-field-values:

Default Field Values
--------------------

You can use the built-in language features to assign a default value to a property.
Assign a default value in the property declaration.

.. literalinclude:: /examples/generated/flutter/schemas.snippet.property-annotations.dart
   :language: dart
   :emphasize-lines: 7

.. _flutter-primary-key:

Primary Keys
------------

The `PrimaryKey <https://pub.dev/documentation/realm_common/latest/realm_common/PrimaryKey-class.html>`__
annotation indicates a primary key property.
The primary key is a unique identifier for an object in a realm.
No other objects of the same type may share an object's primary key.

Important aspects of primary keys:

- You cannot change a primary key after adding an object to a realm.
- Only add a primary key to one property in a RealmModel.
- Only ``String``, ``int``, ``ObjectId``, and ``Uuid`` types can be primary keys.
- Realm automatically indexes primary keys.
- Primary keys are nullable. ``null`` can only be the primary key of one object
  in a collection.

.. literalinclude:: /examples/generated/flutter/schemas.snippet.property-annotations.dart
   :language: dart
   :emphasize-lines: 2-3

.. _flutter-map-property:

Map a Property or Class to a Different Name
-------------------------------------------

The `MapTo <https://pub.dev/documentation/realm_common/latest/realm_common/MapTo-class.html>`__ annotation
indicates that a model or property should be persisted under a different name.
It's useful when opening a Realm across different bindings where code style 
conventions can differ. For example:

- To make it easier to work across platforms where naming conventions 
  differ. For example, if your Device Sync schema property names use snake 
  case, while your project uses camel case.
- To change a class or field name without forcing a migration.

.. tabs::

   .. tab:: Map a Class Name
      :tabid: remap-class

      .. literalinclude:: /examples/generated/flutter/define_realm_model_test.snippet.map-to.dart
         :language: dart
         :emphasize-lines: 2

   .. tab:: Map a Property Name
      :tabid: remap-property

      .. literalinclude:: /examples/generated/flutter/schemas.snippet.property-annotations.dart
         :language: dart
         :emphasize-lines: 15-16

.. _flutter-ignore-property:

Ignore Properties from Realm Schema
-----------------------------------

If you add the `Ignored <https://pub.dev/documentation/realm_common/latest/realm_common/Ignored-class.html>`__
annotation to a property in your ``RealmModel``, the :ref:`realm object generator
<flutter-generate-realm-object>` doesn't include the property in the ``RealmObject`` schema
or persist it to Realm.

.. literalinclude:: /examples/generated/flutter/schemas.snippet.property-annotations.dart
   :language: dart
   :emphasize-lines: 9-10

.. _flutter-index-property:

Index Properties
----------------

Add the `Indexed
<https://pub.dev/documentation/realm_common/latest/realm_common/Indexed-class.html>`__
annotation to create an index on the field. Indexes can greatly speed up some
queries at the cost of slightly slower write times and additional storage and
memory overhead. Realm stores indexes on disk, which makes your realm
files larger. Each index entry is a minimum of 12 bytes. Indexes can be nullable.

The following data types can be indexed:

- ``bool``
- ``int``
- ``String``
- ``ObjectId``
- ``Uuid``
- ``DateTime``
- ``RealmValue``

.. literalinclude:: /examples/generated/flutter/schemas.snippet.property-annotations.dart
   :language: dart
   :emphasize-lines: 12-13

.. _flutter-fts-annotation:

Full-Text Search Indexes
~~~~~~~~~~~~~~~~~~~~~~~~

In addition to standard indexes, Realm also supports Full-Text Search (FTS)
indexes on string properties. While you can query a string field with or without 
a standard index, an FTS index enables searching for multiple words and phrases 
and excluding others.

For more information on querying FTS indexes, see :ref:`Filter with Full-Text Search <flutter-fts>`.

To create an FTS index on a property, use the `@Indexed 
<https://pub.dev/documentation/realm_common/latest/realm_common/Indexed-class.html>`__
annotation and specify the `RealmIndexType <https://pub.dev/documentation/realm_common/latest/realm_common/RealmIndexType.html>`__ 
as ``fullText``. This enables full-text queries on the property. In the 
following example, we mark the pattern and material properties with the FTS annotation:

.. literalinclude:: /examples/generated/flutter/full_text_search_test.snippet.flutter-fts-annotation.dart
   :language: dart
   :emphasize-lines: 6-10

