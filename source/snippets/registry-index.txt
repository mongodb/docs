
.. _snip-manual-reg-index:

=====================================
Create a Registry Index File Manually 
=====================================

.. meta::
   :description: Learn how to manually create a registry index file for MongoDB Shell snippets using TypeScript.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. warning:: Experimental feature

   .. include:: /includes/warnings/warn-experimental-feature.rst

This page discusses how to manually create a registry index file. To
generate the registry index file using a script, see :ref:`Create a
Registry Index File <snip-make-a-registry-index>`. 

To create the registry index file:

#. Copy the following TypeScript template and save it as ``make-index.ts``:

   .. code-block:: typescript

      import bson from 'bson';
      import zlib from 'zlib';

      interface ErrorMatcher {
         // Add additional information to shell errors matching one of the regular.
         // expressions. The message can point to a snippet helping solve that error.
         matches: RegExp[];
         message: string;
      }

      interface SnippetDescription {
         // The *npm* package name. Users do not interact with this.
         name: string;

         // The snippet name. This is what users interact with.
         snippetName: string;

         // An optional install specifier that can be used to point npm towards
         // packages that are not uploaded to the registry. For example,
         // this could be an URL to a git repository or a tarball.
         installSpec?: string;

         // A version field. Users do not interact with this, as currently, `snippet`
         // always installs the latest versions of snippets.
         version: string;
         description: string;
         readme: string;

         // License should be a SPDX license identifier.
         license: string;
         errorMatchers?: ErrorMatcher[];
      }

      interface SnippetIndexFile {
         // This must be 1 currently.
         indexFileVersion: 1;
         index: SnippetDescription[];
         metadata: { homepage: string };
      }

      const indexFileContents: SnippetIndexFile = {
         indexFileVersion: 1,
         index: [ /* ... */ ],
         metadata: { homepage: 'https://example.com' }
      };

      // Serialize, compress and store the index file:
      fs.writeFileSync('index.bson.br',
         zlib.brotliCompressSync(
         bson.serialize(indexFileContents)));

#. Edit ``make-index.ts`` as needed for your snippet package. Use the
   comments as a guide to filling out the required information.
#. Run ``ts-node make-index.ts`` to create the ``index.bson.br file``.
#. Upload ``index.bson.br`` to your GitHub repository.
#. Update ``snippetIndexSourceURLs`` to include a URL that references
   your ``index.bson.br``.

