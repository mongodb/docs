===
$in
===

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. query:: $in

   *Syntax*: ``{ field: { $in: [<value1>, <value2>, ... <valueN> ] } }``

   :query:`$in` selects the documents where the ``field`` value
   equals any value in the specified array (e.g. ``<value1>``,
   ``<value2>``, etc.)

   Consider the following example:

   .. code-block:: javascript

      db.inventory.find( { qty: { $in: [ 5, 15 ] } } )

   This query selects all documents in the ``inventory``
   collection where the ``qty`` field value is either ``5`` or
   ``15``. Although you can express this query using the
   :query:`$or` operator, choose the :query:`$in` operator rather
   than the :query:`$or` operator when performing equality checks on
   the same field.

   If the ``field`` holds an array, then the :query:`$in` operator
   selects the documents whose ``field`` holds an array that contains
   at least one element that matches a value in the specified array
   (e.g. ``<value1>``, ``<value2>``, etc.)

   Consider the following example:

   .. code-block:: javascript

      db.inventory.update( { tags: { $in: ["appliances", "school"] } }, { $set: { sale:true } } )

   This :method:`update() <db.collection.update()>` operation will set
   the ``sale`` field value in the ``inventory`` collection where the
   ``tags`` field holds an array with at least one element matching an
   element in the array ``["appliances", "school"]``.

   .. seealso::

      :method:`find() <db.collection.find()>`, :method:`update()
      <db.collection.update()>`, :query:`$or`, :update:`$set`.
