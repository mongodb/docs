.. meta::
   :robots: noindex, nosnippet

.. _node-data-types-sets:

==================
Sets - Node.js SDK
==================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.5.0

Overview
--------
A **Realm Set** is a special object that allows you to store a
collection of unique values. **Realm Sets** are based on JavaScript
:mdn:`sets <Web/JavaScript/Reference/Global_Objects/Set>`, but can only contain
values of a single type and can only be modified within a write transaction.
Sets allow you to perform math operations such as finding the union,
intersection, or difference between two sets. To learn more about performing
these operations, see the MDN docs for :mdn:`Implementing basic set operations
<Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations>`.
   
.. _node-define-set-objects:

Realm Object Models
-------------------
To define a property type as a **Realm Set**, specify the data type
you want in the set, followed by ``<>``. For instance, for a set made of integer
values, specify ``"int<>"``. 

.. literalinclude:: /examples/generated/node/data-types.snippet.define-set-objects.js
   :language: javascript

.. _node-create-set-objects:

Create an Object With a Set
---------------------------
To create an object with a **Realm Set** property, you must create
the object within a write transaction. When defining your Realm
object, initialize the **Realm Set** by passing an empty array or an
array with your initial values.

.. literalinclude:: /examples/generated/node/data-types.snippet.create-set-objects.js
   :language: javascript


.. _node-add-items-to-set:

Add Items to a Set
------------------
To add an item to a set, pass the new value to the ``<Realm.Set>.add()`` method within a write transaction.

.. literalinclude:: /examples/generated/node/data-types.snippet.add-items-to-set.js
   :language: javascript

.. _node-check-if-set-has-items:

Check if a Set has Specific Items
---------------------------------
To determine if a set contains a particular value, pass the value to the ``<Realm.Set>.has()`` method. The
``set.has()`` method will return true if the set contains the value specified.

.. literalinclude:: /examples/generated/node/data-types.snippet.check-if-set-has-items.js
   :language: javascript

.. _node-check-set-size:

Check the Size of a Set
-----------------------
To discover how many items are in a set, you can check the set's ``size`` property.

.. literalinclude:: /examples/generated/node/data-types.snippet.check-set-size.js
   :language: javascript

.. _node-remove-specific-item-from-set:

Remove an Item from a Set
-------------------------
To remove a specific value from a set, pass the value to the ``<Realm.Set>.delete()`` method within a write transaction.

.. literalinclude:: /examples/generated/node/data-types.snippet.remove-specific-item-from-set.js
   :language: javascript


.. _node-remove-all-items-from-set:

Remove all Items from a Set
---------------------------
To clear the set, run the ``<Realm.Set>.clear()`` method within a write transaction.

.. literalinclude:: /examples/generated/node/data-types.snippet.remove-all-items-from-set.js
   :language: javascript

.. _node-traverse-set:

Traverse a Set
--------------
To traverse a set, use the ``<Realm.Set>.forEach()`` method or alternative :mdn:`iteration method
<Web/JavaScript/Reference/Global_Objects/Set#iteration_methods>`. 

.. literalinclude:: /examples/generated/node/data-types.snippet.traverse-a-set.js
   :language: javascript


.. example:: Traversing a Set in Order

   The order of the **Realm Set** may be different from the order that 
   the items were added.

   You can track the set order by updating an array when a new value is added. For example:

   .. literalinclude:: /examples/generated/node/data-types.snippet.make-array-with-insertion-order-from-set.js
      :language: javascript
