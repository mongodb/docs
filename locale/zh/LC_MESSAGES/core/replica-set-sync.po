#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-sync.txt:5
msgid "Replica Set Data Synchronization"
msgstr "复制集的数据同步"


#: ../source/core/replica-set-sync.txt:25

msgid "Initial Sync"
msgstr "初始同步"

#: ../source/core/replica-set-sync.txt:27
msgid ""
"Initial sync copies all the data from one member of the replica set to "
"another member. A member uses initial sync when the member has no data, such "
"as when the member is new, or when the member has data but is missing a "
"history of the set's replication."
msgstr ""
"初始同步会将完整的数据集复制到各个节点上。当一个节点没有数据的适合，就会进行"
"初始同步，比如，当它是新加的节点，或者它的数据已经无法通过复制追上最新的数据"
"了，也会进行初始同步。"

#: ../source/core/replica-set-sync.txt:32
msgid "When you perform an initial sync, MongoDB:"
msgstr ""

#: ../source/core/replica-set-sync.txt:34
msgid ""
"Clones all databases. To clone, the :program:`mongod` queries every "
"collection in each source database and inserts all data into its own copies "
"of these collections.  At this time, ``_id`` indexes are also built. The "
"clone process only copies valid data, omitting invalid documents."
msgstr ""
"复制所有的数据库。 :program:`mongod` 会查询所有的表和数据库，然后将所有的数据"
"插入这些表的备份中，同时也会建立_id的索引。"

#: ../source/core/replica-set-sync.txt:40
msgid ""
"Applies all changes to the data set. Using the oplog from the source, the :"
"program:`mongod` updates its data set to reflect the current state of the "
"replica set."
msgstr ""
"应用数据集中所有的数据变动。 :program:`mongod` 通过oplog来更新数据，从而让数"
"据集保持最新的状态。"

#: ../source/core/replica-set-sync.txt:44
msgid ""
"Builds all indexes on all collections (except ``_id`` indexes, which were "
"already completed)."
msgstr "建立所有表上的索引（除了_id ，这个之前已经建立完成）。"

#: ../source/core/replica-set-sync.txt:47
msgid ""
"When the :program:`mongod` finishes building all index builds, the member "
"can transition to a normal state, i.e. :term:`secondary`."
msgstr ""
"当 :program:`mongod` 完成了所有的索引的建立，该节点将会变为正常的状态i.e. :"
"term:`secondary`。"

#: ../source/core/replica-set-sync.txt:50
msgid ""
"When the clone process omits an invalid document from the sync, MongoDB "
"writes a message to the logs that begins with ``Cloner: found corrupt "
"document in <collection>``."
msgstr ""

#: ../source/core/replica-set-sync.txt:55
msgid ""
"To perform an initial sync, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""
"参见 :doc:`/tutorial/resync-replica-set-member` 以获得更多有关初始同步的信"
"息。"

#: ../source/core/replica-set-sync.txt:61
msgid "Replication"
msgstr "复制"


#: ../source/core/replica-set-sync.txt:89

msgid "Multithreaded Replication"
msgstr "多线复制"

#: ../source/core/replica-set-sync.txt:91
msgid ""
"MongoDB applies write operations in batches using multiple threads to "
"improve concurrency. MongoDB groups batches by namespace (:ref:`MMAPv1 "
"<storage-mmapv1>`) or by document id (:ref:`WiredTiger <storage-"
"wiredtiger>`) and simultaneously applies each group of operations using a "
"different thread. MongoDB always applies write operations to a given "
"document in their original write order."
msgstr ""
"MongoDB允许通过多线程进行批量写操作来提高并发能力。MongoDB将批操作通过命名空"
"间来分组，"

#: ../source/core/replica-set-sync.txt:98
msgid ""
"While applying a batch, MongoDB blocks all read operations. As a result, "
"secondary read queries can never return data that reflect a state that never"
" existed on the primary."
msgstr ""

#: ../source/core/replica-set-sync.txt:103
msgid "Pre-Fetching Indexes to Improve Replication Throughput"
msgstr ""

#: ../source/core/replica-set-sync.txt:106
msgid "Applies to MMAPv1 only."
msgstr ""

#: ../source/core/replica-set-sync.txt:108
msgid ""
"With the :ref:`MMAPv1 <storage-mmapv1>` storage engine, MongoDB fetches "
"memory pages that hold affected data and indexes to help improve the "
"performance of applying oplog entries. This *pre-fetch* stage minimizes the "
"amount of time MongoDB holds write locks while applying oplog entries. By "
"default, secondaries will pre-fetch all :ref:`indexes`."
msgstr ""

#: ../source/core/replica-set-sync.txt:114
msgid ""
"Optionally, you can disable all pre-fetching or only pre-fetch the index on "
"the ``_id`` field. See the :setting:`~replication.secondaryIndexPrefetch` "
"setting for more information."
msgstr ""

#: ../source/core/replica-set-sync.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/replica-set-sync.txt:15
msgid ""
"In order to maintain up-to-date copies of the shared data set, secondary "
"members of a replica set :term:`sync` or replicate data from other members. "
"MongoDB uses two forms of data synchronization: :ref:`initial sync <replica-"
"set-initial-sync>` to populate new members with the full data set, and "
"replication to apply ongoing changes to the entire data set."
msgstr ""

#: ../source/core/replica-set-sync.txt:63
msgid ""
"Secondary members replicate data continuously after the initial sync. "
"Secondary members copy the :doc:`oplog </core/replica-set-oplog>` from their"
" *sync from* source and apply these operations in an asynchronous process."
msgstr ""

#: ../source/core/replica-set-sync.txt:68
msgid ""
"In most cases, secondaries sync from the primary. Secondaries may "
"automatically change their *sync from* source if needed based on changes in "
"the ping time and state of other members' replication."
msgstr ""

#: ../source/includes/fact-voting-node-sync-incompatibility.rst:1
msgid ""
"MongoDB 3.2 replica set members with :rsconf:`1 vote <members[n].votes>` "
"cannot sync from members with  :rsconf:`0 votes <members[n].votes>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:76
msgid ""
"Secondaries avoid syncing from :ref:`delayed members <replica-set-delayed-"
"members>` and :ref:`hidden members <replica-set-hidden-members>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:80
msgid ""
"If a secondary member has :rsconf:`members[n].buildIndexes` set to ``true``,"
" it can only sync from other members where "
":rsconf:`~members[n].buildIndexes` is ``true``. Members where "
":rsconf:`~members[n].buildIndexes` is ``false`` can sync from any other "
"member, barring other sync restrictions. :rsconf:`~members[n].buildIndexes` "
"is ``true`` by default."
msgstr ""

#~ msgid ""
#~ "In order to maintain up-to-date copies of the shared data set, members of a "
#~ "replica set :term:`sync` or replicate data from other members. MongoDB uses "
#~ "two forms of data synchronization: :ref:`initial sync <replica-set-initial-"
#~ "sync>` to populate new members with the full data set, and replication to "
#~ "apply ongoing changes to the entire data set."
#~ msgstr ""

#~ msgid ""
#~ "Replica set members replicate data continuously after the initial sync. This"
#~ " process keeps the members up to date with all changes to the replica set's "
#~ "data. In most cases, secondaries synchronize from the primary. Secondaries "
#~ "may automatically change their *sync targets* if needed based on changes in "
#~ "the ping time and state of other members' replication."
#~ msgstr ""

#~ msgid ""
#~ "For a member to sync from another, both members must have the same value for"
#~ " the :data:`~replSetGetConfig.members[n].buildIndexes` setting."
#~ msgstr ""

#~ msgid ""
#~ "Beginning in version 2.2, secondaries avoid syncing from :ref:`delayed "
#~ "members <replica-set-delayed-members>` and :ref:`hidden members <replica-"
#~ "set-hidden-members>`."
#~ msgstr ""

#~ msgid "Validity and Durability"
#~ msgstr ""

#~ msgid ""
#~ "In a replica set, the set can have at most one primary and only the primary "
#~ "can accept write operations. [#edge-cases-2-primaries]_ Secondaries apply "
#~ "operations from the primary asynchronously to provide :term:`eventual "
#~ "consistency`."
#~ msgstr ""

#~ msgid ""
#~ ":term:`Journaling <journal>` provides single-instance write durability. "
#~ "Without journaling, if a MongoDB instance terminates ungracefully, you must "
#~ "assume that the database is in an invalid state."
#~ msgstr ""

#~ msgid ""
#~ "In MongoDB, clients can see the results of writes before they are made "
#~ "durable:"
#~ msgstr ""

#~ msgid ""
#~ "Regardless of :doc:`write concern </reference/write-concern>`, other clients"
#~ " can see the result of the write operations before the write operation is "
#~ "acknowledged to the issuing client."
#~ msgstr ""

#~ msgid ""
#~ "Clients can read data which may be subsequently :doc:`rolled back </core"
#~ "/replica-set-rollbacks>`."
#~ msgstr ""

#~ msgid ""
#~ "In some circumstances, two nodes in a replica set may *transiently* believe "
#~ "that they are the primary, but at most, one of them will be able to complete"
#~ " writes with :ref:`{w: majority} write concern <wc-w>`. The node that can "
#~ "complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the "
#~ "other node is a former primary that has not yet recognized its demotion, "
#~ "typically due to a :term:`network partition`. When this occurs, clients that"
#~ " connect to the former primary may observe stale data despite having "
#~ "requested read preference :readmode:`primary`."
#~ msgstr ""
