stepnum: 1
level: 4
source:
  file: steps-source-update-automation-configuration.yaml
  ref: check-automation-config
replacement:
  variables: "Variables for Automation Config API Resources"
---
stepnum: 2
level: 4
title: "Create a new automation configuration file from the current one."
ref: new-auto-config
content: |

  Replace the variables in the following command and run it:

  .. code-block:: sh

  sed -e "/autoPwd/a\\    \"newAutoPwd\" : \"<NEW_OPS_MANAGER_AUTOMATION_PASSWORD>\"," -e 's/  "version" : <CURRENT_AUTOMATION_CONFIGURATION_VERSION>/  "version" : <NEW_AUTOMATION_CONFIGURATION_VERSION>/' currentAutomationConfig.json > modifiedAutomationConfig.json

  .. list-table::
  :widths: 40 60
  :header-rows: 1

  * - Name
    - Description

  * - ``<NEW_OPS_MANAGER_AUTOMATION_PASSWORD>``
    - Specify the new {+aagent+} password.

  * - ``<CURRENT_AUTOMATION_CONFIGURATION_VERSION>``
    - Specify the current {+aagent+} version.

      .. note::

         To check your current {+aagent+} version, 
         :ref:`get-auto-config`.

  * - ``<NEW_AUTOMATION_CONFIGURATION_VERSION>``
    - Specify the current {+aagent+} version incremented by 1. For   
      example, if you have a current {+aagent+} version of ``4``, 
      the new {+aagent+} version should be ``5``.

---
stepnum: 3
level: 4
title: "Send the updated automation configuration."
ref: send-new-auto-config
replacement:
  variables: "Variables for Automation Config API Resources"
content: |
 
  Use the :doc:`automationConfig </reference/api/automation-config>`
  resource to send the updated automation configuration.

  Issue the following command, pointing to the 
  ``modifiedAutomationConfig.json`` file created in the previous step, 
  which contains the updated configuration document. Replace the 
  placeholders with the `{{variables}}`_.

  .. code-block:: sh

     curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
          --header "Content-Type: application/json"
          --request PUT "https://{+opsmgr-url+}/api/public/v1.0/groups/{PROJECT-ID}/automationConfig?pretty=true" \
          --data '@modifiedAutomationConfig.json'

  Upon successful update of the configuration, the API returns the HTTP
  ``200 OK`` status code to indicate the request has succeeded.
---
stepnum: 4
level: 4
title: Confirm successful update of the automation configuration.
ref: confirm-new-auto-config
replacement:
  variables: "Variables for Automation Config API Resources"
content: |

  Retrieve the automation configuration from |mms| and confirm it
  contains the changes. To retrieve the configuration, issue the
  following command, replacing the placeholders with the
  `{{variables}}`_.

  .. code-block:: sh

     curl --user "{PUBLIC-KEY}:{PRIVATE-KEY}" --digest \
          --request GET "https://{+opsmgr-url+}/api/public/v1.0/groups/{PROJECT-ID}/automationConfig?pretty=true"

  .. note::

  The {+aagent+} version automatically increments two times. For 
  example,  if you pushed the new {+aagent+} version as 5, the new 
  {+aagent+} version after all changes is 7. The {+aagent+} 
  updates the {+aagent+} user password on all managed MongoDB 
  Server deployments.

---
stepnum: 5
level: 4
source:
  file: steps-source-update-automation-configuration.yaml
  ref: check-deployment-status
replacement:
  variables: "Variables for Automation Config API Resources"
...
