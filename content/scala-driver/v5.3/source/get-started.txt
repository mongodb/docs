.. _scala-get-started:

=================================
Get Started with the Scala Driver
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: tutorial
 
.. meta::
   :description: Learn how to create an app to connect to MongoDB deployment by using the Scala driver.
   :keywords: quick start, tutorial, basics, setup, code example, cloud, host, atlas, uri, test connection, runnable, learn

Overview
--------

The {+driver-long+} is an asynchronous API built upon the Java Reactive Streams driver,
which you can use to connect to MongoDB and interact with data stored in your deployment.
This guide shows you how to create an application that uses the {+driver-short+} to
connect to a MongoDB cluster hosted on MongoDB Atlas and query data in your cluster.

.. tip:: 

   MongoDB Atlas is a fully managed cloud database service that hosts your MongoDB
   deployments. You can create your own free (no credit card required) MongoDB Atlas 
   deployment by following the steps in this guide.

Follow this guide to connect a sample Scala application to a MongoDB Atlas
deployment. If you prefer to connect to MongoDB using a different driver or
programming language, see our :driver:`list of official drivers <>`.

.. _scala-quick-start-download-and-install:

Download and Install
--------------------

.. procedure::
   :style: connected

   .. step:: Install dependencies

      Before you being developing, ensure you have the following dependencies
      installed in your development environment:
      
      - `JDK <https://www.oracle.com/java/technologies/downloads/>`__ version 8 or later
      - `sbt <https://www.scala-sbt.org/1.x/docs/Setup.html>`__ version 1 or later

   .. step:: Create a project directory

      Run the following command in your shell to create a directory
      called ``scala-quickstart`` for this project:

      .. code-block:: bash

         mkdir scala-quickstart

      Select the tab corresponding to your operating system and run the following commands
      to create a ``build.sbt`` file in the ``scala-quickstart`` directory:

      .. tabs::

          .. tab:: macOS / Linux
             :tabid: create-file-mac-linux

             .. code-block:: bash

                cd scala-quickstart
                touch build.sbt

          .. tab:: Windows
             :tabid: create-file-windows

             .. code-block:: bash

                cd scala-quickstart
                type nul > build.sbt

   .. step:: Configure your project to use the {+driver-short+}

      Navigate to your ``build.sbt`` file and add the following code to use
      the {+driver-short+} in your application:

      .. code-block:: none
         
         ThisBuild / scalaVersion := "{+language-version+}"
         libraryDependencies += "org.mongodb.scala" %% "mongo-scala-driver" % "{+full-version+}"

      This code configures your application to use Scala version {+language-version+} and
      {+driver-short+} version {+full-version+}.

After you complete these steps, you have a new project directory with the driver
dependencies installed.

.. _scala-create-deployment:

Create a MongoDB Deployment
---------------------------

You can create a free tier MongoDB deployment on MongoDB Atlas
to store and manage your data. MongoDB Atlas hosts and manages
your MongoDB database in the cloud.

.. procedure::
   :style: connected

   .. step:: Create a free MongoDB deployment on Atlas

      Complete the :atlas:`Get Started with Atlas </getting-started>`
      guide to set up a new Atlas account and load sample data into a new free
      tier MongoDB deployment.
      
   .. step:: Save your credentials

      After you create your database user, save that user's 
      username and password to a safe location for use in an upcoming step.
  
After you complete these steps, you have a new free tier MongoDB
deployment on Atlas, database user credentials, and sample data loaded
into your database.

.. _scala-connection-string:

Create a Connection String
--------------------------

You can connect to your MongoDB deployment by providing a
**connection URI**, also called a *connection string*, which
instructs the driver on how to connect to a MongoDB deployment
and how to behave while connected.

The connection string includes the hostname or IP address and 
port of your deployment, the authentication mechanism, user credentials 
when applicable, and connection options.

To learn how to connect to an instance or deployment not hosted on Atlas, see the
:ref:`scala-connection-targets` guide.

.. procedure::
   :style: connected

   .. step:: Find your MongoDB Atlas Connection String

      To retrieve your connection string for the deployment that
      you created in the :ref:`previous step <scala-create-deployment>`,
      log in to your Atlas account and navigate to the
      :guilabel:`Database` section and click the :guilabel:`Connect` button
      for your new deployment.

      .. figure:: /includes/figures/atlas_connection_select_cluster.png
         :alt: The connect button in the clusters section of the Atlas UI

      Then, select the :guilabel:`Drivers` option under the :guilabel:`Connect to your application`
      header. Select "Scala" from the :guilabel:`Driver` selection
      menu and the version that best matches the version you installed
      from the :guilabel:`Version` selection menu.

   .. step:: Copy your Connection String

      Click the button on the right of the connection string to copy it
      to your clipboard, as shown in the following screenshot:

      .. figure:: /includes/figures/atlas_connection_copy_string_scala.png
         :alt: The copy button next to the connection string in the Atlas UI

   .. step:: Update the Placeholders

      Paste this connection string into a file in your preferred text editor
      and replace the ``<db_username>`` and ``<db_password>`` placeholders with
      your database user's username and password.
      
      Save this file to a safe location for use in the next step.

After you complete these steps, you have a connection string that
corresponds to your Atlas cluster.

.. _scala-connect-to-mongodb:

Connect to MongoDB
------------------

After retrieving the connection string for your MongoDB Atlas deployment,
you can connect to the deployment from your Scala application and query
the Atlas sample datasets.

.. procedure::
   :style: connected

   .. step:: Create an application file

      Navigate to the ``scala-quickstart`` directory that you made in the
      :ref:`scala-quick-start-download-and-install` step of this guide and
      create the ``src/main/scala/quickstart`` nested directories.

      Select the tab corresponding to your operating system and run the following
      commands to create a ``Main.scala`` file in the ``quickstart`` subdirectory:

      .. tabs::

          .. tab:: macOS / Linux
             :tabid: create-file-mac-linux

             .. code-block:: bash

                cd src/main/scala/quickstart
                touch Main.scala

          .. tab:: Windows
             :tabid: create-file-windows

             .. code-block:: bash

                cd src/main/scala/quickstart
                type nul > Main.scala

   .. step:: Add helper methods

      Add the following ``Helpers.scala`` file from the `driver source code
      <https://github.com/mongodb/mongo-java-driver/blob/main/driver-scala/src/integration/scala/tour/Helpers.scala>`__
      to the ``src/main/scala/quickstart`` directory:

      .. literalinclude:: /includes/get-started/Helpers.scala
         :language: scala

      This file allows you to access helper methods for printing query results.

   .. step:: Add your application code

      Copy and paste the following code into the ``Main.scala`` file, which queries
      the ``movies`` collection in the ``sample_mflix`` database:

      .. literalinclude:: /includes/get-started/Main.scala
         :language: scala

   .. step:: Assign the connection string

      Replace the ``<connection string>`` placeholder with the 
      connection string that you copied from the :ref:`scala-connection-string`
      step of this guide.

   .. step:: Run your Scala application

      In your project root directory, run the following commands to start the sbt shell
      and run your application:
      
      .. code-block:: bash

         sbt
         run

      The command line output contains details about the retrieved movie
      document:

      .. code-block:: none
         :copyable: false

         {"_id": {"$oid": "..."}, ... , "genres": ["Crime", "Drama"], "rated": "R",
         "metacritic": 80, "title": "The Shawshank Redemption", ... }

      If you encounter an error or see no output, ensure that you specified the
      proper connection string in the ``Main.scala`` file and that you loaded
      the sample data.

      .. tip::

         You can exit the sbt shell by running the following command:

         .. code-block:: none

            exit

After you complete these steps, you have a Scala application that
connects to your MongoDB deployment, runs a query on the sample
data, and returns a matching document.

.. _scala-quick-start-next-steps:

Next Steps
----------

Congratulations on completing the quick start tutorial!

In this tutorial, you created a {+language+} application that
connects to a MongoDB deployment hosted on MongoDB Atlas
and retrieves a document that matches a query.

Learn more about {+driver-short+} from the following resources:

- Learn how to perform read operations in the :ref:`<scala-read>` section.

- Learn how to perform write operations in the :ref:`<scala-write>` section.

.. include:: /includes/get-started/troubleshoot.rst