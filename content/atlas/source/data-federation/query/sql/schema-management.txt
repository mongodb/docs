.. _sql-schema-management:

=================
Schema Management
=================

.. meta::
   :description: Manage Atlas SQL schemas for MongoDB data, including automatic generation, manual updates, and deletion using Atlas Data Federation.

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _sql-schema-overview:

{+asql+} schemas are JSON schemas that describe data as it exists in 
MongoDB, including its polymorphism, sparseness, and nested, structured 
data. {+adf+} can automatically generate a schema by sampling data from 
documents in your collection or view.
{+asql+} schemas are necessary when connecting SQL-based tools to |service| data sources.

{+asql+} leverages {+adf+} as its query engine.
Configure {+asql+} schemas on the federated database level.

After creating a SQL Connection, verify that an {+asql+} schema is in place.
For Quick Start {+asql+} set up, {+adf+} automatically generates a schema by sampling data from documents in your collection or view.
For advanced configuration set up of {+asql+},
generate an {+asql+} for any {+adf+} collection you wish to analyze from a SQL-based tool.

If you :ref:`rename <adf-rename-collection-cmd>` a collection or view 
that already has a schema, the schema is also renamed.

In addition, for wildcard (``*``) collections, {+adf+} generates a 
schema when it discovers the collections in the :ref:`namespace catalog
<manage-ns-catalog-cli>` for the wildcard (``*``) collections.

Manage Schemas
--------------

You can manually :ref:`generate <sqlschema-create>` schemas for all collections and views,
:ref:`set <sqlschema-edit>` or schedule updates for schemas, 
and :ref:`view <sqlschema-view>` stored schemas using the UI or ``mongosh``.
You can also :ref:`schedule <sqlschema-schedule>` recurring schema updates.

You can manually delete a schema for a collection or view by running 
the :ref:`sqlsetschema-cmd` command with an empty schema document. 
{+df+} automatically removes the schema for a collection or view when 
you:

- :ref:`Drop the collection or view <adf-drop-collection-views-cmd>` 
  from the storage configuration.
- :ref:`Modify the storage configuration <adf-setstorageconfig>` to 
  remove the collection or view from the storage configuration.
- :ref:`Drop the database <adf-drop-database-cmd>` that contains the 
  collection or view from the storage configuration.

In addition, for a wildcard (``*``) collection, {+adf+} deletes the 
schema when it discovers that the collection has been removed from the 
:ref:`namespace catalog <manage-ns-catalog-cli>`.

|json| Schema Format 
--------------------

The schema for a collection is a document with two fields:  
``jsonSchema`` and ``version``. 

.. code-block:: json 

	 "schema" : {
		 "version" : NumberLong(1),
		 "jsonSchema" : <JSON Schema object>
	 }

The ``version`` field represents the version of the schema format that
the document uses. The value is always ``1``. The ``jsonSchema`` field 
is a document that describes the schema of the :manual:`namespace 
</reference/limits/#namespaces>`. 

.. _sql-json-schema-fields:

Supported JSON Schema Fields
----------------------------

{+asql+} supports the following |json| schema fields:

- ``bsonType`` 
- ``items``
- ``properties``
- ``additionalProperties``
- ``required``

.. note:: 

   You can provide a single document or an array of documents for the 
   ``items`` field. When you retrieve the schema, the ``items`` field 
   shows the form that you used for setting the schema.

To learn more about these fields, see :manual:`JSON Schema Keywords 
</reference/operator/query/jsonSchema/#jsonschema-keywords>`.

.. toctree::
   :titlesonly:

   Create </data-federation/query/sql/schema/create>
   View </data-federation/query/sql/schema/view>
   Set </data-federation/query/sql/schema/set>
   Schedule Updates </data-federation/query/sql/schema/schedule-updates>   
   Delete </data-federation/query/sql/schema/delete>
