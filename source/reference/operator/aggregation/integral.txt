=======================
$integral (aggregation)
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. versionadded:: 5.0

.. group:: $integral

Returns an approximation for the mathematical integral value, which is
calculated using the trapezoidal rule with each set of adjacent
documents forming a trapezoid using the:

- :ref:`sortBy <setWindowFields-sortBy>` field values in the
  :pipeline:`$setWindowFields` stage for the x axis values.

- :ref:`input <integral-input>` field :ref:`expression
  <aggregation-expressions>` result values in :group:`$integral` for the
  y axis values.

:group:`$integral` is only available in the
:pipeline:`$setWindowFields` stage.

:group:`$integral` syntax:

.. code-block:: none
   :copyable: false

   {
      $integral: {
         input: <expression>,
         unit: <time unit>
      }
   } 

:group:`$integral` takes a document with these fields:

.. list-table::
   :header-rows: 1
   :widths: 15 85

   * - Field
     - Description

   * - :ref:`input <integral-input>`

     - .. _integral-input:
     
       Specifies the :ref:`expression <aggregation-expressions>` to
       evaluate. You must provide an expression that returns a number.

   * - :ref:`unit <integral-outputUnit>`

     - .. _integral-outputUnit:

       .. include:: /includes/outputUnit-behavior.rst

Behavior
--------

If you omit a :ref:`window <setWindowFields-window>`, a default
window with unbounded upper and lower limits is used.

Example
-------

Create a ``powerConsumption`` collection that contains electrical power
usage in kilowatts measured by meter devices at 30 second intervals:

.. code-block:: javascript

   db.powerConsumption.insertMany( [
      { powerMeterID: "1", timeStamp: new Date( "2020-05-18T14:10:30Z" ),
        kilowatts: 2.95 },
      { powerMeterID: "1", timeStamp: new Date( "2020-05-18T14:11:00Z" ),
        kilowatts: 2.7 },
      { powerMeterID: "1", timeStamp: new Date( "2020-05-18T14:11:30Z" ),
        kilowatts: 2.6 },
      { powerMeterID: "1", timeStamp: new Date( "2020-05-18T14:12:00Z" ),
        kilowatts: 2.98 },
      { powerMeterID: "2", timeStamp: new Date( "2020-05-18T14:10:30Z" ),
        kilowatts: 2.5 },
      { powerMeterID: "2", timeStamp: new Date( "2020-05-18T14:11:00Z" ),
        kilowatts: 2.25 },
      { powerMeterID: "2", timeStamp: new Date( "2020-05-18T14:11:30Z" ),
        kilowatts: 2.75 },
      { powerMeterID: "2", timeStamp: new Date( "2020-05-18T14:12:00Z" ),
        kilowatts: 2.82 }
   ] )

This example uses :group:`$integral` in the :pipeline:`$setWindowFields`
stage to output the energy consumption in kilowatt-hours measured
by each meter device:

.. code-block:: javascript

   db.powerConsumption.aggregate( [
      {
         $setWindowFields: {
            partitionBy: "$powerMeterID",
            sortBy: { timeStamp: 1 },
            output: {
               powerMeterKilowattHours: {
                  $integral: {
                     input: "$kilowatts",
                     unit: "hour"
                  },
                  window: {
                     range: [ "unbounded", "current" ],
                     unit: "hour"
                  }
               }
            }
         }
      }
   ] )

In the example:

- ``partitionBy: "$powerMeterID"`` :ref:`partitions
  <setWindowFields-partitionBy>` the documents in the collection by
  ``powerMeterID``.

- ``sortBy: { timeStamp: 1 }`` :ref:`sorts
  <setWindowFields-sortBy>` the documents in each partition by
  ``timeStamp`` in ascending order (``1``), so the earliest
  ``timeStamp`` is first.

- ``output`` sets the ``kilowatts`` integral value in a new
  field called ``powerMeterKilowattHours`` using
  :group:`$integral` that is run in a :ref:`range
  <setWindowFields-range>` window.

  - The :ref:`input <integral-input>` expression is set to
    ``"$kilowatts"``, which is used for the y axis values in the
    integral calculation.

  - The :group:`$integral` :ref:`unit <integral-unit>` is set to
    ``"hour"`` for the ``timeStamp`` field, which means
    :group:`$integral` returns the kilowatt-hours energy consumption.

  - The :ref:`window <setWindowFields-window>` contains documents
    between an ``unbounded`` lower limit and the ``current`` document in
    the output. This means :group:`$integral` returns the total
    kilowatt-hours energy consumption for the documents from the
    beginning of the :ref:`partition <setWindowFields-partitionBy>`,
    which is the first data point in the partition for each power meter,
    to the timestamp of the current document in the output.

In this example output, the energy consumption measured by meters 1 and
2 are shown in the ``powerMeterKilowattHours`` field:

.. code-block:: javascript
   :copyable: false

   { "_id" : ObjectId("60cbdc3f833dfeadc8e62863"), "powerMeterID" : "1",
     "timeStamp" : ISODate("2020-05-18T14:10:30Z"), "kilowatts" : 2.95,
     "powerMeterKilowattHours" : 0 }
   { "_id" : ObjectId("60cbdc3f833dfeadc8e62864"), "powerMeterID" : "1",
     "timeStamp" : ISODate("2020-05-18T14:11:00Z"), "kilowatts" : 2.7,
     "powerMeterKilowattHours" : 0.023541666666666666 }
   { "_id" : ObjectId("60cbdc3f833dfeadc8e62865"), "powerMeterID" : "1",
     "timeStamp" : ISODate("2020-05-18T14:11:30Z"), "kilowatts" : 2.6,
     "powerMeterKilowattHours" : 0.045625 }
   { "_id" : ObjectId("60cbdc3f833dfeadc8e62866"), "powerMeterID" : "1",
     "timeStamp" : ISODate("2020-05-18T14:12:00Z"), "kilowatts" : 2.98,
     "powerMeterKilowattHours" : 0.068875 }
   { "_id" : ObjectId("60cbdc3f833dfeadc8e62867"), "powerMeterID" : "2",
     "timeStamp" : ISODate("2020-05-18T14:10:30Z"), "kilowatts" : 2.5,
     "powerMeterKilowattHours" : 0 }
   { "_id" : ObjectId("60cbdc3f833dfeadc8e62868"), "powerMeterID" : "2",
     "timeStamp" : ISODate("2020-05-18T14:11:00Z"), "kilowatts" : 2.25,
     "powerMeterKilowattHours" : 0.019791666666666666 }
   { "_id" : ObjectId("60cbdc3f833dfeadc8e62869"), "powerMeterID" : "2",
     "timeStamp" : ISODate("2020-05-18T14:11:30Z"), "kilowatts" : 2.75,
     "powerMeterKilowattHours" : 0.040625 }
   { "_id" : ObjectId("60cbdc3f833dfeadc8e6286a"), "powerMeterID" : "2",
     "timeStamp" : ISODate("2020-05-18T14:12:00Z"), "kilowatts" : 2.82,
     "powerMeterKilowattHours" : 0.06383333333333334 }
