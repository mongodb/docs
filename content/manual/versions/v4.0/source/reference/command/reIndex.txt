=======
reIndex
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: reIndex

   The :dbcommand:`reIndex` command drops all indexes on a
   collection and recreates them. This operation may be expensive for
   collections that have a large amount of data and/or a large number
   of indexes. 

   .. warning::

      - For most users, the :dbcommand:`reIndex` command is unnecessary.

      - Avoid running :dbcommand:`reIndex` for a replica set.

      - Do not run :dbcommand:`reIndex` for a sharded cluster.

   Use the following syntax:

   .. code-block:: javascript

      { reIndex: <collection> }

   The command takes the following fields:

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Field
        - Description

      * - reIndex
        - The name of the collection to reindex.

   The :binary:`~bin.mongo` shell provides a wrapper :method:`db.collection.reIndex()`.

Behavior
--------

.. |cmd-name| replace:: :dbcommand:`reIndex`
.. include:: /includes/note-reindex-impact-on-replica-sets.rst

|cmd-name| always builds indexes in the foreground due to the logic
described in :ref:`createIndexes-multiple-indexes`.

Resource Locking
~~~~~~~~~~~~~~~~

.. versionchanged:: 4.0

Starting in MongoDB 4.0 :dbcommand:`reIndex` obtains a global exclusive
(W) lock and blocks other operations on the :binary:`~bin.mongod` until
it completes.

For MongoDB 3.6 and earlier, these operations :dbcommand:`reIndex`
obtains an exclusive (W) lock on the database and blocks other 
operations on the database until finished.

For more information on locking in MongoDB, see :doc:`/faq/concurrency`.

.. see:: :doc:`/core/index-creation` for more information on the
   behavior of indexing operations in MongoDB.
