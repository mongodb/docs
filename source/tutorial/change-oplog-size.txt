============================
Change the Size of the Oplog
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This procedure changes the size of the oplog [#oplog]_ on each member of a
replica set using the :dbcommand:`replSetResizeOplog` command, starting
with the :term:`secondary` members before proceeding to the
:term:`primary`.

Perform these steps on each :term:`secondary` replica set member
*first*. Once you have changed the oplog size for all secondary
members, perform these steps on the :term:`primary`.

A. Connect to the replica set member
------------------------------------

Connect to the replica set member using the :binary:`~bin.mongo` shell:

.. code-block:: shell

   mongo --host <hostname>:<port>

.. note::

   If the replica set enforces :ref:`authentication <authentication>`,
   you must authenticate as a user with privileges to modify the 
   ``local`` database, such as the :authrole:`clusterManager` or
   :authrole:`clusterAdmin` role.

B. (Optional) Verify the current size of the oplog
--------------------------------------------------

To view the current size of the oplog, switch to the ``local``
database and run :method:`db.collection.stats()` against the 
``oplog.rs`` collection. :method:`~db.collection.stats()` displays the 
oplog size as :data:`~collStats.maxSize`.

.. class:: copyable-code
.. code-block:: javascript

   use local
   db.oplog.rs.stats().maxSize

The ``maxSize`` field displays the collection size in bytes.

C. Change the oplog size of the replica set member
--------------------------------------------------

To resize the oplog, run the :dbcommand:`replSetResizeOplog` command,
passing the desired size in megabytes as the ``size`` parameter. The
specified size must be greater than ``990``, or 990 megabytes.

The following operation changes the oplog size of the replica set
member to 16 gigabytes, or 16000 megabytes.

.. code-block:: javascript

   db.adminCommand({replSetResizeOplog: 1, size: 16000})

.. [#oplog]

   .. include:: /includes/fact-oplog-size.rst

.. compact-oplog-rs:

D. (Optional) Compact ``oplog.rs`` to reclaim disk space
--------------------------------------------------------

Reducing the size of the oplog does *not* automatically reclaim
the disk space allocated to the original oplog size. You must run
:dbcommand:`compact` against the ``oplog.rs`` collection in the
``local`` database to reclaim disk space. There are no benefits to 
running ``compact`` on the ``oplog.rs`` collection after increasing the 
oplog size.

.. important::

   The replica set member cannot replicate oplog entries while the 
   ``compact`` operation is ongoing. While ``compact`` runs, the 
   member may fall so far behind the primary that it cannot resume 
   replication. The likelihood of a member becoming "stale" during
   the ``compact`` procedure increases with cluster write throughput,
   and may be further exacerbated by the reduced oplog size.

   Consider scheduling a maintenance window during which writes are 
   throttled or stopped to mitigate the risk of the member becoming 
   "stale" and requiring a :ref:`full resync <resync-replica-member>`.

Do **not** run ``compact`` against the primary replica set member.
Connect a :binary:`mongo <bin.mongo>` shell to the primary and run
:method:`rs.stepDown()`. If successful, the primary steps down and
closes all open connections. Reconnect the :binary:`mongo <bin.mongo>`
shell to the member and run the ``compact`` command on the member.

The following operation runs the ``compact`` command against the
``oplog.rs`` collection:

.. code-block:: javascript

   use local
   db.runCommand({ "compact" : "oplog.rs" } )

For clusters enforcing :ref:`authentication <authentication>`, 
authenticate as a user with the :authaction:`compact` privilege
action on the ``local`` database and the ``oplog.rs`` collection.
For complete documentation on :dbcommand:`compact` authentication
requirements, see :ref:`compact-authentication`. 
