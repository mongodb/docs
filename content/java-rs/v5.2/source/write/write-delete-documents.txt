.. _java-rs-write-delete-docs:

================
Delete Documents
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: code examples, write, remove

Overview
--------

In this guide, you can learn how to use the {+driver-short+} to delete
documents from a MongoDB collection by performing delete operations.

A delete operation deletes one or more documents from a MongoDB collection.
You can perform a delete operation by using the ``deleteOne()`` or
``deleteMany()`` methods.

Sample Data
~~~~~~~~~~~

The examples in this guide use the ``sample_restaurants.restaurants`` collection
from the :atlas:`Atlas sample datasets </sample-data>`. 

To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the
:ref:`<java-rs-getting-started>` tutorial.

.. include:: /includes/reactor-note.rst 

Delete Operations
-----------------

You can perform delete operations in MongoDB by using the following methods:

- ``deleteOne()``, which deletes *the first document* that matches the search criteria
- ``deleteMany()``, which deletes *all documents* that match the search criteria

Each delete method requires a **query filter**, which specifies the
search criteria that determine which documents to select for removal.
For more information about query filters, see the 
:manual:`Query Filter Documents section </core/document/#query-filter-documents>` in
the MongoDB Server manual.

Delete One Document
-------------------

To delete a single document from a MongoDB collection, call the ``deleteOne()``
method and pass in your query filter. Then, pass the ``deleteOne()`` result to the static
``Mono.from`` method from ``Mono``. ``Mono`` is a class from the {+pr+} library. In {+java-rs+}, 
the driver methods return cold ``Publisher`` instances, which means that the
corresponding operation does not happen unless you subscribe to the returned
``Publisher``. This guide uses the {+pr+} library to consume them. To learn more
about ``Mono``, see `Mono <https://projectreactor.io/docs/core/release/reference/#mono>`__ in the
{+pr+} documentation.

The following example deletes a document from the ``restaurants`` collection
that has a ``name`` value of ``"Ready Penny Inn"``:

.. code-block:: java
   :copyable: true

   Publisher<DeleteResult> deletePublisher = restaurants.deleteOne(
           eq("name", "Ready Penny Inn"));
   Mono.from(deletePublisher).block();

Delete Multiple Documents
-------------------------

To delete multiple documents from a MongoDB collection, call the ``deleteMany()``
method and pass in your query filter. Then, pass the ``deleteMany()`` result to the static
``Mono.from`` method from ``Mono``. ``Mono`` is a class from the {+pr+} library. In {+java-rs+}, 
the driver methods return cold ``Publisher`` instances, which means that the
corresponding operation does not happen unless you subscribe to the returned
``Publisher``. This guide uses the {+pr+} library to consume them. To learn more
about ``Mono``, see `Mono <https://projectreactor.io/docs/core/release/reference/#mono>`__ in the
{+pr+} documentation.

The following example removes all documents in the ``restaurants`` collection
that have a ``borough`` value of ``"Brooklyn"``:

.. code-block:: java
   :copyable: true

   Publisher<DeleteResult> deletePublisher = restaurants.deleteMany(
           eq("borough", "Brooklyn"));
   Mono.from(deletePublisher).block();

Customize the Delete Operation
------------------------------

The ``DeleteOptions`` class contains methods that modify
the behavior of delete methods. To use the ``DeleteOptions``
class, construct a new instance of the class, then call one or more of its methods
to modify the delete operation. You can chain these method calls together.
To modify the behavior of the delete operation, pass the class instance and
chained method calls as the second argument to the
``deleteOne()`` or ``deleteMany()`` method.

You can use the following methods in the ``DeleteOptions`` class
to modify a delete method. All methods are optional.

.. list-table::
   :widths: 30 70
   :header-rows: 1
   
   * - Method
     - Description

   * - ``collation (Collation collation)``
     - | Specifies the kind of language collation to use when sorting
         results. For more information, see :manual:`Collation </reference/collation/#std-label-collation>`
         in the MongoDB Server manual.

   * - ``hint (Bson hint)``
     - | Gets or sets the index to scan for documents. 
         For more information, see the :manual:`hint statement </reference/command/delete/#std-label-deletes-array-hint>`
         in the MongoDB Server manual.

   * - ``hint (String hint)``
     - | Gets or sets the index to scan for documents. 
         For more information, see the :manual:`hint statement </reference/command/delete/#std-label-deletes-array-hint>`
         in the MongoDB Server manual.

   * - ``let (Bson variables)``
     - | A map of parameter names and values. Values must be constant or closed
         expressions that don't reference document fields. For more information,
         see the :manual:`let statement
         </reference/command/delete/#std-label-delete-let-syntax>` in the
         MongoDB Server manual.

   * - ``comment (BsonValue comment)``
     - | A comment to attach to the operation. For more information, see the :manual:`delete command
         fields </reference/command/delete/#command-fields>` guide in the
         MongoDB Server manual for more information.

   * - ``comment (String comment)``
     - | A comment to attach to the operation. For more information, see the :manual:`delete command
         fields </reference/command/delete/#command-fields>` guide in the
         MongoDB Server manual for more information.

Example
~~~~~~~

The following code uses the ``deleteMany()`` method to delete all documents in
the ``restaurants`` collection with a ``name`` value that includes the string ``"Mongo"``.
It also uses the ``comment`` method to add a comment to the operation.

.. code-block:: java
   :copyable: true

   Publisher<DeleteResult> deletePublisher = restaurants.deleteMany(
           regex("name", "Mongo"),
           new DeleteOptions().comment("Deleting Mongo restaurants"));
   Mono.from(deletePublisher).block();

Additional Information
----------------------

For runnable code examples of inserting documents with the {+driver-short+}, see the
:ref:`<java-rs-write>` guide.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API documentation:

- `deleteOne() <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoCollection.html#deleteOne(com.mongodb.reactivestreams.client.ClientSession,org.bson.conversions.Bson)>`__
- `deleteMany()
  <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-reactivestreams/com/mongodb/reactivestreams/client/MongoCollection.html#deleteMany(com.mongodb.reactivestreams.client.ClientSession,org.bson.conversions.Bson)>`__
- `DeleteOptions
  <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-core/com/mongodb/client/model/DeleteOptions.html>`__
- `BsonValue
  <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/bson/org/bson/BsonValue.html>`__
- `Collation
  <https://mongodb.github.io/mongo-java-driver/5.1/apidocs/mongodb-driver-core/com/mongodb/client/model/Collation.html>`__




