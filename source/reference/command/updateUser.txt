==========
updateUser
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: updateUser

   .. Defines a |local-cmd-name| replacement:
   .. |local-cmd-name| replace:: :dbcommand:`updateUser`

   Updates the user's profile on the database on which you run the
   command. An update to a field **completely replaces** the previous
   field's values, including updates to the user's ``roles`` and
   ``authenticationRestrictions`` arrays.

   .. warning::

      When you update the ``roles`` array, you completely replace the
      previous array's values. To add or remove roles without replacing all
      the user's existing roles, use the :dbcommand:`grantRolesToUser` or
      :dbcommand:`revokeRolesFromUser` commands.

   The :dbcommand:`updateUser` command uses the following syntax. To
   update a user, you must specify the ``updateUser`` field and at least
   one other field, other than ``writeConcern``:

   .. tip::

      .. include:: /includes/extracts/4.2-changes-passwordPrompt.rst

   .. code-block:: javascript

      { 
        updateUser: "<username>",
        pwd: passwordPrompt(),      // Or  "<cleartext password>"
        customData: { <any information> },
        roles: [
          { role: "<role>", db: "<database>" } | "<role>",
          ...
        ],
        authenticationRestrictions: [
           {
             clientSource: ["<IP>" | "<CIDR range>", ...],
             serverAddress: ["<IP>", | "<CIDR range>", ...]
           },
           ...
        ],
        mechanisms: [ "<scram-mechanism>", ... ],
        digestPassword: <boolean>,
        writeConcern: { <write concern> }
      }

   The command has the following fields:

   .. include:: /includes/apiargs/dbcommand-updateUser-field.rst

Roles
~~~~~

.. include:: /includes/fact-roles-array-contents.rst

Authentication Restrictions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-auth-restrictions-array-contents.rst

Behavior
--------

.. |command| replace:: :dbcommand:`updateUser`

.. include:: /includes/fact-cleartext-passwords-tls.rst

Required Access
---------------

.. include:: /includes/access-update-user.rst

.. include:: /includes/access-change-own-password-and-custom-data.rst

Example
-------

Given a user ``appClient01`` in the ``products`` database with the following
user info:

.. code-block:: javascript

   {
      "_id" : "products.appClient01",
      "userId" : UUID("c5d88855-3f1e-46cb-9c8b-269bef957986"), // Starting in MongoDB 4.0.9
      "user" : "appClient01",
      "db" : "products",
      "customData" : { "empID" : "12345", "badge" : "9156" },
      "roles" : [
          { "role" : "readWrite",
            "db" : "products"
          },
          { "role" : "read",
            "db" : "inventory"
          }
      ],
      "mechanisms" : [   // Starting in MongoDB 4.0
         "SCRAM-SHA-1",
         "SCRAM-SHA-256"
      ]
   }

The following :dbcommand:`updateUser` command **completely** replaces the
user's ``customData`` and ``roles`` data:

.. code-block:: javascript

   use products
   db.runCommand( {
      updateUser : "appClient01",
      customData : { employeeId : "0x3039" },
      roles : [ { role : "read", db : "assets" } ]
   } )

The user ``appClient01`` in the ``products`` database now has the following
user information:

.. code-block:: javascript

   {
      "_id" : "products.appClient01",
      "userId" : UUID("c5d88855-3f1e-46cb-9c8b-269bef957986"), // Starting in MongoDB 4.0.9
      "user" : "appClient01",
      "db" : "products",
      "customData" : { "employeeId" : "0x3039" },
      "roles" : [
          { "role" : "read",
            "db" : "assets"
          }
      ],
      "mechanisms" : [   // Starting in MongoDB 4.0
         "SCRAM-SHA-1",
         "SCRAM-SHA-256"
      ]

   }
