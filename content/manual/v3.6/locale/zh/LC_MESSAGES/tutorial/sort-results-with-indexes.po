#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-19 11:30-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../source/tutorial/sort-results-with-indexes.txt:6
msgid "Use Indexes to Sort Query Results"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:16
msgid ""
"In MongoDB, sort operations can obtain the sort order by retrieving "
"documents based on the ordering in an index. If the query planner cannot "
"obtain the sort order from an index, it will sort the results in memory. "
"Sort operations that use an index often have better performance than "
"those that do not use an index. In addition, sort operations that do "
"*not* use an index will abort when they use 32 megabytes of memory."
msgstr ""

#: ../source/includes/fact-multikey-index-sort-limitation.rst:1
msgid ""
"As a result of changes to sorting behavior on array fields in MongoDB "
"3.6, when sorting on an array indexed with a :doc:`multikey index </core"
"/index-multikey/>` the query plan includes a blocking SORT stage. The new"
" sorting behavior may negatively impact performance."
msgstr ""

#: ../source/includes/fact-multikey-index-sort-limitation.rst:7
msgid ""
"In a blocking SORT, all input must be consumed by the sort step before it"
" can produce output. In a non-blocking, or *indexed* sort, the sort step "
"scans the index to produce results in the requested order."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:30
msgid "Sort with a Single Field Index"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:32
msgid ""
"If an ascending or a descending index is on a single field, the sort "
"operation on the field can be in either direction."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:35
msgid ""
"For example, create an ascending index on the field ``a`` for a "
"collection ``records``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:42
msgid "This index can support an ascending sort on ``a``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:48
msgid ""
"The index can also support the following descending sort on ``a`` by "
"traversing the index in reverse order:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:58
msgid "Sort on Multiple Fields"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:60
msgid ""
"Create a :ref:`compound index <index-type-compound>` to support sorting "
"on multiple fields."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:63
msgid ""
"You can specify a sort on all the keys of the index or on a subset; "
"however, the sort keys must be listed in the *same order* as they appear "
"in the index. For example, an index key pattern ``{ a: 1, b: 1 }`` can "
"support a sort on ``{ a: 1, b: 1 }`` but *not* on ``{ b: 1, a: 1 }``."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:69
msgid ""
"For a query to use a compound index for a sort, the specified sort "
"direction for all keys in the :method:`cursor.sort()` document must match"
" the index key pattern *or* match the inverse of the index key pattern. "
"For example, an index key pattern ``{ a: 1, b: -1 }`` can support a sort "
"on ``{ a: 1, b: -1 }`` and ``{ a: -1, b: 1 }`` but **not** on ``{ a: -1, "
"b: -1 }`` or ``{a: 1, b: 1}``."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:79
msgid "Sort and Index Prefix"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:81
msgid ""
"If the sort keys correspond to the index keys or an index *prefix*, "
"MongoDB can use the index to sort the query results. A *prefix* of a "
"compound index is a subset that consists of one or more keys at the start"
" of the index key pattern."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:86
msgid "For example, create a compound index on the ``data`` collection:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:92
msgid "Then, the following are prefixes for that index:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:100
msgid ""
"The following query and sort operations use the index prefixes to sort "
"the results. These operations do not need to sort the result set in "
"memory."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:108
#: ../source/tutorial/sort-results-with-indexes.txt:166
msgid "Example"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:110
#: ../source/tutorial/sort-results-with-indexes.txt:168
msgid "Index Prefix"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:112
msgid "``db.data.find().sort( { a: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:114
#: ../source/tutorial/sort-results-with-indexes.txt:118
msgid "``{ a: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:116
msgid "``db.data.find().sort( { a: -1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:120
msgid "``db.data.find().sort( { a: 1, b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:122
#: ../source/tutorial/sort-results-with-indexes.txt:126
#: ../source/tutorial/sort-results-with-indexes.txt:134
#: ../source/tutorial/sort-results-with-indexes.txt:180
msgid "``{ a: 1, b: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:124
msgid "``db.data.find().sort( { a: -1, b: -1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:128
msgid "``db.data.find().sort( { a: 1, b: 1, c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:130
#: ../source/tutorial/sort-results-with-indexes.txt:176
msgid "``{ a: 1, b: 1, c: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:132
msgid "``db.data.find( { a: { $gt: 4 } } ).sort( { a: 1, b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:136
msgid ""
"Consider the following example in which the prefix keys of the index "
"appear in both the query predicate and the sort:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:143
msgid ""
"In such cases, MongoDB can use the index to retrieve the documents in "
"order specified by the sort. As the example shows, the index prefix in "
"the query predicate can be different from the prefix in the sort."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:148
msgid "Sort and Non-prefix Subset of an Index"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:150
msgid ""
"An index can support sort operations on a non-prefix subset of the index "
"key pattern. To do so, the query must include **equality** conditions on "
"all the prefix keys that precede the sort keys."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:154
msgid "For example, the collection ``data`` has the following index:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:160
msgid "The following operations can use the index to get the sort order:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:170
msgid "``db.data.find( { a: 5 } ).sort( { b: 1, c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:172
msgid "``{ a: 1 , b: 1, c: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:174
msgid "``db.data.find( { b: 3, a: 4 } ).sort( { c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:178
msgid "``db.data.find( { a: 5, b: { $lt: 3} } ).sort( { b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:182
msgid ""
"As the last operation shows, only the index fields *preceding* the sort "
"subset must have the equality conditions in the query document; the other"
" index fields may specify other conditions."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:186
msgid ""
"If the query does **not** specify an equality condition on an index "
"prefix that precedes or overlaps with the sort specification, the "
"operation will **not** efficiently use the index. For example, the "
"following operations specify a sort document of ``{ c: 1 }``, but the "
"query documents do not contain equality matches on the preceding index "
"fields ``a`` and ``b``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:198
msgid ""
"These operations **will not** efficiently use the index ``{ a: 1, b: 1, "
"c: 1, d: 1 }`` and may not even use the index to retrieve the documents."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:202
msgid "Index Use and Collation"
msgstr ""

#: ../source/includes/extracts/collation-index-use.rst:1
msgid ""
"To use an index for string comparisons, an operation must also specify "
"the same collation. That is, an index with a collation cannot support an "
"operation that performs string comparisons on the indexed fields if the "
"operation specifies a different collation."
msgstr ""

#: ../source/includes/extracts/collation-index-use.rst:6
msgid ""
"For example, the collection ``myColl`` has an index on a string field "
"``category`` with the collation locale ``\"fr\"``."
msgstr ""

#: ../source/includes/extracts/collation-index-use.rst:13
msgid ""
"The following query operation, which specifies the same collation as the "
"index, can use the index:"
msgstr ""

#: ../source/includes/extracts/collation-index-use.rst:20
msgid ""
"However, the following query operation, which by default uses the "
"\"simple\" binary collator, cannot use the index:"
msgstr ""

#: ../source/includes/extracts/collation-index-use.rst:27
msgid ""
"For a compound index where the index prefix keys are not strings, arrays,"
" and embedded documents, an operation that specifies a different "
"collation can still use the index to support comparisons on the index "
"prefix keys."
msgstr ""

#: ../source/includes/extracts/collation-index-use.rst:32
msgid ""
"For example, the collection ``myColl`` has a compound index on the "
"numeric fields ``score`` and ``price`` and the string field ``category``;"
" the index is created with the  collation locale ``\"fr\"`` for string "
"comparisons:"
msgstr ""

#: ../source/includes/extracts/collation-index-use.rst:43
msgid ""
"The following operations, which use ``\"simple\"`` binary collation for "
"string comparisons, can use the index:"
msgstr ""

#: ../source/includes/extracts/collation-index-use.rst:51
msgid ""
"The following operation, which uses ``\"simple\"`` binary collation for "
"string comparisons on the indexed ``category`` field, can use the index "
"to fulfill only the ``score: 5`` portion of the query:"
msgstr ""

#~ msgid ""
#~ "The sort must specify the *same "
#~ "sort direction* (i.e.ascending/descending) for "
#~ "all its keys as the index key "
#~ "pattern or specify the *reverse sort "
#~ "direction* for all its keys as the"
#~ " index key pattern. For example, an"
#~ " index key pattern ``{ a: 1, b:"
#~ " 1 }`` can support a sort on"
#~ " ``{ a: 1, b: 1 }`` and "
#~ "``{ a: -1, b: -1 }`` but "
#~ "*not* on ``{ a: -1, b: 1 "
#~ "}``."
#~ msgstr ""

# b213b62c98be4f7dbcd23c072196921e
#~ msgid "On this page"
#~ msgstr ""

