# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-30 14:28-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/compact.txt:5
# c60cd14fd89043aebbbfb31e04c668c3
msgid "compact"
msgstr ""

#: ../source/reference/command/compact.txt:10
# 32d8f1436dbd40fcad073c8457066ce7
msgid "Definition"
msgstr ""

#: ../source/reference/command/compact.txt:16
# 063c650f97b349b2ab444d2bbca9d69d
msgid "Rewrites and defragments all data in a collection, as well as all of the indexes on that collection. :dbcommand:`compact` has the following form:"
msgstr ""

#: ../source/reference/command/compact.txt:24
# 0f7c3bbc3ba349f1826926dfa5b5d377
msgid ":dbcommand:`compact` has the following fields:"
msgstr ""

#: ../source/reference/command/compact.txt:28
# 50fcb30fcba44c8f84d2f455d16380de
msgid ":dbcommand:`compact` is similar to :dbcommand:`repairDatabase`; however, :dbcommand:`repairDatabase` operates on an entire database."
msgstr ""

#: ../source/reference/command/compact.txt:32
# 60a5220536d74d7cba2c9ea3c64599ea
msgid "Always have an up-to-date backup before performing server maintenance such as the :dbcommand:`compact` operation."
msgstr ""

#: ../source/reference/command/compact.txt:38
# 595d446033954d9886b8b2239873c8f9
msgid "paddingFactor"
msgstr ""

#: ../source/reference/command/compact.txt:44
# f4a456f4d3b14ce0a3b78122decf69f9
msgid "Applicable for the MMAPv1 storage engine only; specifying ``paddingFactor`` has no effect when used with the WiredTiger storage engine."
msgstr ""

#: ../source/reference/command/compact.txt:48
# 80edd042d5584f0ba843efe87e48917a
msgid "The ``paddingFactor`` field takes the following range of values:"
msgstr ""

#: ../source/reference/command/compact.txt:50
# b3621874c31f4c22baa8bf380f02b82f
msgid "Default: ``1.0``"
msgstr ""

#: ../source/reference/command/compact.txt:52
# f347c7efb1a04f9e9f9ad3fe300f5ee9
msgid "Minimum: ``1.0`` (no padding)"
msgstr ""

#: ../source/reference/command/compact.txt:54
# 65d556c2c2354fd4a2e9f3d94e71bbf3
msgid "Maximum: ``4.0``"
msgstr ""

#: ../source/reference/command/compact.txt:56
# 365931246edf43e3b6f4aeba6321293d
msgid "If your updates increase the size of the documents, padding will increase the amount of space allocated to each document and avoid expensive document relocation operations within the data files."
msgstr ""

#: ../source/reference/command/compact.txt:60
# a0352c0d97204033bba88ac2b8f2d53e
msgid "You can calculate the padding size by subtracting the document size from the record size or, in terms of the ``paddingFactor``, by subtracting ``1`` from the ``paddingFactor``:"
msgstr ""

#: ../source/reference/command/compact.txt:68
# cf94ea449eaa4cee9f097f3a8eefa13b
msgid "For example, a ``paddingFactor`` of ``1.0`` specifies a padding size of ``0`` whereas a ``paddingFactor`` of ``1.2`` specifies a padding size of ``0.2`` or 20 percent (20%) of the document size."
msgstr ""

#: ../source/reference/command/compact.txt:72
# 0fd3a25bebfa4059aba0f44b2c46fc39
msgid "With the following command, you can use the ``paddingFactor`` option of the :dbcommand:`compact` command to set the record size to ``1.1`` of the document size, or a padding factor of 10 percent (10%):"
msgstr ""

#: ../source/reference/command/compact.txt:80
# abd3db34383241ecb70da00a74622db5
msgid ":dbcommand:`compact` compacts existing documents but does not reset ``paddingFactor`` statistics for the collection. After the :dbcommand:`compact` MongoDB will use the existing ``paddingFactor`` when allocating new records for documents in this collection."
msgstr ""

#: ../source/reference/command/compact.txt:88
# b25c6d974eb143fab9bd22f263b30754
msgid "paddingBytes"
msgstr ""

#: ../source/reference/command/compact.txt:94
# 69e0f955acd3471ba1dd359eb6d260e1
msgid "Applicable for the MMAPv1 storage engine only; specifying ``paddingBytes`` has no effect when used with the WiredTiger storage engine."
msgstr ""

#: ../source/reference/command/compact.txt:98
# 8599212682454f4392cf6bda4f11ed94
msgid "Specifying ``paddingBytes`` can be useful if your documents start small but then increase in size significantly. For example, if your documents are initially 40 bytes long and you grow them by 1KB, using ``paddingBytes: 1024`` might be reasonable since using ``paddingFactor: 4.0`` would specify a record size of 160 bytes (``4.0`` times the initial document size), which would only provide a padding of 120 bytes (i.e. record size of 160 bytes minus the document size)."
msgstr ""

#: ../source/reference/command/compact.txt:106
# 7fb0f046edc2442d96d42efe04c78f81
msgid "With the following command, you can use the ``paddingBytes`` option of the :dbcommand:`compact` command to set the padding size to ``100`` bytes on the collection named by ``<collection>``:"
msgstr ""

#: ../source/reference/command/compact.txt:115
# 79c0ff10106648f0a730691063cf9e56
msgid "Behaviors"
msgstr ""

#: ../source/reference/command/compact.txt:118
# 7e389b2f36b4462585a2e43e345fd5ee
msgid "Blocking"
msgstr ""

#: ../source/reference/command/compact.txt:120
# eef76f2717f1458985a2ac220cfa643f
msgid "In MongoDB 2.2, :dbcommand:`compact` blocks activities only for its database. Prior to 2.2, the command blocked all activities."
msgstr ""

#: ../source/reference/command/compact.txt:123
# c9c92017cc4d4f76ab3039abb8aac39f
msgid "You may view the intermediate progress either by viewing the :program:`mongod` log file or by running the :method:`db.currentOp()` in another shell instance."
msgstr ""

#: ../source/reference/command/compact.txt:128
# ff291414253d49f7abc6f074c6d2d1b4
msgid "Operation Termination"
msgstr ""

#: ../source/reference/command/compact.txt:130
# e27ea66154bc45679a8412e37d2acff1
msgid "If you terminate the operation with the :method:`db.killOp() <db.killOp()>` method or restart the server before the :dbcommand:`compact` operation has finished:"
msgstr ""

#: ../source/reference/command/compact.txt:134
# 387a32ea29e64878b70f5454bcadd78f
msgid "If you have journaling enabled, the data remains valid and usable, regardless of the state of the :dbcommand:`compact` operation. You may have to manually rebuild the indexes."
msgstr ""

#: ../source/reference/command/compact.txt:138
# 26dca3b676164053b9f1ef323adfe413
msgid "If you do not have journaling enabled and the :program:`mongod` or :dbcommand:`compact` terminates during the operation, it is impossible to guarantee that the data is in a valid state."
msgstr ""

#: ../source/reference/command/compact.txt:142
# a03db218a4644f2f95c61d5946212326
msgid "In either case, much of the existing free space in the collection may become un-reusable. In this scenario, you should rerun the compaction to completion to restore the use of this free space."
msgstr ""

#: ../source/reference/command/compact.txt:147
# d03e43f6f987427e855261b32e9af14d
msgid "Disk Space"
msgstr ""

#: ../source/reference/command/compact.txt:149
# f04ae5550f904d31af484a8e8f468ffc
msgid ":dbcommand:`compact` generally uses less disk space than :dbcommand:`repairDatabase` and is faster. However, the :dbcommand:`compact` command is still slow and blocks other database use. Only use :dbcommand:`compact` during scheduled maintenance periods."
msgstr ""

#: ../source/reference/command/compact.txt:154
# c9f584a1aca94335a5910da6e33f350a
msgid ":dbcommand:`compact` requires up to 2 gigabytes of additional disk space while running. Unlike :dbcommand:`repairDatabase`, :dbcommand:`compact` does *not* free space on the file system."
msgstr ""

#: ../source/reference/command/compact.txt:158
# 62dd5c4c11ca4931aaa4e516d6ecc7d1
msgid "To see how the storage space changes for the collection, run the :dbcommand:`collStats` command before and after compaction."
msgstr ""

#: ../source/reference/command/compact.txt:162
# d4c04d7b6ff44d268808ac903dd77ae2
msgid "Size and Number of Data Files"
msgstr ""

#: ../source/reference/command/compact.txt:164
# e0271d0398b942fbbac3e2f099e18c18
msgid ":dbcommand:`compact` may increase the total size and number of your data files, especially when run for the first time. However, this will not increase the total collection storage space since storage size is the amount of data allocated within the database files, and not the size/number of the files on the file system."
msgstr ""

#: ../source/reference/command/compact.txt:171
# d8f51fac27e047409f808953dba62da8
msgid "Replica Sets"
msgstr ""

#: ../source/reference/command/compact.txt:173
# dd018f7e64654d638ec5d111dad07883
msgid ":dbcommand:`compact` commands do not replicate to secondaries in a :term:`replica set`:"
msgstr ""

#: ../source/reference/command/compact.txt:176
# e26eaedb3d734e798702b8f9888f7ea6
msgid "Compact each member separately."
msgstr ""

#: ../source/reference/command/compact.txt:178
# 1bcf8e4bb3cc4abf8b2842ee3567bc1a
msgid "Ideally run :dbcommand:`compact` on a secondary. See option ``force:true`` above for information regarding compacting the primary."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:3
# f280a74a55564d0988d5282963f52c17
msgid "On secondaries, the  command forces the secondary to enter :replstate:`RECOVERING` state. Read operations issued to an instance in the :replstate:`RECOVERING` state will fail.  This prevents clients from reading during the operation. When the operation completes, the secondary returns to:replstate:`SECONDARY` state."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:10
# 5835f8da8fd345e9aaa0cfba24f4600d
msgid "See :doc:`/reference/replica-states/` for more information about replica set member states."
msgstr ""

#: ../source/includes/extracts/fact-command-puts-secondary-into-recovering-compact.rst:13
# 04f35184688249a0806e9c435490e3bc
msgid "See :doc:`/tutorial/perform-maintence-on-replica-set-members` for an example replica set maintenance procedure to maximize availability during maintenance operations."
msgstr ""

#: ../source/reference/command/compact.txt:184
# ea5472cb4cd14476ad70396df9c41b05
msgid "Sharded Clusters"
msgstr ""

#: ../source/reference/command/compact.txt:186
# 110e79cde0fb4e0688b44d844a397559
msgid ":dbcommand:`compact` is a command issued to a :program:`mongod`. In a sharded environment, run :dbcommand:`compact` on each shard separately as a maintenance operation."
msgstr ""

#: ../source/reference/command/compact.txt:190
# 53be2b9841ab4c5c86ea38b10f245e01
msgid "You cannot issue :dbcommand:`compact` against a :program:`mongos` instance."
msgstr ""

#: ../source/reference/command/compact.txt:193
# 8250c1176e194a5a9a2ed2de15e3f1cd
msgid "Capped Collections"
msgstr ""

#: ../source/reference/command/compact.txt:195
# a0c795d9fd344792a1b72db7d6e48cf6
msgid "It is not possible to compact :term:`capped collections <capped collection>` because they don't have padding, and documents cannot grow in these collections. However, the documents of a :term:`capped collection` are not subject to fragmentation."
msgstr ""

#: ../source/reference/command/compact.txt:201
# 6fe635468ccb42dda6d2ba19c5ab075e
msgid "Index Building"
msgstr ""

#: ../source/reference/command/compact.txt:205
# 2d3fe534ace743baa9af4c1b13ff5d14
msgid ":program:`mongod` rebuilds all indexes in parallel following the :dbcommand:`compact` operation."
msgstr ""

