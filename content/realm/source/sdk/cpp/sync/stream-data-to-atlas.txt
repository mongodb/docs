.. meta::
   :robots: noindex, nosnippet

.. _cpp-stream-data-to-atlas:

==============================
Stream Data to Atlas - C++ SDK
==============================

.. meta:: 
  :keywords: code example

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/data-ingest-overview.rst

Sync Data Unidirectionally from a Client Application
----------------------------------------------------

.. procedure::

   .. step:: Define an Asymmetric Object

      You can sync data unidirectionally when you declare an object's 
      schema as a ``REALM_ASYMMETRIC_SCHEMA``.

      .. literalinclude:: /examples/generated/cpp/asymmetric-sync.snippet.asymmetric-object.cpp
         :language: cpp

      For more information on how to define a ``REALM_ASYMMETRIC_SCHEMA``, 
      including limitations when linking to other object types, see: 
      :ref:`Define an Asymmetric Object <cpp-define-asymmetric-object>`.

   .. step:: Connect and Authenticate with an App Services App

      To stream data from the client to your backend App, you must 
      :ref:`connect to an App Services backend <cpp-connect-to-backend>` 
      and :ref:`authenticate a user <cpp-authenticate-users>`.

      .. literalinclude:: /examples/generated/cpp/asymmetric-sync.snippet.connect-and-authenticate.cpp
         :language: cpp

   .. step:: Open a Realm

      After you have an authenticated user, you can open a synced realm
      using a ``flexibleSyncConfiguration()``. Unlike opening a realm for 
      non-asymmetric object types, when you open a realm for Data Ingest, 
      you *must* specify the ``asymmetric_object`` types you want to sync.

      .. literalinclude:: /examples/generated/cpp/asymmetric-sync.snippet.open-asymmetric-synced-realm.cpp
         :language: cpp

      Unlike bidirectional Sync, Data Ingest does not use a 
      :ref:`Flexible Sync subscription <cpp-manage-flexible-sync-subscriptions>`.

      .. tip:: Mixed Object and Asymmetric Object Types

         You cannot read, query, or delete an ``asymmetric_object`` from a
         realm, so asymmetric objects are incompatible with bi-directional
         Flexible Sync or local realm use. You cannot open a single synced
         realm to manage both regular objects and asymmetric objects - you
         must use different realms to manage these different object types.

   .. step:: Create Asymmetric Objects

      Once you have an open realm, you can create an ``asymmetric_object`` 
      and set its values as you would a regular object. However, you cannot 
      read or delete these objects. Once created, they sync to the App 
      Services backend and the linked Atlas database.

      .. literalinclude:: /examples/generated/cpp/asymmetric-sync.snippet.create-asymmetric-object.cpp
         :language: cpp

      Atlas Device Sync completely manages the lifecycle of this data. 
      It is maintained on the device until Data Ingest synchronization is 
      complete, and then removed from the device.
