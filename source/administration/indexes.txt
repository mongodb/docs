===================
Indexing Operations
===================

.. default-domain:: mongodb

This document provides operational guidelines and procedures for
indexing data in MongoDB collections. For the fundamentals of MongoDB
indexing, see the :doc:`/core/indexes` document. For strategies and
practical approaches, see the :doc:`/applications/indexes` document.

Indexes allow MongoDB to process and fulfill queries quickly by creating
small and efficient representations of the documents in a collection.

.. index:: index; create
.. _index-create-index:

Create an Index
---------------

To create an index, use :method:`db.collection.ensureIndex()` or a similar
:api:`method from your driver <>`. For example
the following creates an index on the ``phone-number`` field
of the ``people`` collection:

.. code-block:: javascript

   db.people.ensureIndex( { "phone-number": 1 } )

:method:`ensureIndex() <db.collection.ensureIndex()>` only creates an
index if an index of the same specification does not already exist.

All indexes support and optimize the performance for queries that select
on this field. For queries that cannot use an index, MongoDB must scan
all documents in a collection for documents that match the query.

.. example::

   If you create an index on the ``user_id`` field in the ``records``,
   this index is, the index will support the following query:

   .. code-block:: javascript

      db.records.find( { user_id: 2 } )

   However, the following query, on the ``profile_url`` field is not
   supported by this index:

   .. code-block:: javascript

      db.records.find( { profile_url: 2 } )

If your collection holds a large amount of data, consider building the index in the
background, as described in :ref:`index-creation-background`. To build
indexes on replica sets, see the :ref:`index-build-on-replica-sets`
section for more information.

.. index:: index; create
.. index:: index; compound
.. _index-create-compound-index:

Create a Compound Index
-----------------------

To create a :ref:`compound index <index-type-compound>` use an
operation that resembles the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1, b: 1, c: 1 } )

For example, the following operation will create an index on the
``item``, ``category``, and ``price`` fields of the ``products``
collection:

.. code-block:: javascript

   db.products.ensureIndex( { item: 1, category: 1, price: 1 } )

Some drivers may specify indexes, using ``NumberLong(1)`` rather than
``1`` as the specification. This does not have any affect on the
resulting index.

.. include:: /includes/note-build-indexes-on-replica-sets.rst

.. index:: index; options
.. _index-special-creation-options:

If your collection is large, build the index in the background, as
described in :ref:`index-creation-background`. If you build in the
background on a live replica set, see also
:ref:`index-build-on-replica-sets`.

Special Creation Options
------------------------

.. note::

   TTL collections use a special ``expire`` index option. See
   :doc:`/tutorial/expire-data` for more information.

.. todo::: insert link here to the geospatial index documents when
   they're published.

.. index:: index; sparse
.. _index-sparse-index:

Sparse Indexes
~~~~~~~~~~~~~~

To create a :ref:`sparse index <index-type-sparse>` on a field, use an
operation that resembles the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { sparse: true } )

The following example creates a sparse index on the ``users``
table that *only* indexes the ``twitter_name`` *if* a document has
this field. This index will not include documents in this collection
without the ``twitter_name`` field.

.. code-block:: javascript

   db.users.ensureIndex( { twitter_name: 1 }, { sparse: true } )

.. note::

   Sparse indexes can affect the results returned by the query,
   particularly with respect to sorts on fields *not* included in the
   index. See the :ref:`sparse index <index-type-sparse>` section for
   more information.

.. index:: index; unique
.. _index-unique-index:

Unique Indexes
~~~~~~~~~~~~~~

To create a :ref:`unique indexes <index-type-unique>`, consider the
following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { unique: true } )

For example, you may want to create a unique index on the ``"tax-id":``
of the ``accounts`` collection to prevent storing multiple account
records for the same legal entity:

.. code-block:: javascript

   db.accounts.ensureIndex( { "tax-id": 1 }, { unique: true } )

The :ref:`_id index <index-type-id>` is a unique index. In some
situations you may consider using ``_id`` field itself for this kind
of data rather than using a unique index on another field.

In many situations you will want to combine the ``unique`` constraint
with the ``sparse`` option. When MongoDB indexes a field, if a
document does not have a value for a field, the index entry for that
item will be ``null``. Since unique indexes cannot have duplicate
values for a field, without the ``sparse`` option, MongoDB will reject
the second document and all subsequent documents without the indexed
field. Consider the following prototype.

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { unique: true, sparse: true } )

You can also enforce a unique constraint on :ref:`compound indexes
<index-type-compound>`, as in the following prototype:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1, b: 1 }, { unique: true } )

These indexes enforce uniqueness for the *combination* of index keys
and *not* for either key individually.

.. index:: index; create in background
.. _index-create-in-background:

Create in Background
~~~~~~~~~~~~~~~~~~~~

To create an index in the background you can specify :ref:`background
construction <index-creation-background>`. Consider the following
prototype invocation of :method:`db.collection.ensureIndex()`:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { background: true } )

Consider the section on :ref:`background index construction
<index-creation-background>` for more information about these indexes
and their implications.

.. index:: index; drop duplicates
.. index:: index; duplicates
.. _index-drop-duplicates:

Drop Duplicates
~~~~~~~~~~~~~~~

To force the creation of a :ref:`unique index <index-type-unique>`
index on a collection with duplicate values in the field you are
indexing you can use the ``dropDups`` option. This will force MongoDB
to create a *unique* index by deleting documents with duplicate values
when building the index. Consider the following prototype invocation
of :method:`db.collection.ensureIndex()`:

.. code-block:: javascript

   db.collection.ensureIndex( { a: 1 }, { dropDups: true } )

See the full documentation of :ref:`duplicate dropping
<index-creation-duplicate-dropping>` for more information.

.. warning::

   Specifying ``{ dropDups: true }`` may delete data from your
   database. Use with extreme caution.

Refer to the :method:`ensureIndex() <db.collection.ensureIndex()>`
documentation for additional index creation options.

Information about Indexes
-------------------------

.. index:: index; list indexes
.. _index-list-indexes-for-collection:

List all Indexes on a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To return a list of all indexes on a collection, use the, use the
:method:`db.collection.getIndexes()` method or a similar
:api:`method for your driver <>`.

For example, to view all indexes on the ``people`` collection:

.. code-block:: javascript

   db.people.getIndexes()

.. index:: index; list indexes
.. _index-list-indexes-for-database:

List all Indexes for a Database
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To return a list of all indexes on all collections in a database, use
the following operation in the :program:`mongo` shell:

.. code-block:: javascript

   db.system.indexes.find()

.. index:: index; measure use
.. _index-measure-index-use:
.. _indexes-measuring-use:

Measure Index Use
~~~~~~~~~~~~~~~~~

Query performance is a good general indicator of index use;
however, for more precise insight into index use, MongoDB provides the
following tools:

- :method:`explain() <cursor.explain()>`

  Append the :method:`explain() <cursor.explain()>` method to any cursor
  (e.g. query) to return a document with statistics about the query
  process, including the index used, the number of documents scanned,
  and the time the query takes to process in milliseconds.

- :method:`cursor.hint()`

  Append the :method:`hint() <cursor.hint()>` to any cursor (e.g.
  query) with the index as the argument to *force* MongoDB
  to use a specific index to fulfill the query. Consider the following
  example:

  .. code-block:: javascript

     db.people.find( { name: "John Doe", zipcode: { $gt: 63000 } } } ).hint( { zipcode: 1 } )

  You can use :method:`hint() <cursor.hint()>` and :method:`explain()
  <cursor.explain()>` in conjunction with each other to compare the
  effectiveness of a specific index. Specify the ``$natural`` operator
  to the :method:`hint() <cursor.hint()>` method to prevent MongoDB from
  using *any* index:

  .. code-block:: javascript

     db.people.find( { name: "John Doe", zipcode: { $gt: 63000 } } } ).hint( { $natural: 1 } )

- :data:`~serverStatus.indexCounters`

  Use the :data:`~serverStatus.indexCounters` data in the output of
  :dbcommand:`serverStatus` for insight into database-wise index
  utilization.

.. index:: index; remove
.. _index-remove-index:

Remove Indexes
--------------

To remove an index, use the :method:`db.collection.dropIndex()` method,
as in the following example:

.. code-block:: javascript

   db.accounts.dropIndex( { "tax-id": 1 } )

This will remove the index on the ``"tax-id"`` field in the ``accounts``
collection. The shell provides the following document after completing
the operation:

.. code-block:: javascript

   { "nIndexesWas" : 3, "ok" : 1 }

Where the value of ``nIndexesWas`` reflects the number of indexes
*before* removing this index. You can also use the
:method:`db.collection.dropIndexes()` to remove *all* indexes, except
for the :ref:`_id index <index-type-id>` from a collection.

These shell helpers provide wrappers around the
:dbcommand:`dropIndexes` :term:`database command`. Your :doc:`client
library </applications/drivers>` may have a different or additional
interface for these operations.

.. index:: index; rebuild
.. _index-rebuild-index:

Rebuild Indexes
---------------

If you need to rebuild indexes for a collection you can use the
:method:`db.collection.reIndex()` method. This will drop all indexes,
including the :ref:`_id index <index-type-id>`, and then rebuild
all indexes. The operation takes the following form:

.. code-block:: javascript

   db.accounts.reIndex()

MongoDB will return the following document when the operation
completes:

.. code-block:: javascript

   {
           "nIndexesWas" : 2,
           "msg" : "indexes dropped for collection",
           "nIndexes" : 2,
           "indexes" : [
                   {
                           "key" : {
                                   "_id" : 1,
                                   "tax-id" : 1
                           },
                           "ns" : "records.accounts",
                           "name" : "_id_"
                   }
           ],
           "ok" : 1
   }

This shell helper provides a wrapper around the :dbcommand:`reIndex`
:term:`database command`. Your :doc:`client library </applications/drivers>`
may have a different or additional interface for this operation.

.. include:: /includes/note-build-indexes-on-replica-sets.rst

.. index:: index; replica set
.. index:: replica set; index
.. _index-build-on-replica-sets:
.. _index-building-replica-sets:

Build Indexes on Replica Sets
-----------------------------

:ref:`Background index creation operations
<index-creation-background>` become *foreground* indexing operations
on :term:`secondary` members of replica sets. The foreground index
building process blocks all replication and read operations on the
secondaries while they build the index.

Secondaries will begin building indexes *after* the
:term:`primary` finishes building the index. In :term:`sharded clusters
<sharded cluster>`, the :program:`mongos` will send :method:`ensureIndex()
<db.collection.ensureIndex()>` to the primary members of the replica
set for each shard, which then replicate to the secondaries after the
primary finishes building the index.

To minimize the impact of building an index on your replica set, use
the following procedure to build indexes on secondaries:

.. note::

   If you need to build an index in a :term:`sharded cluster`, repeat
   the following procedure for each replica set that provides each
   :term:`shard`.

#. Stop the :program:`mongod` process on one secondary. Restart the
   :program:`mongod` process *without* the :option:`--replSet <mongod --replSet>`
   option and running on a different port. [#different-port]_ This
   instance is now in "standalone" mode.

#. Create the new index or rebuild the index on this :program:`mongod`
   instance.

#. Restart the :program:`mongod` instance with the
   :option:`--replSet <mongod --replSet>` option. Allow replication
   to catch up on this member.

#. Repeat this operation on all of the remaining secondaries.

#. Run :method:`rs.stepDown()` on the :term:`primary` member of the
   set, and then repeat this procedure on the former primary.

.. warning::

   Ensure that your :term:`oplog` is large enough to permit the
   indexing or re-indexing operation to complete without falling
   too far behind to catch up. See the ":ref:`oplog sizing
   <replica-set-oplog-sizing>`" documentation for additional
   information.

.. note::

   This procedure *does* take one member out of the replica set at a
   time. However, this procedure will only affect one member of the
   set at a time rather than *all* secondaries at the same time.

.. [#different-port] By running the :program:`mongod` on a different
   port, you ensure that the other members of the replica set and all
   clients will not contact the member while you are building the
   index.

.. index:: index; monitor index building
.. _index-monitor-index-building:
.. _indexes-admin-stop-in-progress-build:

Monitor and Control Index Building
----------------------------------

.. todo:: insert links to the values in the inprog array following the
   completion of DOCS-162

To see the status of the indexing processes, you can use the
:method:`db.currentOp()` method in the :program:`mongo` shell. The value
of the ``query`` field and the ``msg`` field will indicate if the
operation is an index build. The ``msg`` field also indicates the
percent of the build that is complete.

To
terminate an ongoing index build, use the
:method:`db.killOp()` method in the :program:`mongo` shell.
