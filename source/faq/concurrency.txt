================
FAQ: Concurrency
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

MongoDB allows multiple clients to read and write the same data.
In order to ensure consistency, it uses locking and other
:term:`concurrency control` measures to prevent multiple clients
from modifying the same piece of data simultaneously.
Together, these mechanisms guarantee that all writes to a single
document occur either in full or not at all and that clients never
see an inconsistent view of the data.

.. _faq-dev-concurrency:
.. _faq-concurrency-locking:

What type of locking does MongoDB use?
--------------------------------------

.. include:: /includes/extracts/lock-general.rst

In addition to a shared (S) locking mode for reads and an exclusive
(X) locking mode for write operations, intent shared (IS) and intent
exclusive (IX) modes indicate an intent to read or write a resource
using a finer granularity lock.  When locking at a certain granularity,
all higher levels are locked using an :term:`intent lock`.

For example, when locking a collection for writing (using mode X),
both the corresponding database lock and the global lock must be
locked in intent exclusive (IX) mode. A single database can
simultaneously be locked in IS and IX mode, but an exclusive (X)
lock cannot coexist with any other modes, and a shared (S) lock can
only coexists with intent shared (IS) locks.

.. |rarr| unicode:: 0x2192 .. right arrow

Locks are fair, with reads and writes being queued in order. However,
to optimize throughput, when one request is granted, all other
compatible requests will be granted at the same time, potentially
releasing them before a conflicting request.  For example, consider
a case in which an X lock was just released, and in which the
conflict queue contains the following items:

IS |rarr| IS |rarr| X |rarr| X |rarr| S |rarr| IS

In strict first-in, first-out (FIFO) ordering, only the first two
IS modes would be granted. Instead MongoDB will actually grant all
IS and S modes, and once they all drain, it will grant X, even if
new IS or S requests have been queued in the meantime. As a grant
will always move all other requests ahead in the queue, no starvation
of any request is possible.

In :method:`db.serverStatus()` and :method:`db.currentOp()` output, the
lock modes are represented as follows:

.. include:: /includes/fact-lock-modes.rst

.. [#mgl-ref] See the Wikipedia page on
   `Multiple granularity locking
   <http://en.wikipedia.org/wiki/Multiple_granularity_locking>`_ for
   more information.

How granular are locks in MongoDB?
----------------------------------

.. include:: /includes/fact-wiredtiger-locks.rst

How do I see the status of locks on my :binary:`~bin.mongod` instances?
-----------------------------------------------------------------------

For reporting on lock utilization information on locks, use any of the
following methods:

- :method:`db.serverStatus()`,
- :method:`db.currentOp()`,
- :doc:`mongotop </reference/program/mongotop>`,
- :doc:`mongostat </reference/program/mongostat>`, and/or
- the |mms-home| or
  :products:`Ops Manager, an on-premise solution available in
  MongoDB Enterprise Advanced
  </mongodb-enterprise-advanced?tck=docs_server>`

Specifically, the :serverstatus:`locks` document in the :doc:`output of
serverStatus </reference/command/serverStatus>`, or the :data:`~currentOp.locks` field
in the :doc:`current operation reporting </reference/method/db.currentOp>`
provides insight into the type of locks and amount of lock
contention in your :binary:`~bin.mongod` instance.

In :method:`db.serverStatus()` and :method:`db.currentOp()` output, the
lock modes are represented as follows:

.. include:: /includes/fact-lock-modes.rst

To terminate an operation, use :method:`db.killOp()`.

.. include:: /includes/replacement-mms.rst

.. _faq-concurrency-yielding:

Does a read or write operation ever yield the lock?
---------------------------------------------------

In some situations, read and write operations can yield their locks.

Long running read and write operations, such as queries, updates,
and deletes, yield under many conditions.  MongoDB operations can
also yield locks between individual document modifications in write
operations that affect multiple documents like
:method:`~db.collection.update()` with the ``multi`` parameter.

For storage engines supporting document level :term:`concurrency
control`, such as :doc:`WiredTiger </core/wiredtiger>`, yielding is not
necessary when accessing storage as the :term:`intent locks <intent
lock>`, held at the global, database and collection level, do not block
other readers and writers. However, operations will periodically yield,
such as:

- to avoid long-lived storage transactions because these can
  potentially require holding a large amount of data in memory;

- to serve as interruption points so that you can kill long running
  operations;

- to allow operations that require exclusive access to a collection
  such as index/collection drops and creations.

.. _faq-concurrency-operations-locks:

What locks are taken by some common client operations?
------------------------------------------------------

The following table lists some operations and the types of locks they
use for document level locking storage engines:

.. list-table::
   :header-rows: 1

   * - Operation

     - Database

     - Collection

   * - Issue a query

     - ``r`` (Intent Shared)

     - ``r`` (Intent Shared)

   * - Insert data

     - ``w`` (Intent Exclusive)

     - ``w`` (Intent Exclusive)

   * - Remove data

     - ``w`` (Intent Exclusive)

     - ``w`` (Intent Exclusive)

   * - Update data

     - ``w`` (Intent Exclusive)

     - ``w`` (Intent Exclusive)

   * - Perform Aggregation

     - ``r`` (Intent Shared)

     - ``r`` (Intent Shared)

   * - Create an index (Foreground)

     - ``W`` (Exclusive)

     - 

   * - Create an index (Background)

     - ``w`` (Intent Exclusive)

     - ``w`` (Intent Exclusive)

   * - List collections

     - ``r`` (Intent Shared)

       .. versionchanged:: 4.0

     - 

   * - Map-reduce

     - ``W`` (Exclusive) and ``R`` (Shared)

     - ``w`` (Intent Exclusive) and ``r`` (Intent Shared)

.. _faq-concurrency-database-lock:

Which administrative commands lock the database?
------------------------------------------------

Certain administrative commands can exclusively lock the database for
extended periods of time. In some deployments, for large databases,
you may consider taking the :binary:`~bin.mongod` instance offline so that
clients are not affected. For example, if a :binary:`~bin.mongod` is part
of a :term:`replica set`, take the :binary:`~bin.mongod` offline and let
other members of the set service load while maintenance is in progress.

The following administrative operations require an exclusive
lock at the database level for extended periods:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operation
     - 

   * - :dbcommand:`cloneCollectionAsCapped`
     -

   * - :dbcommand:`collMod`
     -

   * - :dbcommand:`compact`
     -

   * - :dbcommand:`convertToCapped`
     -

   * - | :dbcommand:`renameCollection`
       | :method:`db.collection.renameCollection()`
       
     - .. versionchanged:: 4.2
       
       If renaming a collection within the same database, the operation
       takes an exclusive (W) lock on the source and target collections.
       Prior to MongoDB 4.2, the operation takes an exclusive (W) lock
       on the database when renaming within the same database.
     
       (:dbcommand:`renameCollection` *only*) If the target namespace is
       in a different database as the source collection, the locking
       behavior is version dependent:

       - *(MongoDB 4.2.2 and later)* The operation takes an exclusive
         (W) lock on the target database when renaming a collection
         across databases and blocks other operations on that database
         until it finishes.

       - *(MongoDB 4.2.1 and earlier)* The operation takes a global
         exclusive (W) lock when renaming a collection across
         databases and blocks other operations until it finishes.

The following administrative operations lock the database but only hold
the lock for a very short time:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operation
     - 

   * - | :dbcommand:`authenticate`
       | :method:`db.auth()`
     - 


   * - | :dbcommand:`createUser`
       | :method:`db.createUser()`
     - 

.. seealso::

   :ref:`faq-concurrency-lock-multiple-dbs`

.. _faq-concurrency-collection-lock:

Which administrative commands lock a collection?
------------------------------------------------

.. versionchanged:: 4.2

The following administrative operations require an exclusive lock at
the collection level:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operation
     - 

   * - | :dbcommand:`create`
       | :method:`db.createCollection()`
       | :method:`db.createView()`
     -

   * - | :dbcommand:`createIndexes`
       | :method:`db.collection.createIndex()`
       | :method:`db.collection.createIndexes()`
     - 

   * - | :dbcommand:`drop`
       | :method:`db.collection.drop()`
     -

   * - | :dbcommand:`dropIndexes`
       | :method:`db.collection.dropIndex()`
       | :method:`db.collection.dropIndexes()`
     -

   * - | :dbcommand:`renameCollection`
       | :method:`db.collection.renameCollection()`
       
     - .. versionchanged:: 4.2
       
       If renaming a collection within the same database, the operation
       takes an exclusive (W) lock on the source and target collections.
       Prior to MongoDB 4.2, the operation takes an exclusive (W) lock
       on the database when renaming within the same database.
     
       (:dbcommand:`renameCollection` *only*) If the target namespace is
       in a different database as the source collection, the locking
       behavior is version dependent:

       - *MongoDB 4.2.2 and later* The operation takes an exclusive
         (W) lock on the target database when renaming a collection
         across databases and blocks other operations on that database
         until it finishes.

       - *MongoDB 4.2.1 and earlier* The operation takes a global
         exclusive (W) lock when renaming a collection across
         databases and blocks other operations until it finishes.

   * - | :dbcommand:`reIndex`
       | :method:`db.collection.reIndex()`
     - .. versionchanged:: 4.2

       - For MongoDB 4.2.2 and later, these operations obtain an
         exclusive
         (W) lock on the collection and block other operations on the
         collection until finished.

       - For MongoDB 4.0.0 through 4.2.1, these operations take a
         global exclusive (W) lock and block other operations until
         finished.

   * - :dbcommand:`replSetResizeOplog`

     - .. versionchanged:: 4.2
          
       - For MongoDB 4.2.2 and later, this operation takes an exclusive 
         (W) lock on the :data:`oplog <local.oplog.rs>` collection and 
         blocks other operations on the collection until it finishes.

       - For MongoDB 4.2.1 and earlier, this operation takes a global
         exclusive (W) lock and blocks other operations until it
         finishes.

Prior to MongoDB 4.2, these operations took an exclusive lock on the
database, blocking all operations on the database *and* its collections
until the operation completed.

.. _faq-concurrency-lock-multiple-dbs:

Does a MongoDB operation ever lock more than one database?
----------------------------------------------------------

The following MongoDB operations may obtain and hold a lock on more 
than one database:

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operation
     -

   * - :method:`db.copyDatabase()`
     - This operation obtains a global (W) exclusive lock and blocks
       other operations until it finishes.

   * - | :dbcommand:`reIndex`
       | :method:`db.collection.reIndex()` 
     - .. versionchanged:: 4.2
     
       For MongoDB 4.0.0 through 4.2.1, these operations take a global
       exclusive (W) lock and block other operations until finished.

       Starting in MongoDB 4.2.2, these operations only obtain an
       exclusive (W) collection lock instead of a global exclusive lock.
       
       Prior to MongoDB 4.0, these operations obtained an exclusive
       (W) database lock.

   * - :dbcommand:`renameCollection`
     - .. versionchanged:: 4.2
     
       For MongoDB 4.2.1 and earlier, this operation obtains a 
       global exclusive (W) lock when renaming a collection between
       databases and blocks other operations until finished.

       Starting in MongoDB 4.2.2, this operation only obtains an
       exclusive (W) lock on the target database, an intent shared (r)
       lock on the source database, and a shared (S) lock on the source
       collection instead of a global exclusive lock. 

   * - | :dbcommand:`replSetResizeOplog`
     - .. versionchanged:: 4.2
     
       For MongoDB 4.2.1 and earlier, this operation obtains a
       global exclusive (W) lock and blocks other operations until
       finished.

       Starting in MongoDB 4.2.2, this operation only obtains an
       exclusive (W) lock on the :data:`oplog <local.oplog.rs>`
       collection instead of a global exclusive lock.

How does sharding affect concurrency?
-------------------------------------

:term:`Sharding <sharding>` improves concurrency by distributing
collections over multiple :binary:`~bin.mongod` instances, allowing shard
servers (i.e. :binary:`~bin.mongos` processes) to perform any number of
operations concurrently to the various downstream :binary:`~bin.mongod`
instances.

.. include:: /includes/extracts/lock-sharding.rst

.. _faq-concurrency-replication:

How does concurrency affect a replica set primary?
--------------------------------------------------

With replica sets, when MongoDB writes to a collection on the
:term:`primary`, MongoDB also writes to the primary's :term:`oplog`,
which is a special collection in the ``local`` database. Therefore,
MongoDB must lock both the collection's database and the ``local``
database. The :binary:`~bin.mongod` must lock both databases at the same
time to keep the database consistent and ensure that write operations,
even with replication, are "all-or-nothing" operations.

.. include:: /includes/extracts/lock-replica-set-primary.rst

How does concurrency affect secondaries?
----------------------------------------

In :term:`replication`, MongoDB does not apply writes serially to
:term:`secondaries <secondary>`. Secondaries collect oplog entries in
batches and then apply those batches in parallel. Writes are applied
in the order that they appear in the oplog.

Starting in MongoDB 4.0, reads which
:ref:`target secondaries <replica-set-read-preference>` read from
a :ref:`WiredTiger<storage-wiredtiger>` snapshot of the data if the
secondary is undergoing replication. This allows the read to occur
simultaneously with replication, while still guaranteeing a
consistent view of the data. Previous to MongoDB 4.0, read operations on
secondaries would be blocked until any ongoing replication completes.
See :ref:`replica-set-internals-multi-threaded-replication` for more
information.

Does MongoDB support transactions?
----------------------------------

.. include:: /includes/extracts/transactions-faq.rst

.. include:: /includes/extracts/transactions-usage.rst

What isolation guarantees does MongoDB provide?
-----------------------------------------------

Depending on the read concern, clients can see the results of writes
before the writes are :term:`durable`. To control whether the data read
may be rolled back or not, clients can use the ``readConcern`` option.

For information, see:

- :doc:`/core/read-isolation-consistency-recency`

- :doc:`/core/write-operations-atomicity`

- :doc:`/reference/read-concern`

