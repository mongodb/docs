================
grantRolesToUser
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: grantRolesToUser

   Grants additional roles to a user.

   .. |method| replace:: :method:`db.grantRolesToUser` helper method
   .. include:: /includes/fact-dbcommand-tip

Compatibility
-------------

This command is available in deployments hosted in the following environments: 

.. include:: /includes/fact-environments-atlas-only.rst

.. include:: /includes/fact-environments-atlas-support-no-free-or-m10.rst

.. include:: /includes/fact-environments-onprem-only.rst

Syntax
------

The :dbcommand:`grantRolesToUser` command uses the following syntax:

.. code-block:: javascript

   db.runCommand(
      {  
        grantRolesToUser: "<user>",
        roles: [ <roles> ],
        writeConcern: { <write concern> },
        comment: <any>
      }
   )

Command Fields
--------------

The command takes the following fields:

.. list-table::
  :header-rows: 1
  :widths: 20 20 80

  * - Field
    - Type
    - Description

  * - ``grantRolesToUser``
    - string
    - The name of the user to give additional roles.

  * - ``roles``
    - array
    - An array of additional roles to grant to the user.

  * - ``writeConcern``
    - document
    - .. include:: /includes/fact-write-concern-spec-link.rst

  * - ``comment``
    - any
    - .. include:: /includes/extracts/comment-content.rst

.. |local-cmd-name| replace:: :dbcommand:`grantRolesToUser`
.. include:: /includes/fact-roles-array-contents.rst

Required Access
---------------

.. include:: /includes/access-grant-roles.rst

Example
-------

Given a user ``accountUser01`` in the ``products`` database with the following
roles:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       }
   ]

The following :dbcommand:`grantRolesToUser` operation gives ``accountUser01`` the
:authrole:`read` role on the ``stock`` database and the
:authrole:`readWrite` role on the ``products`` database.

.. code-block:: javascript

   use products
   db.runCommand( { grantRolesToUser: "accountUser01",
                    roles: [
                       { role: "read", db: "stock"},
                       "readWrite"
                    ],
                    writeConcern: { w: "majority" , wtimeout: 2000 }
                } )

The user ``accountUser01`` in the ``products`` database now has the following
roles:

.. code-block:: javascript

   "roles" : [
       { "role" : "assetsReader",
         "db" : "assets"
       },
       { "role" : "read",
         "db" : "stock"
       },
       { "role" : "readWrite",
         "db" : "products"
       }
   ]
