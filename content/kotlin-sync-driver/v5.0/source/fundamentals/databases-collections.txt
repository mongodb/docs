=========================
Databases and Collections
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use MongoDB databases and
collections with the MongoDB Kotlin driver.

MongoDB organizes data into a hierarchy of the following levels:

#. **Databases**: Databases are the top level of data organization in a MongoDB instance.

#. **Collections**: Databases are organized into collections which contain **documents**.

#. **Documents**: Documents contain literal data such as strings, numbers, and dates, as well as other embedded documents. For more information on document field types and structure, see the :manual:`Server documentation on documents </core/document/>`.

With the MongoDB Kotlin driver, you can model data by using Kotlin data
classes or by using the `Document
<{+api+}/apidocs/bson/org/bson/Document.html>`__ class to store and
retrieve data from MongoDB.

To learn more about using data classes, see
the guide on the :ref:`Data Class Data Format
<fundamentals-data-classes>`. To learn more about using the ``Document``
class, see the guide on the :ref:`Document Data Format <kotlin-document-format>`.

Access a Database
-----------------

Use the `getDatabase()
<{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-client/get-database.html>`__ method of
a ``MongoClient`` instance to access a ``MongoDatabase`` in a MongoDB
instance.

The following example accesses a database named ``testDatabase``:

.. literalinclude:: /examples/generated/DatabaseCollectionsTest.snippet.access-database.kt
   :language: kotlin

Access a Collection
-------------------

Use the `getCollection()
<{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/get-collection.html>`__
method of a ``MongoDatabase`` instance to access a
``MongoCollection`` in a database of your connected MongoDB instance.

The following example accesses a collection named ``testCollection`` from a 
``MongoDatabase`` that contains documents of type ``ExampleDataClass``:

.. literalinclude:: /examples/generated/DatabaseCollectionsTest.snippet.test-data-class.kt
   :language: kotlin
   :caption: ExampleDataClass data model

.. literalinclude:: /examples/generated/DatabaseCollectionsTest.snippet.access-collection.kt
   :language: kotlin

.. tip::

   If the provided collection name does not already exist in the database,
   MongoDB implicitly creates the collection when you first insert data
   into that collection.

.. _db-coll-specify-return-type:

Specify Return Type
~~~~~~~~~~~~~~~~~~~

The driver provides a way for you to specify a class for documents
returned from a collection, even if it is different than the class you
specified when retrieving the collection. You can specify a return class
by using the `MongoCollection.withDocumentClass()
<{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/with-document-class.html>`__
method.

Specifying a different return class could be useful in the following
situations:

- Your collection contains multiple data types.
- You specify a projection that changes your data fields.
- You cannot directly specify a return type on a method that changes the data,
  such as ``findOneAndUpdate()`` or ``findOneAndReplace()``.

The following example retrieves a collection that
contains data represented by the ``Fruit`` data class but returns the result
of a ``findOneAndUpdate()`` operation as an instance of the ``NewFruit``
class. The operation changes the name of the ``qty`` field to
``quantity`` and adds an item to the ``seasons`` array field in the
document with a ``name`` value of ``"strawberry"``:

.. literalinclude:: /examples/generated/DatabaseCollectionsTest.snippet.fruit-data-class.kt
   :language: kotlin
   :caption: Fruit data model

.. io-code-block::

   .. input:: /examples/generated/DatabaseCollectionsTest.snippet.return-type.kt
      :language:  kotlin
      :emphasize-lines: 5-10,21-23

   .. output:: 
      :language:  console

      NewFruit(id=1, name=strawberry, quantity=205, seasons=[summer, fall])

Create a Collection
-------------------

Use the `createCollection()
<{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/create-collection.html>`__
method of a ``MongoDatabase`` instance to create a collection
in a database of your connected MongoDB instance.

The following example creates a collection called ``exampleCollection``:

.. literalinclude:: /examples/generated/DatabaseCollectionsTest.snippet.create-collection.kt
   :language: kotlin

You can specify collection options like maximum size and document
validation rules using the `CreateCollectionOptions
<{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/CreateCollectionOptions.html>`__
class. The ``createCollection()`` method accepts an instance of
``CreateCollectionOptions`` as an optional second parameter.

Document Validation
~~~~~~~~~~~~~~~~~~~

**Document validation** provides the ability to validate documents
against a series of filters during writes to a collection. You can
specify these filters using the `ValidationOptions
<{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/ValidationOptions.html>`__
class, which accepts a series of `Filters
<{+api+}/apidocs/mongodb-driver-core/com/mongodb/client/model/Filters.html>`__ instances
that specify the validation rules and expressions:

.. literalinclude:: /examples/generated/DatabaseCollectionsTest.snippet.validation.kt
   :language: kotlin

For more information, see the server documentation for :manual:`document
validation </core/document-validation>`.
      
Get a List of Collections
-------------------------

You can query for a list of collections in a database using the
`MongoDatabase.listCollectionNames()
<{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/list-collection-names.html>`__ method:

.. io-code-block::

   .. input:: /examples/generated/DatabaseCollectionsTest.snippet.get-collections.kt
      :language:  kotlin

   .. output:: 
      :language:  console

      [movies, exampleCollection]

Drop a Collection
-----------------

You can remove a collection from the database using the 
`MongoCollection.drop()
<{+api+}/apidocs/mongodb-driver-sync/com/mongodb/client/MongoCollection.html#drop()>`__ method:

.. literalinclude:: /examples/generated/DatabaseCollectionsTest.snippet.drop-collections.kt
   :language: kotlin

.. warning:: Dropping a Collection Deletes All Data in the Collection

   Dropping a collection from your database also permanently deletes all
   documents within that collection and all indexes on that collection.
   Only drop collections that contain data that is no longer needed.

.. _kotlin-read-write-pref:

Specify Read Preferences, Read Concerns, and  Write Concerns
------------------------------------------------------------

**Read preferences**, **read concerns**, and **write concerns** control
how the driver routes read operations and waits for acknowledgment for
read and write operations when connected to a MongoDB replica set.
Read preferences and read concerns apply to all read operations;
write concerns apply to all write operations.

``MongoDatabase`` instances inherit their write concern, read concern,
and write preference settings from the ``MongoClient`` used to create
them. ``MongoCollection`` instances inherit their write concern, read concern,
and write preference settings from the ``MongoDatabase`` used to create
them. However, you can use the following methods to obtain an instance
of a ``MongoDatabase`` or ``MongoCollection`` with a read preference,
read concern, or write concern that differs from the setting they would
normally inherit:

- `MongoDatabase.withReadConcern() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/with-read-concern.html>`__

- `MongoDatabase.withReadPreference() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/with-read-preference.html>`__

- `MongoDatabase.withWriteConcern() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-database/with-write-concern.html>`__

- `MongoCollection.withReadConcern() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/with-read-concern.html>`__

- `MongoCollection.withReadPreference() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/with-read-preference.html>`__

- `MongoCollection.withWriteConcern() <{+api+}/apidocs/mongodb-driver-kotlin-coroutine/mongodb-driver-kotlin-coroutine/com.mongodb.kotlin.client.coroutine/-mongo-collection/with-write-concern.html>`__

.. tip::

   The ``withReadConcern()``, ``withReadPreference()``, and
   ``withWriteConcern`` methods create a new instance of a
   ``MongoDatabase`` or ``MongoCollection`` with the desired preference
   or concern. The ``MongoDatabase`` or ``MongoCollection`` upon which
   the method is called retains its original preference and concern
   settings.

For more information on these topics, see the following pages in the
Server manual:

- :manual:`Read Preference </core/read-preference/>`
- :manual:`Read Concern </reference/read-concern/>`
- :manual:`Write Concern </reference/write-concern/>`
