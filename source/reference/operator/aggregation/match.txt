====================
$match (aggregation)
====================

.. default-domain:: mongodb

.. pipeline:: $match

   :pipeline:`$match` pipes the documents that match its conditions to
   the next operator in the pipeline.

   The :pipeline:`$match` query syntax is identical to the
   :ref:`read operation query <read-operations-query-argument>` syntax.

Examples
--------

Equality Match
--------------

The following operation uses :pipeline:`$match` to perform a
simple equality match:

.. code-block:: javascript

   db.articles.aggregate(
       [ { $match : { author : "dave" } } ]
   );

The :pipeline:`$match` selects the documents where the ``author``
field equals ``dave``, and the aggregation returns the following:

.. code-block:: javascript

   {
     "result" : [
                  {
                    "_id" : ObjectId("512bc95fe835e68f199c8686"),
                    "author": "dave",
                    "score" : 80
                  },
                  { "_id" : ObjectId("512bc962e835e68f199c8687"),
                    "author" : "dave",
                    "score" : 85
                  }
                ],
     "ok" : 1
   }

.. _match-perform-a-count:

Perform a Count
---------------

The following example selects documents to process using the
:pipeline:`$match` pipeline operator and then pipes the results
to the :pipeline:`$group` pipeline operator to compute a count of
the documents:

.. code-block:: javascript

  db.articles.aggregate( [
                          { $match : { score : { $gt : 70, $lte : 90 } } },
                          { $group: { _id: null, count: { $sum: 1 } } }
                         ] );

In the aggregation pipeline, :pipeline:`$match` selects the
documents where the ``score`` is greater than ``70`` and less
than or equal to ``90``. These documents are then piped to the
:pipeline:`$group` to perform a count. The aggregation returns
the following:

.. code-block:: javascript

   {
     "result" : [
                  {
                    "_id" : null,
                    "count" : 3
                  }
                ],
     "ok" : 1
   }

Behavior
--------

Pipeline Optimization
~~~~~~~~~~~~~~~~~~~~~

- Place the :pipeline:`$match` as early in the aggregation
  :term:`pipeline` as possible. Because :pipeline:`$match` limits
  the total number of documents in the aggregation pipeline,
  earlier :pipeline:`$match` operations minimize the amount of
  processing down the pipe.

- If you place a :pipeline:`$match` at the very beginning of a
  pipeline, the query can take advantage of :term:`indexes
  <index>` like any other :method:`db.collection.find()`
  or :method:`db.collection.findOne()`.

Restrictions
~~~~~~~~~~~~

- You cannot use :query:`$where` in :pipeline:`$match` queries as part
  of the aggregation pipeline.

- To use :query:`$text` in the :pipeline:`$match` stage, the
  :pipeline:`$match` stage has to be the first stage of the pipeline.
