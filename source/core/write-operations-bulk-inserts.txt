.. _write-operations-bulk-insert:

=======================
Bulk Inserts in MongoDB
=======================

.. default-domain:: mongodb

In some situations you may need to insert or ingest a large amount of
data into a MongoDB database. These *bulk inserts* have some
special considerations that are different from other write
operations.

.. TODO: section on general write operation considerations?

The :method:`insert() <db.collection.insert()>` method, when passed an
array of documents, will perform a bulk insert, and inserts each
document atomically. :doc:`Drivers </applications/drivers>`
provide their own interface for this kind of operation.

.. versionadded:: 2.2
   :method:`insert() <db.collection.insert()>` in the :program:`mongo`
   shell gained support for bulk inserts in version 2.2.

Bulk insert can significantly increase performance by amortizing
:ref:`write concern <write-operations-write-concern>` costs. In the
drivers, you can configure write concern for batches rather than on a
per-document level.

Drivers also have a ``ContinueOnError`` option in their insert
operation, so that the bulk operation will continue to insert
remaining documents in a batch even if an insert fails.

.. note::

   .. versionadded::  2.0
      Support for ``ContinueOnError`` depends on version 2.0 of the
      core :program:`mongod` and :program:`mongos` components.

If the bulk insert process generates more than one error in a batch
job, the client will only receive the most recent error. All bulk
operations to a :term:`sharded collection <sharded cluster>` run with
``ContinueOnError``, which applications cannot disable. See
:ref:`sharding-bulk-inserts` section for more information on
consideration for bulk inserts in sharded clusters.

For more information see your :doc:`driver documentation
</applications/drivers>` for details on performing bulk inserts in
your application. Also consider the following resources:
:ref:`write-operations-sharded-clusters`,
:ref:`sharding-bulk-inserts`, and
:doc:`/core/import-export`.
