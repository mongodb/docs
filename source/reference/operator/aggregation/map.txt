==================
$map (aggregation)
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. expression:: $map

   Applies an :ref:`expression <aggregation-expressions>` to
   each item in an array and returns an array with the applied results.

   The :expression:`$map` expression has the following syntax:

   .. code-block:: javascript

      { $map: { input: <expression>, as: <string>, in: <expression> } }

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Field
        - Specification

      * - ``input``

        - An :ref:`expression <aggregation-expressions>` that
          resolves to an array.

      * - ``as``

        - Optional. The variable name for the items in the ``input`` array. The
          ``in`` expression accesses each item in the ``input`` array
          by this :doc:`variable </reference/aggregation-variables>`.
          If not specified, ``as`` defaults to ``$$this``.

      * - ``in``

        - The :ref:`expression <aggregation-expressions>` to apply to
          each item in the ``input`` array. The expression accesses the
          item by its variable name.

   For more information on expressions, see
   :ref:`aggregation-expressions`.

Example
-------

Consider a ``grades`` collection with the following documents:

.. code-block:: javascript

   { _id: 1, quizzes: [ 5, 6, 7 ] }
   { _id: 2, quizzes: [ ] }
   { _id: 3, quizzes: [ 3, 8, 9 ] }

And the following :pipeline:`$project` statement:

.. code-block:: javascript

   db.grades.aggregate(
      [
         { $project:
            { adjustedGrades:
               {
                 $map:
                    {
                      input: "$quizzes",
                      as: "grade",
                      in: { $add: [ "$$grade", 2 ] }
                    }
               }
            }
         }
      ]
   )

The operation returns the following results:

.. code-block:: javascript

   { "_id" : 1, "adjustedGrades" : [ 7, 8, 9 ] }
   { "_id" : 2, "adjustedGrades" : [ ] }
   { "_id" : 3, "adjustedGrades" : [ 5, 10, 11 ] }

.. seealso:: :expression:`$let`
