.. _embedded-chart-sdk-options:
.. _sdk-option-reference:

====================
Embedded SDK Options
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Embedding SDK provides the Javascript `createChart()
<https://www.npmjs.com/package/@mongodb-js/charts-embed-dom/v/beta#createchartoptions-embedchartoptions-chart>`__
method for rendering a chart within a web page. You can use options to
control the height and width of the chart, as well as the refresh
interval and other aspects.

.. example::

   The following example uses the ``createChart()`` method with
   options.

   .. code-block:: javascript

      const chart = new ChartsEmbedSDK({}).createChart({
        baseUrl: 'https://charts.mongodb.com/charts-rendering-spec-project-aygif',
        chartId: '38de4b38-42ea-422a-b702-a0220c8885e8',
        height: 300,
        width: 400,
        renderingSpec: {
          version: 1,
          title: 'Customized chart title',
          description: 'Customized chart description',
          axes: {
            y: {
              logScale: true
            },
          },
          channels: {
            x: {
              labelOverride: "New field label"
            },
            y: {
              numberSuffix: "%"
            }
          },
          options: {
            labelSize: 150,
            lineSmoothing: 'monotone'
          }
        }
      });
      await chart.render(embedContainer);

Embedded Chart Options
----------------------

.. please keep these alphabetized

You can specify the following options for an embedded chart:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 10 10 70 10

   * - Option
     - Type
     - Description
     - Required?

   * - ``autoRefresh``
     - boolean
     - Flag that indicates whether the chart automatically refreshes. If
       omitted, charts don't automatically refresh.

       Use this option with the ``maxDataAge`` option to
       configure how often the chart refreshes. 
     - no

   * - ``background``
     - string
     - Background color to apply to a chart instead of the 
       ``theme`` background. You can specify:

       - A color hex code
       - A |css| color name
       - ``transparent`` for a transparent background

       If you don't provide the background the background color defaults
       to the current ``theme``:

       - ``#FFFFFF`` for the ``light`` theme, or
       - ``#21313C`` for the ``dark`` theme.
     - no

   * - ``baseUrl``
     - string
     - Base URL of the chart.
     - yes

   * - ``chartID``
     - string
     - Unique identifier of the chart.
     - yes

   * - ``filter``
     - object
     - :ref:`Filter <embed-options-filter>` to apply to the chart.
     - no

   * - ``getUserToken``
     - object
     - Function that returns a ``base64``-encoded |jwt| token. 
       |charts-short| validates this token to determine if
       |charts-short| renders an authenticated chart.

       If authenticated access is enabled, |charts-short| renders the
       authenticated chart view only if |charts-short| can validate the
       token using the :ref:`configured authentication providers 
       <configure-auth-providers>`.

       If the token is invalid, |charts| renders the unauthenticated 
       chart if you enabled unauthenticated access. Otherwise,
       |charts-short| doesn't render the chart.

       .. seealso:: 

          :ref:`jwt-sdk-tutorial`
     - no

   * - ``height``
     - number
     - Height of the chart. If you don't provide the height, the chart defaults to
       the height of its container. If you provide a value without units,
       the unit defaults to pixels (px).
     - no

   * - ``maxDataAge``
     - number
     - Specifies the maximum age of data to load from the cache
       when loading or refreshing the chart. If omitted,
       |charts| renders the chart with data from the cache if
       the data is less than one hour old.

       To learn how |charts| loads data from the cache when
       loading or refreshing the chart based on the
       ``autoRefresh`` and ``maxDataAge`` values, see
       :ref:`refresh-behavior`.
     - no

   * - ``renderingSpec``
     - object
     - Rendering specification that specifies how to customize an
       embedded chart. 

       For a list of available customizations, see
       :ref:`rendering-spec-options`.
     - no

   * - ``showAttribution``
     - boolean
     - Flag that indicates whether to display the :guilabel:`MongoDB` logo
       below the chart. Defaults to ``true``.
     - no

   * - ``theme``
     - string
     - :ref:`Theme <chart-display-theme>` for the chart to use. Valid
       options are:

       - ``light`` for a light background with dark text and chart 
         elements, or
       - ``dark`` for a dark background with light text and chart 
         elements.

       Defaults to ``light``.
     - no

   * - ``width``
     - number
     - Width of the chart. 

       If you don't provide the width, the chart defaults to
       the width of its container. If you provide a value without units,
       the unit defaults to pixels (px).
     - no

Chart Configuration
-------------------

.. please keep these alphabetized

After you create a chart, you can control the configuration
of the chart by calling methods on the ``Chart`` instance returned
by ``ChartsEmbedSDK.createChart({ ... })``.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 40 60

   * - Method
     - Description

   * - ``getCustomizableAxes()``
     - Returns the chart axes for the embedded chart.

   * - ``setAutoRefresh(boolean)``
     - Specifies whether the chart automatically refreshes. If
       omitted, charts don't automatically refresh.

       Use this method with the ``setMaxDataAge`` method to
       configure how often the chart refreshes.

   * - ``setFilter(object)``
     - Applies a :ref:`query filter <filter-embedded-charts>` 
       to the embedded chart or chart within an 
       :ref:`embedded dashboard <embedding-dashboards>`. This 
       method expects an object that contains valid query 
       operators. Any fields referenced in this filter must be 
       added to the :guilabel:`Allowed filter fields` 
       list in the ``Embed Chart`` modal window.
       An empty document ``{}`` is equivalent to no filter.

       See the :ref:`Embedding Tutorials 
       <embedding-tutorials>` for
       more information about enabling embedding for a chart 
       and allowing fields for filter use.

   * - ``setMaxDataAge(number)``
     - Specifies the maximum age of data to load from the cache
       when loading or refreshing the chart. If omitted,
       |charts| renders the chart with data from the cache if
       the data is less than one hour old.

       To learn how |charts| loads data from the cache when
       loading or refreshing the chart based on the
       ``setAutoRefresh`` and ``setMaxDataAge`` values, see
       :ref:`refresh-behavior`.

   * - ``setRenderingSpecOverride(object)``
     - Specifies how to customize a chart. 

       For a list of available
       customizations, see :ref:`rendering-spec-options`.

   * - ``setTheme("dark" | "light")``
     - Sets the current theme of the embedded chart. When setting the
       theme to ``dark``, you need to ensure that a chart's
       background color has appropriate contrast so that the information
       remains visible.

       .. seealso::

         - `Charts Embedding SDK API Documentation
           <https://www.npmjs.com/package/@mongodb-js/charts-embed-dom>`__

         - `Charts Embedding SDK examples
           <https://github.com/mongodb-js/charts-embed-sdk/blob/master/examples>`__

Example
~~~~~~~

The following example configures a Chart instance named ``chart`` to
use the ``dark`` theme and to refresh every 60 seconds.

.. code-block:: javascript

   chart.setTheme("dark");
   chart.setAutoRefresh(true);
   chart.setMaxDataAge(60);

.. _rendering-spec-options:

Rendering Specification Options
-------------------------------

.. please keep these alphabetized

You can specify the following options for the ``renderingSpec`` object:

.. note:: 

   All options, except ``version`` are optional.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 27 23 50

   * - Option
     - Type
     - Description

   * - axes
     - object
     - Object that describes how to customize the charts axes.

   * - | axes
       | .labelOverride
     - string
     - Value to replace the current axes label.

       To learn more, see :ref:`axes-label-override`.

   * - | axes
       | .labelAngle
     - enum
     - Angle at which to display a label. 

       Value can be one of the following: ``'vertical'``, ``'horizontal'``, 
       ``'diagonal'`` 

       This applies to All Column, 100% Stacked Area, Area Discrete,
       Line Discrete, Grouped Combo, Stacked Combo, and Heatmap charts.

       To learn more, see :ref:`label-angle-option`.

   * - | axes
       | .logScale
     - boolean
     - Flag that indicates whether to use the logorithmic scale for the data values on a chart. 

       This only applies to Grouped Column, Colored Column, Grouped Bar,
       Colored Bar, Line Continuous, Line Discrete, Grouped Combo, and
       Scatter 
       charts. 

       To learn more, see :ref:`logarithmic-scale`.

   * - | axes
       | .scaleMax
     - number | false
     - Maximum value to display on the chart. ``false`` makes this option behave
       in its default state.

       This only applies to Grouped Column, Colored Column, Stacked Column, 
       Grouped Bar, Colored Bar, Stacked Bar, Area Continuous, Area Discrete, 
       Line Continuous, Line Discrete, Scatter, Grouped Combo, Stacked Combo, 
       and Gauge charts. 

       To learn more, see :ref:`max-min-options`.

   * - | axes
       | .scaleMin
     - number | false
     - Minimum value to display on the chart. ``false`` makes this option behave
       in its default state.

       This only applies to Grouped Column, Colored Column, Stacked Column, 
       Grouped Bar, Colored Bar, Stacked Bar, Area Continuous, Area Discrete, 
       Line Continuous, Line Discrete, Scatter, Grouped Combo, Stacked Combo, 
       and Gauge charts. 

       To learn more, see :ref:`max-min-options`.

   * - channels
     - object
     - Object that describes how to customize the charts channels.

   * - | channels
       | .labelOverride
     - string
     - Value to replace the current channel label. 

       To learn more, see :ref:`field-label-override`.

   * - | channels
       | .numberDecimals
     - number
     - Amount of decimal places to round each numeric data value 
       or label. 

       To learn more, see :ref:`customize-number-formats`.

   * - | channels
       | .numberMultiplier
     - number
     - Number to multiply each numeric data value or label by. 

       To learn more, see :ref:`customize-number-formats`.

   * - | channels
       | .numberPrefix
     - string
     - String to prepend to each numeric data value or label.

       To learn more, see :ref:`customize-number-formats`.

   * - | channels
       | .numberSuffix
     - string
     - String to append to the end of each numeric data value or 
       label. 

       To learn more, see :ref:`customize-number-formats`.

   * - | channels
       | .numberThousandsSeparators
     - boolean
     - Flag that indicates whether to show commas as thousands
       separators for numeric data values. 

       To learn more, see :ref:`customize-number-formats`.

   * - | channels
       | .plotOnSecondaryAxis
     - boolean
     - Flag that indicates whether to plot a set a field that correspond
       to a channel on a secondary Y axis. 

       This only applies to Area Continuous, Grouped Column, Grouped
       Combo, Stacked Combo, Line Continuous, and Line Discrete charts.

       To learn more, see :ref:`secondary-y-axis`.

   * - | channels
       | .wrapText
     - boolean
     - Flag that indicates whether to wrap the text for :ref:`Table Charts <data-table-ref>`. 

       To learn more, see :ref:`wrap-text-option`.

   * - conditionalFormatting
     - object
     - Object that describes how to format a section of a chart.

       To learn more, see :ref:`conditional-formatting`.

   * - | conditionalFormatting
       | .applyToEntireRow
     - boolean
     - Flag that indicates whether to apply the specified format
       to an entire row.

   * - | conditionalFormatting
       | .backgroundColor
     - enum | string
     - Object that indicates how to customize the background color.

       Value can be one of the following: 
       
       .. list-table::
          :header-rows: 1
          :stub-columns: 1
          :widths: 40 20 40
         
          * - Conditional Rules
            - Type
            - Values

          * - ``'continuous'``
            - enum
            - | ``'redwhitegreen'``
              | ``'redwhiteblue'``
              | ``'yellowgreen'``
              | ``'redyellowgreen'``
              | ``'greenwhite'``
              | ``'bluewhite'``
              | ``'redwhite'``

          * - ``'discrete'``
            - string
            - Resembles the RGB color model, hexidecimal color, or the name of
              a color. 
             
              If you specify ``'transparent'``, the previous color applies, if any.

   * - | conditionalFormatting
       | .conditions
     - array
     - This applies to both ``'continuous'`` and ``'discrete'``
       conditional rules.
       
       .. list-table::
          :header-rows: 1
          :stub-columns: 1
          :widths: 30 70
         
          * - Conditional Rules
            - Description

          * - ``'continuous'``
            - Object that describes how to format the ``targetChannel``.

              This applies to Table charts.

          * - ``'discrete'``
            - Object that describes how to format the ``targetChannel``.

              This applies to Table and Number charts.

   * - | conditionalFormatting
       | .conditions
       | .operator
     - | NumericOperator
       | NumericBinnedOperator
       | StringOperator
       | StringRegexOperator
       | DateOperator
       | DateBinnedOperator
     - Operator to apply to your ``'discrete'`` conditional rules.
       
       This applies to Table and Number charts.

       To learn more about the valid operators, see :ref:`conditional-formatting-operators`.

   * - | conditionalFormatting
       | .conditions
       | .targetChannel
     - string
     - Table column that receives the continuous color for
       ``'continuous'`` or ``'discrete'`` conditional rules.
       
       This applies to ``'continuous'`` and ``'discrete'`` Table
       charts, and ``'discrete'`` Number charts.

   * - | conditionalFormatting
       | .conditions
       | .targetType
     - enum
     - Part of the Table chart to apply the ``operator`` and ``value``
       for ``'discrete'`` conditional rules.

       Value can be one of the following: ``'CHANNEL'``,
       ``'ROW_INDEX'``, ``'COLUMN_NAME'``, ``'CELL_VALUE'``,
       ``'ROW_TOTAL'``, ``'COLUMN_TOTAL'``, ``'COLUMN_ID'``

   * - | conditionalFormatting
       | .conditions
       | .value
     - | number
       | string
       | array of strings
       | object
     - Value to apply to the ``operator`` for ``'discrete'``
       conditional rules. The data type depends on the ``operator`` you
       select.
       
       This applies to Table and Number charts.

   * - | conditionalFormatting
       | .fontStyle
     - enum
     - Font to use for ``'discrete'`` conditional rules.

       Value can be one of the following: ``'italic'``, ``'normal'``

       This applies to Table and Number charts.

   * - | conditionalFormatting
       | .fontWeight
     - enum
     - Font weight for ``'discrete'`` conditional rules.

       Value can be one of the following: ``'bold'``, ``'normal'``

       This applies to Table and Number charts.

   * - | conditionalFormatting
       | .reverseColor
     - boolean
     - Flag that indicates whether to reverse the chosen
       continuous color for ``'continuous'`` conditional rules.

       This only applies to Table charts.

   * - | conditionalFormatting
       | .textColor
     - string
     - Text color for ``'discrete'`` conditional rules.

       Value must be a string that resembles the RGB color model,
       hexidecimal color, or the name of a color. If you specify
       ``'auto'``, no color applies.

   * - | conditionalFormatting
       | .textDecoration
     - enum
     - Text decoration for ``'discrete'`` conditional rules.

       Value can be one of the following: ``'underline'``,
       ``'line-through'``, ``'underline line-through'``, ``'initial'``

       This applies to Table and Number charts.

   * - | conditionalFormatting
       | .type
     - enum
     - Type of conditional rules your chart uses.

       Value can be one of the following: ``'discrete'``,
       ``'continuous'``

       The ``'discrete'`` conditional rules applies to Table and Number
       charts.

       The ``'continuous'`` conditional rules applies to Table charts.

   * - description
     - string
     - Description of the chart.

   * - options
     - object
     - Object that describes how to customize the chart's options.

   * - | options
       | .categoryLabels
     - boolean
     - Flag that indicates whether to show the category labels in a donut chart. 

       To learn more, see :ref:`category-labels-option`.

   * - | options
       | .colorPalette
     - object | false
     - Object that describes how to customize the color palette.
       ``false`` unsets any custom color palette that you set from the
       Chart Builder. 

       To learn more, see :ref:`color-palette-customization`.

   * - | options
       | .colorPalette
       | .channels
     - array
     - Names of the channels to receive a custom color.

   * - | options
       | .colorPalette
       | .color
     - object
     - Object that describes how to customize the color palette.

       This applies to all chart types that can have multiple fields in
       the series channel: all Bar charts except Colored Bar, all Column
       charts except Colored Column and Candlestick, Grouped Combo,
       Stacked Combo, all Line charts, all Area charts, and Donut.

   * - | options
       | .colorPalette
       | .marks
     - array
     - Encoded field values in the series channel to receive a custom
       color.

       This applies to all chart types that can have multiple series in a
       channel.

       For array's that contain the values ``positive`` and
       ``negative``, this only applies to candlestick charts.

   * - | options
       | .colorPalette
       | .reverseColor
     - boolean
     - Flag that indicates whether to reverse the continuous
       continuous color.

   * - | options
       | .colorPalette
       | .type
     - enum
     - Type of color palette your chart uses.

       Value can be one of the following: ``'discrete'``,
       ``'continuous'``
       
       The ``'discrete'`` color palette applies to the following
       chart types: Grouped Bar, Stacked Bar, 100% Stacked Bar, Grouped
       Column, Stacked Column, 100% Stacked Column, Area Continuous,
       Area Discrete, 100% Stacked Area, Line Continuous, Line Discrete,
       Candlestick, Scatter, Donut, Geo Scatter, Word Cloud, Gauge,
       Grouped Combo, and Stacked Combo. 

       The ``'continuous'`` color palette applies to the
       following chart types: Colored Column, Colored Bar, Geo
       Heatmap, Geo Choropleth, and Heatmap.

   * - | options
       | .colorPalette
       | .values
     - array
     - Color values to customize the colors for single series charts or
       the ``channels`` and ``marks`` for multi-series charts.

   * - | options
       | .labelSize
     - number | false
     - Size to change a label to. The size should be between ``50`` and
       ``200``. ``false`` is equivalent to setting the size to ``100``,
       and makes this option behave in its default state.

       To learn more, see :ref:`label-size-option`.

   * - | options
       | .legendPosition
     - enum
     - Location to place a legend in relation to the chart. This
       only applies to charts that support legends.

       Value can be one of the following: ``'right'``, ``'bottom'``, ``'top'`` 

       To learn more, see :ref:`legend-position-option`.

   * - | options
       | .lineSmoothing
     - enum
     - Method that |charts-short| uses to draw a line on a chart.

       Value can be one of the following: ``'linear'``, ``'monotone'``,
       ``'step-before'``, ``'step-after'``

       This only applies to Area Continuous, Area Discrete, 100% Stacked
       Area, Line Continuous,Line Discrete, Grouped Combo, and Stacked
       Combo charts.

       To learn more, see :ref:`line-smoothing-option`.

   * - | options
       | .markers
     - boolean
     - Flag that indicates whether to display visible data markers that represent individual data points. 

       To learn more, see :ref:`markers-option`.

   * - | options
       | .textSize
     - number | false
     - Size of the text on a chart. ``false`` makes this option behave
       in its default state.

       To learn more, see :ref:`resize-table-text`.

   * - | options
       | .totalsColumn
     - boolean
     - Flag that indicates whether to display the total sum of each column. 

       To learn more, see :ref:`toggle-row-column-totals`.

   * - | options
       | .totalsRow
     - boolean
     - Flag that indicates whether to display the total sum of each row. 

       To learn more, see :ref:`toggle-row-column-totals`.

   * - | options
       | .valueLabels
     - enum
     - Method that |charts-short| uses to display the exact value of a data point.

       Value can be one of the following: ``'value'``, ``'percentage'``

       This applies to all Bar charts except 100% Stacked Bar,
       All Column charts except 100% Stacked Column, Area Continuous, Area
       Discrete, 100% Stacked Area, Line Continuous, Line Discrete, Grouped
       Combo, and Stacked Combo charts. 

       To learn more, see :ref:`axes-label-override`.

   * - title
     - string
     - Title of the chart.

   * - version
     - number
     - Version of the rendering specification. The first and current
       version is ``1``.
       
       .. note:: 

          This is a required field.

.. _conditional-formatting-operators:

Conditional Formatting Operators
--------------------------------

The following table shows the available operators to use with
conditional formatting, the data type they apply to, and their possible values.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 25 25 50

   * - Operator
     - Type
     - Values

   * - DateBinnedOperator
     - object
     - ``BINNED_DATE_AFTER``, ``BINNED_DATE_AFTER_OR_INCLUDES``,
       ``BINNED_DATE_BEFORE``, ``BINNED_DATE_BEFORE_OR_INCLUDES``,
       ``BINNED_DATE_INCLUDES``

       .. note::
          
          The object must have the following keys:

          .. code-block::

             date: string
             time: string

   * - DateOperator
     - object
     - ``DATE_AFTER``, ``DATE_BEFORE``, ``DATE_EXACTLY``,
       ``DATE_ON_OR_AFTER``, ``DATE_ON_OR_BEFORE``

       .. note::
          
          The object must have the following keys:

          .. code-block::

             date: string
             time: string

   * - NumericBinnedOperator
     - number
     - ``BINNED_NUMBER_GREATER_THAN``,
       ``BINNED_NUMBER_GREATER_THAN_OR_INCLUDES``,
       ``BINNED_NUMBER_INCLUDES``, ``BINNED_NUMBER_LESS_THAN``,
       ``BINNED_NUMBER_LESS_THAN_OR_INCLUDES``

   * - NumericOperator
     - number
     - ``NUMBER_EQUAL_TO``, ``NUMBER_GREATER_THAN``,
       ``NUMBER_GREATER_THAN_OR_EQUAL_TO``, ``NUMBER_LESS_THAN``,
       ``NUMBER_LESS_THAN_OR_EQUAL_TO``, ``NUMBER_NOT_EQUAL_TO``,
       ``NUMBER_RANKED_IN_BOTTOM``, ``NUMBER_RANKED_IN_BOTTOM_PERCENT``,
       ``NUMBER_RANKED_IN_TOP``, ``NUMBER_RANKED_IN_TOP_PERCENT``

   * - StringOperator
     - string | array of strings
     - ``STRING_CONTAINS``, ``STRING_EMPTY``, ``STRING_EQUAL_TO``,
       ``STRING_NOT_CONTAINS``, ``STRING_NOT_EMPTY``, ``STRING_NOT_EQUAL_TO``,
       ``STRING_ONE_OF``, ``STRING_STARTS_WITH``

   * - StringRegexOperator
     - object
     - ``STRING_REGEX``

       .. note::
          
          The object must have the following keys:

          .. code-block::

             source: regex string
             flags: string
          
          The value for ``flag`` can be one of the following:
          
          .. list-table::
             :header-rows: 1
             :stub-columns: 1
             :widths: 25 74

             * - Value
               - Description
             * - ``'i'`` 
               - Case insensitive.
             * - ``'m'`` 
               - Multiline.
             * - ``'x'`` 
               - Extended.
             * - ``'s'``
               - Single line.

Channels Example
----------------

The following example configures a Chart instance named ``chart`` with
these options:

- Use version ``1`` of the rendering specification.
- Update the ``x`` encoding channel to:

  - Not use commas for the thousand separator.
  - Start all numeric values with a ``$``.
- Update the ``y`` encoding channel to end all numeric values with a ``%``.
- Update the ``color`` encoding channel to:
  
  - Round all decimal values to two decimal places.
  - Multiply all numeric values by two.

- Use the ``continuous`` color palette type with the ``rainbow`` color,
  and to reverse the chosen continuous color.

.. code-block:: javascript
   :copyable: true

   await chart.setRenderingSpecOverride({
     version: 1,
     channels: {
       x: {
         numberThousandsSeparators: false,
         numberPrefix: '$',
       },
       y: {
         numberSuffix: '%',
       },
       color: {
         numberDecimals: 2,
         numberMultiplier: 2,
       },
     },
     options: {
       colorPalette: {
         type: 'continuous',
         color: 'rainbow',
         reverseColor: true,
       },
     },
   });


Conditional Formatting Example
------------------------------

The following example configures a Chart instance named ``chart`` with
these options:

- Use version ``1`` of the rendering specification.
- Perform the following conditional formatting to a ``CHANNEL`` where
  the value is greater than ``200``:

  - Use the ``'discrete'`` conditional formatting rules.
  - Set the background color to an RGB color model where red is 240,
    green is 209, and blue is 117.
  - Set the text color to ``red``.
  - Set the font style to ``'italic'``.
  - Decorate the text with ``'underline'``.

- For the ``value_series_0`` column:

  - Use the ``'continuous'`` color palette.
  - Set the background color to ``redyellowgreen``.
  - Reverse the chosen continuous color.

.. code-block:: javascript
   :copyable: true

   await chart.setRenderingSpecOverride({
     version: 1,
     conditionalFormatting: [{
       type: 'discrete',
       backgroundColor: 'rgb(240, 209, 117)',
       textColor: 'red',
       fontStyle: 'italic',
       fontWeight: 'bold',
       textDecoration: 'underline',
       applyToEntireRow: false,
       conditions: [{
           operator: 'NUMBER_GREATER_THAN',
           targetType: 'CHANNEL',
           targetChannel: 'value',
           value: 200,
       }],
     },{
       type: 'continuous',
       backgroundColor: 'redyellowgreen',
       reverseColor: true,
       conditions: [{ targetChannel: 'value_series_0' }],
     }],
   });
