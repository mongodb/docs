stepnum: 1
source:
  file: steps-change-user-privileges.yaml
  ref: connect-with-appropriate-privileges
pre: |
  Connect to the :program:`mongod` or :program:`mongos` with the privileges
  required in the :ref:`define-roles-prereq` section.
---
stepnum: 2
source:
  file: steps-change-user-privileges.yaml
  ref: verify-privileges
---
title: Define the privileges to grant to the role.
stepnum: 3
ref: define-privileges
pre: |
  Decide which :ref:`resources <resource-document>` to grant access to and
  which :ref:`actions <security-user-actions>` to grant on each resource.
action:
  pre: |
    When creating the role, you will enter the resource-action pairings as
    documents in the ``privileges`` array, as in the following example:
  language: javascript
  code: |
    { db: "products", collection: "electronics" }
---
title: Check whether an existing role provides the privileges.
stepnum: 4
ref: check-existing-roles
pre: |
  If an existing role contains the exact set of :ref:`privileges
  <privileges>`, the new role can :ref:`inherit <inheritance>` those
  privileges.
action:
  pre: |
    To view the privileges provided by existing roles, use the
    :dbcommand:`rolesInfo` command, as in the following:
  language: javascript
  code: |
    db.runCommand( { rolesInfo: 1, showPrivileges: 1 } )
---
title: Create the role.
stepnum: 5
ref: create-role
pre: |
  To create the role, use the :dbcommand:`createRole` command. Specify privileges
  in the ``privileges`` array and inherited roles in the ``roles`` array.
action:
  pre: |
    The following example creates the ``myClusterwideAdmin`` role in the
    ``admin`` database:
  language: javascript
  code: |
    use admin
    db.createRole(
      {
        role: "myClusterwideAdmin",
        privileges:
        [
          { resource: { cluster: true }, actions: [ "addShard" ] },
          { resource: { db: "config", collection: "" }, actions: [ "find", "update", "insert" ] },
          { resource: { db: "users", collection: "usersCollection" }, actions: [ "update" ] },
          { resource: { db: "", collection: "" }, actions: [ "find" ] }
        ],
        roles:
        [
          { role: "read", db: "admin" }
        ],
        writeConcern: { w: "majority" , wtimeout: 5000 }
      }
    )
  post: |
    The operation defines ``myClusterwideAdmin`` role's privileges in the
    ``privileges`` array. In the ``roles`` array, ``myClusterwideAdmin``
    inherits privileges from the ``admin`` database's ``read`` role.
...
